"use strict";(self.webpackChunkhx_loli=self.webpackChunkhx_loli||[]).push([[87208],{28453:(e,n,t)=>{t.d(n,{R:()=>a,x:()=>r});var i=t(96540);const d={},s=i.createContext(d);function a(e){const n=i.useContext(s);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function r(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(d):e.components||d:a(e.components),i.createElement(s.Provider,{value:n},e.children)}},79517:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>o,contentTitle:()=>r,default:()=>u,frontMatter:()=>a,metadata:()=>i,toc:()=>l});var i=t(99310),d=t(74848),s=t(28453);const a={authors:"Heng_Xin",title:"gcc \u5185\u90e8\u7f16\u8bd1\u5668 \u6bb5\u9519\u8bef",date:new Date("2025-07-28T09:56:36.000Z"),tags:["C++"]},r=void 0,o={authorsImageUrls:[void 0]},l=[{value:"1. \u5b9e\u9645\u4ee3\u7801",id:"1-\u5b9e\u9645\u4ee3\u7801",level:2},{value:"2. \u6700\u5c0f\u53ef\u590d\u73b0",id:"2-\u6700\u5c0f\u53ef\u590d\u73b0",level:2}];function c(e){const n={a:"a",blockquote:"blockquote",code:"code",h2:"h2",li:"li",ol:"ol",p:"p",pre:"pre",...(0,s.R)(),...e.components};return(0,d.jsxs)(d.Fragment,{children:[(0,d.jsxs)(n.p,{children:["\u4e4b\u524d\u5199\u9879\u76ee\u7684\u65f6\u5019\u53d1\u73b0\u4e00\u4e2agcc\u7f16\u8bd1\u5668bug. \u5c1d\u8bd5\u7ed9\u4ed6\u4eec\u63d0 ",(0,d.jsx)(n.code,{children:"issues"})," \u4e86~..."]}),"\n",(0,d.jsx)(n.h2,{id:"1-\u5b9e\u9645\u4ee3\u7801",children:"1. \u5b9e\u9645\u4ee3\u7801"}),"\n",(0,d.jsx)(n.p,{children:"\u5b9e\u9645\u4ee3\u7801\u5982\u4e0b:"}),"\n",(0,d.jsx)(n.pre,{children:(0,d.jsx)(n.code,{className:"language-cpp",metastring:"[c1-\u9879\u76ee\u6e90\u7801]",children:"// \u8282\u9009: https://github.com/HengXin666/HXLibs/blob/main/include/HXLibs/reflection/json/JsonRead.hpp\n\ntemplate <std::size_t _I>\nstruct SetObjIdx {\n    inline static constexpr std::size_t Idx = _I;\n    constexpr SetObjIdx() = default;\n};\n\ntemplate <std::size_t... Idx>\nconstexpr auto makeVariantSetObjIdxs(std::index_sequence<Idx...>) {\n    /** \n     * GCC Hock, \u5728 gcc/x86_64-pc-linux-gnu/15.1.1/lto-wrapper\n     * gcc \u7248\u672c 15.1.1 20250425 (GCC) \u4e2d, \u4e0d\u80fd\u4f7f\u7528:\n     * using CHashMapValType = decltype([] <std::size_t... Idx> (std::index_sequence<Idx...>) {\n     *     return std::variant<SetObjIdx<Idx>...>{};\n     * }(std::make_index_sequence<N>{}));\n     * \u5426\u5219\u7f16\u8bd1\u5668\u4f1a\u5d29\u6e83...\n     */\n    return std::variant<SetObjIdx<Idx>...>{};\n}\n\ntemplate <typename T>\nconstexpr auto makeNameToIdxVariantHashMap() {\n    constexpr auto N = membersCountVal<T>;\n    constexpr auto nameArr = getMembersNames<T>();\n    using CHashMapValType = decltype([] <std::size_t... Idx> (std::index_sequence<Idx...>) {\n         return std::variant<SetObjIdx<Idx>...>{};\n    }(std::make_index_sequence<N>{}));\n    return container::CHashMap<std::string_view, CHashMapValType, N>{\n        [&] <std::size_t... Idx> (std::index_sequence<Idx...>) {\n            return std::array<std::pair<std::string_view, CHashMapValType>, N>{{\n                {nameArr[Idx], CHashMapValType{SetObjIdx<Idx>{}}}... \n            }};\n        }(std::make_index_sequence<N>{})\n    };\n}\n"})}),"\n",(0,d.jsx)(n.pre,{children:(0,d.jsx)(n.code,{className:"language-cpp",metastring:"[c1-\u62a5\u9519]",children:"[build] /home/loli/Loli/code/HXLibs/include/HXLibs/reflection/json/JsonRead.hpp: In instantiation of \u2018HX::reflection::internal::makeNameToIdxVariantHashMap<HXTest>()::<lambda(std::index_sequence<_Inds ...>)> [with long unsigned int ...Idx = {0, 1}; std::index_sequence<_Inds ...> = std::integer_sequence<long unsigned int, 0, 1>]\u2019:\n[build] /home/loli/Loli/code/HXLibs/include/HXLibs/reflection/json/JsonRead.hpp:120:10:   required from \u2018constexpr auto HX::reflection::internal::makeNameToIdxVariantHashMap() [with T = HXTest]\u2019\n[build]   116 |         [&] <std::size_t... Idx> (std::index_sequence<Idx...>) {\n[build]       |         ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n[build]   117 |             return std::array<std::pair<std::string_view, CHashMapValType>, N>{{\n[build]       |             ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n[build]   118 |                 {nameArr[Idx], CHashMapValType{SetObjIdx<Idx>{}}}...\n[build]       |                 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n[build]   119 |             }};\n[build]       |             ~~~\n[build]   120 |         }(std::make_index_sequence<N>{})\n[build]       |         ~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n[build] /home/loli/Loli/code/HXLibs/include/HXLibs/reflection/json/JsonRead.hpp:485:76:   required from \u2018static void HX::reflection::internal::FromJson::fromJson(T&, It&&, It&&) [with T = HXTest; It = const char*]\u2019\n[build]   485 |             static constexpr auto nameHash = makeNameToIdxVariantHashMap<T>();\n[build]       |                                              ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~\n[build] /home/loli/Loli/code/HXLibs/include/HXLibs/reflection/json/JsonRead.hpp:528:33:   required from \u2018void HX::reflection::fromJson(T&, std::string_view) [with T = HXTest; std::string_view = std::basic_string_view<char>]\u2019\n[build]   528 |     internal::FromJson::fromJson(t, json.begin(), json.end());\n[build]       |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n[build] /home/loli/Loli/code/HXLibs/tests/reflection/01_reflection.cpp:305:25:   required from here\n[build]   305 |     reflection::fromJson(newT, s);\n[build]       |     ~~~~~~~~~~~~~~~~~~~~^~~~~~~~~\n[build] /home/loli/Loli/code/HXLibs/include/HXLibs/reflection/json/JsonRead.hpp:112:38: \u7f16\u8bd1\u5668\u5185\u90e8\u9519\u8bef\uff1a\u6bb5\u9519\u8bef\n[build]   112 |     using CHashMapValType = decltype([] <std::size_t... Idx> (std::index_sequence<Idx...>) {\n[build]       |                                      ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n[build]   113 |          return std::variant<SetObjIdx<Idx>...>{};\n[build]       |          ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n[build]   114 |     }(std::make_index_sequence<N>{}));\n[build]       |     ~                                 \n[build] 0x26d6c51 diagnostic_context::diagnostic_impl(rich_location*, diagnostic_metadata const*, diagnostic_option_id, char const*, __va_list_tag (*) [1], diagnostic_t)\n[build] \t???:0\n[build] 0x2730d98 internal_error(char const*, ...)\n[build] \t???:0\n[build] 0x908d48 template_parms_to_args(tree_node*)\n[build] \t???:0\n[build] 0x9224dd tsubst_lambda_expr(tree_node*, tree_node*, int, tree_node*)\n[build] \t???:0\n[build] 0x911d5b tsubst(tree_node*, tree_node*, int, tree_node*)\n[build] \t???:0\n[build] 0x91be37 tsubst_template_args(tree_node*, tree_node*, int, tree_node*)\n[build] \t???:0\n[build] 0x91237b tsubst(tree_node*, tree_node*, int, tree_node*)\n[build] \t???:0\n[build] 0x91be37 tsubst_template_args(tree_node*, tree_node*, int, tree_node*)\n[build] \t???:0\n[build] 0x91237b tsubst(tree_node*, tree_node*, int, tree_node*)\n[build] \t???:0\n[build] 0x92541d instantiate_decl(tree_node*, bool, bool)\n[build] \t???:0\n[build] 0x7b7012 maybe_instantiate_decl(tree_node*)\n[build] \t???:0\n[build] 0x7c8ad7 mark_used(tree_node*, int)\n[build] \t???:0\n[build] 0x75491c build_op_call(tree_node*, vec<tree_node*, va_gc, vl_embed>**, int)\n[build] \t???:0\n[build] 0x942ee2 finish_call_expr(tree_node*, vec<tree_node*, va_gc, vl_embed>**, bool, bool, int)\n[build] \t???:0\n[build] 0x92541d instantiate_decl(tree_node*, bool, bool)\n[build] \t???:0\n[build] 0x7b7012 maybe_instantiate_decl(tree_node*)\n[build] \t???:0\n[build] 0x7c8ad7 mark_used(tree_node*, int)\n[build] \t???:0\n[build] 0x753e1c build_new_function_call(tree_node*, vec<tree_node*, va_gc, vl_embed>**, int)\n[build] \t???:0\n[build] 0x942eac finish_call_expr(tree_node*, vec<tree_node*, va_gc, vl_embed>**, bool, bool, int)\n[build] \t???:0\n[build] 0x92541d instantiate_decl(tree_node*, bool, bool)\n[build] \t???:0\n[build] Please submit a full bug report, with preprocessed source (by using -freport-bug).\n[build] Please include the complete backtrace with any bug report.\n[build] \u53c2\u9605 <https://gitlab.archlinux.org/archlinux/packaging/packages/gcc/-/issues> \u4ee5\u83b7\u53d6\u6307\u793a\u3002\n[build] make[3]: *** [CMakeFiles/01_reflection.dir/build.make:79\uff1aCMakeFiles/01_reflection.dir/tests/reflection/01_reflection.cpp.o] \u9519\u8bef 1\n"})}),"\n",(0,d.jsx)(n.h2,{id:"2-\u6700\u5c0f\u53ef\u590d\u73b0",children:"2. \u6700\u5c0f\u53ef\u590d\u73b0"}),"\n",(0,d.jsxs)(n.p,{children:["\u5c1d\u8bd5\u6700\u5c0f\u53ef\u590d\u73b0\u6848\u4f8b: (",(0,d.jsx)(n.a,{href:"https://godbolt.org/z/9EfjWEvTP",children:"https://godbolt.org/z/9EfjWEvTP"}),") & (",(0,d.jsx)(n.a,{href:"https://godbolt.org/z/fM84Ex34j",children:"https://godbolt.org/z/fM84Ex34j"}),")"]}),"\n",(0,d.jsx)(n.pre,{children:(0,d.jsx)(n.code,{className:"language-cpp",metastring:"[c2-\u6700\u5c0f\u590d\u73b0_1]",children:"#include <variant>\n#include <array>\n\ntemplate <std::size_t I>\nstruct SetObjIdx {};\n\n// \u5fc5\u987b\u5f97\u662f\u6a21\u677f\ntemplate <typename T = void>\nconstexpr auto makeNameToIdxVariantHashMap() {\n    constexpr auto N = 3U; // N \u53ef\u4ee5\u662f\u4efb\u610f\u5e38\u91cf\n\n    // 1. \u662f decltype \u914d\u5408 []<>(){}() + \u6a21\u677f\n    using Res = decltype([] <std::size_t... Idx> (std::index_sequence<Idx...>) {\n        return std::variant<SetObjIdx<Idx>...>{};\n    } (std::make_index_sequence<N>{}));\n\n    // 2. \u5fc5\u987b\u662f <std::size_t... Idx> \u6a21\u677f\n    return [&] <std::size_t... Idx> (std::index_sequence<Idx...>) {\n        return std::array<Res, N>{\n            SetObjIdx<Idx>{}... \n        };\n    }(std::make_index_sequence<N>{});\n}\n\nint main() {\n    constexpr auto res = makeNameToIdxVariantHashMap();\n    (void)res;\n    return 0;\n}\n"})}),"\n",(0,d.jsx)(n.pre,{children:(0,d.jsx)(n.code,{className:"language-cpp",metastring:"[c2-\u6700\u5c0f\u590d\u73b0_2]",children:"#include <variant>\n#include <array>\n\ntemplate <std::size_t I>\nstruct SetObjIdx { std::size_t _idx; };\n\n// Must be a template\ntemplate <typename T = void>\nconstexpr auto makeNameToIdxVariantHashMap() {\n    constexpr auto N = 3U; // N arbitrary\n\n    // 1. decltype \u914d\u5408 []<>(){}() + \u6a21\u677f\n    using Res = decltype([] <std::size_t Idx> (std::index_sequence<Idx>) {\n        return SetObjIdx<Idx>{Idx};\n    }(std::index_sequence<N>{}));\n\n    // 2. \u5fc5\u987b\u662f <std::size_t... Idx> \u6a21\u677f\n    return [&] <std::size_t... Idx> (std::index_sequence<Idx...>) {\n        return std::array<Res, N>{\n            SetObjIdx<N>{Idx}... \n        };\n    }(std::make_index_sequence<N>{});\n}\n\nint main() {\n    constexpr auto res = makeNameToIdxVariantHashMap();\n    return 0;\n}\n"})}),"\n",(0,d.jsx)(n.pre,{children:(0,d.jsx)(n.code,{className:"language-cpp",metastring:"[c2-\u6700\u5c0f\u590d\u73b0_1 \u7f16\u8bd1\u8f93\u51fa]",children:"<source>: In instantiation of 'makeNameToIdxVariantHashMap<>()::<lambda(std::index_sequence<__var_indices ...>)> [with long unsigned int ...Idx = {0, 1, 2}; std::index_sequence<__var_indices ...> = std::integer_sequence<long unsigned int, 0, 1, 2>]':\n<source>:22:6:   required from 'constexpr auto makeNameToIdxVariantHashMap() [with T = void]'\n   18 |     return [&] <std::size_t... Idx> (std::index_sequence<Idx...>) {\n      |            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n   19 |         return std::array<Res, N>{\n      |         ~~~~~~~~~~~~~~~~~~~~~~~~~~\n   20 |             SetObjIdx<Idx>{}...\n      |             ~~~~~~~~~~~~~~~~~~~\n   21 |         };\n      |         ~~\n   22 |     }(std::make_index_sequence<N>{});\n      |     ~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n<source>:26:53:   required from here\n   26 |     constexpr auto res = makeNameToIdxVariantHashMap();\n      |                          ~~~~~~~~~~~~~~~~~~~~~~~~~~~^~\n<source>:13:26: internal compiler error: Segmentation fault\n   13 |     using Res = decltype([] <std::size_t... Idx> (std::index_sequence<Idx...>) {\n      |                          ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n   14 |         return std::variant<SetObjIdx<Idx>...>{};\n      |         ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n   15 |     } (std::make_index_sequence<N>{}));\n      |     ~                     \n0x2287785 diagnostic_context::diagnostic_impl(rich_location*, diagnostic_metadata const*, diagnostic_option_id, char const*, __va_list_tag (*) [1], diagnostic_t)\n\t???:0\n0x2298cd6 internal_error(char const*, ...)\n\t???:0\n0x989f38 template_parms_to_args(tree_node*)\n\t???:0\n0x9b8692 tsubst_lambda_expr(tree_node*, tree_node*, int, tree_node*)\n\t???:0\n0x9ab9bc tsubst(tree_node*, tree_node*, int, tree_node*)\n\t???:0\n0x9b2467 tsubst_template_args(tree_node*, tree_node*, int, tree_node*)\n\t???:0\n0x9ab435 tsubst(tree_node*, tree_node*, int, tree_node*)\n\t???:0\n0x99f62f instantiate_decl(tree_node*, bool, bool)\n\t???:0\n0x894821 maybe_instantiate_decl(tree_node*)\n\t???:0\n0x895b67 mark_used(tree_node*, int)\n\t???:0\n0x806f93 build_op_call(tree_node*, vec<tree_node*, va_gc, vl_embed>**, int)\n\t???:0\n0x9d8b67 finish_call_expr(tree_node*, vec<tree_node*, va_gc, vl_embed>**, bool, bool, int)\n\t???:0\n0x99f62f instantiate_decl(tree_node*, bool, bool)\n\t???:0\n0x894821 maybe_instantiate_decl(tree_node*)\n\t???:0\n0x895b67 mark_used(tree_node*, int)\n\t???:0\n0x80330e build_new_function_call(tree_node*, vec<tree_node*, va_gc, vl_embed>**, int)\n\t???:0\n0x9d8b3e finish_call_expr(tree_node*, vec<tree_node*, va_gc, vl_embed>**, bool, bool, int)\n\t???:0\n0x981ebd c_parse_file()\n\t???:0\n0xa8b739 c_common_parse_file()\n\t???:0\nPlease submit a full bug report, with preprocessed source (by using -freport-bug).\nPlease include the complete backtrace with any bug report.\nSee <https://gcc.gnu.org/bugs/> for instructions.\n"})}),"\n",(0,d.jsx)(n.p,{children:"\u76ee\u524d\u89e3\u51b3\u65b9\u6848\u662f:"}),"\n",(0,d.jsxs)(n.ol,{children:["\n",(0,d.jsxs)(n.li,{children:["\u53bb\u6389\u6a21\u677f ",(0,d.jsx)(n.code,{children:"template <typename T = void>"})]}),"\n",(0,d.jsxs)(n.li,{children:["\u628a ",(0,d.jsx)(n.code,{children:"decltype([] ...)"})," \u63d0\u51fa\u5230\u5916\u90e8\u6a21\u677f\u51fd\u6570, \u7136\u540e ",(0,d.jsx)(n.code,{children:"decltype(func(...))"})," \u4e5f\u662f OK \u7684."]}),"\n"]}),"\n",(0,d.jsxs)(n.blockquote,{children:["\n",(0,d.jsxs)(n.p,{children:["\u5df2\u7ecf\u62a5\u544a\u5230 ",(0,d.jsx)(n.a,{href:"https://gcc.gnu.org/bugzilla/show_bug.cgi?id=121287",children:"https://gcc.gnu.org/bugzilla/show_bug.cgi?id=121287"})," \u4e2d,"]}),"\n",(0,d.jsxs)(n.p,{children:["\u633a\u597d\u7684, \u4e0d\u5230\u4e00\u5929, \u5df2\u7ecf\u88ab\u5217\u5165 ",(0,d.jsx)(n.a,{href:"https://gcc.gnu.org/bugzilla/show_bug.cgi?id=107430",children:"Bug 107430 (c++-lambda-decltype) - [meta-bug] lambda in decltype"})," \u4e2d\u4e86"]}),"\n",(0,d.jsx)(n.p,{children:"\u8fd8\u88ab\u4e00\u4f4d\u8001\u54e5\u6dfb\u52a0\u5230\u8d85\u9001\u4e86, \u52a0\u6cb9, \u5feb\u70b9\u4fee Bug."}),"\n"]})]})}function u(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,d.jsx)(n,{...e,children:(0,d.jsx)(c,{...e})}):c(e)}},99310:e=>{e.exports=JSON.parse('{"permalink":"/HXLoLi/blog/2025/07/28/01_gcc\u7f16\u8bd1\u5668bug","editUrl":"https://github.com/HengXin666/HXLoLi/edit/main/blog/2025/07/28/01_gcc\u7f16\u8bd1\u5668bug.md","source":"@site/blog/2025/07/28/01_gcc\u7f16\u8bd1\u5668bug.md","title":"gcc \u5185\u90e8\u7f16\u8bd1\u5668 \u6bb5\u9519\u8bef","description":"\u4e4b\u524d\u5199\u9879\u76ee\u7684\u65f6\u5019\u53d1\u73b0\u4e00\u4e2agcc\u7f16\u8bd1\u5668bug. \u5c1d\u8bd5\u7ed9\u4ed6\u4eec\u63d0 issues \u4e86~...","date":"2025-07-28T09:56:36.000Z","tags":[{"inline":false,"label":"C++","permalink":"/HXLoLi/blog/tags/C++","description":"C++\u5c0f\u77e5\u8bc6"}],"readingTime":5.49,"hasTruncateMarker":true,"authors":[{"name":"Heng_Xin","title":"\u3053\u3053\u304b\u3089\u5148\u306f\u4e00\u65b9\u901a\u884c\u3060!","url":"https://github.com/HengXin666","email":"282000500@qq.com","socials":{"github":"https://github.com/HengXin666","bilibili":"https://space.bilibili.com/478917126"},"imageURL":"https://avatars.githubusercontent.com/u/103022267","key":"Heng_Xin","page":null}],"frontMatter":{"authors":"Heng_Xin","title":"gcc \u5185\u90e8\u7f16\u8bd1\u5668 \u6bb5\u9519\u8bef","date":"2025-07-28T09:56:36.000Z","tags":["C++"]},"unlisted":false,"lastUpdatedAt":1753857188000,"lastUpdatedBy":"Heng_Xin_666","prevItem":{"title":"MSVC\u9519\u8bef \u7f16\u8bd1\u671f\u7f13\u5b58\u9519\u8bef\u548cICE","permalink":"/HXLoLi/blog/2025/07/30/01-MSVC\u9519\u8bef"},"nextItem":{"title":"\u8c03\u6559VSCode, \u4ee5\u4ee3\u7801\u63d0\u793aC++","permalink":"/HXLoLi/blog/2025/06/30/01-\u8c03\u6559VSCode"}}')}}]);