"use strict";(self.webpackChunkhx_loli=self.webpackChunkhx_loli||[]).push([[58849],{28453:(n,e,t)=>{t.d(e,{R:()=>i,x:()=>r});var o=t(96540);const d={},a=o.createContext(d);function i(n){const e=o.useContext(a);return o.useMemo((function(){return"function"==typeof n?n(e):{...e,...n}}),[e,n])}function r(n){let e;return e=n.disableParentContext?"function"==typeof n.components?n.components(d):n.components||d:i(n.components),o.createElement(a.Provider,{value:e},n.children)}},80191:(n,e,t)=>{t.r(e),t.d(e,{assets:()=>s,contentTitle:()=>r,default:()=>l,frontMatter:()=>i,metadata:()=>o,toc:()=>c});const o=JSON.parse('{"id":"\u8ba1\u4f6c\u5e38\u8b58/\u6570\u636e\u7ed3\u6784\u4e0e\u7b97\u6cd5/\u3010\u677f\u5b50\u3011\u7b97\u6cd5\u6a21\u7248/Cache/LRU\u7f13\u5b58/index","title":"LRU \u7f13\u5b58","description":"\u9898\u76ee: 146. LRU \u7f13\u5b58","source":"@site/docs/001-\u8ba1\u4f6c\u5e38\u8b58/001-\u6570\u636e\u7ed3\u6784\u4e0e\u7b97\u6cd5/014-\u3010\u677f\u5b50\u3011\u7b97\u6cd5\u6a21\u7248/002-Cache/001-LRU\u7f13\u5b58/index.md","sourceDirName":"001-\u8ba1\u4f6c\u5e38\u8b58/001-\u6570\u636e\u7ed3\u6784\u4e0e\u7b97\u6cd5/014-\u3010\u677f\u5b50\u3011\u7b97\u6cd5\u6a21\u7248/002-Cache/001-LRU\u7f13\u5b58","slug":"/\u8ba1\u4f6c\u5e38\u8b58/\u6570\u636e\u7ed3\u6784\u4e0e\u7b97\u6cd5/\u3010\u677f\u5b50\u3011\u7b97\u6cd5\u6a21\u7248/Cache/LRU\u7f13\u5b58/","permalink":"/HXLoLi/docs/\u8ba1\u4f6c\u5e38\u8b58/\u6570\u636e\u7ed3\u6784\u4e0e\u7b97\u6cd5/\u3010\u677f\u5b50\u3011\u7b97\u6cd5\u6a21\u7248/Cache/LRU\u7f13\u5b58/","draft":false,"unlisted":false,"editUrl":"https://github.com/HengXin666/HXLoLi/edit/main/docs/001-\u8ba1\u4f6c\u5e38\u8b58/001-\u6570\u636e\u7ed3\u6784\u4e0e\u7b97\u6cd5/014-\u3010\u677f\u5b50\u3011\u7b97\u6cd5\u6a21\u7248/002-Cache/001-LRU\u7f13\u5b58/index.md","tags":[],"version":"current","lastUpdatedBy":"Heng_Xin_666","lastUpdatedAt":1745851959000,"frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"\u9a6c\u62c9\u8f66\u7b97\u6cd5","permalink":"/HXLoLi/docs/\u8ba1\u4f6c\u5e38\u8b58/\u6570\u636e\u7ed3\u6784\u4e0e\u7b97\u6cd5/\u3010\u677f\u5b50\u3011\u7b97\u6cd5\u6a21\u7248/\u5b57\u7b26\u4e32/\u9a6c\u62c9\u8f66\u7b97\u6cd5/"},"next":{"title":"LFU\u7f13\u5b58","permalink":"/HXLoLi/docs/\u8ba1\u4f6c\u5e38\u8b58/\u6570\u636e\u7ed3\u6784\u4e0e\u7b97\u6cd5/\u3010\u677f\u5b50\u3011\u7b97\u6cd5\u6a21\u7248/Cache/LFU\u7f13\u5b58/"}}');var d=t(74848),a=t(28453);const i={},r="LRU \u7f13\u5b58",s={},c=[];function h(n){const e={a:"a",blockquote:"blockquote",code:"code",h1:"h1",header:"header",p:"p",pre:"pre",...(0,a.R)(),...n.components};return(0,d.jsxs)(d.Fragment,{children:[(0,d.jsx)(e.header,{children:(0,d.jsx)(e.h1,{id:"lru-\u7f13\u5b58",children:"LRU \u7f13\u5b58"})}),"\n",(0,d.jsxs)(e.p,{children:["\u9898\u76ee: ",(0,d.jsx)(e.a,{href:"https://leetcode.cn/problems/lru-cache/",children:"146. LRU \u7f13\u5b58"})]}),"\n",(0,d.jsx)(e.p,{children:"\u8d85\u7ea7\u70ed\u95e8\u7684\u9762\u8bd5\u9898!"}),"\n",(0,d.jsxs)(e.blockquote,{children:["\n",(0,d.jsxs)(e.p,{children:["\u7075\u795e: ",(0,d.jsx)(e.a,{href:"https://leetcode.cn/problems/lru-cache/solutions/2456294/tu-jie-yi-zhang-tu-miao-dong-lrupythonja-czgt/",children:"\u3010\u56fe\u89e3\u3011\u4e00\u5f20\u56fe\u79d2\u61c2 LRU\uff01\uff08Python/Java/C++/Go/JS/Rust\uff09"})," (\u6709\u56fe\u76f4\u63a5\u79d2\u4e86!)"]}),"\n"]}),"\n",(0,d.jsx)(e.pre,{children:(0,d.jsx)(e.code,{className:"language-C++",children:"class LRUCache {\n    struct Node {\n        Node* prev = nullptr;\n        Node* next = nullptr;\n        int key = 0;\n        int val = 0;\n    };\n\n    Node* head; // \u5934\u8282\u70b9(\u54e8\u5175)\n    unordered_map<int, Node *> hash;\n    int maxLen;\n\n    // \u5220\u9664\u8fd9\u4e2a\u8282\u70b9 (A->B->C) => (A->C)\n    void remove(Node* node) {\n        node->prev->next = node->next;\n        node->next->prev = node->prev;\n    }\n\n    // \u5934\u63d2\n    void push_front(Node* node) {\n        node->next = head->next;\n        head->next->prev = node;\n        node->prev = head;\n        head->next = node;\n    }\n\n    // \u66f4\u65b0\u8be5\u8282\u70b9\u5230\u5934\u8282\u70b9\u5934\u63d2\n    void upNodeToTop(Node* node) {\n        // \u53d6\u51fa\n        remove(node);\n        // \u5934\u63d2\n        push_front(node);\n    }\n\n    // \u5934\u63d2\u4e00\u4e2a\u65b0\u7684\n    void topInsert(int key, int value) {\n        Node* node = new Node;\n        node->key = key;\n        node->val = value;\n        hash[key] = node;\n        // \u5934\u63d2\n        push_front(node);\n    }\n\n    // \u5220\u9664\u4e00\u4e2a\u5c3e\u7684\n    void pop_back() {\n        Node* node = head->prev;\n        hash.erase(node->key);\n        // \u66f4\u65b0\u5934\u7ed3\u70b9\n        head->prev = node->prev;\n        // \u53d6\u51fa\n        remove(node);\n        delete node;\n    }\npublic:\n    LRUCache(int capacity)\n        : head(new Node)\n        , hash()\n        , maxLen(capacity) {\n        head->next = head->prev = head;\n    }\n    \n    int get(int key) {\n        if (auto it = hash.find(key); \n            it != hash.end()) {\n            upNodeToTop(it->second);\n            return it->second->val;\n        }\n        return -1;\n    }\n    \n    void put(int key, int value) {\n        if (auto it = hash.find(key); \n            it != hash.end()) {\n            upNodeToTop(it->second);\n            it->second->val = value;\n        } else {\n            // \u63d2\u5165\u4e00\u4e2a\u65b0\u7684\u5728\u5934\n            topInsert(key, value);\n            if (hash.size() > maxLen) {\n                // \u5220\u9664\u5c3e\u7ed3\u70b9\n                pop_back();\n            }\n        }\n    }\n};\n\n/**\n * Your LRUCache object will be instantiated and called as such:\n * LRUCache* obj = new LRUCache(capacity);\n * int param_1 = obj->get(key);\n * obj->put(key,value);\n */\n"})})]})}function l(n={}){const{wrapper:e}={...(0,a.R)(),...n.components};return e?(0,d.jsx)(e,{...n,children:(0,d.jsx)(h,{...n})}):h(n)}}}]);