"use strict";(self.webpackChunkhx_loli=self.webpackChunkhx_loli||[]).push([[14916],{28453:(e,n,t)=>{t.d(n,{R:()=>c,x:()=>i});var s=t(96540);const r={},a=s.createContext(r);function c(e){const n=s.useContext(a);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function i(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:c(e.components),s.createElement(a.Provider,{value:n},e.children)}},34474:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>i,default:()=>p,frontMatter:()=>c,metadata:()=>s,toc:()=>o});const s=JSON.parse('{"id":"\u7a0b\u5e8f\u8bed\u8a00/C++/\u5927\u9879\u76ee/\u5927\u9879\u76ee/\u5f00\u53d1\u7b14\u8bb0/\u3010\u8865\u5145\u3011MySql\u6570\u636e\u5e93\u5de5\u5177\u7c7b/index","title":"\u8865\u5145: MySsql\u6570\u636e\u5e93\u64cd\u4f5c\u7c7b","description":"1. \u5927\u81ea\u7136\u7684\u9988\u8d60: SqlSession.h","source":"@site/docs/002-\u7a0b\u5e8f\u8bed\u8a00/001-C++/008-\u5927\u9879\u76ee/001-\u5927\u9879\u76ee/001-\u5f00\u53d1\u7b14\u8bb0/009-\u3010\u8865\u5145\u3011MySql\u6570\u636e\u5e93\u5de5\u5177\u7c7b/index.md","sourceDirName":"002-\u7a0b\u5e8f\u8bed\u8a00/001-C++/008-\u5927\u9879\u76ee/001-\u5927\u9879\u76ee/001-\u5f00\u53d1\u7b14\u8bb0/009-\u3010\u8865\u5145\u3011MySql\u6570\u636e\u5e93\u5de5\u5177\u7c7b","slug":"/\u7a0b\u5e8f\u8bed\u8a00/C++/\u5927\u9879\u76ee/\u5927\u9879\u76ee/\u5f00\u53d1\u7b14\u8bb0/\u3010\u8865\u5145\u3011MySql\u6570\u636e\u5e93\u5de5\u5177\u7c7b/","permalink":"/HXLoLi/docs/\u7a0b\u5e8f\u8bed\u8a00/C++/\u5927\u9879\u76ee/\u5927\u9879\u76ee/\u5f00\u53d1\u7b14\u8bb0/\u3010\u8865\u5145\u3011MySql\u6570\u636e\u5e93\u5de5\u5177\u7c7b/","draft":false,"unlisted":false,"editUrl":"https://github.com/HengXin666/HXLoLi/edit/main/docs/002-\u7a0b\u5e8f\u8bed\u8a00/001-C++/008-\u5927\u9879\u76ee/001-\u5927\u9879\u76ee/001-\u5f00\u53d1\u7b14\u8bb0/009-\u3010\u8865\u5145\u3011MySql\u6570\u636e\u5e93\u5de5\u5177\u7c7b/index.md","tags":[],"version":"current","lastUpdatedBy":"Heng_Xin_666","lastUpdatedAt":1745851959000,"frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"SMS\u3001Mail\u3001PDF","permalink":"/HXLoLi/docs/\u7a0b\u5e8f\u8bed\u8a00/C++/\u5927\u9879\u76ee/\u5927\u9879\u76ee/\u5f00\u53d1\u7b14\u8bb0/SMS\u3001Mail\u3001PDF/"},"next":{"title":"\u6211\u7684\u9519\u8bef","permalink":"/HXLoLi/docs/\u7a0b\u5e8f\u8bed\u8a00/C++/\u5927\u9879\u76ee/\u5927\u9879\u76ee/\u5f00\u53d1\u7b14\u8bb0/\u6211\u7684\u9519\u8bef/"}}');var r=t(74848),a=t(28453);const c={},i="\u8865\u5145: MySsql\u6570\u636e\u5e93\u64cd\u4f5c\u7c7b",l={},o=[{value:"1. \u5927\u81ea\u7136\u7684\u9988\u8d60: SqlSession.h",id:"1-\u5927\u81ea\u7136\u7684\u9988\u8d60-sqlsessionh",level:2},{value:"1.1 \u793a\u4f8b: \u4f7f\u7528\u4e8b\u52a1",id:"11-\u793a\u4f8b-\u4f7f\u7528\u4e8b\u52a1",level:2}];function u(e){const n={code:"code",h1:"h1",h2:"h2",header:"header",pre:"pre",...(0,a.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.header,{children:(0,r.jsx)(n.h1,{id:"\u8865\u5145-myssql\u6570\u636e\u5e93\u64cd\u4f5c\u7c7b",children:"\u8865\u5145: MySsql\u6570\u636e\u5e93\u64cd\u4f5c\u7c7b"})}),"\n",(0,r.jsx)(n.h2,{id:"1-\u5927\u81ea\u7136\u7684\u9988\u8d60-sqlsessionh",children:"1. \u5927\u81ea\u7136\u7684\u9988\u8d60: SqlSession.h"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-C++",children:'/**\n * \u5b9a\u4e49\u4e00\u4e2a\u6570\u636e\u5e93\u64cd\u4f5c\u5de5\u5177\u7c7b\n * \u53c2\u8003\u94fe\u63a5\uff1ahttps://dev.mysql.com/doc/connector-cpp/1.1/en/connector-cpp-apps.html\n */\nclass SqlSession final\n{\nprivate:\n    // \u6570\u636e\u5e93\u8fde\u63a5\u5bf9\u8c61\n    Connection* conn;\n    // PreparedStatement\u5bf9\u8c61\n    PreparedStatement* pstmt;\n    // Statement\u5bf9\u8c61\n    Statement* stmt;\n    // \u7ed3\u679c\u96c6\u5bf9\u8c61\n    ResultSet* res;\n    // \u91ca\u653ePreparedStatement\u5bf9\u8c61\n    void releasePreparedStatement();\n    // \u91ca\u653eStatement\u5bf9\u8c61\n    void releaseStatement();\n    // \u91ca\u653e\u7ed3\u679c\u96c6\u5bf9\u8c61\n    void releaseResultSet();\n    // \u6267\u884c\u6570\u636e\u66f4\u65b0\u64cd\u4f5c\n    int update(const string& sql, const char* fmt, va_list args);\npublic:\n    SqlSession();\n    ~SqlSession();\n\n    //************************************\n    // Method:    execute\n    // FullName:  SqlSession::execute\n    // Access:    public \n    // Returns:   bool\n    // Description: \u6267\u884cSQL\u8bed\u53e5\uff0c\u4e00\u822c\u7528\u4e8eDDL\n    // Parameter: const string & sql SQL\u8bed\u53e5\n    //************************************\n    bool execute(const string& sql);\n    \n    //************************************\n    // Method:    executeUpdate\n    // FullName:  SqlSession::executeUpdate\n    // Access:    public \n    // Returns:   int \u5f71\u54cd\u6570\u636e\u884c\u6570\n    // Description: \u66f4\u65b0\u6570\u636e\uff0c\u4e00\u822c\u7528\u4e8eDML\n    // Parameter: const string & sql sql\u8bed\u53e5\n    // Parameter: const char* fmt \u53ef\u53d8\u53c2\u6570\u683c\u5f0f\u5b57\u7b26\u4e32,\u5982:%s%i%bi%b%d%dt%n\n    // Parameter: ... \u53ef\u53d8\u53c2\u6570\n    //************************************\n    int executeUpdate(const string& sql, const char* fmt, ...);\n\n    //************************************\n    // Method:    executeUpdate\n    // FullName:  SqlSession::executeUpdate\n    // Access:    public \n    // Returns:   int \u5f71\u54cd\u6570\u636e\u884c\u6570\n    // Description: \u66f4\u65b0\u6570\u636e\uff0c\u4e00\u822c\u7528\u4e8eDML\n    // Parameter: const string & sql sql\u8bed\u53e5\n    //************************************\n    int executeUpdate(const string& sql);\n\n    //************************************\n    // Method:    executeUpdate\n    // FullName:  SqlSession::executeUpdate\n    // Access:    public \n    // Returns:   int \u5f71\u54cd\u6570\u636e\u884c\u6570\n    // Description: \u66f4\u65b0\u6570\u636e\uff0c\u4e00\u822c\u7528DML\n    // Parameter: const string & sql sql\u8bed\u53e5\n    // Parameter: const SqlParams & params SQL\u8bed\u53e5\u586b\u5145\u53c2\u6570\n    //************************************\n    int executeUpdate(const string& sql, const SqlParams& params);\n\n    //************************************\n    // Method:    executeInsert\n    // FullName:  SqlSession::executeInsert\n    // Access:    public \n    // Returns:   uint64_t \u81ea\u52a8\u589e\u957fID\u503c\n    // Description: \u63d2\u5165\u6570\u636e\uff0c\u7528\u4e8e\u6570\u636e\u5e93\u4e3b\u952e\u81ea\u589e\u7684\u6570\u636e\u8868\uff0c\u4e3b\u952e\u975e\u81ea\u589e\u8bf7\u4f7f\u7528executeUpdate\n    // Parameter: const string & sql sql\u8bed\u53e5\n    // Parameter: const char* fmt \u53ef\u53d8\u53c2\u6570\u683c\u5f0f\u5b57\u7b26\u4e32,\u5982:%s%i%bi%b%d%dt%n\n    // Parameter: ... \u53ef\u53d8\u53c2\u6570\n    //************************************\n    uint64_t executeInsert(const string& sql, const char* fmt, ...);\n\n    //************************************\n    // Method:    executeInsert\n    // FullName:  SqlSession::executeInsert\n    // Access:    public \n    // Returns:   uint64_t \u81ea\u52a8\u589e\u957fID\u503c\n    // Description: \u63d2\u5165\u6570\u636e\uff0c\u7528\u4e8e\u6570\u636e\u5e93\u4e3b\u952e\u81ea\u589e\u7684\u6570\u636e\u8868\uff0c\u4e3b\u952e\u975e\u81ea\u589e\u8bf7\u4f7f\u7528executeUpdate\n    // Parameter: const string & sql sql\u8bed\u53e5\n    //************************************\n    uint64_t executeInsert(const string& sql);\n\n    //************************************\n    // Method:    executeInsert\n    // FullName:  SqlSession::executeInsert\n    // Access:    public \n    // Returns:   uint64_t \u81ea\u52a8\u589e\u957fID\u503c\n    // Description: \u63d2\u5165\u6570\u636e\uff0c\u7528\u4e8e\u6570\u636e\u5e93\u4e3b\u952e\u81ea\u589e\u7684\u6570\u636e\u8868\uff0c\u4e3b\u952e\u975e\u81ea\u589e\u8bf7\u4f7f\u7528executeUpdate\n    // Parameter: const string & sql sql\u8bed\u53e5\n    // Parameter: const SqlParams & params SQL\u8bed\u53e5\u586b\u5145\u53c2\u6570\n    //************************************\n    uint64_t executeInsert(const string& sql, const SqlParams& params);\n    \n    //************************************\n    // Method:    executeQueryNumerical\n    // FullName:  SqlSession::executeQueryNumerical\n    // Access:    public \n    // Returns:   uint64_t \u6574\u578b\u6570\u5b57\n    // Description: \u67e5\u8be2\u4e00\u4e2a\u6574\u578b\u6570\u5b57\uff0c\u6bd4\u5982\u67e5\u8be2count\u3001max\u8fd9\u7c7b\u6570\u636e\n    // Parameter: const string & sql SQL\u8bed\u53e5\n    // Parameter: const char* fmt \u53ef\u53d8\u53c2\u6570\u683c\u5f0f\u5b57\u7b26\u4e32,\u5982:%s%i%bi%b%d%dt%n\n    // Parameter: ... \u53ef\u53d8\u53c2\u6570\n    //************************************\n    uint64_t executeQueryNumerical(const string& sql, const char* fmt, ...);\n\n    //************************************\n    // Method:    executeQueryNumerical\n    // FullName:  SqlSession::executeQueryNumerical\n    // Access:    public \n    // Returns:   uint64_t \u6574\u578b\u6570\u5b57\n    // Description: \u67e5\u8be2\u4e00\u4e2a\u6574\u578b\u6570\u5b57\uff0c\u6bd4\u5982\u67e5\u8be2count\u3001max\u8fd9\u7c7b\u6570\u636e\n    // Parameter: const string & sql SQL\u8bed\u53e5\n    //************************************\n    uint64_t executeQueryNumerical(const string& sql);\n\n    //************************************\n    // Method:    executeQueryNumerical\n    // FullName:  SqlSession::executeQueryNumerical\n    // Access:    public \n    // Returns:   uint64_t \u6574\u578b\u6570\u5b57\n    // Description: \u67e5\u8be2\u4e00\u4e2a\u6574\u578b\u6570\u5b57\uff0c\u6bd4\u5982\u67e5\u8be2count\u3001max\u8fd9\u7c7b\u6570\u636e\n    // Parameter: const string & sql SQL\u8bed\u53e5\n    // Parameter: const SqlParams & params SQL\u8bed\u53e5\u586b\u5145\u53c2\u6570\n    //************************************\n    uint64_t executeQueryNumerical(const string& sql, const SqlParams& params);\n\n    //************************************\n    // Method:    executeQuery\n    // FullName:  SqlSession::executeQuery\n    // Access:    public \n    // Returns:   \u67e5\u8be2\u7ed3\u679c\u96c6\u5408\n    // Description: \u6267\u884c\u67e5\u8be2\n    // Parameter: const string & sql SQL\u8bed\u53e5\n    // Parameter: const M& mapper \u67e5\u8be2\u7ed3\u679c\u5339\u914d\u5904\u7406\n    // Parameter: const char* fmt \u53ef\u53d8\u53c2\u6570\u683c\u5f0f\u5b57\u7b26\u4e32,\u5982:%s%i%bi%b%d%dt%n\n    // Parameter: ... \u53ef\u53d8\u53c2\u6570\n    //************************************\n    template<class T, typename M = Mapper<T>>\n    std::list<T> executeQuery(const string& sql, const M& mapper, const char* fmt, ...) {\n        std::list<T> list;\n        try\n        {\n            NULL_PTR_CHECK(conn, "connection is null");\n            //1 \u83b7\u53d6prepareStatement\u5bf9\u8c61\n            pstmt = conn->prepareStatement(sql);\n            //2 \u5904\u7406\u53c2\u6570\n            SQL_ARG_EXEC_2(pstmt, fmt);\n            //3 \u6267\u884c\u67e5\u8be2\n            res = pstmt->executeQuery();\n            //4 \u5904\u7406\u67e5\u8be2\u7ed3\u679c\n            while (res->next()) {\n                list.push_back(mapper.mapper(res));\n            }\n            //5 \u91ca\u653e\u8d44\u6e90\n            releaseResultSet();\n            releasePreparedStatement();\n        }\n        catch (const std::exception& e)\n        {\n            //5 \u91ca\u653e\u8d44\u6e90\n            releaseResultSet();\n            releasePreparedStatement();\n            cerr << "ExecuteQuery Exception. " << e.what() << endl;\n        }\n        return list;\n    }\n\n    //************************************\n    // Method:    executeQuery\n    // FullName:  SqlSession::executeQuery\n    // Access:    public \n    // Returns:   \u67e5\u8be2\u7ed3\u679c\u96c6\u5408\n    // Description: \u6267\u884c\u67e5\u8be2\n    // Parameter: const string & sql SQL\u8bed\u53e5\n    // Parameter: const M& mapper \u67e5\u8be2\u7ed3\u679c\u5339\u914d\u5904\u7406\n    //************************************\n    template<class T, typename M = Mapper<T>>\n    std::list<T> executeQuery(const string& sql, const M& mapper) {\n        std::list<T> list;\n        TryFinally(\n            [&] {\n                NULL_PTR_CHECK(conn, "connection is null");\n                //1 \u83b7\u53d6prepareStatement\u5bf9\u8c61\n                pstmt = conn->prepareStatement(sql);\n                //2 \u6267\u884c\u67e5\u8be2\n                res = pstmt->executeQuery();\n                //3 \u5904\u7406\u67e5\u8be2\u7ed3\u679c\n                while (res->next()) {\n                    list.push_back(mapper.mapper(res));\n                }\n            },\n            [](const std::exception& e){\n                cerr << "ExecuteQuery Exception. " << e.what() << endl;\n            },\n            [=] {\n                //4 \u91ca\u653e\u8d44\u6e90\n                releaseResultSet();\n                releasePreparedStatement();\n            }\n        );\n        return list;\n    }\n\n    //************************************\n    // Method:    executeQuery\n    // FullName:  SqlSession::executeQuery\n    // Access:    public \n    // Returns:   \u67e5\u8be2\u7ed3\u679c\u96c6\u5408\n    // Description: \u6267\u884c\u67e5\u8be2\n    // Parameter: const string & sql SQL\u8bed\u53e5\n    // Parameter: const M& mapper \u67e5\u8be2\u7ed3\u679c\u5339\u914d\u5904\u7406\n    // Parameter: const SqlParams & params SQL\u8bed\u53e5\u586b\u5145\u53c2\u6570\n    //************************************\n    template<class T, typename M = Mapper<T>>\n    std::list<T> executeQuery(const string& sql, const M& mapper, const SqlParams& params) {\n        std::list<T> list;\n        try\n        {\n            NULL_PTR_CHECK(conn, "connection is null");\n            //1 \u83b7\u53d6prepareStatement\u5bf9\u8c61\n            pstmt = conn->prepareStatement(sql);\n            //2 \u5904\u7406\u53c2\u6570\n            SQL_ARG_EXEC_3(params, pstmt);\n            //3 \u6267\u884c\u67e5\u8be2\n            res = pstmt->executeQuery();\n            //4 \u5904\u7406\u67e5\u8be2\u7ed3\u679c\n            while (res->next()) {\n                list.push_back(mapper.mapper(res));\n            }\n            //5 \u91ca\u653e\u8d44\u6e90\n            releaseResultSet();\n            releasePreparedStatement();\n        }\n        catch (const std::exception& e)\n        {\n            //5 \u91ca\u653e\u8d44\u6e90\n            releaseResultSet();\n            releasePreparedStatement();\n            cerr << "ExecuteQuery Exception. " << e.what() << endl;\n        }\n        return list;\n    }\n\n    // \u8bbe\u7f6e\u8fde\u63a5\u7f16\u7801\n    bool setCharset(const std::string& charset);\n\n    // \u542f\u52a8\u4e8b\u52a1\n    void beginTransaction();\n\n    // \u63d0\u4ea4\u4e8b\u52a1\n    void commitTransaction();\n\n    // \u4e8b\u52a1\u56de\u6eda\n    void rollbackTransaction();\n\n    // \u83b7\u53d6\u8fde\u63a5\u5bf9\u8c61\n    Connection* getConnection() { return this->conn; }\n};\n'})}),"\n",(0,r.jsx)(n.h2,{id:"11-\u793a\u4f8b-\u4f7f\u7528\u4e8b\u52a1",children:"1.1 \u793a\u4f8b: \u4f7f\u7528\u4e8b\u52a1"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-C++",children:'bool RepairorderService::removeData(const DeleteMultipleRepairersDTO::Wrapper& idList) {\n    RepairorderDAO dao;\n    // \u521b\u5efa\u4e00\u4e2a\u4f1a\u8bdd\n    auto sqlSession = dao.getSqlSession();\n    // \u5f00\u542f\u4e8b\u52a1\n    sqlSession->beginTransaction();\n    bool flag = true;\n    for (auto& it : *idList->repairIdList) {\n        std::uint64_t id(it);\n\n        if (!dao.deleteById(id)) {\n            // \u5220\u9664\u5931\u8d25\uff0c\u56de\u6eda\n            sqlSession->rollbackTransaction();\n            flag = false;\n            break;\n        }\n    }\n    // \u63d0\u4ea4\u4e8b\u52a1\n    sqlSession->commitTransaction();\n    return flag;\n}\n\n// \u5176\u4e2d\nint RepairorderDAO::deleteById(uint64_t id) {\n    string sql = "DELETE FROM `dv_repair` WHERE `repair_id`=?";\n    return sqlSession->executeUpdate(sql, "%ull", id);\n}\n'})})]})}function p(e={}){const{wrapper:n}={...(0,a.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(u,{...e})}):u(e)}}}]);