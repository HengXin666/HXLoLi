"use strict";(self.webpackChunkhx_loli=self.webpackChunkhx_loli||[]).push([[70120],{7645:(n,e,r)=>{r.d(e,{A:()=>s});const s=r.p+"assets/images/export-2024-7-23-112030-2f42a0157efeba5ed6b95fa80f2c4edc.png"},28453:(n,e,r)=>{r.d(e,{R:()=>t,x:()=>d});var s=r(96540);const l={},c=s.createContext(l);function t(n){const e=s.useContext(c);return s.useMemo((function(){return"function"==typeof n?n(e):{...e,...n}}),[e,n])}function d(n){let e;return e=n.disableParentContext?"function"==typeof n.components?n.components(l):n.components||l:t(n.components),s.createElement(c.Provider,{value:e},n.children)}},82014:(n,e,r)=>{r.r(e),r.d(e,{assets:()=>i,contentTitle:()=>d,default:()=>_,frontMatter:()=>t,metadata:()=>s,toc:()=>a});const s=JSON.parse('{"id":"\u7a0b\u5e8f\u8bed\u8a00/C++/\u73b0\u4ee3C++/\u73b0\u4ee3C++\u9879\u76ee\u5b9e\u6218/\u4ece\u96f6\u624b\u6413HTTP\u670d\u52a1\u5668/index","title":"\u624b\u6413Http 22\u4e07\u5e76\u53d1 epoll Linux C++17 \u670d\u52a1\u5668","description":"\u5b66\u4e60: \u3010C++17\u3011\u5c0f\u5f6d\u8001\u5e08\u966a\u4f60\u4ece\u96f6\u624b\u6413HTTP\u670d\u52a1\u5668","source":"@site/docs/002-\u7a0b\u5e8f\u8bed\u8a00/001-C++/003-\u73b0\u4ee3C++/003-\u73b0\u4ee3C++\u9879\u76ee\u5b9e\u6218/004-\u4ece\u96f6\u624b\u6413HTTP\u670d\u52a1\u5668/index.md","sourceDirName":"002-\u7a0b\u5e8f\u8bed\u8a00/001-C++/003-\u73b0\u4ee3C++/003-\u73b0\u4ee3C++\u9879\u76ee\u5b9e\u6218/004-\u4ece\u96f6\u624b\u6413HTTP\u670d\u52a1\u5668","slug":"/\u7a0b\u5e8f\u8bed\u8a00/C++/\u73b0\u4ee3C++/\u73b0\u4ee3C++\u9879\u76ee\u5b9e\u6218/\u4ece\u96f6\u624b\u6413HTTP\u670d\u52a1\u5668/","permalink":"/HXLoLi/docs/\u7a0b\u5e8f\u8bed\u8a00/C++/\u73b0\u4ee3C++/\u73b0\u4ee3C++\u9879\u76ee\u5b9e\u6218/\u4ece\u96f6\u624b\u6413HTTP\u670d\u52a1\u5668/","draft":false,"unlisted":false,"editUrl":"https://github.com/HengXin666/HXLoLi/edit/main/docs/002-\u7a0b\u5e8f\u8bed\u8a00/001-C++/003-\u73b0\u4ee3C++/003-\u73b0\u4ee3C++\u9879\u76ee\u5b9e\u6218/004-\u4ece\u96f6\u624b\u6413HTTP\u670d\u52a1\u5668/index.md","tags":[],"version":"current","lastUpdatedBy":"Heng_Xin_666","lastUpdatedAt":1745851959000,"frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"\u73b0\u4ee3CMake\u6a21\u5757\u5316\u9879\u76ee\u7ba1\u7406\u6307\u5357","permalink":"/HXLoLi/docs/\u7a0b\u5e8f\u8bed\u8a00/C++/\u73b0\u4ee3C++/\u73b0\u4ee3C++\u9879\u76ee\u5b9e\u6218/\u73b0\u4ee3CMake\u6a21\u5757\u5316\u9879\u76ee\u7ba1\u7406\u6307\u5357/"},"next":{"title":"C++\u9ed1\u79d1\u6280\u3010\u4e36\u4e36PRETTY\u4e36FUNCTION\u4e36\u4e36\u3011\u975e\u4fb5\u5165\u5f0f\u7684\u7f16\u8bd1\u671f\u53cd\u5c04","permalink":"/HXLoLi/docs/\u7a0b\u5e8f\u8bed\u8a00/C++/\u73b0\u4ee3C++/\u73b0\u4ee3C++\u9879\u76ee\u5b9e\u6218/C++\u9ed1\u79d1\u6280\u3010\u4e36\u4e36PRETTY\u4e36FUNCTION\u4e36\u4e36\u3011\u975e\u4fb5\u5165\u5f0f\u7684\u7f16\u8bd1\u671f\u53cd\u5c04/"}}');var l=r(74848),c=r(28453);const t={},d="\u624b\u6413Http 22\u4e07\u5e76\u53d1 epoll Linux C++17 \u670d\u52a1\u5668",i={},a=[{value:"\u30bc\u30ed\u3001\u73af\u5883\u51c6\u5907",id:"\u30bc\u30ed\u73af\u5883\u51c6\u5907",level:2},{value:"\u4e00\u3001\u4e8b\u524d\u51c6\u5907: \u4e86\u89e3Linux\u51fd\u6570\u7684\u9519\u8bef\u7801",id:"\u4e00\u4e8b\u524d\u51c6\u5907-\u4e86\u89e3linux\u51fd\u6570\u7684\u9519\u8bef\u7801",level:2},{value:"1.1 Error\u5904\u7406",id:"11-error\u5904\u7406",level:3},{value:"1.2 \u67e5\u770bError",id:"12-\u67e5\u770berror",level:3},{value:"\u4e8c\u3001[V1.0] \u6b63\u7247\u5f00\u59cb",id:"\u4e8cv10-\u6b63\u7247\u5f00\u59cb",level:2},{value:"2.1 \u8ba4\u8bc6\u534f\u7a0b",id:"21-\u8ba4\u8bc6\u534f\u7a0b",level:3},{value:"2.2 \u4e3a\u4ec0\u4e48\u4f7f\u7528\u534f\u7a0b",id:"22-\u4e3a\u4ec0\u4e48\u4f7f\u7528\u534f\u7a0b",level:3},{value:"2.3 \u624b\u6495\u534f\u7a0b",id:"23-\u624b\u6495\u534f\u7a0b",level:3},{value:"2.3.1 \u56de\u8c03\u51fd\u6570\u7684\u7c7b\u6a21\u677f",id:"231-\u56de\u8c03\u51fd\u6570\u7684\u7c7b\u6a21\u677f",level:4},{value:"2.3.2 \u4f7f\u7528: \u4ee5\u8fde\u63a5\u4e3a\u4f8b",id:"232-\u4f7f\u7528-\u4ee5\u8fde\u63a5\u4e3a\u4f8b",level:4},{value:"2.4 getaddrinfo",id:"24-getaddrinfo",level:3}];function o(n){const e={a:"a",blockquote:"blockquote",code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",img:"img",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,c.R)(),...n.components};return(0,l.jsxs)(l.Fragment,{children:[(0,l.jsx)(e.header,{children:(0,l.jsx)(e.h1,{id:"\u624b\u6413http-22\u4e07\u5e76\u53d1-epoll-linux-c17-\u670d\u52a1\u5668",children:"\u624b\u6413Http 22\u4e07\u5e76\u53d1 epoll Linux C++17 \u670d\u52a1\u5668"})}),"\n",(0,l.jsxs)(e.blockquote,{children:["\n",(0,l.jsxs)(e.p,{children:["\u5b66\u4e60: ",(0,l.jsx)(e.a,{href:"https://www.bilibili.com/video/BV1Mz421i7Fm/",children:"\u3010C++17\u3011\u5c0f\u5f6d\u8001\u5e08\u966a\u4f60\u4ece\u96f6\u624b\u6413HTTP\u670d\u52a1\u5668"})]}),"\n"]}),"\n",(0,l.jsxs)(e.p,{children:["\u91c7\u7528: ",(0,l.jsx)(e.strong,{children:"\u5355\u7ebf\u7a0b\u5f02\u6b65\uff0c\u53c8\u79f0\u4e8b\u4ef6\u5faa\u73af"})]}),"\n",(0,l.jsx)(e.h2,{id:"\u30bc\u30ed\u73af\u5883\u51c6\u5907",children:"\u30bc\u30ed\u3001\u73af\u5883\u51c6\u5907"}),"\n",(0,l.jsxs)(e.ul,{children:["\n",(0,l.jsx)(e.li,{children:"C++17 (+)"}),"\n",(0,l.jsx)(e.li,{children:"GCC"}),"\n",(0,l.jsx)(e.li,{children:"Linux"}),"\n",(0,l.jsxs)(e.li,{children:["\u4f9d\u8d56\u5e93: ",(0,l.jsx)(e.a,{href:"github.com/fmtlib/fmt",children:"fmt"})," (\u6bd4",(0,l.jsx)(e.code,{children:"printf"}),"\u7684\u6253\u5370\u6548\u7387\u8fd8\u9ad8!)"]}),"\n"]}),"\n",(0,l.jsx)(e.h2,{id:"\u4e00\u4e8b\u524d\u51c6\u5907-\u4e86\u89e3linux\u51fd\u6570\u7684\u9519\u8bef\u7801",children:"\u4e00\u3001\u4e8b\u524d\u51c6\u5907: \u4e86\u89e3Linux\u51fd\u6570\u7684\u9519\u8bef\u7801"}),"\n",(0,l.jsx)(e.h3,{id:"11-error\u5904\u7406",children:"1.1 Error\u5904\u7406"}),"\n",(0,l.jsxs)(e.p,{children:["Linux\u7cfb\u7edf\u51fd\u6570\u90fd\u662f\u8fd4\u56de",(0,l.jsx)(e.code,{children:"-1"}),"\u8868\u793a\u9519\u8bef. \u800c\u5177\u4f53\u4ec0\u4e48\u9519\u8bef, \u6211\u4eec\u5374\u9700\u8981\u901a\u8fc7",(0,l.jsx)(e.code,{children:"errno"}),"\u7684\u503c\u6765\u67e5\u770b, \u800c",(0,l.jsx)(e.code,{children:"errno"}),"\u503c\u4ee3\u8868\u4ec0\u4e48\u610f\u601d, \u53c8\u9700\u8981",(0,l.jsx)(e.code,{children:"strerror"}),"\u67e5\u770b:"]}),"\n",(0,l.jsx)(e.pre,{children:(0,l.jsx)(e.code,{className:"language-C++",children:'// \u5efa\u7acbsocket\u5957\u63a5\u5b57\nif ((_serverFd = ::socket(AF_INET, SOCK_STREAM, 0)) < 0) {\n  LOG_ERROR("socket Error: %s (errno: %d)", strerror(errno), errno);\n}\n'})}),"\n",(0,l.jsx)(e.p,{children:"\u6bcf\u6b21\u90fd\u8981\u68c0\u67e5, \u6709\u65f6\u5019\u8fd8\u9700\u8981\u6392\u9664\u67d0\u4e9b\u9519\u8bef\u7801, \u90fd\u8fd9\u6837\u5199, \u90fd\u8fd9\u6837\u6253\u5370, \u90a3\u4e0d\u70e6\u4e5f\u70e6\u6b7b\u5566"}),"\n",(0,l.jsx)(e.p,{children:"\u6240\u4ee5\u76f4\u63a5\u5c01\u88c5:"}),"\n",(0,l.jsx)(e.pre,{children:(0,l.jsx)(e.code,{className:"language-C++",children:'[[noreturn]] void _throw_system_error(const char *what) {\n    auto ec = std::error_code(errno, std::system_category());\n    fmt::println(stderr, "{}: {} ({}.{})", what, ec.message(), ec.category().name(), ec.value()); // \u6253\u5370\u5f02\u5e38\u7684\u4f4d\u7f6e\u548c\u539f\u56e0\n    throw std::system_error(ec, what);\n}\n\ntemplate <int Except = 0, class T>\nT check_error(const char *what, T res) {\n    if (res == -1) {\n        if constexpr (Except != 0) {\n            if (errno == Except) {\n                return -1;\n            }\n        }\n        _throw_system_error(what); // \u76f4\u63a5\u629b\u51fa\n    }\n    return res;\n}\n\n#define SOURCE_INFO_IMPL_2(file, line) "In " file ":" #line ": "\n#define SOURCE_INFO_IMPL(file, line) SOURCE_INFO_IMPL_2(file, line)\n#define SOURCE_INFO(...) SOURCE_INFO_IMPL(__FILE__, __LINE__) __VA_ARGS__\n#define CHECK_CALL_EXCEPT(except, func, ...) check_error<except>(SOURCE_INFO() #func, func(__VA_ARGS__))\n#define CHECK_CALL(func, ...) check_error(SOURCE_INFO(#func), func(__VA_ARGS__))\n'})}),"\n",(0,l.jsx)(e.p,{children:"\u4f7f\u7528:"}),"\n",(0,l.jsx)(e.pre,{children:(0,l.jsx)(e.code,{className:"language-C++",children:'// \u539f\u672c\u5199\u6cd5\ndo {\n    int flags = ::fcntl(fd, F_GETFL, 0);\n    if (flags == -1) { // \u83b7\u53d6\u6587\u4ef6\u63cf\u8ff0\u7b26\u6807\u5fd7\n        LOG_ERROR("\u8bbe\u7f6efd\u4e3a\u975e\u963b\u585e\u65f6\u51fa\u9519! %s (errno: %d)", strerror(errno), errno);\n        ::close(fd);\n        break;\n    }\n    flags |= O_NONBLOCK;\n    if (::fcntl(fd, F_SETFL, flags) == -1) { // \u8bbe\u7f6e\u6587\u4ef6\u72b6\u6001\u6807\u5fd7\u4e3a\u975e\u963b\u585e\n        LOG_ERROR("\u8bbe\u7f6efd\u4e3a\u975e\u963b\u585e\u65f6\u51fa\u9519! %s (errno: %d)", strerror(errno), errno);\n        ::close(fd);\n        break;\n    }\n    return;\n} while(0);\n// \u5176\u4ed6\u9519\u8bef\u5904\u7406...\n\n// =-=-=-=-=-=-=-=-=-=-=-=\n\n// \u4f7f\u7528\u5c01\u88c5\nint flags = CHECK_CALL(fcntl, fd, F_GETFL);\nflags |= O_NONBLOCK;\nCHECK_CALL(fcntl, fd, F_SETFL, flags);\n'})}),"\n",(0,l.jsx)(e.h3,{id:"12-\u67e5\u770berror",children:"1.2 \u67e5\u770bError"}),"\n",(0,l.jsx)(e.p,{children:"\u5373\u4fbf\u6253\u5370\u4e86\u9519\u8bef\u539f\u56e0, \u4f46\u662f\u8fd8\u662f\u770b\u4e0d\u61c2\u601d\u5bc6\u8fbe, \u5b83\u662f\u6bb7\u683c\u5229\u80e5..."}),"\n",(0,l.jsxs)(e.p,{children:["\u597d\u5728 ",(0,l.jsx)(e.a,{href:"https://www.runoob.com/cprogramming/c-function-setlocale.html",children:"C \u5e93\u51fd\u6570 - setlocale()"})," \u4e2d\u6709",(0,l.jsx)(e.code,{children:"\u7528\u4e8e\u8bbe\u7f6e\u6216\u67e5\u8be2\u7a0b\u5e8f\u7684\u672c\u5730\u5316\u4fe1\u606f"}),"\u7684\u5e93awa!"]}),"\n",(0,l.jsx)(e.pre,{children:(0,l.jsx)(e.code,{className:"language-C++",children:'// C \u6807\u51c6\u5e93 - <locale.h>\nsetlocale(LC_ALL, "zh_CN.UTF-8");\n'})}),"\n",(0,l.jsx)(e.p,{children:"\u8fd9\u6837, \u5b83\u5c31\u8bf4\u4f60\u770b\u5f97\u61c2\u7684\u8bdd\u4e86~"}),"\n",(0,l.jsx)(e.h2,{id:"\u4e8cv10-\u6b63\u7247\u5f00\u59cb",children:"\u4e8c\u3001[V1.0] \u6b63\u7247\u5f00\u59cb"}),"\n",(0,l.jsx)(e.h3,{id:"21-\u8ba4\u8bc6\u534f\u7a0b",children:"2.1 \u8ba4\u8bc6\u534f\u7a0b"}),"\n",(0,l.jsxs)(e.ul,{children:["\n",(0,l.jsx)(e.li,{children:(0,l.jsx)(e.a,{href:"https://www.bilibili.com/video/BV1b5411b7SD/",children:"\u3010\u534f\u7a0b\u7b2c\u4e00\u8bdd\u3011\u534f\u7a0b\u5230\u5e95\u662f\u600e\u6837\u7684\u5b58\u5728\uff1f"})}),"\n",(0,l.jsx)(e.li,{children:(0,l.jsx)(e.a,{href:"https://www.bilibili.com/video/BV1a5411b7aZ/",children:"\u3010\u534f\u7a0b\u7b2c\u4e8c\u8bdd\u3011\u534f\u7a0b\u548cIO\u591a\u8def\u590d\u7528\u66f4\u914d\u54e6~"})}),"\n"]}),"\n",(0,l.jsxs)(e.p,{children:["(\u62d3\u5c55\u9605\u8bfb: ",(0,l.jsx)(e.a,{href:"https://arthurchiao.art/blog/intro-to-io-uring-zh/",children:"[\u8bd1] Linux \u5f02\u6b65 I/O \u6846\u67b6 io_uring\uff1a\u57fa\u672c\u539f\u7406\u3001\u7a0b\u5e8f\u793a\u4f8b\u4e0e\u6027\u80fd\u538b\u6d4b\uff082020\uff09"}),", \u7ed3\u8bba: \u51e0\u4e4e\u53ea\u63d0\u53475%)"]}),"\n",(0,l.jsx)(e.h3,{id:"22-\u4e3a\u4ec0\u4e48\u4f7f\u7528\u534f\u7a0b",children:"2.2 \u4e3a\u4ec0\u4e48\u4f7f\u7528\u534f\u7a0b"}),"\n",(0,l.jsxs)(e.p,{children:["\u6211\u4eec\u4e3a\u4ec0\u4e48\u4f7f\u7528",(0,l.jsx)(e.code,{children:"epoll + \u534f\u7a0b"}),"\u7684\u65b9\u5f0f, \u800c\u4e0d\u662f ",(0,l.jsx)(e.strong,{children:"\u591a\u7ebf\u7a0b + epoll"})," \u5462?"]}),"\n",(0,l.jsxs)(e.p,{children:["\u9996\u5148, \u7f51\u7edc\u8bf7\u6c42\u5b83\u662f\u4e00\u4e2aI/O\u5bc6\u96c6\u578b\u4efb\u52a1, \u5b83\u9700\u8981\u7b49\u5f85\u8bfb\u5199. \u5373\u4fbf\u591a\u7ebf\u7a0b, \u4e5f\u662f\u4f1a\u5728",(0,l.jsx)(e.code,{children:"::recv"}),"\u7b49\u5730\u65b9, \u7b49\u5f85\u6570\u636e. \u5982\u679c\u662fepoll LE + \u975e\u963b\u585e, \u7136\u540e\u8fd4\u56de",(0,l.jsx)(e.code,{children:"-1"}),", \u9519\u8bef\u7801\u662f",(0,l.jsx)(e.code,{children:"\u8bf7\u5c1d\u8bd5"}),", \u7136\u540e\u4f60\u5c31\u4e00\u79cd\u5728\u6b64\u5904\u5c1d\u8bd5, \u4f1a\u6709\u6781\u5927\u7684\u6027\u80fd\u6d6a\u8d39, \u5e76\u4e14\u9020\u6210CPU\u7a7a\u8f6c. (\u9891\u7e41\u7684\u5185\u6838\u548c\u7528\u6237\u6001\u7684\u8f6c\u6362...), \u603b\u4e4b\u5c31\u662f\u4e0d\u597d, \u5e76\u4e14\u7ebf\u7a0b\u6570\u91cf\u6709\u9650, \u4e0d\u80fd\u5168\u90e8\u90fd\u8fd9\u6837\u5427? \u603b\u4f1a\u6709\u8fde\u63a5\u6210\u529f\u7684\u5427?"]}),"\n",(0,l.jsx)(e.p,{children:"\u6240\u4ee5\u6211\u4eec\u80fd\u4e0d\u80fd\u6362\u4e2a\u601d\u8def? (\u5047\u8bbe\u73b0\u5728\u53ea\u6709\u4e00\u4e2a\u7ebf\u7a0b:)"}),"\n",(0,l.jsx)(e.p,{children:"I/O\u5bc6\u96c6, \u6211\u4eec\u5728\u7b49\u5f85I/O\u7684\u65f6\u5019, \u80fd\u4e0d\u80fd\u4e0d\u8981\u76f4\u63a5\u5207\u6362\u5230\u5185\u6838\u6001? \u800c\u662f\u76f4\u63a5\u53bb\u505a\u54ea\u4e9b\u5df2\u7ecf\u8bfb\u53d6\u597d\u7684I/O\u7684\u4efb\u52a1, \u89e3\u6790\u8bf7\u6c42, \u518d\u53d1\u56de\u54cd\u5e94. \u800c\u4e0d\u662f\u5728\u8fd9\u6837\u5e72\u7b49, CPU\u7a7a\u8f6c..."}),"\n",(0,l.jsx)(e.p,{children:"\u8bf4\u767d\u4e86\u5c31\u662f: \u524d\u53f0\u6765\u4e86\u4e2a\u8001\u54e5A, \u6211\u4eec\u53ea\u6709\u4e00\u4e2a\u670d\u52a1\u5458, \u6211\u4eec\u770b\u5230\u8001\u54e5A\u5728\u8fd9\u91cc\u8fb9\u601d\u8003\u8fb9\u8bf4, \u5c31\u7b49\u5f85\u8001\u54e5A\u8bf4\u5b8c\u5148, \u800c\u5728\u8fd9\u4e2a\u65f6\u5019\u5148\u53bb\u5904\u7406\u5df2\u7ecf\u8bf4\u5b8c\u7684\u8001\u54e5B\u7684\u4e8b\u60c5, \u6bd4\u5982\u70e7\u70e4, \u7136\u540e\u8001\u54e5A\u8bf4\u5b8c\u4e86\u6211\u4eec\u518d\u505a\u5b83\u7684\u4e8b\u60c5, \u8fd9\u6837\u5c31\u4fdd\u8bc1\u4e86\u6211\u4eec\u624b\u4e0a\u4e00\u76f4\u6709\u4e1c\u897f\u505a..."}),"\n",(0,l.jsxs)(e.p,{children:["\u50cf\u8fd9\u6837, \u5b9e\u73b0\u5728\u7528\u6237\u6001\u5b9e\u73b0\u7684\u7c7b\u4f3c\u64cd\u4f5c\u7cfb\u7edf\u7684\u8c03\u5ea6\u7684, \u6211\u4eec\u5c31\u79f0\u4f5c",(0,l.jsx)(e.code,{children:"\u534f\u7a0b"}),"!"]}),"\n",(0,l.jsx)(e.p,{children:"\u56e0\u6b64\u4f7f\u7528\u534f\u7a0b\u5b8c\u6210\u8fd9\u4e2a\u4efb\u52a1\u518d\u5408\u9002\u4e0d\u8fc7\u5566~"}),"\n",(0,l.jsx)(e.p,{children:"\u90a3\u4e48, \u65b0\u7684\u95ee\u9898\u53c8\u6765\u4e86, \u600e\u4e48\u5b9e\u73b0\u5462? \u597d\u50cf\u5f88\u96be\u554a? \u534f\u4e0d\u4f1a!"}),"\n",(0,l.jsx)(e.h3,{id:"23-\u624b\u6495\u534f\u7a0b",children:"2.3 \u624b\u6495\u534f\u7a0b"}),"\n",(0,l.jsx)(e.h4,{id:"231-\u56de\u8c03\u51fd\u6570\u7684\u7c7b\u6a21\u677f",children:"2.3.1 \u56de\u8c03\u51fd\u6570\u7684\u7c7b\u6a21\u677f"}),"\n",(0,l.jsx)(e.pre,{children:(0,l.jsx)(e.code,{className:"language-C++",children:"// \u8fd9\u4e2a `callback` \u7ed3\u6784\u4f53\u6a21\u677f\u662f\u4e00\u79cd\u7528\u4e8e\u5b58\u50a8\u548c\u8c03\u7528\u53ef\u53d8\u53c2\u6570\u56de\u8c03\u51fd\u6570\u7684\u7c7b\u6a21\u677f\u3002\n// \u5b83\u4e3b\u8981\u901a\u8fc7\u7c7b\u578b\u64e6\u9664\u548c\u591a\u6001\u6765\u5b9e\u73b0\u8fd9\u4e00\u70b9\u3002\ntemplate <class ...Args>\nstruct callback {\n\n    // \u57fa\u7840\u56de\u8c03\u57fa\u7c7b\n    struct _callback_base {\n        // \u5b9a\u4e49\u4e00\u4e2a\u901a\u7528\u7684 `_call` \u65b9\u6cd5\u3002\u6240\u6709\u5177\u4f53\u7684\u56de\u8c03\u5b9e\u73b0\u90fd\u4f1a\u7ee7\u627f\u81ea\u8fd9\u4e2a\u57fa\u7c7b\uff0c\u5e76\u5b9e\u73b0 `_call` \u65b9\u6cd5\u3002\n        virtual void _call(Args... args) = 0;\n        virtual ~_callback_base() = default;\n    };\n\n    // \u5177\u4f53\u56de\u8c03\u5b9e\u73b0\u7c7b\u6a21\u677f\n    template <class F>\n    struct _callback_impl final : _callback_base {\n        F m_func;\n\n        template <class ...Ts, class = std::enable_if_t<std::is_constructible_v<F, Ts...>>>\n        _callback_impl(Ts &&...ts) : m_func(std::forward<Ts>(ts)...) \n        {}\n\n        // \u8fd9\u4e2a\u7c7b\u6a21\u677f\u7ee7\u627f\u81ea `_callback_base`\uff0c\u5e76\u5b9e\u73b0\u4e86 `_call` \u65b9\u6cd5\u3002\n        // \u5b83\u6301\u6709\u4e00\u4e2a\u5177\u4f53\u7684\u51fd\u6570\u5bf9\u8c61 `m_func`\uff0c\u5e76\u5728 `_call` \u65b9\u6cd5\u4e2d\u8c03\u7528\u8be5\u51fd\u6570\u5bf9\u8c61\u3002\n        void _call(Args... args) override {\n            m_func(std::forward<Args>(args)...);\n        }\n    };\n\n    // \u57fa\u7840\u56de\u8c03\u57fa\u7c7b \u72ec\u4eab\u667a\u80fd\u6307\u9488, \u7528\u4e8e\u6301\u6709\u5177\u4f53\u7684\u56de\u8c03\u5b9e\u73b0\u3002\n    std::unique_ptr<_callback_base> m_base;\n\n    // \u6784\u9020\u51fd\u6570\n    // \u901a\u8fc7\u6a21\u677f\u53c2\u6570\u548c`std::enable_if`\u9650\u5236\uff0c\u786e\u4fdd\u4f20\u5165\u7684\u51fd\u6570\u5bf9\u8c61\u662f\u53ef\u8c03\u7528\u7684\uff0c\u5e76\u4e14\u4e0d\u662f`callback`\u672c\u8eab\u7684\u7c7b\u578b\u3002\n    // \u8fd9\u4e2a\u6784\u9020\u51fd\u6570\u4f1a\u521b\u5efa\u4e00\u4e2a`_callback_impl`\u5b9e\u4f8b\uff0c\u5e76\u5c06\u5176\u5b58\u50a8\u5728`m_base`\u4e2d\u3002\n    template <class F, class = std::enable_if_t<std::is_invocable_v<F, Args...> && !std::is_same_v<std::decay_t<F>, callback>>>\n    callback(F &&f) : m_base(std::make_unique<_callback_impl<std::decay_t<F>>>(std::forward<F>(f))) {}\n\n/**\n * \u6ce8: std::is_invocable<F, Args...> \u662f\u4e00\u4e2a\u7c7b\u578b\u7279\u5f81\u6a21\u677f\uff0c\n * \u5b83\u4f1a\u8fd4\u56de\u4e00\u4e2a\u5e03\u5c14\u503c\uff08std::true_type \u6216 std::false_type\uff09\uff0c\u8868\u793a\u53ef\u8c03\u7528\u5bf9\u8c61 F \u662f\u5426\u80fd\u591f\u63a5\u53d7\u53c2\u6570 Args... \u5e76\u6210\u529f\u8c03\u7528\u3002\n * std::is_invocable_v<F, Args...> \u662f std::is_invocable<F, Args...>::value \u7684\u7b80\u5199\uff0c\u76f4\u63a5\u63d0\u4f9b\u5e03\u5c14\u503c\u3002\n * \n * std::decay_t<F> \u662f C++11 \u4e2d\u5f15\u5165\u7684\u7c7b\u578b\u7279\u5f81\uff0c\u7528\u4e8e\u83b7\u53d6\u7c7b\u578b F \u7684\u884d\u751f\u7c7b\u578b\uff08decayed type\uff09\u3002\n * \u5b83\u4f1a\u53bb\u6389\u7c7b\u578b\u7684\u5f15\u7528\u3001const\u3001volatile \u4fee\u9970\u7b26\uff0c\u5e76\u5c06\u6570\u7ec4\u548c\u51fd\u6570\u7c7b\u578b\u8f6c\u6362\u4e3a\u5bf9\u5e94\u7684\u6307\u9488\u7c7b\u578b\u3002\n * \u4f8b\u5982\uff0cstd::decay_t<int&> \u4f1a\u662f int\uff0cstd::decay_t<int[10]> \u4f1a\u662f int*\u3002\n * \u4f60\u53ef\u4ee5\u901a\u8fc7 std::decay \u6765\u79fb\u9664\u7c7b\u578b\u7684\u5f15\u7528\u548c\u5e38\u91cf\u4fee\u9970\u7b26\uff0c\u5e76\u8fdb\u884c\u5176\u4ed6\u7c7b\u578b\u8c03\u6574\u3002\n * \u6b64\u5904, \u4fdd\u8bc1 F \u548c callback \u4e0d\u662f\u76f8\u540c\u7c7b\u578b\u53ca\u5176\u884d\u751f\n */\n    callback() = default;\n\n    // \u4e0d\u53ef\u62f7\u8d1d\n    callback(callback const &) = delete;\n    callback &operator=(callback const &) = delete;\n\n    // \u53ef\u4ee5\u79fb\u52a8\n    callback(callback &&) = default;\n    callback &operator=(callback &&) = default;\n\n    // \u8c03\u7528\u5b58\u50a8\u7684\u56de\u8c03\u51fd\u6570\n    void operator()(Args... args) const {\n        assert(m_base);\n        return m_base->_call(std::forward<Args>(args)...);\n    }\n\n    // \u83b7\u53d6\u5b58\u50a8\u7684\u5177\u4f53\u56de\u8c03\u5b9e\u73b0\u5bf9\u8c61\n    template <class F>\n    F &target() const {\n        assert(m_base);\n        return static_cast<_callback_impl<F> &>(*m_base);\n    }\n\n    // \u7528\u4e8e\u6cc4\u9732\u548c\u6062\u590d\u56de\u8c03\u5bf9\u8c61\u7684\u5730\u5740\uff0c\u4e3b\u8981\u7528\u4e8e\u67d0\u4e9b\u9700\u8981\u624b\u52a8\u7ba1\u7406\u5185\u5b58\u7684\u573a\u666f\n    // \u4e3b\u52a8\u5185\u5b58\u6cc4\u6f0f\n    void *leak_address() {\n        return static_cast<void *>(m_base.release());\n    }\n\n    // \u6062\u590d\u56de\u8c03\u5bf9\u8c61\u7684\u5730\u5740\n    static callback from_address(void *addr) {\n        callback cb;\n        cb.m_base = std::unique_ptr<_callback_base>(static_cast<_callback_base *>(addr));\n        return cb;\n    }\n};\n"})}),"\n",(0,l.jsx)(e.h4,{id:"232-\u4f7f\u7528-\u4ee5\u8fde\u63a5\u4e3a\u4f8b",children:"2.3.2 \u4f7f\u7528: \u4ee5\u8fde\u63a5\u4e3a\u4f8b"}),"\n",(0,l.jsxs)(e.ul,{children:["\n",(0,l.jsxs)(e.li,{children:["\u8282\u9009\u51fa\u90e8\u5206\u7684\u4ee3\u7801\u903b\u8f91, \u4ee5\u4f53\u9a8c\u534f\u7a0b\u7684\u4e66\u5199\u65b9\u5f0f: \u8bf7\u8ddf\u8e2a",(0,l.jsx)(e.code,{children:'acceptor->do_start("127.0.0.1", "8080");'}),"\u7684\u8c03\u7528"]}),"\n"]}),"\n",(0,l.jsx)(e.pre,{children:(0,l.jsx)(e.code,{className:"language-C++",children:'void server() {\n    io_context ctx; // \u5168\u5c40\u7684epoll fd\n    auto acceptor = http_acceptor::make();\n    acceptor->do_start("127.0.0.1", "8080"); // init\n    ctx.join();\n}\n\n// @brief \u5f02\u6b65\u6587\u4ef6\u64cd\u4f5c\u7c7b\nstruct async_file {\n    int m_fd = -1;\n\n    async_file() = default;\n\n    explicit async_file(int fd) : m_fd(fd) {}\n\n    // @brief \u9759\u6001\u5de5\u5382\u65b9\u6cd5: \u5c06fd\u8bbe\u7f6e\u4e3a\u975e\u963b\u585e, \u6ce8\u518cepoll\u76d1\u542c (EPOLLET)\n    static async_file async_wrap(int fd) {\n        int flags = CHECK_CALL(fcntl, fd, F_GETFL);\n        flags |= O_NONBLOCK;\n        CHECK_CALL(fcntl, fd, F_SETFL, flags);\n\n        struct epoll_event event;\n        event.events = EPOLLET;   // \u8bbe\u7f6e\u8fb9\u6cbf\u89e6\u53d1\u6a21\u5f0f, \u76d1\u542c\u8bfb\u4e8b\u4ef6\n        event.data.ptr = nullptr; // fd \u5bf9\u5e94 \u56de\u8c03\u51fd\u6570 (\u6ca1\u6709)\n        CHECK_CALL(epoll_ctl, io_context::get().m_epfd, EPOLL_CTL_ADD, fd, &event);\n\n        return async_file{fd};\n    }\n\n    // @brief \u5f02\u6b65\u5efa\u7acb\u8fde\u63a5\n    void async_accept(address_resolver::address &addr, callback<expected<int>> cb) { // 2\n        auto ret = convert_error<int>(accept(m_fd, &addr.m_addr, &addr.m_addrlen)); // 3 \u8fdb\u884c\u8fde\u63a5 (\u975e\u963b\u585e\u7684)\n        if (!ret.is_error(EAGAIN)) { // \u5982\u679c\u4e0d\u662f EAGAIN (\u53ef\u80fd\u662f\u9519\u8bef, \u4e5f\u53ef\u80fd\u662ffd) \u5219\u8fdb\u5165 \n                                     // {\u7b2c\u4e00\u6b21\u542f\u52a8\u90a3\u6b21\u5fc5\u5b9a\u662f \u8df3\u8fc7\u8fd9\u4e2a}\n            // \u57fa\u672c\u4e0a\u662f\u8fde\u63a5\u6210\u529f\u4e86\n            cb(ret); // \u542f\u7528\u56de\u8c03\n            return;\n        }\n\n        // \u5982\u679c\u662f EAGAIN, \u90a3\u4e48\u5c31\u8ba9\u64cd\u4f5c\u7cfb\u7edf\u901a\u77e5\u6211\u5427\n        // \u5982\u679c accept \u5230\u8bf7\u6c42\u4e86\uff0c\u8bf7\u64cd\u4f5c\u7cfb\u7edf\uff0c\u8c03\u7528\uff0c\u6211\u8fd9\u4e2a\u56de\u8c03\n        callback<> resume = [this, &addr, cb = std::move(cb)] () mutable {\n            return async_accept(addr, std::move(cb));\n        };\n\n        struct epoll_event event;\n        /**\n         * EPOLLIN: \u5f53\u6709\u6570\u636e\u53ef\u8bfb\u65f6\uff0c`epoll` \u4f1a\u89e6\u53d1\u4e8b\u4ef6\n         * EPOLLET: \u8bbe\u7f6e\u8fb9\u6cbf\u89e6\u53d1\u6a21\u5f0f\n         * EPOLLONESHOT: \u8868\u793a\u4e8b\u4ef6\u53ea\u4f1a\u89e6\u53d1\u4e00\u6b21\u3002\u5f53\u4e00\u4e2a\u6587\u4ef6\u63cf\u8ff0\u7b26\u4e0a\u7684\u4e00\u4e2a\u4e8b\u4ef6\u89e6\u53d1\u5e76\u88ab\u5904\u7406\u540e\uff0c\u8fd9\u4e2a\u6587\u4ef6\u63cf\u8ff0\u7b26\u4f1a\u4ece `epoll` \u76d1\u63a7\u961f\u5217\u4e2d\u79fb\u9664\u3002\n         */\n        event.events = EPOLLIN | EPOLLET | EPOLLONESHOT;\n        event.data.ptr = resume.leak_address(); // \u7ed1\u5b9a\u8fd9\u4e2a\u56de\u8c03\u51fd\u6570 <\u5e76\u4e14\u8fd9\u4e2a\u56de\u8c03\u51fd\u6570\u7684\u751f\u547d\u5468\u671f\u4ea4\u7ed9\u4e86\u5b83(\u53ea\u6709epoll\u6709\u8fd9\u4e2a\u6307\u9488)>\n        CHECK_CALL(epoll_ctl, io_context::get().m_epfd, EPOLL_CTL_MOD, m_fd, &event); // \u4fee\u6539\u5df2\u6ce8\u518c\u7684epoll\n    }\n\n    ~async_file() {\n        if (m_fd == -1)\n            return;\n        close(m_fd);\n        epoll_ctl(io_context::get().m_epfd, EPOLL_CTL_DEL, m_fd, nullptr);\n    }\n};\n\nstruct http_acceptor : std::enable_shared_from_this<http_acceptor> {\n    async_file m_listen;\n    address_resolver::address m_addr;\n    \n    void do_start(std::string name, std::string port) {\n        address_resolver resolver;\n        fmt::println("\u6b63\u5728\u76d1\u542c\uff1a{}:{}", name, port);\n        auto entry = resolver.resolve(name, port);\n        int listenfd = entry.create_socket_and_bind();\n\n        m_listen = async_file::async_wrap(listenfd);\n        return do_accept();\n    }\n\n    // @brief \u8fdb\u884c\u8fde\u63a5 -> \u8c03\u7528\u5f02\u6b65\u7684\u8fdb\u884c\u8fde\u63a5\n    void do_accept() { // 1\n        return m_listen.async_accept(m_addr, [self = shared_from_this()] (expected<int> ret) { // 3\n            auto connfd = ret.expect("accept"); // \u57fa\u672c\u4e0a\u662f\u6ca1\u6709\u9519\u8bef\u7684, \u56e0\u6b64\u5f97\u5230\u7684\u662f\u5957\u63a5\u5b57fd\n\n            // fmt::println("\u63a5\u53d7\u4e86\u4e00\u4e2a\u8fde\u63a5: {}", connfd);\n            http_connection_handler::make()->do_start(connfd); // \u76f4\u63a5\u5f00\u59cb\u8bfb\u53d6\n            return self->do_accept(); // \u7ee7\u7eed\u56de\u8c03(\u5982\u679c\u6ca1\u6709\u5c31\u6302\u8d77, \u5c31\u8fd4\u56de\u4e86)\n        });\n    }\n};\n\n/// \u9644\u5e26 struct io_context { # \u8282\u9009\u903b\u8f91\n// ...\n    void join() {\n        std::array<struct epoll_event, 128> events;\n        while (true) {\n            int ret = epoll_wait(m_epfd, events.data(), events.size(), -1);\n            if (ret < 0)\n                throw;\n            for (int i = 0; i < ret; ++i) {\n                auto cb = callback<>::from_address(events[i].data.ptr); // \u534f\u7a0b: \u8c03\u7528\u56de\u8c03\n                cb();\n            }\n        }\n    }\n// } ...\n'})}),"\n",(0,l.jsx)(e.p,{children:"\u521d\u6b21\u63a5\u89e6, \u6211\u5c31\u6709\u7591\u60d1: \u5b83\u4e3a\u4ec0\u4e48\u4e0d\u4f1a\u5728\u6808\u4e0a\u65e0\u9650\u76f8\u4e92\u9012\u5f52?"}),"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",(0,l.jsxs)(e.table,{children:[(0,l.jsx)(e.thead,{children:(0,l.jsx)(e.tr,{children:(0,l.jsx)(e.th,{style:{textAlign:"center"},children:"##container##"})})}),(0,l.jsxs)(e.tbody,{children:[(0,l.jsx)(e.tr,{children:(0,l.jsx)(e.td,{style:{textAlign:"center"},children:(0,l.jsx)(e.img,{alt:"export-2024-7-23-112030.png ##w600##",src:r(7645).A+"",width:"1152",height:"1800"})})}),(0,l.jsx)(e.tr,{children:(0,l.jsx)(e.td,{style:{textAlign:"center"},children:"\u4ee5\u4e0a\u662f\u5927\u81f4\u7684\u6d41\u7a0b\u56fe"})})]})]}),"\n",(0,l.jsxs)(e.ul,{children:["\n",(0,l.jsxs)(e.li,{children:["\u5982\u679c\u4e00\u76f4\u5728",(0,l.jsx)(e.code,{children:"if (EAGAIN)"}),"\u8fdb\u5165\u56de\u8c03",(0,l.jsx)(e.code,{children:"cb()"}),"\u91cc\u9762, \u4e0d\u5c31\u53ef\u80fd\u5b58\u5728\u4e00\u76f4\u5728\u6808\u4e0a\u5806\u6808",(0,l.jsx)(e.code,{children:"do_accept"}),"->",(0,l.jsx)(e.code,{children:"async_accept"}),"->\u56de\u8c03\u51fd\u6570->",(0,l.jsx)(e.code,{children:"do_accept"}),"->... \u4e86\u5417?"]}),"\n"]}),"\n",(0,l.jsx)(e.p,{children:"\u4f46\u662f\u5b9e\u9645\u4e0a\u7edd\u5bf9\u4e0d\u4f1a\u8fd9\u6837, \u6b63\u786e\u7684\u6267\u884c\u662f:"}),"\n",(0,l.jsxs)(e.ul,{children:["\n",(0,l.jsxs)(e.li,{children:["\u521d\u6b21\u542f\u52a8\u670d\u52a1\u5668, \u4e0d\u53ef\u80fd\u9a6c\u4e0a\u6709\u8d85\u7ea7\u5927\u91cf\u7684\u5e76\u53d1, \u56e0\u6b64\u662f",(0,l.jsx)(e.code,{children:"do_accept"}),"->",(0,l.jsx)(e.code,{children:"async_accept"}),"->false->\u6ce8\u518cepoll\u56de\u8c03->join()"]}),"\n"]}),"\n",(0,l.jsxs)(e.p,{children:["\u5176\u5b97\u65e8\u5c31\u662f: \u6709\u4e8b\u60c5\u5c31\u505a, \u4f5c\u5b8c\u518d\u5c1d\u8bd5\u505a, \u6ca1\u6709\u5f97\u505a\u5c31\u6ce8\u518c\u5230epoll, \u5728\u6709\u4e8b\u60c5\u7684\u65f6\u5019\u8ba9\u64cd\u4f5c\u7cfb\u7edf\u901a\u77e5\u6211, \u6211\u5c31\u8c03\u7528\u56de\u8c03, \u8fdb\u884c\u6267\u884c. \u505a\u5b8c\u4e86\u5c31\u770b\u770b\u80fd\u4e0d\u80fd\u7ee7\u7eed\u505a, \u4e0d\u80fd\u505a\u5c31\u53c8\u6ce8\u518c\u5230epoll, \u6211\u7ee7\u7eed\u56de\u5230",(0,l.jsx)(e.code,{children:"wath(-1)"}),"\u963b\u585e\u7b49\u5f85"]}),"\n",(0,l.jsxs)(e.p,{children:["\u8fd9\u5c31\u662f",(0,l.jsx)(e.code,{children:"\u4e8b\u4ef6\u5faa\u73af"}),"(\u6c38\u8fdc\u6709\u4e00\u4e2a\u8fde\u63a5\u76d1\u542c\u56de\u8c03\u5728epoll)!, u1s1, \u786e\u5b9e\u4f3c\u4e4e\u6bd4\u8f83\u70e7\u8111\u554a\u8279!"]}),"\n",(0,l.jsxs)(e.blockquote,{children:["\n",(0,l.jsx)(e.p,{children:"\u597d\u5427~ \u6211\u6ca1\u6709\u89c1\u8bc6, \u8fd9\u4e2a\u5e94\u8be5\u662f\u4f7f\u7528\u56de\u8c03\u51fd\u6570\u5b9e\u73b0\u7684\u5f02\u6b65\u7f16\u7a0b\u6a21\u578bqwq?!"}),"\n"]}),"\n",(0,l.jsx)(e.h3,{id:"24-getaddrinfo",children:"2.4 getaddrinfo"}),"\n",(0,l.jsx)(e.p,{children:"\u4f7f\u7528\u7279\u70b9"}),"\n",(0,l.jsxs)(e.ol,{children:["\n",(0,l.jsxs)(e.li,{children:["\n",(0,l.jsxs)(e.p,{children:[(0,l.jsx)(e.strong,{children:"\u53c2\u6570\u8f83\u591a"}),":"]}),"\n",(0,l.jsxs)(e.ul,{children:["\n",(0,l.jsxs)(e.li,{children:[(0,l.jsx)(e.code,{children:"getaddrinfo"}),"\u9700\u8981\u4f20\u9012\u591a\u4e2a\u53c2\u6570\uff0c\u5305\u62ec\u4e3b\u673a\u540d\u3001\u670d\u52a1\u540d\u3001\u63d0\u793a\u4fe1\u606f(",(0,l.jsx)(e.code,{children:"hints"}),")\uff0c\u4ee5\u53ca\u63a5\u6536\u7ed3\u679c\u7684\u6307\u9488(",(0,l.jsx)(e.code,{children:"result"}),")\u3002"]}),"\n",(0,l.jsx)(e.li,{children:"\u53c2\u6570\u7c7b\u578b\u548c\u914d\u7f6e\u9700\u8981\u7406\u89e3\u548c\u6b63\u786e\u8bbe\u7f6e\uff0c\u5426\u5219\u53ef\u80fd\u4f1a\u5bfc\u81f4\u89e3\u6790\u9519\u8bef\u3002"}),"\n"]}),"\n"]}),"\n",(0,l.jsxs)(e.li,{children:["\n",(0,l.jsxs)(e.p,{children:[(0,l.jsx)(e.strong,{children:"\u8fd4\u56de\u7ed3\u679c\u662f\u94fe\u8868"}),":"]}),"\n",(0,l.jsxs)(e.ul,{children:["\n",(0,l.jsxs)(e.li,{children:[(0,l.jsx)(e.code,{children:"getaddrinfo"}),"\u8fd4\u56de\u4e00\u4e2a\u5305\u542b\u591a\u4e2a",(0,l.jsx)(e.code,{children:"addrinfo"}),"\u7ed3\u6784\u7684\u94fe\u8868\uff0c\u9700\u8981\u904d\u5386\u94fe\u8868\u4ee5\u9009\u62e9\u5408\u9002\u7684\u5730\u5740\u3002(\u4e00\u822c\u76f4\u63a5\u4f7f\u7528\u7b2c\u4e00\u4e2a\u4e5f\u6ca1\u95ee\u9898)"]}),"\n",(0,l.jsxs)(e.li,{children:["\u9700\u8981\u624b\u52a8\u91ca\u653e\u94fe\u8868\u5185\u5b58\uff0c\u4f7f\u7528",(0,l.jsx)(e.code,{children:"freeaddrinfo"}),"\u51fd\u6570\u3002"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,l.jsx)(e.p,{children:"\u94fe\u8868\u7ed3\u6784:"}),"\n",(0,l.jsx)(e.pre,{children:(0,l.jsx)(e.code,{className:"language-cpp",children:"struct addrinfo {\n    int ai_flags;             // \u6807\u5fd7\n    int ai_family;            // \u5730\u5740\u65cf: AF_INET\uff08IPv4\uff09\u6216 AF_INET6\uff08IPv6\uff09\n    int ai_socktype;          // \u5957\u63a5\u5b57\u7c7b\u578b: SOCK_STREAM\uff08\u6d41\uff09\u6216 SOCK_DGRAM\uff08\u6570\u636e\u62a5\uff09\n    int ai_protocol;          // \u534f\u8bae: \u5982 IPPROTO_TCP\uff08TCP\uff09\u6216 IPPROTO_UDP\uff08UDP\uff09\n    size_t ai_addrlen;        // \u5730\u5740\u957f\u5ea6\n    struct sockaddr *ai_addr; // \u6307\u5411 sockaddr \u7ed3\u6784\u4f53\u7684\u6307\u9488\n    char *ai_canonname;       // \u89c4\u8303\u5316\u7684\u4e3b\u673a\u540d\n    struct addrinfo *ai_next; // \u6307\u5411\u4e0b\u4e00\u4e2a addrinfo \u7ed3\u6784\u4f53\u7684\u6307\u9488\n};\n"})}),"\n",(0,l.jsxs)(e.ol,{start:"3",children:["\n",(0,l.jsxs)(e.li,{children:[(0,l.jsx)(e.strong,{children:"\u652f\u6301\u591a\u79cd\u534f\u8bae"}),":\n",(0,l.jsxs)(e.ul,{children:["\n",(0,l.jsx)(e.li,{children:"\u652f\u6301 IPv4 \u548c IPv6\uff0c\u63d0\u4f9b\u66f4\u591a\u7684\u517c\u5bb9\u6027\u548c\u7075\u6d3b\u6027\u3002"}),"\n",(0,l.jsxs)(e.li,{children:["\u53ef\u4ee5\u6839\u636e",(0,l.jsx)(e.code,{children:"hints"}),"\u53c2\u6570\u6307\u5b9a\u5e0c\u671b\u8fd4\u56de\u7684\u5730\u5740\u7c7b\u578b\u548c\u5957\u63a5\u5b57\u7c7b\u578b\u3002"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,l.jsx)(e.p,{children:"\u4f7f\u7528\u793a\u4f8b"}),"\n",(0,l.jsxs)(e.p,{children:["\u4e00\u4e2a\u5178\u578b\u7684",(0,l.jsx)(e.code,{children:"getaddrinfo"}),"\u4f7f\u7528\u793a\u4f8b\u5982\u4e0b\uff1a"]}),"\n",(0,l.jsx)(e.pre,{children:(0,l.jsx)(e.code,{className:"language-cpp",children:'#include <sys/types.h>\n#include <sys/socket.h>\n#include <netdb.h>\n#include <cstring>\n#include <iostream>\n\nvoid use_getaddrinfo(const char *hostname, const char *service) {\n    struct addrinfo hints;\n    struct addrinfo *result, *rp;\n\n    // \u521d\u59cb\u5316 hints \u7ed3\u6784\n    memset(&hints, 0, sizeof(struct addrinfo));\n    hints.ai_family = AF_UNSPEC;    // \u53ef\u4ee5\u662f AF_INET \u6216 AF_INET6 \u6216 AF_UNSPEC\n    hints.ai_socktype = SOCK_STREAM; // SOCK_STREAM \u8868\u793a TCP, SOCK_DGRAM \u8868\u793a UDP\n\n    // \u8c03\u7528 getaddrinfo \u51fd\u6570\n    int s = getaddrinfo(hostname, service, &hints, &result);\n    if (s != 0) {\n        std::cerr << "getaddrinfo: " << gai_strerror(s) << std::endl;\n        return;\n    }\n\n    // \u904d\u5386\u7ed3\u679c\u94fe\u8868\n    for (rp = result; rp != nullptr; rp = rp->ai_next) {\n        int sockfd = socket(rp->ai_family, rp->ai_socktype, rp->ai_protocol);\n        if (sockfd == -1)\n            continue;\n\n        if (connect(sockfd, rp->ai_addr, rp->ai_addrlen) != -1) {\n            std::cout << "Connected!" << std::endl;\n            break; // \u6210\u529f\u8fde\u63a5\n        }\n        \n        close(sockfd);\n    }\n\n    // \u91ca\u653e\u7ed3\u679c\u94fe\u8868\n    freeaddrinfo(result);\n}\n'})}),"\n",(0,l.jsx)(e.p,{children:"\u4f18\u70b9"}),"\n",(0,l.jsxs)(e.ol,{children:["\n",(0,l.jsxs)(e.li,{children:["\n",(0,l.jsxs)(e.p,{children:[(0,l.jsx)(e.strong,{children:"\u8de8\u5e73\u53f0\u517c\u5bb9\u6027"}),":"]}),"\n",(0,l.jsxs)(e.ul,{children:["\n",(0,l.jsx)(e.li,{children:"\u7edf\u4e00\u63a5\u53e3\uff0c\u517c\u5bb9 IPv4 \u548c IPv6\uff0c\u9002\u7528\u4e8e\u591a\u79cd\u64cd\u4f5c\u7cfb\u7edf\u3002"}),"\n"]}),"\n"]}),"\n",(0,l.jsxs)(e.li,{children:["\n",(0,l.jsxs)(e.p,{children:[(0,l.jsx)(e.strong,{children:"\u7075\u6d3b\u6027"}),":"]}),"\n",(0,l.jsxs)(e.ul,{children:["\n",(0,l.jsxs)(e.li,{children:["\u652f\u6301\u901a\u8fc7 ",(0,l.jsx)(e.code,{children:"hints"})," \u53c2\u6570\u914d\u7f6e\u4e0d\u540c\u7684\u534f\u8bae\u548c\u5957\u63a5\u5b57\u7c7b\u578b\u3002"]}),"\n",(0,l.jsx)(e.li,{children:"\u53ef\u4ee5\u89e3\u6790\u4e3b\u673a\u540d\u548c\u670d\u52a1\u540d\uff0c\u652f\u6301\u57df\u540d\u89e3\u6790\u548c\u670d\u52a1\u67e5\u627e\u3002"}),"\n"]}),"\n"]}),"\n",(0,l.jsxs)(e.li,{children:["\n",(0,l.jsxs)(e.p,{children:[(0,l.jsx)(e.strong,{children:"\u591a\u5730\u5740\u89e3\u6790"}),":"]}),"\n",(0,l.jsxs)(e.ul,{children:["\n",(0,l.jsx)(e.li,{children:"\u8fd4\u56de\u4e00\u4e2a\u94fe\u8868\uff0c\u5305\u542b\u591a\u4e2a\u53ef\u80fd\u7684\u5730\u5740\u548c\u7aef\u53e3\u7ec4\u5408\uff0c\u63d0\u4f9b\u66f4\u591a\u9009\u62e9\u3002"}),"\n"]}),"\n"]}),"\n"]})]})}function _(n={}){const{wrapper:e}={...(0,c.R)(),...n.components};return e?(0,l.jsx)(e,{...n,children:(0,l.jsx)(o,{...n})}):o(n)}}}]);