"use strict";(self.webpackChunkhx_loli=self.webpackChunkhx_loli||[]).push([[13507],{14514:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>a,contentTitle:()=>d,default:()=>p,frontMatter:()=>s,metadata:()=>i,toc:()=>c});var i=t(32665),r=t(74848),o=t(28453);const s={authors:"Heng_Xin",title:"\u3010\u516b\u560eC++\u3011\u60ac\u6302\u5f15\u7528",date:new Date("2025-06-21T11:59:10.000Z"),tags:["C++"]},d=void 0,a={authorsImageUrls:[void 0]},c=[{value:"\u4e00\u3001\u60ac\u6302\u5de6\u503c\u5f15\u7528",id:"\u4e00\u60ac\u6302\u5de6\u503c\u5f15\u7528",level:2},{value:"\u4e8c\u3001\u60ac\u6302\u53f3\u503c\u5f15\u7528",id:"\u4e8c\u60ac\u6302\u53f3\u503c\u5f15\u7528",level:2}];function l(e){const n={a:"a",blockquote:"blockquote",code:"code",div:"div",h2:"h2",hr:"hr",li:"li",p:"p",pre:"pre",span:"span",strong:"strong",ul:"ul",...(0,o.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.p,{children:"\u8fd1\u65e5\u4e00\u540d\u95f2\u7684\u6ca1\u4e8b\u5e72\u7684\u5c0f\u706b\u5b50, \u6253\u7b97\u4e3a\u8fdc\u53e4\u7684iocp\u5bf9\u63a5\u534f\u7a0b\u5e76\u4e14\u652f\u6301\u8d85\u65f6; \u4ee5\u7edf\u4e00io_uring\u4fa7API;"}),"\n",(0,r.jsx)(n.p,{children:"\u6545\u6b64\u9700\u8981\u4f3a\u5019 MSVC\u3001Win32 API"}),"\n",(0,r.jsx)(n.p,{children:"\u5e76\u4e14\u4e3a\u4e86\u5b9e\u73b0\u65e0\u5355\u4f8b\u67b6\u6784\u548c\u8ffd\u6c42\u7b80\u6613API\u539f\u5219."}),"\n",(0,r.jsx)(n.p,{children:"\u4f7f\u7528\u4e86 \u5efa\u9020\u8005\u6a21\u5f0f\u6765\u5c01\u88c5 API..."}),"\n",(0,r.jsx)(n.p,{children:"\u4e00\u4e0d\u5c0f\u5fc3 (\u8bf4\u662f\u4e0d\u662f\u6545\u610f\u7684?) \u5c31\u5199\u4e86 \u60ac\u6302\u5f15\u7528\u4e86... \u7136\u540e\u51fa\u73b0\u516b\u560e\u4e86"}),"\n",(0,r.jsx)(n.h2,{id:"\u4e00\u60ac\u6302\u5de6\u503c\u5f15\u7528",children:"\u4e00\u3001\u60ac\u6302\u5de6\u503c\u5f15\u7528"}),"\n",(0,r.jsxs)(n.p,{children:["\u4e0b\u9762\u4ee3\u7801, \u5b9e\u9645\u4e0a\u81f3\u5c11\u5b58\u5728\u4e24\u5904\u9519\u8bef. \u8fd9\u91cc\u4ec5\u8ba8\u8bba\u5176\u4e2d\u7684\u4e00\u4e2a, \u4e5f\u5c31\u662f ",(0,r.jsx)(n.code,{children:"\u60ac\u6302\u5de6\u503c\u5f15\u7528"}),", \u4f60\u53ef\u4ee5\u770b\u51fa\u6765\u5230\u5e95\u662f\u54ea\u91cc\u5f00\u59cb\u60ac\u6302\u7684\u5417?"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-cpp",metastring:"[g1-\u95ee\u9898\u5904]",children:"struct TimerLoop {\n    using TimerTree = std::multimap<std::chrono::system_clock::time_point, std::coroutine_handle<>>;\n\n    TimerLoop& operator=(TimerLoop&&) = delete;\n\n    std::optional<std::chrono::system_clock::duration> run() {\n        while (_timerTree.size()) {\n            auto nowTime = std::chrono::system_clock::now();\n            auto it = _timerTree.begin();\n            if (it->first <= nowTime) {\n                it->second.resume();\n                _timerTree.erase(it);\n            } else {\n                return it->first - nowTime;\n            }\n        }\n        return {};\n    }\n\n    TimerTree::iterator addTimer(\n        std::chrono::system_clock::time_point expireTime,\n        std::coroutine_handle<> coroutine\n    ) {\n        return _timerTree.insert({expireTime, coroutine});\n    }\n    struct [[nodiscard]] TimerAwaiter {\n        TimerAwaiter(TimerLoop& timerLoop)\n            : _timerLoop{timerLoop}\n            , _expireTime{}\n            , _it{}\n        {}\n\n        bool await_ready() const noexcept {\n            return false;\n        }\n        auto await_suspend(std::coroutine_handle<> coroutine) const noexcept {\n            _it = _timerLoop.addTimer(_expireTime, coroutine);\n        }\n        void await_resume() const noexcept {\n            _it.reset(); // \u5982\u679c\u7ee7\u7eed, \u8bf4\u660e\u662f\u4ece TimerTree::run() \u6765\u7684\n                         // \u4e4b\u540e\u5916\u754c\u4f1a\u6267\u884c _timerTree.erase(_it)\n                         // \u56e0\u6b64\u5185\u90e8\u8981\u6267\u884c _it = {}, \u9632\u6b62\u591a\u6b21 erase\n        }\n        TimerAwaiter&& setExpireTime(std::chrono::system_clock::time_point expireTime) && noexcept {\n            _expireTime = expireTime;\n            return std::move(*this);\n        }\n        ~TimerAwaiter() noexcept {\n            if (_it) {\n                _timerLoop._timerTree.erase(*_it);\n            }\n        }\n    private:\n        TimerLoop& _timerLoop;\n        std::chrono::system_clock::time_point _expireTime;  // \u8fc7\u671f\u65f6\u95f4\n        mutable std::optional<TimerTree::iterator> _it;     // \u7ea2\u9ed1\u6811\u8fed\u4ee3\u5668\n    };\nprivate:\n    struct [[nodiscard]] TimerAwaiterBuilder {\n        TimerAwaiterBuilder(TimerLoop& timerLoop)\n            : _timerLoop{timerLoop}\n        {}\n\n        TimerAwaiterBuilder& operator=(TimerAwaiterBuilder&&) noexcept = delete;\n\n        /**\n         * @brief \u6682\u505c\u4e00\u6bb5\u65f6\u95f4\n         * @param duration \u6bd4\u5982 3s\n         */\n        TimerAwaiter&& sleepFor(std::chrono::system_clock::duration duration) && {\n            return std::move(TimerAwaiter{_timerLoop}.setExpireTime(\n                std::chrono::system_clock::now() + duration));\n        }\n        /**\n         * @brief \u6682\u505c\u6307\u5b9a\u65f6\u95f4\u70b9\n         * @param timerLoop \u8ba1\u65f6\u5668\u5faa\u73af\u5bf9\u8c61\n         * @param expireTime \u65f6\u95f4\u70b9, \u5982 2024-8-4 22:12:23\n         */\n        TimerAwaiter&& sleepUntil(std::chrono::system_clock::time_point expireTime) && {\n            return std::move(TimerAwaiter{_timerLoop}.setExpireTime(expireTime));\n        }\n        TimerLoop& _timerLoop;\n    };\npublic:\n    /**\n     * @brief \u521b\u5efa\u4e00\u4e2a\u5b9a\u65f6\u5668\u5de5\u5382, \u9700\u8981\u7528\u6237\u6307\u5b9a\u5b9a\u65f6\u7684\u65f6\u95f4\n     * @param timerLoop \n     * @return TimerAwaiterBuilder \n     */\n    static TimerAwaiterBuilder makeTimer(TimerLoop& timerLoop) {\n        return {timerLoop};\n    }\nprivate:\n    TimerTree _timerTree;\n};\n"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-cpp",metastring:"[g1-\u8c03\u7528\u5904]",children:"struct Loop {\n    auto makeTimer() {\n        return TimerLoop::makeTimer(_timerLoop);\n    }\n\n    Task<> test {\n        co_await makeTimer().sleepFor(3s); // \u8c03\u7528\n    }\n\n    TimerTree _timerLoop;\n};\n"})}),"\n",(0,r.jsx)(n.p,{children:"\u592a\u70e7\u8111\u4e86? \u90a3\u6211\u5199\u5728\u4e00\u8d77:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-cpp",metastring:"[g2-\u5c55\u5f00]",children:"Task<> test {\n    co_await [this] {\n        return [](TimerLoop& timerLoop) -> TimerAwaiterBuilder {\n            return {timerLoop};\n        } (_timerLoop);\n    }().sleepFor(3s); // \u8c03\u7528\n}\n"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-cpp",metastring:"[g2-\u7ed3\u679c]",children:"Task<> test {\n    co_await TimerAwaiterBuilder{timerLoop}.sleepFor(3s); // \u8c03\u7528\n}\n"})}),"\n",(0,r.jsx)(n.p,{children:"\u7136\u540e\u6700\u7ec8\u662f\u8c03\u7528:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-cpp",children:"TimerAwaiter&& TimerAwaiterBuilder::sleepFor(\n    std::chrono::system_clock::duration duration\n) && {\n    return std::move(TimerAwaiter{_timerLoop}.setExpireTime(\n        std::chrono::system_clock::now() + duration));\n}\n"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:["\u6700\u521d ",(0,r.jsx)(n.code,{children:"TimerAwaiterBuilder"})," \u7684 ",(0,r.jsx)(n.code,{children:"_timerLoop"})," \u662f\u5408\u6cd5\u7684"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:["\u4f46\u662f\u8fd4\u56de\u540e: ",(0,r.jsx)(n.code,{children:"TimerAwaiterBuilder"})," \u6790\u6784, \u7136\u540e ",(0,r.jsx)(n.code,{children:"_timerLoop"})," \u5c31\u662f\u60ac\u6302\u7684\u4e86"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:["\u5373\u4fbf\u6b64\u65f6 ",(0,r.jsx)(n.code,{children:"TimerAwaiter{_timerLoop}"})," \u8fd8\u5728\u751f\u547d\u5468\u671f, \u4f46\u662f \u4f20\u9012\u7684 ",(0,r.jsx)(n.code,{children:"_timerLoop"})," \u5df2\u7ecf\u60ac\u6302\u4e86"]}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"\u7b49\u4ef7\u4e8e:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-cpp",children:"struct Data {\n    int& data;\n};\n\nint a = 0;\nData* c = nullptr;\n{\n    int& b = a;\n    c = new Data{b};\n}\n// b \u6790\u6784, b \u4e3a\u60ac\u6302\u5f15\u7528\n// \u90a3\u4e48, c.data = b, \u5b9e\u9645\u4e0a\u4e5f\u662f\u60ac\u6302\u5f15\u7528!\n// \u6240\u4ee5, \u4e0d\u5e94\u8be5\u4f7f\u7528 \u5e76\u67e5\u96c6 \u601d\u60f3\u770b \u5f15\u7528, \u5f15\u7528\u672c\u8eab\u4e0d\u4f1a\u4f20\u9012!\n// \u5f15\u7528\u7684\u672c\u8d28\u53ea\u662f\u522b\u540d! \u6240\u4ee5 c.data \u5b9e\u9645\u4e0a\u662f b \u7684\u522b\u540d\n// \u4f46\u662f\u4e0d\u7b49\u4ef7\u4e8e a \u7684\u522b\u540d, \u53ea\u662f\u4fee\u6539 b \u7684\u65f6\u5019, \u6b63\u597d\u7b49\u4ef7\u4e8e\u4fee\u6539 a!\n"})}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.p,{children:"\u4f46\u662f\u4e8b\u5b9e\u771f\u7684\u662f\u8fd9\u6837\u5417?"}),"\n",(0,r.jsxs)(n.div,{className:"markdown-alert markdown-alert-note",children:["\n",(0,r.jsxs)(n.p,{className:"markdown-alert-title",children:[(0,r.jsx)(n.span,{className:"octicon octicon-note",style:{"--oct-icon":"url(\"data:image/svg+xml;utf8,%3Csvg xmlns='http://www.w3.org/2000/svg' class='octicon octicon-info mr-2' viewBox='0 0 16 16' version='1.1' width='16' height='16' aria-hidden='true'%3E%3Cpath d='M0 8a8 8 0 1 1 16 0A8 8 0 0 1 0 8Zm8-6.5a6.5 6.5 0 1 0 0 13 6.5 6.5 0 0 0 0-13ZM6.5 7.75A.75.75 0 0 1 7.25 7h1a.75.75 0 0 1 .75.75v2.75h.25a.75.75 0 0 1 0 1.5h-2a.75.75 0 0 1 0-1.5h.25v-2h-.25a.75.75 0 0 1-.75-.75ZM8 6a1 1 0 1 1 0-2 1 1 0 0 1 0 2Z'%3E%3C/path%3E%3C/svg%3E\")"}}),"Note"]}),"\n",(0,r.jsxs)(n.p,{children:["\u6839\u636e ",(0,r.jsx)(n.a,{href:"https://en.cppreference.com/w/cpp/language/lifetime.html#Temporary_objects",children:"C++17 \xa712.2/5"})]}),"\n",(0,r.jsx)(n.p,{children:"All temporary objects are destroyed as the last step in evaluating the full-expression that (lexically) contains the point where they were created, and if multiple temporary objects were created, they are destroyed in the order opposite to the order of creation. This is true even if that evaluation ends in throwing an exception."}),"\n",(0,r.jsx)(n.p,{children:"\u6240\u6709\u4e34\u65f6\u5bf9\u8c61\u90fd\u4f5c\u4e3a\u8bc4\u4f30\u5b8c\u6574\u8868\u8fbe\u5f0f\u7684\u6700\u540e\u4e00\u6b65\u88ab\u9500\u6bc1, \u8be5\u8868\u8fbe\u5f0f(\u8bcd\u6cd5\u4e0a)\u5305\u542b\u5b83\u4eec\u7684\u521b\u5efa\u70b9, \u5982\u679c\u521b\u5efa\u4e86\u591a\u4e2a\u4e34\u65f6\u5bf9\u8c61, \u5219\u5b83\u4eec\u5c06\u6309\u4e0e\u521b\u5efa\u987a\u5e8f\u76f8\u53cd\u7684\u987a\u5e8f\u9500\u6bc1\u3002\u5373\u4f7f\u8be5\u8bc4\u4f30\u4ee5\u5f15\u53d1\u5f02\u5e38\u7ed3\u675f, \u4e5f\u662f\u5982\u6b64\u3002"}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:["\u56e0\u6b64, ",(0,r.jsx)(n.code,{children:"co_await makeTimer().sleepFor(3s);"})," \u7684 ",(0,r.jsx)(n.code,{children:"TimerAwaiterBuilder"})," \u8fd8\u6ca1\u6709\u6790\u6784! (\u81f3\u5c11\u5728 ",(0,r.jsx)(n.code,{children:"sleepFor"})," \u4e2d\u662f\u8fd9\u6837)"]}),"\n",(0,r.jsx)(n.p,{children:"\u4f46\u662f, \u516b\u560e\u6ca1\u6709\u7ed3\u675f, \u6838\u5fc3\u516b\u560e\u662f\u4e0b\u9762..."}),"\n",(0,r.jsx)(n.h2,{id:"\u4e8c\u60ac\u6302\u53f3\u503c\u5f15\u7528",children:"\u4e8c\u3001\u60ac\u6302\u53f3\u503c\u5f15\u7528"}),"\n",(0,r.jsx)(n.p,{children:"\u4e3a\u4e86\u4fdd\u9669\u8d77\u89c1 (\u5b9e\u9645\u4e0a\u662f\u5c1d\u8bd5\u4e86\u5f88\u591a\u5730\u65b9\u540e), \u73b0\u5728\u4ee3\u7801\u53d8\u6210\u4e0b\u9762\u8fd9\u6837\u4e86:"}),"\n",(0,r.jsxs)(n.blockquote,{children:["\n",(0,r.jsxs)(n.p,{children:["\u5728MSVC\u4e0a, \u4f1a\u88ab\u68c0\u6d4b\u51fa\u6765; \u5982\u679c\u662f\u5728\u529b\u6263\u63d0\u4ea4 (\u56e0\u4e3a\u529b\u6263\u9ed8\u8ba4\u662fclang18 (C++23) + \u5f00\u542f ",(0,r.jsx)(n.code,{children:"Address Sanitizer"}),"\u68c0\u6d4b\u7684)"]}),"\n",(0,r.jsx)(n.p,{children:"\u8fd0\u884c, \u90fd\u629b\u5f02\u5e38\u4e86;"}),"\n",(0,r.jsxs)(n.p,{children:["\u4f46\u662f, Release \u4e0b, \u5168\u90fd\u6ca1\u6709\u95ee\u9898: ",(0,r.jsx)(n.a,{href:"https://godbolt.org/z/KqzP1T68E",children:"https://godbolt.org/z/KqzP1T68E"})," (godbolt\u597d\u50cf\u9ed8\u8ba4\u90fd\u662fRelease\u8fd0\u884c\u7684?)"]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"\u4ee3\u7801:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-cpp",metastring:"vscode",children:'#include <iostream>\n#include <map>\n#include <optional>\n#include <chrono>\n\nusing namespace std::chrono;\n\nauto makeTime = [](std::chrono::system_clock::duration d) {\n    return std::chrono::system_clock::now() + d;\n};\n\nnamespace print {\n\ntemplate <typename... Ts>\nvoid println(Ts&&... ts) {\n    ((std::cout << ts), ...);\n    std::cout << \'\\n\';\n}\n\n} // namespace print\n\nstruct MD {\n    using MdTree = std::multimap<std::chrono::system_clock::time_point, int>;\n    MD& operator=(MD&&) = delete;\n    \n    MdTree::iterator addTimer(\n        std::chrono::system_clock::time_point expireTime,\n        int v\n    ) {\n        print::println("insert: ", v);\n        return _mdTree.insert({expireTime, v});\n    }\n\n    struct A {\n        A(MD* md)\n            : _md{md}\n            , _expireTime{}\n            , _it{}\n        {\n            print::println("make this: ", this);\n        }\n    \n        A(A const&) = delete;\n        A& operator=(A const&) noexcept = delete;\n\n#if 0\n        A(A&&) = default;\n        A& operator=(A&&) noexcept = default;\n#else\n        A(A&& that)\n            : _md{that._md}\n            , _expireTime{std::move(that._expireTime)}\n            , _it{std::move(that._it)}\n        {\n            // \u5982\u679c\u7f3a\u5c11\u4e0b\u9762\u7684, \u5c31\u4f1a\u629b\u5f02\u5e38 \u4ec5 MSVC (?)\n            print::println("that: ", this, " [A&&] ref: ", _md);\n            print::println("this: ", this, " [A&&] ref: ", _md);\n        }\n\n        A& operator=(A&& that) noexcept {\n            _md = that._md;\n            _expireTime = std::move(that._expireTime);\n            _it = std::move(that._it);\n            // print::println("that: ", this, " [operator=&&] ref: ", _timerLoop);\n            print::println("this: ", this, " [operator=&&] ref: ", _md);\n            return *this;\n        }\n#endif\n    \n        void await_suspend() const noexcept {\n            print::println("this: ", this);\n            _it = _md->addTimer(_expireTime, 1);\n        }\n    \n        void await_resume() const noexcept {\n            print::println("this: ", this);\n            _it.reset();\n        }\n    \n        A&& setExpireTime(std::chrono::system_clock::time_point expireTime) && noexcept {\n            _expireTime = expireTime;\n            return std::move(*this);\n        }\n    \n        ~A() noexcept {\n            print::println("~this: ", this);\n            if (_it) {\n                print::println("the ", this, " del!");\n                _md->_mdTree.erase(*_it);\n            }\n        }\n    \n    private:\n        MD* _md;\n        std::chrono::system_clock::time_point _expireTime;\n        mutable std::optional<MdTree::iterator> _it;\n    };\nprivate:  \n    struct BuildA {\n        BuildA(MD* md) \n            : _md{md}\n        {}\n    \n        BuildA& operator=(BuildA&&) noexcept = delete;\n\n        // \u8fd4\u56de\u503c\u4e0d\u80fd\u5199\u4e3a decltype(auto) \u6216\u8005 && !? \u53ea\u80fd\u5199 A?\n        // \u4f46\u662f\u6211\u662f\u4f20\u5165 void linkTimeout(MD::A timeout)\n        // \u7406\u8bba\u4e0a\u5e94\u8be5\u662f\u4f7f\u7528\u79fb\u52a8\u6784\u9020\u5f97\u51fa\u65b0\u5bf9\u8c61 timeout \u5427?\n        A&& build(std::chrono::system_clock::duration t) && {\n            // \u56e0\u4e3a\u4e0d\u662f return std::move(*this); \u6240\u4ee5\u4e0d\u662f\u5408\u9002\u7684, \u8fd4\u56de\u7684\u662f\u5c06\u4ea1\u503c\n            return \n                // std::move( // \u8fd9\u4e2a std::move \u53ef\u6709\u53ef\u65e0\n                    A{_md}.setExpireTime(makeTime(t)\n                // )\n            );\n        }\n\n        MD* _md;\n    };\npublic:\n    static BuildA makeBuild(MD& md) {\n        return BuildA{&md};\n    }\n\nprivate:\n    MdTree _mdTree;\n};\n\n\nstatic void linkTimeout(MD::A timeout) { // \u5982\u679c\u4fee\u6539\u4e3a A&& \u6216\u8005 const&, insert\u540e, \u4f1a\u5361\u6b7b\u5728STL\u7684\u4e00\u4e2awhile\u4e2d\n                                         // _Iterator_base12::_Orphan_me_unlocked_v3 \u4e2d \u7684 while\n    timeout.await_suspend();\n    timeout.await_resume();\n}\n\nvoid test02() {\n    MD fk;\n    linkTimeout(\n        // std::move( // \u5982\u679c\u6b64\u5904\u52a0 std::move \u6beb\u65e0\u4f5c\u7528 | \u662f\u53ef\u6709\u53ef\u65e0\u7684\n            MD::makeBuild(fk).build(1s)\n        // )\n    );\n}\n\nint main() {\n    test02();\n    return 0;\n}\n'})}),"\n",(0,r.jsx)(n.p,{children:"\u6211\u76f4\u63a5\u7ed9\u51fa\u7b54\u6848(\u95ee\u9898\u6240\u5728)\u4e86:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-cpp",children:"A&& BuildA::build(std::chrono::system_clock::duration t) && {\n    return A{_md}.setExpireTime(makeTime(t));\n}\n"})}),"\n",(0,r.jsxs)(n.p,{children:["\u8fd4\u56de\u7684\u662f ",(0,r.jsx)(n.code,{children:"A&&"}),"! ",(0,r.jsxs)(n.strong,{children:["\u5f53\u8fd4\u56de\u65f6\u5019, ",(0,r.jsx)(n.code,{children:"A{_md}.setExpireTime(makeTime(t))"})," \u5c31\u6790\u6784\u4e86"]})]}),"\n",(0,r.jsxs)(n.p,{children:["\u5373\u4fbf\u4f7f\u7528 ",(0,r.jsx)(n.code,{children:"A ="})," \u8fd9\u79cd\u8bed\u6cd5\u6765\u63a5\u4f4f, \u5b9e\u9645\u4e0a\u53ea\u662f\u8bed\u6cd5\u901a\u8fc7\u4e86; \u4f46\u662f\u5b9e\u9645\u4e0a\u8fd8\u662f\u6307\u5411\u4e86 ",(0,r.jsx)(n.code,{children:"\u60ac\u6302\u5f15\u7528 A&&"})]}),"\n",(0,r.jsx)(n.p,{children:"\u4e0d\u4fe1\u53ef\u4ee5\u81ea\u5df1\u8c03\u8bd5\u4e00\u4e0b:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-cpp",children:'auto __test02__ = [] {\n    HX::print::println("Test02 {");\n    struct A {\n        A&& todo() && {\n            return std::move(*this);\n        }\n\n        static A&& mk() {\n            return std::move(A{}.todo());\n        }\n\n        ~A() noexcept {\n            HX::print::println("~A ", this);\n            (void)_p;\n        }\n\n    private:\n        using MdTree = std::multimap<std::chrono::system_clock::time_point, int>;\n        std::optional<MdTree::iterator> _p{};\n    };\n    struct ABuild {\n        A&& build() && {\n            return std::move(A{}.todo());\n        }\n        ~ABuild() noexcept {\n            HX::print::println("~ABuild ", this);\n        }\n    };\n    auto makeBuild = []{\n        return ABuild{};\n    };\n    {\n        auto&& a = makeBuild().build();\n        (void)a;\n        HX::print::println("--- mk End a ---\\n");\n    }\n    HX::print::println("--- --- --- --- ---\\n");\n    {\n        decltype(auto) b = makeBuild().build();\n        (void)b;\n        HX::print::println("--- mk End b ---\\n");\n    }\n    HX::print::println("--- --- --- --- ---\\n");\n    {\n        auto c = makeBuild().build();\n        (void)c;\n        HX::print::println("--- mk End c ---\\n");\n    }\n    HX::print::println("--- --- --- --- ---\\n");\n    {\n        auto func = [](A a) {\n            (void)a;\n            HX::print::println("func\\n");\n            return;\n        };\n        // \u4e0b\u9762\u8fd9\u884c\u6253\u65ad\u70b9\n        func(makeBuild().build()); // ub\n                                   // \u8c03\u8bd5\u7684\u65f6\u5019\u5c31\u53ef\u4ee5\u53d1\u73b0:\n                                   // return std::move(A{}.todo());\n                                   // \u53d1\u751f\u4e86\u6790\u6784, \u624d\u8fdb\u884c\u8fd4\u56de!\n                                   // \u56e0\u6b64\u8bbf\u95ee\u7684\u662f\u60ac\u6302\u5f15\u7528!\n        HX::print::println("--- mk End d ---\\n");\n    }\n    HX::print::println("--- --- --- --- ---\\n");\n    HX::print::println("} // Test02");\n    return 0;\n}();\n'})}),"\n",(0,r.jsxs)(n.p,{children:["\u6838\u5fc3\u5c31\u662f\u8fd9\u6837; \u5269\u4e0b\u53ea\u80fd\u591a\u907f\u514d\u4e86; \u6ca1\u4e8b\u4e0d\u8981\u5199 ",(0,r.jsx)(n.code,{children:"A&&"})," \u4f5c\u4e3a\u8fd4\u56de\u503c;"]}),"\n",(0,r.jsxs)(n.p,{children:["\u5e38\u89c1\u7684\u4f7f\u7528\u573a\u666f\u5e94\u8be5\u662f\u94fe\u5f0f\u8c03\u7528, \u800c ",(0,r.jsx)(n.strong,{children:"\u4e0d\u662f"})," \u8fd4\u56de\u4e34\u65f6\u5bf9\u8c61:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-cpp",children:"struct A {\n    [[nodiscard]] A&& set() && { return std::move(*this); } // \u6b63\u786e\u7684\u4f7f\u7528\u573a\u666f\n};\n"})}),"\n",(0,r.jsxs)(n.p,{children:["\u540c\u7406, \u5982\u679c\u4f7f\u7528 ",(0,r.jsx)(n.code,{children:"decltype(auto)"})," \u4e5f\u8981\u7279\u522b\u5c0f\u5fc3, \u5c0f\u5fc3\u5b83\u88ab\u63a8\u5bfc\u4e3a ",(0,r.jsx)(n.code,{children:"T&&"}),"!"]})]})}function p(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(l,{...e})}):l(e)}},28453:(e,n,t)=>{t.d(n,{R:()=>s,x:()=>d});var i=t(96540);const r={},o=i.createContext(r);function s(e){const n=i.useContext(o);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function d(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:s(e.components),i.createElement(o.Provider,{value:n},e.children)}},32665:e=>{e.exports=JSON.parse('{"permalink":"/HXLoLi/blog/2025/06/21/01-\u516b\u560e\u65e5\u5fd7-\u60ac\u6302\u5f15\u7528","editUrl":"https://github.com/HengXin666/HXLoLi/edit/main/blog/2025/06/21/01-\u516b\u560e\u65e5\u5fd7-\u60ac\u6302\u5f15\u7528.md","source":"@site/blog/2025/06/21/01-\u516b\u560e\u65e5\u5fd7-\u60ac\u6302\u5f15\u7528.md","title":"\u3010\u516b\u560eC++\u3011\u60ac\u6302\u5f15\u7528","description":"\u8fd1\u65e5\u4e00\u540d\u95f2\u7684\u6ca1\u4e8b\u5e72\u7684\u5c0f\u706b\u5b50, \u6253\u7b97\u4e3a\u8fdc\u53e4\u7684iocp\u5bf9\u63a5\u534f\u7a0b\u5e76\u4e14\u652f\u6301\u8d85\u65f6; \u4ee5\u7edf\u4e00io_uring\u4fa7API;","date":"2025-06-21T11:59:10.000Z","tags":[{"inline":false,"label":"C++","permalink":"/HXLoLi/blog/tags/C++","description":"C++\u5c0f\u77e5\u8bc6"}],"readingTime":9.125,"hasTruncateMarker":true,"authors":[{"name":"Heng_Xin","title":"\u3053\u3053\u304b\u3089\u5148\u306f\u4e00\u65b9\u901a\u884c\u3060!","url":"https://github.com/HengXin666","email":"282000500@qq.com","socials":{"github":"https://github.com/HengXin666","bilibili":"https://space.bilibili.com/478917126"},"imageURL":"https://avatars.githubusercontent.com/u/103022267","key":"Heng_Xin","page":null}],"frontMatter":{"authors":"Heng_Xin","title":"\u3010\u516b\u560eC++\u3011\u60ac\u6302\u5f15\u7528","date":"2025-06-21T11:59:10.000Z","tags":["C++"]},"unlisted":false,"lastUpdatedAt":1750491976000,"lastUpdatedBy":"Heng_Xin_666","prevItem":{"title":"\u4e0a\u73ed\u7b2c\u4e00\u8bfe","permalink":"/HXLoLi/blog/2025/06/23/01-\u4e0a\u73ed\u7b2c\u4e00\u8bfe"},"nextItem":{"title":"LQB\u7ed3\u675f\u5566, \u6211\u81ea\u7531\u5566","permalink":"/HXLoLi/blog/2025/06/15/01-lqb\u7ed3\u675f\u5566"}}')}}]);