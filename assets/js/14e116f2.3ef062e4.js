"use strict";(self.webpackChunkhx_loli=self.webpackChunkhx_loli||[]).push([[96171],{28453:(n,e,r)=>{r.d(e,{R:()=>l,x:()=>a});var d=r(96540);const t={},i=d.createContext(t);function l(n){const e=d.useContext(i);return d.useMemo((function(){return"function"==typeof n?n(e):{...e,...n}}),[e,n])}function a(n){let e;return e=n.disableParentContext?"function"==typeof n.components?n.components(t):n.components||t:l(n.components),d.createElement(i.Provider,{value:e},n.children)}},88652:(n,e,r)=>{r.d(e,{A:()=>d});const d=r.p+"assets/images/Clip_2024-01-26_11-35-32-2489aa4ae061496a4c9c5b8d1326c4d2.png"},93487:(n,e,r)=>{r.r(e),r.d(e,{assets:()=>o,contentTitle:()=>a,default:()=>h,frontMatter:()=>l,metadata:()=>d,toc:()=>s});const d=JSON.parse('{"id":"\u8ba1\u4f6c\u5e38\u8b58/\u6570\u636e\u7ed3\u6784\u4e0e\u7b97\u6cd5/\u3010\u6570\u636e\u7ed3\u6784\u3011\u6811/\u4e8c\u53c9\u641c\u7d22\u6811/index","title":"\u4e8c\u53c9\u641c\u7d22\u6811 (BST)","description":"\u4e8c\u53c9\u641c\u7d22\u6811(BinarySearchTree)\uff0c\u4e5f\u6709\u79f0\u4e4b\u4e3a\u4e8c\u53c9\u6392\u5e8f\u6811\u3001\u4e8c\u53c9\u67e5\u627e\u6811","source":"@site/docs/001-\u8ba1\u4f6c\u5e38\u8b58/001-\u6570\u636e\u7ed3\u6784\u4e0e\u7b97\u6cd5/004-\u3010\u6570\u636e\u7ed3\u6784\u3011\u6811/005-\u4e8c\u53c9\u641c\u7d22\u6811/index.md","sourceDirName":"001-\u8ba1\u4f6c\u5e38\u8b58/001-\u6570\u636e\u7ed3\u6784\u4e0e\u7b97\u6cd5/004-\u3010\u6570\u636e\u7ed3\u6784\u3011\u6811/005-\u4e8c\u53c9\u641c\u7d22\u6811","slug":"/\u8ba1\u4f6c\u5e38\u8b58/\u6570\u636e\u7ed3\u6784\u4e0e\u7b97\u6cd5/\u3010\u6570\u636e\u7ed3\u6784\u3011\u6811/\u4e8c\u53c9\u641c\u7d22\u6811/","permalink":"/HXLoLi/docs/\u8ba1\u4f6c\u5e38\u8b58/\u6570\u636e\u7ed3\u6784\u4e0e\u7b97\u6cd5/\u3010\u6570\u636e\u7ed3\u6784\u3011\u6811/\u4e8c\u53c9\u641c\u7d22\u6811/","draft":false,"unlisted":false,"editUrl":"https://github.com/HengXin666/HXLoLi/edit/main/docs/001-\u8ba1\u4f6c\u5e38\u8b58/001-\u6570\u636e\u7ed3\u6784\u4e0e\u7b97\u6cd5/004-\u3010\u6570\u636e\u7ed3\u6784\u3011\u6811/005-\u4e8c\u53c9\u641c\u7d22\u6811/index.md","tags":[],"version":"current","lastUpdatedBy":"Heng_Xin_666","lastUpdatedAt":1745851959000,"frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"\u7ebf\u7d22\u4e8c\u53c9\u6811","permalink":"/HXLoLi/docs/\u8ba1\u4f6c\u5e38\u8b58/\u6570\u636e\u7ed3\u6784\u4e0e\u7b97\u6cd5/\u3010\u6570\u636e\u7ed3\u6784\u3011\u6811/\u7ebf\u7d22\u4e8c\u53c9\u6811/"},"next":{"title":"AVL\u6811","permalink":"/HXLoLi/docs/\u8ba1\u4f6c\u5e38\u8b58/\u6570\u636e\u7ed3\u6784\u4e0e\u7b97\u6cd5/\u3010\u6570\u636e\u7ed3\u6784\u3011\u6811/AVL\u6811/"}}');var t=r(74848),i=r(28453);const l={},a="\u4e8c\u53c9\u641c\u7d22\u6811 (BST)",o={},s=[{value:"\u5b9a\u4e49\u548c\u6027\u8d28",id:"\u5b9a\u4e49\u548c\u6027\u8d28",level:2},{value:"\u4e8c\u53c9\u641c\u7d22\u6811\u7684\u4f18\u52bf",id:"\u4e8c\u53c9\u641c\u7d22\u6811\u7684\u4f18\u52bf",level:2},{value:"\u4e8c\u53c9\u641c\u7d22\u6811\u7684\u5b9e\u73b0",id:"\u4e8c\u53c9\u641c\u7d22\u6811\u7684\u5b9e\u73b0",level:2},{value:"\u4e8c\u53c9\u641c\u7d22\u6811\u7684\u63d2\u5165\u64cd\u4f5c",id:"\u4e8c\u53c9\u641c\u7d22\u6811\u7684\u63d2\u5165\u64cd\u4f5c",level:3},{value:"\u67e5\u627e\u67d0\u4e00\u8282\u70b9\u4e0b\u7684\u6700\u5927\u6216\u6700\u5c0f\u503c",id:"\u67e5\u627e\u67d0\u4e00\u8282\u70b9\u4e0b\u7684\u6700\u5927\u6216\u6700\u5c0f\u503c",level:3},{value:"\u4e8c\u53c9\u641c\u7d22\u6811\u7684\u5220\u9664\u64cd\u4f5c",id:"\u4e8c\u53c9\u641c\u7d22\u6811\u7684\u5220\u9664\u64cd\u4f5c",level:3},{value:"\u5220\u9664\u53f6\u5b50\u7ed3\u70b9",id:"\u5220\u9664\u53f6\u5b50\u7ed3\u70b9",level:4},{value:"\u5220\u9664\u5ea6\u4e3a1\u7684\u7ed3\u70b9",id:"\u5220\u9664\u5ea6\u4e3a1\u7684\u7ed3\u70b9",level:4},{value:"\u5220\u9664\u5ea6\u4e3a2\u7684\u7ed3\u70b9",id:"\u5220\u9664\u5ea6\u4e3a2\u7684\u7ed3\u70b9",level:4},{value:"\u9012\u5f52\u601d\u8def",id:"\u9012\u5f52\u601d\u8def",level:4},{value:"\u4ee3\u7801\u5b9e\u73b0",id:"\u4ee3\u7801\u5b9e\u73b0",level:2},{value:"\u9012\u5f52\u5b9e\u73b0",id:"\u9012\u5f52\u5b9e\u73b0",level:3},{value:"\u975e\u9012\u5f52",id:"\u975e\u9012\u5f52",level:3}];function T(n){const e={annotation:"annotation",code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",img:"img",li:"li",math:"math",mi:"mi",mo:"mo",mrow:"mrow",p:"p",pre:"pre",semantics:"semantics",span:"span",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,i.R)(),...n.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(e.header,{children:(0,t.jsx)(e.h1,{id:"\u4e8c\u53c9\u641c\u7d22\u6811-bst",children:"\u4e8c\u53c9\u641c\u7d22\u6811 (BST)"})}),"\n",(0,t.jsxs)(e.p,{children:[(0,t.jsx)(e.strong,{children:"\u4e8c\u53c9\u641c\u7d22\u6811(BinarySearchTree)"}),"\uff0c\u4e5f\u6709\u79f0\u4e4b\u4e3a\u4e8c\u53c9\u6392\u5e8f\u6811\u3001\u4e8c\u53c9\u67e5\u627e\u6811"]}),"\n",(0,t.jsx)(e.h2,{id:"\u5b9a\u4e49\u548c\u6027\u8d28",children:"\u5b9a\u4e49\u548c\u6027\u8d28"}),"\n",(0,t.jsx)(e.p,{children:"\u5728\u4e8c\u53c9\u6811\u7684\u57fa\u7840\u4e0a\uff0c\u589e\u52a0\u4e86\u51e0\u4e2a\u89c4\u5219\u7ea6\u675f\uff1a"}),"\n",(0,t.jsxs)(e.ul,{children:["\n",(0,t.jsx)(e.li,{children:"\u5982\u679c\u4ed6\u7684\u5de6\u5b50\u6811\u4e0d\u7a7a\uff0c\u5219\u5de6\u5b50\u6811\u4e0a\u6240\u6709\u7ed3\u70b9\u7684\u503c\u5747\u5c0f\u4e8e\u5b83\u7684\u6839\u7ed3\u70b9\u7684\u503c\u3002"}),"\n",(0,t.jsx)(e.li,{children:"\u82e5\u5b83\u7684\u53f3\u5b50\u6811\u4e0d\u7a7a\uff0c\u5219\u53f3\u5b50\u6811\u4e0a\u6240\u6709\u7ed3\u70b9\u7684\u503c\u5747\u5927\u4e8e\u5b83\u7684\u6839\u7ed3\u70b9\u7684\u503c\u3002"}),"\n",(0,t.jsx)(e.li,{children:"\u5b83\u7684\u5de6\u3001\u53f3\u6811\u53c8\u5206\u4e3a\u4e8c\u53c9\u6392\u5e8f\u6811\u3002"}),"\n"]}),"\n\n\n\n\n\n\n\n\n\n\n\n",(0,t.jsxs)(e.table,{children:[(0,t.jsx)(e.thead,{children:(0,t.jsx)(e.tr,{children:(0,t.jsx)(e.th,{style:{textAlign:"center"},children:"##container##"})})}),(0,t.jsx)(e.tbody,{children:(0,t.jsx)(e.tr,{children:(0,t.jsx)(e.td,{style:{textAlign:"center"},children:(0,t.jsx)(e.img,{alt:"Clip_2024-01-26_11-35-32.png ##w500##shadow##",src:r(88652).A+"",width:"805",height:"481"})})})})]}),"\n",(0,t.jsx)(e.h2,{id:"\u4e8c\u53c9\u641c\u7d22\u6811\u7684\u4f18\u52bf",children:"\u4e8c\u53c9\u641c\u7d22\u6811\u7684\u4f18\u52bf"}),"\n",(0,t.jsxs)(e.ul,{children:["\n",(0,t.jsx)(e.li,{children:"\u4e8c\u53c9\u6392\u5e8f\u6811\u7684\u4e2d\u5e8f\u904d\u5386\uff0c\u5c31\u662f\u4e00\u4e2a\u4ece\u5c0f\u5230\u5927\u6392\u597d\u5e8f\u7684\u5e8f\u5217\uff0c\u4f46\u662f\u67e5\u627e\u65f6\uff0c\u5b8c\u5168\u6ca1\u6709\u5fc5\u8981\u5148\u8fdb\u884c\u4e2d\u5e8f\u904d\u5386\u751f\u6210\u4e00\u4e2a\u6709\u5e8f\u7684\u6570\u7ec4\uff0c\u518d\u4e8c\u5206\u67e5\u627e\uff0c\u76f4\u63a5\u6839\u636e\u4e8c\u53c9\u641c\u7d22\u6811\u7684\u7ea6\u675f\u76f4\u63a5\u64cd\u4f5c\u3002"}),"\n",(0,t.jsxs)(e.li,{children:["\u67e5\u627e\u65f6\u95f4\u6700\u574f\u60c5\u51b5\u5c31\u662f\u6811\u7684\u6df1\u5ea6 ",(0,t.jsxs)(e.span,{className:"katex",children:[(0,t.jsx)(e.span,{className:"katex-mathml",children:(0,t.jsx)(e.math,{xmlns:"http://www.w3.org/1998/Math/MathML",children:(0,t.jsxs)(e.semantics,{children:[(0,t.jsxs)(e.mrow,{children:[(0,t.jsx)(e.mi,{children:"O"}),(0,t.jsx)(e.mo,{stretchy:"false",children:"("}),(0,t.jsx)(e.mi,{children:"l"}),(0,t.jsx)(e.mi,{children:"o"}),(0,t.jsx)(e.mi,{children:"g"}),(0,t.jsx)(e.mi,{children:"N"}),(0,t.jsx)(e.mo,{stretchy:"false",children:")"})]}),(0,t.jsx)(e.annotation,{encoding:"application/x-tex",children:"O(logN)"})]})})}),(0,t.jsx)(e.span,{className:"katex-html","aria-hidden":"true",children:(0,t.jsxs)(e.span,{className:"base",children:[(0,t.jsx)(e.span,{className:"strut",style:{height:"1em",verticalAlign:"-0.25em"}}),(0,t.jsx)(e.span,{className:"mord mathnormal",style:{marginRight:"0.02778em"},children:"O"}),(0,t.jsx)(e.span,{className:"mopen",children:"("}),(0,t.jsx)(e.span,{className:"mord mathnormal",style:{marginRight:"0.01968em"},children:"l"}),(0,t.jsx)(e.span,{className:"mord mathnormal",children:"o"}),(0,t.jsx)(e.span,{className:"mord mathnormal",style:{marginRight:"0.03588em"},children:"g"}),(0,t.jsx)(e.span,{className:"mord mathnormal",style:{marginRight:"0.10903em"},children:"N"}),(0,t.jsx)(e.span,{className:"mclose",children:")"})]})})]})," (n\u4e3a\u7ed3\u70b9\u4e2a\u6570)"]}),"\n",(0,t.jsx)(e.li,{children:"\u4e8c\u53c9\u641c\u7d22\u6811\u7684\u67e5\u627e\u903b\u8f91\uff0c\u53ef\u4ee5\u5199\u6210\u9012\u5f52\u7684\u601d\u8def\u548c\u975e\u9012\u5f52\u601d\u8def\u3002"}),"\n"]}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-C",metastring:"\u4e8c\u53c9\u6811\u67e5\u627e\u4f2a\u4ee3\u7801",children:"BiTree SearchBST(BiTree T,KeyType key) {\n    //\u5982\u679c\u9012\u5f52\u8fc7\u7a0b\u4e2d T \u4e3a\u7a7a\uff0c\u5219\u67e5\u627e\u7ed3\u679c\uff0c\u8fd4\u56deNULL\uff1b\u6216\u8005\u67e5\u627e\u6210\u529f\uff0c\u8fd4\u56de\u6307\u5411\u8be5\u5173\u952e\u5b57\u7684\u6307\u9488\n    if (!T || key == T->data) {\n        return T;\n    } else if (key < T->data) {\n        //\u9012\u5f52\u904d\u5386\u5176\u5de6\u5b69\u2f26\n        return SearchBST(T->lchild, key);\n    } else {\n        //\u9012\u5f52\u904d\u5386\u5176\u53f3\u5b69\u2f26\n        return SearchBST(T->rchild, key);\n    }\n}\n"})}),"\n",(0,t.jsx)(e.h2,{id:"\u4e8c\u53c9\u641c\u7d22\u6811\u7684\u5b9e\u73b0",children:"\u4e8c\u53c9\u641c\u7d22\u6811\u7684\u5b9e\u73b0"}),"\n",(0,t.jsx)(e.h3,{id:"\u4e8c\u53c9\u641c\u7d22\u6811\u7684\u63d2\u5165\u64cd\u4f5c",children:"\u4e8c\u53c9\u641c\u7d22\u6811\u7684\u63d2\u5165\u64cd\u4f5c"}),"\n",(0,t.jsxs)(e.ul,{children:["\n",(0,t.jsxs)(e.li,{children:["\u7b97\u6cd5\u601d\u60f3\n",(0,t.jsxs)(e.ul,{children:["\n",(0,t.jsx)(e.li,{children:"\u63d2\u5165\u7684\u65b0\u8282\u70b9\u90fd\u662f\u5728\u53f6\u8282\u70b9\u4f4d\u7f6e"}),"\n",(0,t.jsx)(e.li,{children:"\u5bfb\u627e\u63d2\u5165\u8282\u70b9\u7684\u4f4d\u7f6e\uff0c\u5efa\u7acb\u7236\u8282\u70b9\u548c\u65b0\u8282\u70b9\u7684\u5de6\u53f3\u5173\u7cfb"}),"\n",(0,t.jsx)(e.li,{children:"\u662f\u4e00\u79cd\u9012\u5f52\u601d\u60f3"}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(e.li,{children:["\u9012\u5f52\u601d\u8def\n",(0,t.jsxs)(e.ul,{children:["\n",(0,t.jsx)(e.li,{children:"\u6d89\u53ca\u5230\u524d\u540e\u8282\u70b9\uff0c\u5b50\u95ee\u9898\u5c31\u662f\u8fd4\u56de\u65b0\u8282\u70b9\uff0c\u4e0a\u4e00\u4e2a\u72b6\u6001\u5c31\u662f\u5de6\u5b50\u6811\u8fd8\u662f\u53f3\u5b50\u6811\u6765\u63a5\u6536"}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(e.li,{children:"\u9012\u5f52\u6838\u5fc3\u4ee3\u7801"}),"\n"]}),"\n",(0,t.jsx)(e.h3,{id:"\u67e5\u627e\u67d0\u4e00\u8282\u70b9\u4e0b\u7684\u6700\u5927\u6216\u6700\u5c0f\u503c",children:"\u67e5\u627e\u67d0\u4e00\u8282\u70b9\u4e0b\u7684\u6700\u5927\u6216\u6700\u5c0f\u503c"}),"\n",(0,t.jsxs)(e.ul,{children:["\n",(0,t.jsxs)(e.li,{children:["\u7b97\u6cd5\u601d\u60f3\n",(0,t.jsxs)(e.ul,{children:["\n",(0,t.jsx)(e.li,{children:"\u6bd4\u5f53\u524d\u8282\u70b9\u5c0f\u7684\u503c\uff0c\u4e00\u5b9a\u653e\u5728\u4ed6\u7684\u5de6\u5b50\u6811\u4e0a\uff0c\u90a3\u4e48\u4e00\u76f4\u5f80\u5de6\u67e5\u627e\u6700\u5de6\u8fb9\u7684\u8282\u70b9\uff0c\u5c31\u662f\u6700\u5c0f\u503c"}),"\n",(0,t.jsx)(e.li,{children:"\u6bd4\u5f53\u524d\u8282\u70b9\u5927\u7684\u503c\uff0c\u4e00\u5b9a\u653e\u5728\u4ed6\u7684\u53f3\u5b50\u6811\u4e0a\uff0c\u90a3\u4e48\u4e00\u76f4\u5f80\u53f3\u67e5\u627e\u6700\u5de6\u8fb9\u7684\u8282\u70b9\uff0c\u5c31\u662f\u6700\u5927\u503c"}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(e.li,{children:"\u7b97\u6cd5\u5b9e\u73b0"}),"\n"]}),"\n",(0,t.jsx)(e.h3,{id:"\u4e8c\u53c9\u641c\u7d22\u6811\u7684\u5220\u9664\u64cd\u4f5c",children:"\u4e8c\u53c9\u641c\u7d22\u6811\u7684\u5220\u9664\u64cd\u4f5c"}),"\n",(0,t.jsxs)(e.ul,{children:["\n",(0,t.jsxs)(e.li,{children:["\u7b97\u6cd5\u5206\u6790\n",(0,t.jsxs)(e.ul,{children:["\n",(0,t.jsxs)(e.li,{children:["\u5220\u9664\u7ed3\u70b9\u7684\u4e09\u79cd\u53ef\u80fd\u6027:\n",(0,t.jsxs)(e.ul,{children:["\n",(0,t.jsx)(e.li,{children:"\u5220\u9664\u53f6\u5b50(\u5ea6\u4e3a0)\u7684\u7ed3\u70b9"}),"\n",(0,t.jsx)(e.li,{children:"\u5220\u9664\u5ea6\u4e3a1\u7684\u7ed3\u70b9"}),"\n",(0,t.jsx)(e.li,{children:"\u5220\u9664\u5ea6\u4e3a2\u7684\u7ed3\u70b9"}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(e.h4,{id:"\u5220\u9664\u53f6\u5b50\u7ed3\u70b9",children:"\u5220\u9664\u53f6\u5b50\u7ed3\u70b9"}),"\n",(0,t.jsxs)(e.ul,{children:["\n",(0,t.jsx)(e.li,{children:"\u53f6\u5b50\u7ed3\u70b9\u4ece\u4e8c\u53c9\u641c\u7d22\u6811\u4e2d\u79fb\u9664\u540e\uff0c\u5e76\u4e0d\u5f71\u54cd\u5176\u4ed6\u7ed3\u70b9\u7684\u6392\u5217\u89c4\u5219\uff0c\u76f4\u63a5\u5220\u9664"}),"\n"]}),"\n",(0,t.jsx)(e.h4,{id:"\u5220\u9664\u5ea6\u4e3a1\u7684\u7ed3\u70b9",children:"\u5220\u9664\u5ea6\u4e3a1\u7684\u7ed3\u70b9"}),"\n",(0,t.jsxs)(e.ul,{children:["\n",(0,t.jsx)(e.li,{children:"\u8be5\u8282\u70b9\u7f3a\u5931\u5de6\u5b50\u6811\u6216\u53f3\u5b50\u6811\uff0c\u5f53\u53bb\u6389\u8fd9\u4e2a\u8282\u70b9\u540e\uff0c\u5269\u4f59\u7684\u5de6\u5b50\u6811\u548c\u53f3\u5b50\u6811\u6ee1\u8db3\u4e8c\u53c9\u641c\u7d22\u6811\u7684\u8981\u6c42"}),"\n",(0,t.jsx)(e.li,{children:"\u77db\u76fe\u5728\u4e8e\u5220\u9664\u7684\u8fd9\u4e2a\u8282\u70b9\uff0c\u5c5e\u4e8e\u7236\u8282\u70b9\u7684\u5de6\u8fb9\u8fd8\u662f\u53f3\u8fb9\uff0c\u90a3\u4e48\u5269\u4f59\u7684\u5de6\u5b50\u6811\u6216\u53f3\u5b50\u6811\u4ecd\u7136\u6ee1\u8db3\u7236\u8282\u70b9\u7684\u5de6\u53f3\u5c5e\u6027\uff0c\u63a5\u5165\u8fd9\u4e2a\u7236\u8282\u70b9\u5c31\u53ef\u4ee5"}),"\n"]}),"\n",(0,t.jsx)(e.h4,{id:"\u5220\u9664\u5ea6\u4e3a2\u7684\u7ed3\u70b9",children:"\u5220\u9664\u5ea6\u4e3a2\u7684\u7ed3\u70b9"}),"\n",(0,t.jsxs)(e.ul,{children:["\n",(0,t.jsxs)(e.li,{children:["\n",(0,t.jsx)(e.p,{children:"\u5047\u8bbe\u8981\u5220\u9664\u7684\u8282\u70b9A\uff0c\u4ed6\u7684\u540e\u7ed3\u70b9\uff0c\u65e2\u6709\u5927\u4e8e\u4ed6\u7684\u4e5f\u6709\u5c0f\u4e8e\u4ed6\u7684\uff0c\u73b0\u5728\u5c31\u662f\u8981\u9009\u62e9\u4e00\u4e2a\u8282\u70b9B\uff0c\u6ee1\u8db3\u5de6\u8fb9\u8282\u70b9\u90fd\u6bd4B\u5c0f\uff0c\u53f3\u8fb9\u8282\u70b9\u90fd\u6bd4B\u5927\u3002"}),"\n"]}),"\n",(0,t.jsxs)(e.li,{children:["\n",(0,t.jsx)(e.p,{children:"\u5176\u5b9e\u5c31\u662f\u4e2d\u5e8f\u904d\u5386\u65f6\uff0c\u524d\u4e00\u4e2a\u8282\u70b9\u6216\u540e\u4e00\u4e2a\u8282\u70b9\u6765\u66ff\u6362\u8fd9\u4e2a\u8282\u70b9\uff0c\u7136\u540e\u5220\u9664\u524d\u4e00\u4e2a\u6216\u540e\u4e00\u4e2a\u8282\u70b9"}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(e.h4,{id:"\u9012\u5f52\u601d\u8def",children:"\u9012\u5f52\u601d\u8def"}),"\n",(0,t.jsxs)(e.ul,{children:["\n",(0,t.jsxs)(e.li,{children:["\u4e8c\u53c9\u641c\u7d22\u6811\u7684\u5220\u9664\u60c5\u51b5\n",(0,t.jsxs)(e.ul,{children:["\n",(0,t.jsx)(e.li,{children:"\u5220\u9664\u53f6\u5b50\u8282\u70b9\uff0c\u76f4\u63a5\u5220\u9664"}),"\n",(0,t.jsx)(e.li,{children:"\u5220\u9664\u7684\u8282\u70b9\u6709\u4e00\u4e2a\u53f6\u5b50\u8282\u70b9\uff0c\u7528\u53eb\u5b50\u8282\u70b9\u6765\u66ff\u4ee3"}),"\n",(0,t.jsxs)(e.li,{children:["\u5220\u9664\u7684\u8282\u70b9\u6709\u4e24\u4e2a\u5b50\u8282\u70b9\n",(0,t.jsxs)(e.ul,{children:["\n",(0,t.jsx)(e.li,{children:"\u627e\u5230\u524d\u9a71\u8282\u70b9\uff0c\u590d\u5236\u524d\u9a71\u8282\u70b9\u7684\u503c\u8986\u76d6\u6389\u9884\u5907\u5220\u9664\u7684\u8282\u70b9\uff0c\u7136\u540e\u5220\u9664\u524d\u9a71\u8282\u70b9"}),"\n",(0,t.jsx)(e.li,{children:"\u627e\u5230\u540e\u7ee7\u8282\u70b9\uff0c\u590d\u5236\u540e\u7ee7\u8282\u70b9\u7684\u503c\u8986\u76d6\u6389\u9884\u5907\u5220\u9664\u7684\u8282\u70b9\uff0c\u7136\u540e\u5220\u9664\u540e\u7ee7\u8282\u70b9"}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(e.h2,{id:"\u4ee3\u7801\u5b9e\u73b0",children:"\u4ee3\u7801\u5b9e\u73b0"}),"\n",(0,t.jsx)(e.h3,{id:"\u9012\u5f52\u5b9e\u73b0",children:"\u9012\u5f52\u5b9e\u73b0"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-C",children:'#include <stdio.h>\n#include <stdlib.h>\n\ntypedef int Element;\n\ntypedef struct _B_tree_node\n{\n    Element data;\n    struct _B_tree_node *left;  // \u5de6\u5b50\u6811\n    struct _B_tree_node *right; // \u53f3\u5b50\u6811\n} BTreeNode;\n\ntypedef struct\n{\n    BTreeNode *root;            // \u6811\u6839\n    int nodeNum;                // \u7ed3\u70b9\u6570\n} BTree;\n\nBTree *binaryTreeInitialization(void);              // \u521d\u59cb\u5316\u6811\u5934\nBTreeNode *addBinaryTreeNode(Element e);            // \u521b\u5efa\u4e00\u4e2a\u8282\u70b9\nvoid setBST(BTree *T, Element val);                 // \u4e8c\u53c9\u641c\u7d22\u63d2\u5165\nvoid searchBSTNode(BTree *T, Element val);          // \u4e8c\u53c9\u641c\u7d22\u6811\u7684\u67e5\u627e\nvoid delBSTNode(BTree *T, Element val);             // \u5220\u9664\u4e8c\u53c9\u641c\u7d22\u6811\u7684\u67d0\u4e2a\u7ed3\u70b9\nvoid putBST(BTree *T);                              // \u4e2d\u5e8f\u904d\u5386\u6811\nvoid freeBinaryTree(BTree **T);                     // \u91ca\u653e\u6811   <\u540e\u5e8f\u904d\u5386>\n\nvoid text_01(void);                                 // \u6d4b\u8bd5\u4ee3\u7801\n\nBTreeNode *addBinaryTreeNode(Element e)\n{\n    BTreeNode *node = (BTreeNode *)malloc(sizeof(BTreeNode));\n    if (!node)\n    {\n        printf("TREE_NODE malloc Error!\\n");\n        return NULL; \n    }\n    node->data = e;\n    node->left = node->right = NULL;\n    return node;\n}\n\n\nBTree *binaryTreeInitialization(void)\n{\n    BTree *T = (BTree *)malloc(sizeof(BTree));\n    if (!T)\n    {\n        printf("TREE_ROOT malloc Error!\\n");\n        return NULL;   \n    }\n    T->nodeNum = 0;\n    T->root = NULL;\n    return T;\n}\n\nstatic BTreeNode *_setBST(BTree *T, BTreeNode *N, Element val)\n{\n    if (N)\n    {\n        if (val > N->data)\n        {\n             N->right = _setBST(T, N->right, val);\n        }\n        else if (val < N->data)\n        {\n             N->left = _setBST(T, N->left, val);\n        }\n        return N;\n    }\n    else\n    {\n        BTreeNode *node = addBinaryTreeNode(val);\n        ++T->nodeNum;\n        return node;\n    }\n}\n\nvoid setBST(BTree *T, Element val)\n{\n    T->root = _setBST(T, T->root, val);\n}\n\nstatic void _S_BSTNode(BTreeNode *node, Element val)\n{\n    if (node)\n    {\n        if (val < node->data)\n        {\n            _S_BSTNode(node->left, val);\n        }\n        else if (val > node->data)\n        {\n            _S_BSTNode(node->right, val);\n        }\n        else\n        {\n            printf("\u627e\u5230\u4e86! %d \\n", node->data);\n        }\n    }\n    else\n    {\n        printf("\u6ca1\u6709\u627e\u5230 val = %d\\n", val);\n    }\n}\n\nvoid searchBSTNode(BTree *T, Element val)\n{\n    if (T)\n    {\n        _S_BSTNode(T->root, val);\n    }\n}\n\nstatic BTreeNode *_delBSTNode_S_mae(BTreeNode *node, Element val)\n{\n    // \u4e2d\u5e8f\u904d\u5386, \u5bfb\u627e\u503cval \u7684\u524d\u9a71\u7ed3\u70b9 (md \u5b9e\u9645\u4e0a\u53ea\u5269\u4e0b\u5de6\u5de6\u5de6\u8fd9\u4e2a\u8fc7\u7a0b)\n    while (node->right)\n    {\n        node = node->right;\n    }\n\n    return node;\n}\n\nstatic BTreeNode *_delBSTNode(BTreeNode *node, Element val)\n{\n    if (node)\n    {\n        if (val < node->data)\n        {\n            node->left = _delBSTNode(node->left, val);\n        }\n        else if (val > node->data)\n        {\n            node->right = _delBSTNode(node->right, val);\n        }\n        else\n        {\n            BTreeNode *tmp = NULL;\n            // \u627e\u5230\u5220\u9664\u7684\u76ee\u6807\n            if (!node->left)\n            {\n                // \u5982\u679c\u5de6\u5b50\u6811\u4e3a\u7a7a, \u90a3\u4e48\u5ea6\u4e00\u70b9\u5c0f\u4e8e2\n                // \u4e0d\u8981\u7406\u4f1a\u5ea6\u4e3a0\u8fd8\u662f1, \u56e0\u4e3a\u5982\u679c\u662f1, \u90a3\u4e48\u6211\u62ff\u53f3\u5b50\u6811\u4e3a\u65b0\u7ed3\u70b9, \u90a3\u4e5f\u6ca1\u6709\u95ee\u9898\n                // \u4e3a0\u5c31\u662f\u62ffNULL\u561b~\n                tmp = node->right;\n                free(node);\n                return tmp;\n            }\n\n            if (!node->right)\n            {\n                // \u5982\u679c\u53f3\u5b50\u6811\u4e3a\u7a7a, \u90a3\u4e48\u5ea6\u4e00\u70b9\u5c0f\u4e8e2\n                // \u540c\u4e0a\n                tmp = node->left;\n                free(node);\n                return tmp;\n            }\n            // \u5ea6\u4e3a 2 \u7684\u60c5\u51b5\n            // \u67e5\u627e\u524d\u9a71\u7ed3\u70b9\u7684\n            tmp = _delBSTNode_S_mae(node->left, val);\n            node->data = tmp->data;\n            node->left = _delBSTNode(node->left, tmp->data);\n        }\n        return node;\n    }\n    else\n    {\n        printf("\u6ca1\u6709\u627e\u5230 %d \u7684\u5566!\\n", val);\n        return NULL;\n    }\n}\n\nvoid delBSTNode(BTree *T, Element val)\n{\n    /*\n    * \u5220\u9664\u4e8c\u53c9\u641c\u7d22\u6811\u7684\u67d0\u4e2a\u7ed3\u70b9\n    * \u5982\u679c\u8fd9\u4e2a\u7ed3\u70b9\u7684\u5ea6 \u4e3a 0, 1 \u90a3\u4e48\n    *   0 \u7684\u968f\u4fbf\u62ff\u4e2a\u5b50\u6811(NULL)\u4f5c\u4e3a\u65b0\u7684\n    *   1 \u5219\u62ff\u90a3\u4e2a\u975e\u7a7a\u5b50\u6811\u4f5c\u4e3a\u65b0\u7684\n    * \n    *   \u5982\u679c\u5ea6\u4e3a 2\n    *       \u90a3\u4e48\u9700\u8981\u5bfb\u627e\u5b83\u7684 \u524d\u9a71\u7ed3\u70b9 \u6216\u8005 \u540e\u7ee7\u7ed3\u70b9 (\u53ef\u4ee5\u901a\u8fc7\u4e2d\u5e8f\u904d\u5386\u5bfb\u627e\u4e0e\u8fd9\u4e2a\u503c\u76f8\u90bb\u7684\u5373\u662f\u5566)\n    *       \u7136\u540e, \u5c06 \u524d\u9a71/\u540e\u7ee7\u7ed3\u70b9\u7684\u503c\u8d4b\u503c\u7ed9 \u5ea6\u4e3a\u4e8c\u7684\u7ed3\u70b9(\u8f6c\u79fb\u4ec7\u6068), \u7136\u540e\u4ece\u5ea6\u4e3a2\u8fd9\u4e2a\u7ed3\u70b9\u7684 \u4e0b\u4e00\u4e2a\u7ed3\u70b9\n    *       \u5373 \u524d\u9a71/\u540e\u7ee7(\u9009\u62e9\u5176\u4e00, \u4e0a\u540c), \u5f00\u59cb\u5bfb\u627e\u8fd9\u4e2a\u503c, \u5e76\u4e14\u5bf9\u5bfb\u627e\u5230\u7684\u8fd9\u4e2a\u503c\u7684\u7ed3\u70b9\u8fdb\u884c\u5220\u9664\n    *       \u88ab\u627e\u5230\u7684\u7ed3\u70b9\u7684\u5ea6\u4e00\u5b9a\u5c0f\u4e8e 2 !\n    *           # \u4e3a\u4f55? \n    *               \u56e0\u4e3a\u4e2d\u5e8f\u904d\u5386\u7684 \u524d\u9a71/\u540e\u7ee7 \u4e00\u5b9a\u662f\u56e0\u4e3a\u5ea6 < 2\u624d\u51fa\u73b0\u7684\n    *               \u4e0d\u7136\u5c31\u4e00\u76f4 node = node.left \u4e86(\u5de6\u5de6\u5de6...)\n    * */\n    // \u672c\u4ee3\u7801\u4ee5\u524d\u9a71\u7ed3\u70b9\u4e3a\u4f8b\u5b50\n    T->root = _delBSTNode(T->root, val);\n}\n\nstatic void _putBST(BTreeNode *N)\n{\n    if (N)\n    {\n        _putBST(N->left);\n        printf("%d\\t", N->data);\n        _putBST(N->right);\n    }\n}\n\nvoid putBST(BTree *T)\n{\n    _putBST(T->root);\n}\n\nstatic void _freeBT(BTreeNode *node)\n{\n    if (node)\n    {\n        _freeBT(node->left);\n        _freeBT(node->right);\n        free(node);\n    }\n}\n\nvoid freeBinaryTree(BTree **T)\n{\n    _freeBT((*T)->root);\n    free(*T);\n    *T = NULL;\n}\n\nvoid text_01(void)\n{\n    Element data[] = {1, 4, 3, 3, 2, 2, 3, 0, 7, 2, 1};\n    int len = sizeof(data) / sizeof(data[0]);\n    BTree *T_head = binaryTreeInitialization();\n    for (int i = 0; i < len; ++i)\n    {\n        setBST(T_head, data[i]);\n    }\n    putBST(T_head);\n    putchar(\'\\n\');\n    searchBSTNode(T_head, 1);\n    searchBSTNode(T_head, 999);\n    delBSTNode(T_head, 1);\n    delBSTNode(T_head, 64);\n    putBST(T_head);\n    putchar(\'\\n\');\n    freeBinaryTree(&T_head);\n}\n\nint main(void)\n{\n    // \u4e8c\u53c9\u641c\u7d22\u6811(BST) \u4e5f\u79f0 \u4e8c\u53c9\u6392\u5e8f\u6811 / \u4e8c\u53c9\u67e5\u627e\u6811\n    text_01();\n    \n    return 0;\n}\n'})}),"\n",(0,t.jsx)(e.h3,{id:"\u975e\u9012\u5f52",children:"\u975e\u9012\u5f52"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-C",children:'#include <stdio.h>\n#include <stdlib.h>\n\ntypedef int Element;\n\ntypedef struct _B_tree_node\n{\n    Element data;\n    struct _B_tree_node *left;  // \u5de6\u5b50\u6811\n    struct _B_tree_node *right; // \u53f3\u5b50\u6811\n} BTreeNode;\n\ntypedef struct\n{\n    BTreeNode *root;            // \u6811\u6839\n    int nodeNum;                // \u7ed3\u70b9\u6570\n} BTree;\n\nBTree *binaryTreeInitialization(void);              // \u521d\u59cb\u5316\u6811\u5934\nBTreeNode *addBinaryTreeNode(Element e);            // \u521b\u5efa\u4e00\u4e2a\u8282\u70b9\nvoid setBST(BTree *T, Element val);                 // \u4e8c\u53c9\u641c\u7d22\u63d2\u5165\nvoid searchBSTNode(BTree *T, Element val);          // \u4e8c\u53c9\u641c\u7d22\u6811\u7684\u67e5\u627e\nvoid delBSTNode(BTree *T, Element val);             // \u5220\u9664\u4e8c\u53c9\u641c\u7d22\u6811\u7684\u67d0\u4e2a\u7ed3\u70b9\nvoid putBST(BTree *T);                              // \u4e2d\u5e8f\u904d\u5386\u6811\nvoid freeBinaryTree(BTree **T);                     // \u91ca\u653e\u6811   <\u540e\u5e8f\u904d\u5386>\n\nvoid text_01(void);                                 // \u6d4b\u8bd5\u4ee3\u7801\n\nBTreeNode *addBinaryTreeNode(Element e)\n{\n    BTreeNode *node = (BTreeNode *)malloc(sizeof(BTreeNode));\n    if (!node)\n    {\n        printf("TREE_NODE malloc Error!\\n");\n        return NULL; \n    }\n    node->data = e;\n    node->left = node->right = NULL;\n    return node;\n}\n\n\nBTree *binaryTreeInitialization(void)\n{\n    BTree *T = (BTree *)malloc(sizeof(BTree));\n    if (!T)\n    {\n        printf("TREE_ROOT malloc Error!\\n");\n        return NULL;   \n    }\n    T->nodeNum = 0;\n    T->root = NULL;\n    return T;\n}\n\nvoid setBST(BTree *T, Element val)\n{\n    // \u63d2\u5165\n    BTreeNode *mae = NULL;\n    BTreeNode *p = T->root;\n    // \u5224\u65ad\u662f\u5426\u6709\u6839, \u6ca1\u6709\u9700\u8981\u6811\u5934\u6307\u5411\u6839\n    if (!p)\n    {\n        T->root = addBinaryTreeNode(val);\n        ++T->nodeNum;\n        return;\n    }\n\n    while (p)\n    {\n        mae = p;\n        if (p->data > val)\n        {\n            p = p->left;\n        }\n        else if (p->data < val)\n        {\n            p = p->right;\n        }\n        else\n        {\n            // \u503c\u4e0d\u80fd\u76f8\u540c\n            return;\n        }\n    }\n\n    ++T->nodeNum;\n    if (mae->data > val)\n    {\n        mae->left = addBinaryTreeNode(val);\n    }\n    else\n    {\n        mae->right = addBinaryTreeNode(val);\n    }\n}\n\nvoid searchBSTNode(BTree *T, Element val)\n{\n    // \u67e5\u627e\n    BTreeNode *p = T->root;\n    while (p)\n    {\n        if (p->data > val)\n        {\n            p = p->left;\n        }\n        else if (p->data < val)\n        {\n            p = p->right;\n        }\n        else\n        {\n            // \u627e\u5230\u4e86\n            printf("\u5b58\u5728\u8be5\u7ed3\u70b9: %d\\n", val);\n            return;\n        }\n    }\n\n    printf("\u8be5\u7ed3\u70b9\u4e0d\u5b58\u5728!\\n");\n}\n\nstatic BTreeNode *_delBSTNode_S_mae(BTreeNode *node, Element val)\n{\n    // \u4e2d\u5e8f\u904d\u5386, \u5bfb\u627e\u503cval \u7684\u524d\u9a71\u7ed3\u70b9 (md \u5b9e\u9645\u4e0a\u53ea\u5269\u4e0b\u5de6\u5de6\u5de6\u8fd9\u4e2a\u8fc7\u7a0b)\n    while (node->right)\n    {\n        node = node->right;\n    }\n\n    return node;\n}\n\nvoid delBSTNode(BTree *T, Element val)\n{\n    /*\n    * \u5220\u9664\u4e8c\u53c9\u641c\u7d22\u6811\u7684\u67d0\u4e2a\u7ed3\u70b9\n    * \u5982\u679c\u8fd9\u4e2a\u7ed3\u70b9\u7684\u5ea6 \u4e3a 0, 1 \u90a3\u4e48\n    *   0 \u7684\u968f\u4fbf\u62ff\u4e2a\u5b50\u6811(NULL)\u4f5c\u4e3a\u65b0\u7684\n    *   1 \u5219\u62ff\u90a3\u4e2a\u975e\u7a7a\u5b50\u6811\u4f5c\u4e3a\u65b0\u7684\n    * \n    *   \u5982\u679c\u5ea6\u4e3a 2\n    *       \u90a3\u4e48\u9700\u8981\u5bfb\u627e\u5b83\u7684 \u524d\u9a71\u7ed3\u70b9 \u6216\u8005 \u540e\u7ee7\u7ed3\u70b9 (\u53ef\u4ee5\u901a\u8fc7\u4e2d\u5e8f\u904d\u5386\u5bfb\u627e\u4e0e\u8fd9\u4e2a\u503c\u76f8\u90bb\u7684\u5373\u662f\u5566)\n    *       \u7136\u540e, \u5c06 \u524d\u9a71/\u540e\u7ee7\u7ed3\u70b9\u7684\u503c\u8d4b\u503c\u7ed9 \u5ea6\u4e3a\u4e8c\u7684\u7ed3\u70b9(\u8f6c\u79fb\u4ec7\u6068), \u7136\u540e\u4ece\u5ea6\u4e3a2\u8fd9\u4e2a\u7ed3\u70b9\u7684 \u4e0b\u4e00\u4e2a\u7ed3\u70b9\n    *       \u5373 \u524d\u9a71/\u540e\u7ee7(\u9009\u62e9\u5176\u4e00, \u4e0a\u540c), \u5f00\u59cb\u5bfb\u627e\u8fd9\u4e2a\u503c, \u5e76\u4e14\u5bf9\u5bfb\u627e\u5230\u7684\u8fd9\u4e2a\u503c\u7684\u7ed3\u70b9\u8fdb\u884c\u5220\u9664\n    *       \u88ab\u627e\u5230\u7684\u7ed3\u70b9\u7684\u5ea6\u4e00\u5b9a\u5c0f\u4e8e 2 !\n    *           # \u4e3a\u4f55? \n    *               \u56e0\u4e3a\u4e2d\u5e8f\u904d\u5386\u7684 \u524d\u9a71/\u540e\u7ee7 \u4e00\u5b9a\u662f\u56e0\u4e3a\u5ea6 < 2\u624d\u51fa\u73b0\u7684\n    *               \u4e0d\u7136\u5c31\u4e00\u76f4 node = node.left \u4e86(\u5de6\u5de6\u5de6...)\n    * */\n    // \u672c\u4ee3\u7801\u4ee5 \u6839\u7ed3\u70b9\u627e\u540e\u7ee7, \u975e\u6839\u7ed3\u70b9\u627e\u524d\u9a71 \u4e3a\u4f8b\u5b50\n    BTreeNode *mae = NULL;\n    BTreeNode *p = T->root;\n\n    // \u5bfb\u627e\n    while (p)\n    {\n        if (p->data > val)\n        {\n            mae = p;\n            p = p->left;\n        }\n        else if (p->data < val)\n        {\n            mae = p;\n            p = p->right;\n        }\n        else\n        {\n            break;\n        }\n    }\n\n    if (p) // \u4e3a\u7a7a\u8868\u793a\u627e\u4e0d\u5230\n    {\n        if (mae)\n        {\n            // \u5224\u65ad\u5f85\u5220\u9664\u7ed3\u70b9\u7684\u5ea6\u662f\u591a\u5c11\n            if (p->left == NULL)\n            {\n                if (mae->left == p)\n                {\n                    mae->left = p->right;\n                }\n                else\n                {\n                    mae->right = p->right;\n                }\n                free(p);\n            }\n            else if (p->right == NULL)\n            {\n                if (mae->left == p)\n                {\n                    mae->left = p->left;\n                }\n                else\n                {\n                    mae->right = p->left;\n                }\n                free(p);\n            }\n            else    // \u5ea6\u4e3a2\n            {\n                // \u627e\u524d\u9a71\u7ed3\u70b9 (\u5de6\u5b50\u6811\u5c31\u662f\u4e86) \u4f46\u662f\u8981\u5c0f\u5fc3: \u524d\u9a71\u5ea6\u4e3a2\u7684\u60c5\u51b5\n                // \u89e3\u51b3\u65b9\u6cd5: \u65e0\u9650\u66ff\u6362, \u76f4\u5230\u5ea6\u4e0d\u4e3a2\u5373\u53ef\n                /*\n                *               7   <-- \u5220\u9664 \u7ed3\u70b9"7"\n                *              /\n                *             5\n                *            / \\\n                *           4   6\n                * */\n                // \u9700\u8981\u662f p\u5de6, \u7136\u540e\u53f3\u53f3\u53f3...\n                BTreeNode *q = p->left;\n                BTreeNode *tmp = NULL;\n                while (q->right)\n                {\n                    tmp = q;\n                    q = q->right;\n                }\n\n                p->data = q->data;\n                tmp->right = q->left;\n                free(q);\n            }\n        }\n        else\n        {   // \u4e3a\u6839\u7ed3\u70b9\n            if (p->left == NULL)\n            {\n                T->root = p->right;\n                free(p);\n            }\n            else if (p->right == NULL)\n            {\n                T->root = p->left;\n                free(p);\n            }\n            else    // \u5ea6\u4e3a2\n            {\n                // \u627e\u540e\u7ee7\u7ed3\u70b9\n                BTreeNode *q = p->right;\n                while (q->left)\n                {\n                    mae = q;\n                    q = q->left;\n                }\n                p->data = q->data;\n                if (mae)\n                {\n                    mae->left = q->left;\n                }\n                else\n                {\n                    T->root->left = q->left;\n                }\n                free(q);\n            }\n        }\n        --T->nodeNum;\n    }\n    else\n    {\n        printf("\u6ca1\u6709\u627e\u5230: %d\\n", val);\n    }\n}\n\nstatic void _putBST(BTreeNode *N)\n{\n    if (N)\n    {\n        _putBST(N->left);\n        printf("%d\\t", N->data);\n        _putBST(N->right);\n    }\n}\n\nvoid putBST(BTree *T)\n{\n    _putBST(T->root);\n}\n\nstatic void _freeBT(BTreeNode *node)\n{\n    if (node)\n    {\n        _freeBT(node->left);\n        _freeBT(node->right);\n        free(node);\n    }\n}\n\nvoid freeBinaryTree(BTree **T)\n{\n    _freeBT((*T)->root);\n    free(*T);\n    *T = NULL;\n}\n\nvoid text_01(void)\n{\n    Element data[] = {1,2,3,4,100,150,50,40,60,55,65,54,57,65,61,67,78};\n    int len = sizeof(data) / sizeof(data[0]);\n    BTree *T_head = binaryTreeInitialization();\n    for (int i = 0; i < len; ++i)\n    {\n        setBST(T_head, data[i]);\n    }\n    putBST(T_head);\n    putchar(\'\\n\');\n    searchBSTNode(T_head, 3);\n    searchBSTNode(T_head, 999);\n    delBSTNode(T_head, 7);\n    delBSTNode(T_head, 100);\n    putBST(T_head);\n    putchar(\'\\n\');\n    freeBinaryTree(&T_head);\n}\n\nint main(void)\n{\n    // \u4e8c\u53c9\u641c\u7d22\u6811(BST) \u4e5f\u79f0 \u4e8c\u53c9\u6392\u5e8f\u6811 / \u4e8c\u53c9\u67e5\u627e\u6811\n    // \u975e\u9012\u5f52\u7684\u5b9e\u73b0\n    text_01();\n    \n    return 0;\n}\n'})})]})}function h(n={}){const{wrapper:e}={...(0,i.R)(),...n.components};return e?(0,t.jsx)(e,{...n,children:(0,t.jsx)(T,{...n})}):T(n)}}}]);