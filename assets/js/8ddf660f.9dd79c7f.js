"use strict";(self.webpackChunkhx_loli=self.webpackChunkhx_loli||[]).push([[76559],{28453:(n,e,t)=>{t.d(e,{R:()=>r,x:()=>o});var i=t(96540);const s={},a=i.createContext(s);function r(n){const e=i.useContext(a);return i.useMemo((function(){return"function"==typeof n?n(e):{...e,...n}}),[e,n])}function o(n){let e;return e=n.disableParentContext?"function"==typeof n.components?n.components(s):n.components||s:r(n.components),i.createElement(a.Provider,{value:e},n.children)}},45297:(n,e,t)=>{t.r(e),t.d(e,{assets:()=>c,contentTitle:()=>o,default:()=>x,frontMatter:()=>r,metadata:()=>i,toc:()=>l});const i=JSON.parse('{"id":"\u8ba1\u4f6c\u5e38\u8b58/\u6570\u636e\u7ed3\u6784\u4e0e\u7b97\u6cd5/\u3010\u677f\u5b50\u3011\u7b97\u6cd5\u6a21\u7248/\u5e38\u7528\u6570\u636e\u7ed3\u6784/\u5e76\u67e5\u96c6\u4e36/index","title":"\u5e76\u67e5\u96c6","description":"\u4e00\u3001\u677f\u5b50\u5408\u96c6","source":"@site/docs/001-\u8ba1\u4f6c\u5e38\u8b58/001-\u6570\u636e\u7ed3\u6784\u4e0e\u7b97\u6cd5/014-\u3010\u677f\u5b50\u3011\u7b97\u6cd5\u6a21\u7248/005-\u5e38\u7528\u6570\u636e\u7ed3\u6784/006-\u5e76\u67e5\u96c6\u4e36/index.md","sourceDirName":"001-\u8ba1\u4f6c\u5e38\u8b58/001-\u6570\u636e\u7ed3\u6784\u4e0e\u7b97\u6cd5/014-\u3010\u677f\u5b50\u3011\u7b97\u6cd5\u6a21\u7248/005-\u5e38\u7528\u6570\u636e\u7ed3\u6784/006-\u5e76\u67e5\u96c6\u4e36","slug":"/\u8ba1\u4f6c\u5e38\u8b58/\u6570\u636e\u7ed3\u6784\u4e0e\u7b97\u6cd5/\u3010\u677f\u5b50\u3011\u7b97\u6cd5\u6a21\u7248/\u5e38\u7528\u6570\u636e\u7ed3\u6784/\u5e76\u67e5\u96c6\u4e36/","permalink":"/HXLoLi/docs/\u8ba1\u4f6c\u5e38\u8b58/\u6570\u636e\u7ed3\u6784\u4e0e\u7b97\u6cd5/\u3010\u677f\u5b50\u3011\u7b97\u6cd5\u6a21\u7248/\u5e38\u7528\u6570\u636e\u7ed3\u6784/\u5e76\u67e5\u96c6\u4e36/","draft":false,"unlisted":false,"editUrl":"https://github.com/HengXin666/HXLoLi/edit/main/docs/001-\u8ba1\u4f6c\u5e38\u8b58/001-\u6570\u636e\u7ed3\u6784\u4e0e\u7b97\u6cd5/014-\u3010\u677f\u5b50\u3011\u7b97\u6cd5\u6a21\u7248/005-\u5e38\u7528\u6570\u636e\u7ed3\u6784/006-\u5e76\u67e5\u96c6\u4e36/index.md","tags":[],"version":"current","lastUpdatedBy":"Heng_Xin_666","lastUpdatedAt":1745851959000,"frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"\u5b57\u5178\u6811\u4e36","permalink":"/HXLoLi/docs/\u8ba1\u4f6c\u5e38\u8b58/\u6570\u636e\u7ed3\u6784\u4e0e\u7b97\u6cd5/\u3010\u677f\u5b50\u3011\u7b97\u6cd5\u6a21\u7248/\u5e38\u7528\u6570\u636e\u7ed3\u6784/\u5b57\u5178\u6811\u4e36/"},"next":{"title":"\u6811\u72b6\u6570\u7ec4","permalink":"/HXLoLi/docs/\u8ba1\u4f6c\u5e38\u8b58/\u6570\u636e\u7ed3\u6784\u4e0e\u7b97\u6cd5/\u3010\u677f\u5b50\u3011\u7b97\u6cd5\u6a21\u7248/\u5e38\u7528\u6570\u636e\u7ed3\u6784/\u6811\u72b6\u6570\u7ec4/"}}');var s=t(74848),a=t(28453);const r={},o="\u5e76\u67e5\u96c6",c={},l=[{value:"\u4e00\u3001\u677f\u5b50\u5408\u96c6",id:"\u4e00\u677f\u5b50\u5408\u96c6",level:2},{value:"1.1 \u57fa\u7840\u677f\u5b50 ( cp 0\\times3F )",id:"11-\u57fa\u7840\u677f\u5b50--cp-0times3f-",level:3},{value:"1.2 \u6781\u7b80\u677f\u5b50",id:"12-\u6781\u7b80\u677f\u5b50",level:3},{value:"\u4e8c\u3001\u9898\u578b",id:"\u4e8c\u9898\u578b",level:2},{value:"2.0 \u88f8\u9898",id:"20-\u88f8\u9898",level:3},{value:"2.1 \u5bf9\u4e8e\u70b9",id:"21-\u5bf9\u4e8e\u70b9",level:3}];function d(n){const e={a:"a",annotation:"annotation",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",math:"math",mi:"mi",mn:"mn",mo:"mo",mrow:"mrow",p:"p",pre:"pre",semantics:"semantics",span:"span",strong:"strong",ul:"ul",...(0,a.R)(),...n.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(e.header,{children:(0,s.jsx)(e.h1,{id:"\u5e76\u67e5\u96c6",children:"\u5e76\u67e5\u96c6"})}),"\n",(0,s.jsx)(e.h2,{id:"\u4e00\u677f\u5b50\u5408\u96c6",children:"\u4e00\u3001\u677f\u5b50\u5408\u96c6"}),"\n",(0,s.jsxs)(e.h3,{id:"11-\u57fa\u7840\u677f\u5b50--cp-0times3f-",children:["1.1 \u57fa\u7840\u677f\u5b50 ( cp ",(0,s.jsxs)(e.span,{className:"katex",children:[(0,s.jsx)(e.span,{className:"katex-mathml",children:(0,s.jsx)(e.math,{xmlns:"http://www.w3.org/1998/Math/MathML",children:(0,s.jsxs)(e.semantics,{children:[(0,s.jsxs)(e.mrow,{children:[(0,s.jsx)(e.mn,{children:"0"}),(0,s.jsx)(e.mo,{children:"\xd7"}),(0,s.jsx)(e.mn,{children:"3"}),(0,s.jsx)(e.mi,{children:"F"})]}),(0,s.jsx)(e.annotation,{encoding:"application/x-tex",children:"0\\times3F"})]})})}),(0,s.jsxs)(e.span,{className:"katex-html","aria-hidden":"true",children:[(0,s.jsxs)(e.span,{className:"base",children:[(0,s.jsx)(e.span,{className:"strut",style:{height:"0.7278em",verticalAlign:"-0.0833em"}}),(0,s.jsx)(e.span,{className:"mord",children:"0"}),(0,s.jsx)(e.span,{className:"mspace",style:{marginRight:"0.2222em"}}),(0,s.jsx)(e.span,{className:"mbin",children:"\xd7"}),(0,s.jsx)(e.span,{className:"mspace",style:{marginRight:"0.2222em"}})]}),(0,s.jsxs)(e.span,{className:"base",children:[(0,s.jsx)(e.span,{className:"strut",style:{height:"0.6833em"}}),(0,s.jsx)(e.span,{className:"mord",children:"3"}),(0,s.jsx)(e.span,{className:"mord mathnormal",style:{marginRight:"0.13889em"},children:"F"})]})]})]})," )"]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-C++",children:"class UnionFind {\n    vector<int> fa; // \u4ee3\u8868\u5143\n    vector<int> sz; // \u96c6\u5408\u5927\u5c0f\n\npublic:\n    int cc; // \u8fde\u901a\u5757\u4e2a\u6570\n\n    UnionFind(int n) : fa(n), sz(n, 1), cc(n) {\n        // \u4e00\u5f00\u59cb\u6709 n \u4e2a\u96c6\u5408 {0}, {1}, ..., {n-1}\n        // \u96c6\u5408 i \u7684\u4ee3\u8868\u5143\u662f\u81ea\u5df1\uff0c\u5927\u5c0f\u4e3a 1\n        ranges::iota(fa, 0); // iota(fa.begin(), fa.end(), 0);\n    }\n\n    // \u8fd4\u56de x \u6240\u5728\u96c6\u5408\u7684\u4ee3\u8868\u5143\n    // \u540c\u65f6\u505a\u8def\u5f84\u538b\u7f29\uff0c\u4e5f\u5c31\u662f\u628a x \u6240\u5728\u96c6\u5408\u4e2d\u7684\u6240\u6709\u5143\u7d20\u7684 fa \u90fd\u6539\u6210\u4ee3\u8868\u5143\n    int find(int x) {\n        // \u5982\u679c fa[x] == x\uff0c\u5219\u8868\u793a x \u662f\u4ee3\u8868\u5143\n        if (fa[x] != x) {\n            fa[x] = find(fa[x]); // fa \u6539\u6210\u4ee3\u8868\u5143\n        }\n        return fa[x];\n    }\n\n    // \u5224\u65ad x \u548c y \u662f\u5426\u5728\u540c\u4e00\u4e2a\u96c6\u5408\n    bool is_same(int x, int y) {\n        // \u5982\u679c x \u7684\u4ee3\u8868\u5143\u548c y \u7684\u4ee3\u8868\u5143\u76f8\u540c\uff0c\u90a3\u4e48 x \u548c y \u5c31\u5728\u540c\u4e00\u4e2a\u96c6\u5408\n        // \u8fd9\u5c31\u662f\u4ee3\u8868\u5143\u7684\u4f5c\u7528\uff1a\u7528\u6765\u5feb\u901f\u5224\u65ad\u4e24\u4e2a\u5143\u7d20\u662f\u5426\u5728\u540c\u4e00\u4e2a\u96c6\u5408\n        return find(x) == find(y);\n    }\n\n    // \u628a from \u6240\u5728\u96c6\u5408\u5408\u5e76\u5230 to \u6240\u5728\u96c6\u5408\u4e2d\n    // \u8fd4\u56de\u662f\u5426\u5408\u5e76\u6210\u529f\n    bool merge(int from, int to) {\n        int x = find(from), y = find(to);\n        if (x == y) { // from \u548c to \u5728\u540c\u4e00\u4e2a\u96c6\u5408\uff0c\u4e0d\u505a\u5408\u5e76\n            return false;\n        }\n        fa[x] = y; // \u5408\u5e76\u96c6\u5408\u3002\u4fee\u6539\u540e\u5c31\u53ef\u4ee5\u8ba4\u4e3a from \u548c to \u5728\u540c\u4e00\u4e2a\u96c6\u5408\u4e86\n        sz[y] += sz[x]; // \u66f4\u65b0\u96c6\u5408\u5927\u5c0f\uff08\u6ce8\u610f\u96c6\u5408\u5927\u5c0f\u4fdd\u5b58\u5728\u4ee3\u8868\u5143\u4e0a\uff09\n        // \u65e0\u9700\u66f4\u65b0 sz[x]\uff0c\u56e0\u4e3a\u6211\u4eec\u4e0d\u7528 sz[x] \u800c\u662f\u7528 sz[find(x)] \u83b7\u53d6\u96c6\u5408\u5927\u5c0f\uff0c\u4f46 find(x) == y\uff0c\u6211\u4eec\u4e0d\u4f1a\u518d\u8bbf\u95ee sz[x]\n        cc--; // \u6210\u529f\u5408\u5e76\uff0c\u8fde\u901a\u5757\u4e2a\u6570\u51cf\u4e00\n        return true;\n    }\n\n    // \u8fd4\u56de x \u6240\u5728\u96c6\u5408\u7684\u5927\u5c0f\n    int get_size(int x) {\n        return sz[find(x)]; // \u96c6\u5408\u5927\u5c0f\u4fdd\u5b58\u5728\u4ee3\u8868\u5143\u4e0a\n    }\n};\n"})}),"\n",(0,s.jsx)(e.h3,{id:"12-\u6781\u7b80\u677f\u5b50",children:"1.2 \u6781\u7b80\u677f\u5b50"}),"\n",(0,s.jsx)(e.p,{children:"\u7b80\u5355\u677f\u5b50, \u4e0d\u9700\u8981\u8ba1\u7b97\u96c6\u5408\u5927\u5c0f\u3001\u8fde\u901a\u5757\u6570\u7684"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-C++",children:"int n = /* \u5143\u7d20\u4e2a\u6570 */;\nvector<int> fa(n);\niota(fa.begin(), fa.end(), 0);\nauto find = [&](this auto&& find, int x) -> int {\n    return x != fa[x] ? fa[x] = find(fa[x]) : x;\n};\nauto isSame = [&](int x, int y) {\n    return find(x) == find(y);\n};\nauto merge = [&](int from, int to) {\n    int x = find(from);\n    int y = find(to);\n    if (x == y)\n        return;\n    fa[x] = y;\n};\n"})}),"\n",(0,s.jsx)(e.h2,{id:"\u4e8c\u9898\u578b",children:"\u4e8c\u3001\u9898\u578b"}),"\n",(0,s.jsx)(e.h3,{id:"20-\u88f8\u9898",children:"2.0 \u88f8\u9898"}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsx)(e.li,{children:"\u7565"}),"\n"]}),"\n",(0,s.jsx)(e.h3,{id:"21-\u5bf9\u4e8e\u70b9",children:"2.1 \u5bf9\u4e8e\u70b9"}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsx)(e.li,{children:(0,s.jsx)(e.a,{href:"https://leetcode.cn/problems/most-stones-removed-with-same-row-or-column/",children:"947. \u79fb\u9664\u6700\u591a\u7684\u540c\u884c\u6216\u540c\u5217\u77f3\u5934"})}),"\n"]}),"\n",(0,s.jsxs)(e.p,{children:["\u5bf9\u4e8e",(0,s.jsx)(e.code,{children:"\u6a2a\u5750\u6807"}),(0,s.jsx)(e.strong,{children:"\u6216"}),(0,s.jsx)(e.code,{children:"\u7eb5\u5750\u6807"}),"\u76f8\u7b49\u5373\u53ef\u5408\u5e76\u7684\u60c5\u51b5, \u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u6570\u636e\u8303\u56f4, \u7136\u540e\u628a\u4e24\u4e2a\u70b9\u5408\u5e76\u4e3a\u4e00\u4e2a\u70b9:"]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-C++",children:"class UnSet {\n    unordered_map<int, int> fa;\n    int cnt = 0;\npublic:\n    int find(int x) {\n        if (!fa.count(x)) {\n            ++cnt; // \u8fde\u901a\u5757\u6570 + 1\n            return fa[x] = x;\n        }\n        return [this](this auto&& _find, int x) -> int {\n            return x == fa[x] ? x : fa[x] = _find(fa[x]);\n        }(x);\n    }\n\n    void merag(int from, int to) {\n        int x = find(from);\n        int y = find(to);\n        if (x == y)\n            return;\n        fa[x] = y;\n        --cnt; // \u5408\u5e76\u4e86, \u8fde\u901a\u5757\u6570 - 1\n    }\n\n    bool isSame(int x, int y) {\n        return find(x) == find(y);\n    }\n\n    int getCnt() const {\n        return cnt;\n    }\n};\n\nclass Solution {\npublic:\n    int removeStones(vector<vector<int>>& stones) {\n        UnSet unset;\n        for (auto const& p : stones) {\n            int x = p[0], y = p[1];\n            // \u8be5\u884c\u548c\u8be5\u5217 \u90fd\u5c5e\u4e8e\u540c\u4e00\u4e2a\u5e76\u67e5\u96c6\n            unset.merag(x + 10001, y);\n            // \u5982\u679c \u884c \u6216\u8005 \u5217 \u76f8\u540c, \u90a3\u5c31\u662f\u4e00\u4e2a\u8fde\u901a\u5757\u7684\n        }\n        // \u603b\u6570 - \u8fde\u901a\u5757\u6570(\u4e00\u4e2a\u8fde\u901a\u5757\u53ea\u9700\u8981\u5269\u4e0b\u4e00\u4e2a\u77f3\u5934) = \u6700\u591a\u53ef\u4ee5\u79fb\u9664\u7684\u77f3\u5b50\u7684\u6570\u91cf\n        return stones.size() - unset.getCnt();\n    }\n};\n"})})]})}function x(n={}){const{wrapper:e}={...(0,a.R)(),...n.components};return e?(0,s.jsx)(e,{...n,children:(0,s.jsx)(d,{...n})}):d(n)}}}]);