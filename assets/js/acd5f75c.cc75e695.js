"use strict";(self.webpackChunkhx_loli=self.webpackChunkhx_loli||[]).push([[45215],{28453:(n,e,t)=>{t.d(e,{R:()=>s,x:()=>c});var S=t(96540);const a={},i=S.createContext(a);function s(n){const e=S.useContext(i);return S.useMemo((function(){return"function"==typeof n?n(e):{...e,...n}}),[e,n])}function c(n){let e;return e=n.disableParentContext?"function"==typeof n.components?n.components(a):n.components||a:s(n.components),S.createElement(i.Provider,{value:e},n.children)}},29155:(n,e,t)=>{t.r(e),t.d(e,{assets:()=>r,contentTitle:()=>c,default:()=>p,frontMatter:()=>s,metadata:()=>S,toc:()=>o});const S=JSON.parse('{"id":"\u8ba1\u4f6c\u5e38\u8b58/\u6570\u636e\u7ed3\u6784\u4e0e\u7b97\u6cd5/\u3010\u6570\u636e\u7ed3\u6784\u3011\u7ebf\u6027\u8868/\u987a\u5e8f\u5b58\u50a8\u7ed3\u6784\u4e36\u52a8\u6001\u957f\u5ea6\u7684\u6570\u7ec4\u6808/index","title":"(\u987a\u5e8f\u5b58\u50a8\u7ed3\u6784)\u52a8\u6001\u957f\u5ea6\u7684\u6570\u7ec4\u6808","description":"\u4ee3\u7801\u5b9e\u73b0","source":"@site/docs/001-\u8ba1\u4f6c\u5e38\u8b58/001-\u6570\u636e\u7ed3\u6784\u4e0e\u7b97\u6cd5/003-\u3010\u6570\u636e\u7ed3\u6784\u3011\u7ebf\u6027\u8868/011-\u987a\u5e8f\u5b58\u50a8\u7ed3\u6784\u4e36\u52a8\u6001\u957f\u5ea6\u7684\u6570\u7ec4\u6808/index.md","sourceDirName":"001-\u8ba1\u4f6c\u5e38\u8b58/001-\u6570\u636e\u7ed3\u6784\u4e0e\u7b97\u6cd5/003-\u3010\u6570\u636e\u7ed3\u6784\u3011\u7ebf\u6027\u8868/011-\u987a\u5e8f\u5b58\u50a8\u7ed3\u6784\u4e36\u52a8\u6001\u957f\u5ea6\u7684\u6570\u7ec4\u6808","slug":"/\u8ba1\u4f6c\u5e38\u8b58/\u6570\u636e\u7ed3\u6784\u4e0e\u7b97\u6cd5/\u3010\u6570\u636e\u7ed3\u6784\u3011\u7ebf\u6027\u8868/\u987a\u5e8f\u5b58\u50a8\u7ed3\u6784\u4e36\u52a8\u6001\u957f\u5ea6\u7684\u6570\u7ec4\u6808/","permalink":"/HXLoLi/docs/\u8ba1\u4f6c\u5e38\u8b58/\u6570\u636e\u7ed3\u6784\u4e0e\u7b97\u6cd5/\u3010\u6570\u636e\u7ed3\u6784\u3011\u7ebf\u6027\u8868/\u987a\u5e8f\u5b58\u50a8\u7ed3\u6784\u4e36\u52a8\u6001\u957f\u5ea6\u7684\u6570\u7ec4\u6808/","draft":false,"unlisted":false,"editUrl":"https://github.com/HengXin666/HXLoLi/edit/main/docs/001-\u8ba1\u4f6c\u5e38\u8b58/001-\u6570\u636e\u7ed3\u6784\u4e0e\u7b97\u6cd5/003-\u3010\u6570\u636e\u7ed3\u6784\u3011\u7ebf\u6027\u8868/011-\u987a\u5e8f\u5b58\u50a8\u7ed3\u6784\u4e36\u52a8\u6001\u957f\u5ea6\u7684\u6570\u7ec4\u6808/index.md","tags":[],"version":"current","lastUpdatedBy":"Heng_Xin_666","lastUpdatedAt":1745851959000,"frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"\u987a\u5e8f\u5b58\u50a8\u7ed3\u6784\u4e36\u56fa\u5b9a\u5927\u5c0f\u7684\u6570\u7ec4\u6808","permalink":"/HXLoLi/docs/\u8ba1\u4f6c\u5e38\u8b58/\u6570\u636e\u7ed3\u6784\u4e0e\u7b97\u6cd5/\u3010\u6570\u636e\u7ed3\u6784\u3011\u7ebf\u6027\u8868/\u987a\u5e8f\u5b58\u50a8\u7ed3\u6784\u4e36\u56fa\u5b9a\u5927\u5c0f\u7684\u6570\u7ec4\u6808/"},"next":{"title":"\u94fe\u5f0f\u5b58\u50a8\u7ed3\u6784\u4e36\u94fe\u5f0f\u6808","permalink":"/HXLoLi/docs/\u8ba1\u4f6c\u5e38\u8b58/\u6570\u636e\u7ed3\u6784\u4e0e\u7b97\u6cd5/\u3010\u6570\u636e\u7ed3\u6784\u3011\u7ebf\u6027\u8868/\u94fe\u5f0f\u5b58\u50a8\u7ed3\u6784\u4e36\u94fe\u5f0f\u6808/"}}');var a=t(74848),i=t(28453);const s={},c="(\u987a\u5e8f\u5b58\u50a8\u7ed3\u6784)\u52a8\u6001\u957f\u5ea6\u7684\u6570\u7ec4\u6808",r={},o=[{value:"\u4ee3\u7801\u5b9e\u73b0",id:"\u4ee3\u7801\u5b9e\u73b0",level:2}];function d(n){const e={code:"code",h1:"h1",h2:"h2",header:"header",pre:"pre",...(0,i.R)(),...n.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(e.header,{children:(0,a.jsx)(e.h1,{id:"\u987a\u5e8f\u5b58\u50a8\u7ed3\u6784\u52a8\u6001\u957f\u5ea6\u7684\u6570\u7ec4\u6808",children:"(\u987a\u5e8f\u5b58\u50a8\u7ed3\u6784)\u52a8\u6001\u957f\u5ea6\u7684\u6570\u7ec4\u6808"})}),"\n",(0,a.jsx)(e.h2,{id:"\u4ee3\u7801\u5b9e\u73b0",children:"\u4ee3\u7801\u5b9e\u73b0"}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-C",children:'#include <stdio.h>\n#include <stdlib.h>\n\n#define OK 1    // \u7a0b\u5e8f\u6b63\u5e38\u8fd0\u884c\n#define ERROR 0 // \u7a0b\u5e8f\u8fd0\u884c\u62a5\u9519\n#define TRUE 1  //\n#define FALSE 0 //\n\n#define STACK_INIT_SIZE 100\n#define STACK_REALLOC_SIZE 4\n\ntypedef int State;      // \u72b6\u6001 OK or ERROR\ntypedef int SElemType;\n\ntypedef struct SqStack\n{\n    SElemType *top;     // \u6808\u9876\n    SElemType *base;    // \u6808\u5e95\n    int stackSize;      // \u6808\u5927\u5c0f(\u5b57\u8282)\n}SqStack;\n\nState initStack(SqStack *S);        // \u521d\u59cb\u5316\u64cd\u4f5c, \u5efa\u7acb\u4e00\u4e2a\u7a7a\u6808\u7684S\nState destroyStack(SqStack *S);     // \u9500\u6bc1\u6808S\nState pushStack(SqStack *S, int e); // \u82e5\u6808S\u5b58\u5728, \u63d2\u5165\u65b0\u5143\u7d20e\u5230\u6808\u4e2d\u5e76\u4e14\u6210\u4e3a\u65b0\u7684\u6808\u9876\u5143\u7d20\nState popStack(SqStack *S, int *e); // \u5220\u9664\u6808\u9876\u5143\u7d20, \u5e76\u7528e\u8fd4\u56de\u5176\u503c \nint StackLen(SqStack S);            // \u8fd4\u56de\u6808\u7684\u957f\u5ea6\n\nState printStack(SqStack S);       // \u5148\u51fa\u5148\u6253\u5370\n\nint StackLen(SqStack S)\n{\n    // \u8fd4\u56de\u6808\u7684\u957f\u5ea6\n    return S.top - S.base;// C\u8bed\u8a00\u306e\u667a\u80fd: \u76f8\u540c\u7c7b\u578b\u7684\u5185\u5b58\u5730\u5740\u76f8\u51cf, \u5f97\u5230\u7684\u4e0d\u662f\u5185\u5b58\u5dee \u800c\u662f \u5185\u5b58\u5dee/sizeof(\u6307\u9488\u7c7b\u578b)\n    // \u5927\u5730\u5740 - \u5c0f\u5730\u5740 \u6b63\u786e\n    // \u5c0f\u5730\u5740 - \u5927\u5730\u5740 \u4e5f\u6b63\u786e, \u53ea\u662f\u4e3a\u8d1f\u6570\u7f62\u4e86\n}\n\nState initStack(SqStack *S)\n{\n    // \u521d\u59cb\u5316\u64cd\u4f5c, \u5efa\u7acb\u4e00\u4e2a\u7a7a\u6808\u7684S\n    S->base = (SElemType *)malloc(STACK_INIT_SIZE * sizeof(SElemType));\n    if (!S->base)\n        return ERROR;\n    S->top = S->base;   // \u6808\u9876\u5c31\u662f\u6808\u5e95\n    S->stackSize = STACK_INIT_SIZE * sizeof(SElemType);\n    return OK;\n}\n\nState pushStack(SqStack *S, int e)\n{\n    // \u82e5\u6808S\u5b58\u5728, \u63d2\u5165\u65b0\u5143\u7d20e\u5230\u6808\u4e2d\u5e76\u4e14\u6210\u4e3a\u65b0\u7684\u6808\u9876\u5143\u7d20\n    if (S->top - S->base >= S->stackSize)\n    {\n        realloc(S->base, S->stackSize + STACK_REALLOC_SIZE * sizeof(SElemType));\n        if (!S->base)\n            return ERROR;\n        S->stackSize = S->stackSize + STACK_REALLOC_SIZE * sizeof(SElemType);\n    }\n\n    *(S->top)++ = e;\n    return OK;\n}\n\nState popStack(SqStack *S, int *e)\n{\n    // \u5220\u9664\u6808\u9876\u5143\u7d20, \u5e76\u7528e\u8fd4\u56de\u5176\u503c \n    if (S->top == S->base)\n        return ERROR;\n    \n    *e = *--S->top;\n    return OK;\n}\n\nState destroyStack(SqStack *S)\n{\n    // \u9500\u6bc1\u6808S\n    free(S->base);// \u56e0\u4e3a\u5185\u5b58\u662fS->base\u7533\u8bf7\u7684, \u6240\u4ee5\u9500\u6bc1\u5b83\u5c31OK\u4e86\n    S->top = NULL;\n    S->base = NULL;\n    S->stackSize = 0;\n    return OK;\n}\n\nState printStack(SqStack S)\n{\n    // \u5148\u51fa\u5148\u6253\u5370\n    while (S.top != S.base)\n    {\n        printf("%d ", *--S.top);\n    }\n\n    return OK;\n}\n\nint main(void)\n{\n    // \u6808 \u5c0f\u7532\u9c7c\u8868\u793a: \u66f4\u7b26\u5408\u6808\u5728\u64cd\u4f5c\u7cfb\u7edf\u4e2d\u7684\u6837\u5b50 \u7684\u8bf4\n    // \u672c\u8d28\u4e0a\u548c\u6570\u7ec4\u6ca1\u6709\u533a\u522b(\u53ea\u662f\u73b0\u5728\u4f7f\u7528\u6307\u9488\u8bbf\u95ee\u6570\u7ec4, \u7136\u540e\u6570\u7ec4\u53ef\u4ee5\u53d8\u957f)\n    SqStack s;\n    int e;\n    initStack(&s);\n    pushStack(&s, 1);\n    pushStack(&s, 2);\n    pushStack(&s, 3);\n    popStack(&s, &e);\n    pushStack(&s, 4);\n    printf("\u5f39\u6808\u4e86 %d, \u76ee\u524d\u6808\u957f %d\\n", e, StackLen(s));\n    printStack(s);\n\n    destroyStack(&s);\n    \n    return 0;\n}\n'})})]})}function p(n={}){const{wrapper:e}={...(0,i.R)(),...n.components};return e?(0,a.jsx)(e,{...n,children:(0,a.jsx)(d,{...n})}):d(n)}}}]);