"use strict";(self.webpackChunkhx_loli=self.webpackChunkhx_loli||[]).push([[57112],{28453:(e,n,t)=>{t.d(n,{R:()=>l,x:()=>s});var i=t(96540);const d={},r=i.createContext(d);function l(e){const n=i.useContext(r);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function s(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(d):e.components||d:l(e.components),i.createElement(r.Provider,{value:n},e.children)}},47280:(e,n,t)=>{t.d(n,{A:()=>i});const i=t.p+"assets/images/Clip_2024-01-27_13-29-26-48cfa09b2de70d88508e78aed78c9f33.png"},51260:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>o,contentTitle:()=>s,default:()=>c,frontMatter:()=>l,metadata:()=>i,toc:()=>h});const i=JSON.parse('{"id":"\u8ba1\u4f6c\u5e38\u8b58/\u6570\u636e\u7ed3\u6784\u4e0e\u7b97\u6cd5/\u3010\u6570\u636e\u7ed3\u6784\u3011\u6811/AVL\u6811/index","title":"\u4e8c\u53c9\u5e73\u8861\u6811 (AVL\u6811)","description":"AVL\u6811\u662f\u6700\u65e9\u88ab\u53d1\u660e\u7684\u81ea\u5e73\u8861\u4e8c\u53c9\u67e5\u627e\u6811\u3002\u5728AVL\u6811\u4e2d\uff0c\u4efb\u4e00\u8282\u70b9\u5bf9\u5e94\u7684\u4e24\u68f5\u5b50\u6811\u7684\u6700\u5927\u9ad8\u5ea6\u5dee\u7684\u7edd\u5bf9\u503c\u4e3a1\uff0c\u56e0\u6b64\u5b83\u4e5f\u88ab\u79f0\u4e3a\u9ad8\u5ea6\u5e73\u8861\u6811\u3002AVL\u6811\u662f\u6839\u636e\u5b83\u7684\u53d1\u660e\u8005G.M.Adelson-Velsky\u548cE.M.Landis\u547d\u540d\u7684\u3002","source":"@site/docs/001-\u8ba1\u4f6c\u5e38\u8b58/001-\u6570\u636e\u7ed3\u6784\u4e0e\u7b97\u6cd5/004-\u3010\u6570\u636e\u7ed3\u6784\u3011\u6811/006-AVL\u6811/index.md","sourceDirName":"001-\u8ba1\u4f6c\u5e38\u8b58/001-\u6570\u636e\u7ed3\u6784\u4e0e\u7b97\u6cd5/004-\u3010\u6570\u636e\u7ed3\u6784\u3011\u6811/006-AVL\u6811","slug":"/\u8ba1\u4f6c\u5e38\u8b58/\u6570\u636e\u7ed3\u6784\u4e0e\u7b97\u6cd5/\u3010\u6570\u636e\u7ed3\u6784\u3011\u6811/AVL\u6811/","permalink":"/HXLoLi/docs/\u8ba1\u4f6c\u5e38\u8b58/\u6570\u636e\u7ed3\u6784\u4e0e\u7b97\u6cd5/\u3010\u6570\u636e\u7ed3\u6784\u3011\u6811/AVL\u6811/","draft":false,"unlisted":false,"editUrl":"https://github.com/HengXin666/HXLoLi/edit/main/docs/001-\u8ba1\u4f6c\u5e38\u8b58/001-\u6570\u636e\u7ed3\u6784\u4e0e\u7b97\u6cd5/004-\u3010\u6570\u636e\u7ed3\u6784\u3011\u6811/006-AVL\u6811/index.md","tags":[],"version":"current","lastUpdatedBy":"Heng_Xin_666","lastUpdatedAt":1745851959000,"frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"\u4e8c\u53c9\u641c\u7d22\u6811","permalink":"/HXLoLi/docs/\u8ba1\u4f6c\u5e38\u8b58/\u6570\u636e\u7ed3\u6784\u4e0e\u7b97\u6cd5/\u3010\u6570\u636e\u7ed3\u6784\u3011\u6811/\u4e8c\u53c9\u641c\u7d22\u6811/"},"next":{"title":"\u5e76\u67e5\u96c6","permalink":"/HXLoLi/docs/\u8ba1\u4f6c\u5e38\u8b58/\u6570\u636e\u7ed3\u6784\u4e0e\u7b97\u6cd5/\u3010\u6570\u636e\u7ed3\u6784\u3011\u6811/\u5e76\u67e5\u96c6/"}}');var d=t(74848),r=t(28453);const l={},s="\u4e8c\u53c9\u5e73\u8861\u6811 (AVL\u6811)",o={},h=[{value:"\u4e8c\u53c9\u641c\u7d22\u6811\u7684\u95ee\u9898",id:"\u4e8c\u53c9\u641c\u7d22\u6811\u7684\u95ee\u9898",level:2},{value:"\u5e73\u8861\u56e0\u5b50",id:"\u5e73\u8861\u56e0\u5b50",level:2},{value:"AVL\u6811\u5931\u8861\u60c5\u51b5\u5206\u6790",id:"avl\u6811\u5931\u8861\u60c5\u51b5\u5206\u6790",level:2},{value:"LL, LR, RR, RL",id:"ll-lr-rr-rl",level:3},{value:"AVL\u6811\u7684\u63d2\u5165\u64cd\u4f5c",id:"avl\u6811\u7684\u63d2\u5165\u64cd\u4f5c",level:2},{value:"\u5e73\u8861\u4e8c\u53c9\u6811\u7684\u5220\u9664\u64cd\u4f5c",id:"\u5e73\u8861\u4e8c\u53c9\u6811\u7684\u5220\u9664\u64cd\u4f5c",level:2},{value:"\u4ee3\u7801\u5b9e\u73b0",id:"\u4ee3\u7801\u5b9e\u73b0",level:2},{value:"\u5224\u65ad\u67d0\u4e2a\u7ed3\u70b9\u7684\u9ad8\u5ea6",id:"\u5224\u65ad\u67d0\u4e2a\u7ed3\u70b9\u7684\u9ad8\u5ea6",level:3},{value:"\u9012\u5f52\u5b9e\u73b0",id:"\u9012\u5f52\u5b9e\u73b0",level:3}];function a(e){const n={annotation:"annotation",blockquote:"blockquote",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",img:"img",li:"li",math:"math",mi:"mi",mo:"mo",mrow:"mrow",mtext:"mtext",p:"p",pre:"pre",semantics:"semantics",span:"span",strong:"strong",ul:"ul",...(0,r.R)(),...e.components};return(0,d.jsxs)(d.Fragment,{children:[(0,d.jsx)(n.header,{children:(0,d.jsx)(n.h1,{id:"\u4e8c\u53c9\u5e73\u8861\u6811-avl\u6811",children:"\u4e8c\u53c9\u5e73\u8861\u6811 (AVL\u6811)"})}),"\n",(0,d.jsxs)(n.blockquote,{children:["\n",(0,d.jsx)(n.p,{children:(0,d.jsx)(n.span,{style:{marginLeft:"30px"},children:"AVL\u6811\u662f\u6700\u65e9\u88ab\u53d1\u660e\u7684\u81ea\u5e73\u8861\u4e8c\u53c9\u67e5\u627e\u6811\u3002\u5728AVL\u6811\u4e2d\uff0c\u4efb\u4e00\u8282\u70b9\u5bf9\u5e94\u7684\u4e24\u68f5\u5b50\u6811\u7684\u6700\u5927\u9ad8\u5ea6\u5dee\u7684\u7edd\u5bf9\u503c\u4e3a1\uff0c\u56e0\u6b64\u5b83\u4e5f\u88ab\u79f0\u4e3a\u9ad8\u5ea6\u5e73\u8861\u6811\u3002AVL\u6811\u662f\u6839\u636e\u5b83\u7684\u53d1\u660e\u8005G.M.Adelson-Velsky\u548cE.M.Landis\u547d\u540d\u7684\u3002"})}),"\n",(0,d.jsx)(n.p,{children:(0,d.jsxs)(n.span,{style:{marginLeft:"30px"},children:["\u67e5\u627e\u3001\u63d2\u5165\u548c\u5220\u9664\u5728\u5e73\u5747\u548c\u6700\u574f\u60c5\u51b5\u4e0b\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u90fd\u662f ",(0,d.jsxs)(n.span,{className:"katex",children:[(0,d.jsx)(n.span,{className:"katex-mathml",children:(0,d.jsx)(n.math,{xmlns:"http://www.w3.org/1998/Math/MathML",children:(0,d.jsxs)(n.semantics,{children:[(0,d.jsxs)(n.mrow,{children:[(0,d.jsx)(n.mi,{children:"O"}),(0,d.jsx)(n.mo,{stretchy:"false",children:"("}),(0,d.jsx)(n.mi,{children:"l"}),(0,d.jsx)(n.mi,{children:"o"}),(0,d.jsx)(n.mi,{children:"g"}),(0,d.jsx)(n.mi,{children:"n"}),(0,d.jsx)(n.mo,{stretchy:"false",children:")"})]}),(0,d.jsx)(n.annotation,{encoding:"application/x-tex",children:"O(logn)"})]})})}),(0,d.jsx)(n.span,{className:"katex-html","aria-hidden":"true",children:(0,d.jsxs)(n.span,{className:"base",children:[(0,d.jsx)(n.span,{className:"strut",style:{height:"1em",verticalAlign:"-0.25em"}}),(0,d.jsx)(n.span,{className:"mord mathnormal",style:{marginRight:"0.02778em"},children:"O"}),(0,d.jsx)(n.span,{className:"mopen",children:"("}),(0,d.jsx)(n.span,{className:"mord mathnormal",style:{marginRight:"0.01968em"},children:"l"}),(0,d.jsx)(n.span,{className:"mord mathnormal",children:"o"}),(0,d.jsx)(n.span,{className:"mord mathnormal",style:{marginRight:"0.03588em"},children:"g"}),(0,d.jsx)(n.span,{className:"mord mathnormal",children:"n"}),(0,d.jsx)(n.span,{className:"mclose",children:")"})]})})]}),"\u3002\u589e\u52a0\u548c\u5220\u9664\u5143\u7d20\u7684\u64cd\u4f5c\u5219\u53ef\u80fd\u9700\u8981\u501f\u7531\u4e00\u6b21\u6216\u591a\u6b21\u6811\u65cb\u8f6c\uff0c\u4ee5\u5b9e\u73b0\u6811\u7684\u91cd\u65b0\u5e73\u8861\u3002"]})}),"\n"]}),"\n",(0,d.jsx)(n.h2,{id:"\u4e8c\u53c9\u641c\u7d22\u6811\u7684\u95ee\u9898",children:"\u4e8c\u53c9\u641c\u7d22\u6811\u7684\u95ee\u9898"}),"\n",(0,d.jsxs)(n.ul,{children:["\n",(0,d.jsx)(n.li,{children:"\u4e8c\u53c9\u641c\u7d22\u6811\u7684\u67e5\u627e\u6548\u7387\u53d6\u51b3\u4e8e\u6811\u7684\u9ad8\u5ea6\uff0c\u56e0\u6b64\u4fdd\u6301\u6811\u7684\u9ad8\u5ea6\u6700\u5c0f\uff0c\u5373\u53ef\u4fdd\u8bc1\u6811\u7684\u67e5\u627e\u6548\u7387\u3002"}),"\n",(0,d.jsx)(n.li,{children:"\u4e8c\u53c9\u641c\u7d22\u6811\u4f1a\u9000\u5316\u6210\u5355\u94fe\u8868\uff0c\u641c\u7d22\u6548\u7387\u964d\u4f4e\u4e3aO(n)"}),"\n"]}),"\n",(0,d.jsxs)(n.blockquote,{children:["\n",(0,d.jsx)(n.p,{children:(0,d.jsx)(n.span,{style:{marginLeft:"30px"},children:"\u4e8c\u53c9\u641c\u7d22\u6811\u4e00\u5b9a\u7a0b\u5ea6\u4e0a\u53ef\u4ee5\u63d0\u9ad8\u641c\u7d22\u6548\u7387\uff0c\u4f46\u662f\u5f53\u539f\u5e8f\u5217\u6709\u5e8f\u65f6\uff0c\u4f8b\u5982\u5e8f\u5217A={1\uff0c2\uff0c3\uff0c4, 5\uff0c6}\uff0c\u6784\u9020\u4e8c\u53c9\u641c\u7d22\u6811\u5982\u56fe\u3002\u4f9d\u636e\u6b64\u5e8f\u5217\u6784\u9020\u7684\u4e8c\u53c9\u641c\u7d22\u6811\u4e3a\u53f3\u659c\u6811\uff0c\u540c\u65f6\u4e8c\u53c9\u6811\u9000\u5316\u6210\u5355\u94fe\u8868\uff0c\u641c\u7d22\u6548\u7387\u964d\u4f4e\u4e3a O(n)\u3002"})}),"\n",(0,d.jsx)(n.p,{children:(0,d.jsx)(n.span,{style:{marginLeft:"30px"},children:"\u4e8c\u53c9\u641c\u7d22\u6811\u7684\u67e5\u627e\u6548\u7387\u53d6\u51b3\u4e8e\u6811\u7684\u9ad8\u5ea6\uff0c\u56e0\u6b64\u4fdd\u6301\u6811\u7684\u9ad8\u5ea6\u6700\u5c0f\uff0c\u5373\u53ef\u4fdd\u8bc1\u6811\u7684\u67e5\u627e\u6548\u7387\u3002"})}),"\n"]}),"\n",(0,d.jsx)(n.h2,{id:"\u5e73\u8861\u56e0\u5b50",children:"\u5e73\u8861\u56e0\u5b50"}),"\n",(0,d.jsxs)(n.ul,{children:["\n",(0,d.jsxs)(n.li,{children:[(0,d.jsx)(n.code,{children:"\u5de6\u5b50\u6811\u4e0e\u53f3\u5b50\u6811\u7684\u9ad8\u5ea6\u5dee"}),"\u5373\u4e3a\u8be5\u8282\u70b9\u7684",(0,d.jsx)(n.strong,{children:"\u5e73\u8861\u56e0\u5b50(BF,BalanceFactor)"})]}),"\n",(0,d.jsxs)(n.li,{children:[(0,d.jsx)(n.code,{children:"\u5e73\u8861\u4e8c\u53c9\u6811"}),"\u4e2d",(0,d.jsx)(n.strong,{children:"\u4e0d\u5b58\u5728"}),"\u5e73\u8861\u56e0\u5b50\u5927\u4e8e1\u7684\u8282\u70b9\u3002"]}),"\n",(0,d.jsxs)(n.li,{children:["\u5728\u4e00\u68f5\u5e73\u8861\u4e8c\u53c9\u6811\u4e2d\uff0c\u8282\u70b9\u7684\u5e73\u8861\u56e0\u5b50\u53ea\u80fd\u53d6",(0,d.jsx)(n.code,{children:"0"}),"\u3001",(0,d.jsx)(n.code,{children:"1"}),"\u6216\u8005",(0,d.jsx)(n.code,{children:"-1"}),"\uff0c\u5206\u522b\u5bf9\u5e94\u7740\u5de6\u53f3\u5b50\u6811\u7b49\u9ad8\uff0c\u5de6\u5b50\u6811\u6bd4\u8f83\u9ad8\uff0c\u53f3\u5b50\u6811\u6bd4\u8f83\u9ad8\u3002"]}),"\n"]}),"\n",(0,d.jsx)(n.h2,{id:"avl\u6811\u5931\u8861\u60c5\u51b5\u5206\u6790",children:"AVL\u6811\u5931\u8861\u60c5\u51b5\u5206\u6790"}),"\n",(0,d.jsx)(n.h3,{id:"ll-lr-rr-rl",children:"LL, LR, RR, RL"}),"\n",(0,d.jsxs)(n.ul,{children:["\n",(0,d.jsxs)(n.li,{children:[(0,d.jsx)(n.code,{children:"LL"}),"\uff1a\u5931\u8861\u8282\u70b9\u5de6\u8fb9\u9ad8\uff0c\u65b0\u63d2\u5165\u8282\u70b9\u662f\u5728\u5931\u8861\u8282\u70b9\u5de6\u5b69\u5b50\u7684\u5de6\u8fb9\u3002\u76f4\u63a5\u5bf9\u5931\u8861\u8282\u70b9\u8fdb\u884c\u53f3\u65cb\u5373\u53ef\u3002"]}),"\n",(0,d.jsxs)(n.li,{children:[(0,d.jsx)(n.code,{children:"RR"}),"\uff1a\u5931\u8861\u8282\u70b9\u53f3\u8fb9\u9ad8\uff0c\u65b0\u63d2\u5165\u8282\u70b9\u662f\u5728\u5931\u8861\u8282\u70b9\u53f3\u5b69\u5b50\u7684\u53f3\u8fb9\u3002\u76f4\u63a5\u5bf9\u5931\u8861\u8282\u70b9\u8fdb\u884c\u5de6\u65cb\u5373\u53ef\u3002"]}),"\n",(0,d.jsxs)(n.li,{children:[(0,d.jsx)(n.code,{children:"LR"}),"\uff1a\u5931\u8861\u8282\u70b9\u5de6\u8fb9\u9ad8\uff0c\u65b0\u63d2\u5165\u8282\u70b9\u662f\u5728\u5931\u8861\u8282\u70b9\u5de6\u5b69\u5b50\u7684\u53f3\u8fb9\u3002\u5148\u5bf9\u5de6\u5b69\u5b50\u8fdb\u884c\u5de6\u65cb\uff0c\u518d\u5bf9\u5931\u8861\u8282\u70b9\u8fdb\u884c\u53f3\u65cb\u3002"]}),"\n",(0,d.jsxs)(n.li,{children:[(0,d.jsx)(n.code,{children:"RL"}),"\uff1a\u5931\u8861\u8282\u70b9\u53f3\u8fb9\u9ad8\uff0c\u65b0\u63d2\u5165\u8282\u70b9\u662f\u5728\u5931\u8861\u8282\u70b9\u53f3\u5b69\u5b50\u7684\u5de6\u8fb9\u3002\u5148\u5bf9\u53f3\u5b69\u5b50\u8fdb\u884c\u53f3\u65cb\uff0c\u518d\u5bf9\u5931\u8861\u8282\u70b9\u8fdb\u884c\u5de6\u65cb"]}),"\n"]}),"\n",(0,d.jsx)(n.p,{children:"\u5373"}),"\n",(0,d.jsx)(n.p,{children:(0,d.jsx)(n.img,{alt:"Clip_2024-01-27_12-26-18.png ##w400##",src:t(68991).A+"",width:"558",height:"703"})}),"\n",(0,d.jsxs)(n.p,{children:["\u89e3\u51b3\u5931\u8861\u7684\u529e\u6cd5: ",(0,d.jsxs)(n.span,{className:"katex",children:[(0,d.jsx)(n.span,{className:"katex-mathml",children:(0,d.jsx)(n.math,{xmlns:"http://www.w3.org/1998/Math/MathML",children:(0,d.jsxs)(n.semantics,{children:[(0,d.jsx)(n.mrow,{children:(0,d.jsx)(n.mtext,{children:"\u65cb\u8f6c"})}),(0,d.jsx)(n.annotation,{encoding:"application/x-tex",children:"\u65cb\u8f6c"})]})})}),(0,d.jsx)(n.span,{className:"katex-html","aria-hidden":"true",children:(0,d.jsxs)(n.span,{className:"base",children:[(0,d.jsx)(n.span,{className:"strut",style:{height:"0.6833em"}}),(0,d.jsx)(n.span,{className:"mord cjk_fallback",children:"\u65cb\u8f6c"})]})})]})]}),"\n",(0,d.jsx)(n.p,{children:(0,d.jsx)(n.img,{alt:"Clip_2024-01-27_13-29-56.png ##w800##",src:t(80397).A+"",width:"1010",height:"280"})}),"\n",(0,d.jsx)(n.p,{children:(0,d.jsx)(n.img,{alt:"Clip_2024-01-27_13-29-26.png ##w800##",src:t(47280).A+"",width:"1559",height:"1316"})}),"\n",(0,d.jsx)(n.h2,{id:"avl\u6811\u7684\u63d2\u5165\u64cd\u4f5c",children:"AVL\u6811\u7684\u63d2\u5165\u64cd\u4f5c"}),"\n",(0,d.jsxs)(n.ul,{children:["\n",(0,d.jsxs)(n.li,{children:["\u7b97\u6cd5\u601d\u8def\n",(0,d.jsxs)(n.ul,{children:["\n",(0,d.jsx)(n.li,{children:"\u5148\u627e\u5230\u8981\u63d2\u5165\u7684\u8282\u70b9\u4f4d\u7f6e\uff0c\u63d2\u5165\u65b0\u8282\u70b9"}),"\n",(0,d.jsx)(n.li,{children:"\u66f4\u65b0\u5e73\u8861\u56e0\u5b50\uff0c\u6839\u636e\u5e73\u8861\u56e0\u5b50\u5c0f\u4e8e-1\u548c\u5927\u4e8e1\u7684\u60c5\u51b5\u8fdb\u884c\u8ba8\u8bba"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,d.jsx)(n.h2,{id:"\u5e73\u8861\u4e8c\u53c9\u6811\u7684\u5220\u9664\u64cd\u4f5c",children:"\u5e73\u8861\u4e8c\u53c9\u6811\u7684\u5220\u9664\u64cd\u4f5c"}),"\n",(0,d.jsxs)(n.ul,{children:["\n",(0,d.jsxs)(n.li,{children:["\u7b97\u6cd5\u601d\u8def\n",(0,d.jsxs)(n.ul,{children:["\n",(0,d.jsx)(n.li,{children:"\u4f9d\u636e\u4e8c\u53c9\u6392\u5e8f\u6811\u7684\u5220\u9664\u7279\u70b9\uff0c\u4f9d\u7136\u6309\u71673\u79cd\u6761\u4ef6\u8fdb\u884c\u5220\u9664\uff0c\u4fdd\u8bc1\u6700\u540e\u5220\u9664\u7684\u90fd\u662f\u53f6\u5b50\u8282\u70b9\u5373\u53ef\u3002"}),"\n",(0,d.jsx)(n.li,{children:"\u8282\u70b9\u5220\u9664\u540e\uff0c\u4f9d\u6b21\u5bf9\u8282\u70b9\u8fdb\u884c\u5e73\u8861\u56e0\u5b50\u68c0\u67e5\uff0c\u82e5\u53d1\u73b0\u67d0\u8282\u70b9\u4e0d\u5e73\u8861\uff0c\u6309\u7167\u5e73\u8861\u8c03\u8282\u6cd5\u8fdb\u884c\u8c03\u8282\u3002"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,d.jsx)(n.h2,{id:"\u4ee3\u7801\u5b9e\u73b0",children:"\u4ee3\u7801\u5b9e\u73b0"}),"\n",(0,d.jsx)(n.h3,{id:"\u5224\u65ad\u67d0\u4e2a\u7ed3\u70b9\u7684\u9ad8\u5ea6",children:"\u5224\u65ad\u67d0\u4e2a\u7ed3\u70b9\u7684\u9ad8\u5ea6"}),"\n",(0,d.jsx)(n.p,{children:"\u5b9e\u73b0AVL\u6811, \u8fd8\u9700\u8981\u5b9e\u73b0\u5e73\u8861\u56e0\u5b50\u7684\u5224\u65ad: \u5373\u67d0\u7ed3\u70b9\u7684\u9ad8\u5ea6"}),"\n",(0,d.jsx)(n.pre,{children:(0,d.jsx)(n.code,{className:"language-C",children:"int getTreeNodeHeight(BTreeNode *T)\n{\n    // \u8fd4\u56de\u4ee5\u7ed3\u70b9T\u4e3a\u6839\u7684\u6570\u7684\u9ad8\u5ea6\n    if (T)\n    {\n        int l = getTreeNodeHeight(T->left);\n        int r = getTreeNodeHeight(T->right);\n        return l > r ? l + 1 : r + 1;\n    }\n    else\n    {\n        return 0;\n    }\n}\n"})}),"\n",(0,d.jsx)(n.h3,{id:"\u9012\u5f52\u5b9e\u73b0",children:"\u9012\u5f52\u5b9e\u73b0"}),"\n",(0,d.jsx)(n.pre,{children:(0,d.jsx)(n.code,{className:"language-C",children:'#include <stdio.h>\n#include <stdlib.h>\n\ntypedef int Element;\ntypedef struct _avlNode\n{\n    Element data;\n    struct _avlNode *left;\n    struct _avlNode *right;\n    int height;                 // \u7ed3\u70b9\u9ad8\u5ea6\n} AVLNode;\n\ntypedef struct \n{\n    AVLNode *root;              // \u6811\u6839\n    int nodeNum;                // \u7ed3\u70b9\u6570\n} AVLTree;\n\nAVLTree *initAVL(void);                 // \u521d\u59cb\u5316\u5e76\u8fd4\u56de\u6811\u5934\nAVLNode *initAVLNode(Element e);        // \u8fd4\u56de\u5e26\u503c\u7684\u7ed3\u70b9   \u95ee:\u6811\u9ad8\u8ba1\u7b97?\nAVLNode *leftRotate(AVLNode *x);        // \u5de6\u65cb\nAVLNode *rightRotate(AVLNode *y);       // \u53f3\u65cb\nvoid deleteAVLNode(AVLTree *T, Element e);   // \u5220\u9664\nvoid putBST(AVLTree *T);                // \u4e2d\u5e8f\u904d\u5386\nvoid freeBinaryTree(AVLTree **T);       // \u91ca\u653e\nAVLNode *addAVLNode(AVLTree *T, AVLNode *p , Element e);     // \u63d2\u5165\u7ed3\u70b9\nint getNodeHeight(AVLNode *p);\nint numMax(int a, int b);\n\nAVLTree *initAVL(void)\n{\n    AVLTree *T = (AVLTree *)malloc(sizeof(AVLTree));\n    if (!T)\n    {\n        printf("malloc error!\\n");\n        return NULL;\n    }\n    T->root = NULL;\n    T->nodeNum = 0;\n    return T;\n}\n\nAVLNode *initAVLNode(Element e)\n{\n    AVLNode *p = (AVLNode *)malloc(sizeof(AVLNode));\n    if (!p)\n    {\n        printf("malloc error!\\n");\n        return NULL;\n    }\n    p->data = e;\n    p->height = 1; // ?\n    p->left = NULL;\n    p->right = NULL;\n    return p;\n}\n\nint getNodeHeight(AVLNode *p)\n{\n    if (p)\n        return p->height;\n    return 0;\n}\n\nint numMax(int a, int b)\n{\n    return a > b ? a : b;\n}\n\n/* \u5de6\u65cb\u64cd\u4f5c\n*     px                            px\n*     |                             |\n*     x                             y\n*    / \\            ---\x3e           / \\\n*   lx  y                         x   ry\n*      / \\                       / \\\n*     ly  ry                    lx  ly\n* \u8bb0\u5f97\u8981\u66f4\u65b0\u9ad8\u5ea6: x, y\u7684\n* \u5176\u4ed6\u7ed3\u70b9\u4e0d\u7528\u66f4\u65b0, \u56e0\u4e3a\u6ca1\u6709\u63a5\u5165\u65b0\u7684\u7ed3\u70b9, \u6240\u4ee5\u76f8\u5bf9\u9ad8\u5ea6\u6ca1\u6709\u53d8\u5316\n* */\nAVLNode *leftRotate(AVLNode *x)\n{\n    AVLNode *y = x->right;\n    x->right = y->left;\n    y->left = x;\n    // \u5c0f\u5fc3\u4e0d\u80fd\u4e3a\u7a7a\n    // \u6ce8\u610f\u987a\u5e8f: \u5982\u679c\u5148\u66f4\u65b0y\u518d\u66f4\u65b0x, \u4f1a\u56e0\u4e3ay\u5224\u65ad\u5de6\u5b50\u6811(x)\u800cx\u53c8\u6ca1\u6709\u66f4\u65b0, \u5bfc\u81f4\u6570\u636e\u4e0d\u6b63\u786e!\n    x->height = numMax(getNodeHeight(x->left) + 1, getNodeHeight(x->right) + 1);\n    y->height = numMax(getNodeHeight(y->left) + 1, getNodeHeight(y->right) + 1);\n    return y;\n}\n\n/* \u53f3\u65cb\u64cd\u4f5c\n*       py                          py\n*       |                           |\n*       y                           x\n*      / \\          ---\x3e           / \\\n*     x   ry                      lx  y\n*    / \\                             / \\\n*   lx rx                           rx  ry\n* */\nAVLNode *rightRotate(AVLNode *y)\n{\n    AVLNode *x = y->left;\n    y->left = x->right;\n    x->right = y;\n    y->height = numMax(getNodeHeight(y->left) + 1, getNodeHeight(y->right) + 1);\n    x->height = numMax(getNodeHeight(x->left) + 1, getNodeHeight(x->right) + 1);\n    return x;\n}\n\nAVLNode *addAVLNode(AVLTree *T, AVLNode *p, Element e)\n{\n    // 1. \u627e\u4f4d\u7f6e\n    if (p)\n    {\n        if (p->data > e)\n        {\n            p->left = addAVLNode(T, p->left, e);\n            p->height = numMax(p->height, getNodeHeight(p->left) + 1);\n        }\n        else if (p->data < e)\n        {\n            p->right = addAVLNode(T, p->right, e);\n            p->height = numMax(p->height, getNodeHeight(p->right) + 1);\n        }\n        else\n        {\n            // \u4e0d\u63a5\u53d7\u76f8\u540c\u7684\u6570\u5b57\n            printf("[\u9519\u8bef]: \u63d2\u5165\u7684\u6570\u5b57: %d \u5df2\u5b58\u5728!\\n", e);\n            return p;   // \u6ce8\u610f! \u9012\u5f52\u8fd4\u56de\u8d4b\u503c\u8981\u8fd4\u56de\u81ea\u5df1!, \u4e0d\u662f\u8fd4\u56deNULL!\n        }\n    }\n    else\n    {\n        ++T->nodeNum;\n        return initAVLNode(e);\n    }\n    \n    // 3. \u8ba1\u7b97 \u5e73\u8861\u56e0\u5b50 == \u5de6\u5b50\u6811\u9ad8 - \u53f3\u5b50\u6811\u9ad8, \u5e76\u4e14\u8fdb\u884c\u65cb\u8f6c\n    if (getNodeHeight(p->left) - getNodeHeight(p->right) > 1)\n    {\n        // L?\n        if (getNodeHeight(p->left->left) < getNodeHeight(p->left->right))   // LR (\u5de6\u5b50\u6811\u5de6\u65cb)\n            p->left = leftRotate(p->left);\n        // \u53f3\u65cb    \n        return rightRotate(p);\n    }\n    else if (getNodeHeight(p->left) - getNodeHeight(p->right) < -1)\n    {\n        // R?\n        if (getNodeHeight(p->right->left) > getNodeHeight(p->right->right))   // RL (\u53f3\u5b50\u6811\u53f3\u65cb)\n            p->right = rightRotate(p->right);\n        return leftRotate(p);\n    }\n    return p;\n}\n\nstatic AVLNode *_deleteAVLNode(AVLTree *T, AVLNode *node, Element e)\n{\n    // 0. \u9000\u51fa\u6761\u4ef6: <\u67e5\u627e\u5143\u7d20\u4e0d\u5728AVLTree>\n    if (!node)\n        return node;\n\n    // 1. \u9012\u5f52\u67e5\u627e\n    if (node->data > e)\n    {\n        node->left = _deleteAVLNode(T, node->left, e);\n    }\n    else if (node->data < e)\n    {\n        node->right = _deleteAVLNode(T, node->right, e);\n    }\n    else\n    {\n        // 2. \u627e\u5230\u8be5\u5143\u7d20, \u5bf9\u5176\u8fdb\u884c\u5220\u9664\n        // AVL\u6811\u7684\u5220\u9664\u4e0e\u666e\u901a\u5e73\u8861\u4e8c\u53c9\u6811\u7684\u65e0\u5f02\n        if (!node->left || !node->right)\n        {\n            // \u5ea6\u4e3a 0 \u6216\u8005 1\n            AVLNode *tmp = node->left ? node->left : node->right;\n            free(node);\n            --T->nodeNum;\n            return tmp;     // \u53ef\u4ee5\u76f4\u63a5\u4e0d\u9700\u8981\u8c03\u6574\u9ad8\u5ea6/\u65cb\u8f6c\u662f\u56e0\u4e3a\u4e0b\u9762\u672c\u8eab(\u539f\u672c)\u5c31\u5df2\u7ecf\u662f\u5e73\u8861\u7684!\n        }\n        else\n        {\n            // \u5ea6\u4e3a2, \u8f6c\u79fb\u77db\u76fe\n            // \u627e\u540e\u7ee7\u7ed3\u70b9\n            AVLNode *tmp = node->right;\n            AVLNode *p = NULL;\n            while (tmp->left)\n            {\n                p = tmp;\n                tmp = tmp->left;\n            }\n            AVLNode *cecha = tmp->right;\n            node->data = cecha->data;\n            if (p)\n            {\n                p->left = cecha;\n                free(tmp);\n                --T->nodeNum;\n                return node;\n            }\n            else\n            {\n                node->right = tmp->right;\n                free(tmp);\n                --T->nodeNum;\n                return node;\n            }\n        }\n    }\n    // 3. \u66f4\u65b0\u5f53\u524d\u7ed3\u70b9\u7684\u9ad8\u5ea6\n    node->height = numMax(getNodeHeight(node->left), getNodeHeight(node->right));\n\n    // 4. \u5bf9 \u5f52\u7684\u5e73\u8861\u56e0\u5b50\u8fdb\u884c\u5224\u65ad, \u65cb\u8f6c\n    if (getNodeHeight(node->left) - getNodeHeight(node->right) > 1)\n    {\n        // L?\n        if (getNodeHeight(node->left->left) < getNodeHeight(node->left->right))   // LR (\u5de6\u5b50\u6811\u5de6\u65cb)\n            node->left = leftRotate(node->left);\n        // \u53f3\u65cb    \n        return rightRotate(node);\n    }\n    else if (getNodeHeight(node->left) - getNodeHeight(node->right) < -1)\n    {\n        // R?\n        if (getNodeHeight(node->right->left) > getNodeHeight(node->right->right))   // RL (\u53f3\u5b50\u6811\u53f3\u65cb)\n            node->right = rightRotate(node->right);\n        return leftRotate(node);\n    }\n    return node;\n}\n\nvoid deleteAVLNode(AVLTree *T, Element e)\n{\n    T->root = _deleteAVLNode(T, T->root, e);\n}\n\nstatic void _putBST(AVLNode *N)\n{\n    if (N)\n    {\n        _putBST(N->left);\n        printf("<%d (%d)>  ", N->data, N->height);\n        _putBST(N->right);\n    }\n}\n\nvoid putBST(AVLTree *T)\n{\n    printf("\u6811\u7684\u7ed3\u70b9\u6570\u4e3a: %d\\n\\t", T->nodeNum);\n    _putBST(T->root);\n}\n\nstatic void _freeBT(AVLNode *node)\n{\n    if (node)\n    {\n        _freeBT(node->left);\n        _freeBT(node->right);\n        free(node);\n    }\n}\n\nvoid freeBinaryTree(AVLTree **T)\n{\n    _freeBT((*T)->root);\n    free(*T);\n    *T = NULL;\n}\n\nvoid text_01(void)\n{\n    Element data[] = {1,2,3,4,5,6,7,8,9,0};\n    int len = sizeof(data) / sizeof(data[0]);\n    AVLTree *T = initAVL();\n    for (int i = 0; i < len; ++i)\n    {\n        T->root = addAVLNode(T, T->root, data[i]);\n    }\n    putBST(T);\n    deleteAVLNode(T, 1);\n    putchar(\'\\n\');\n    putBST(T);\n    deleteAVLNode(T, 5);\n    putchar(\'\\n\');\n    putBST(T);\n    freeBinaryTree(&T);\n}\n\nint main()\n{\n    // \u5e73\u8861\u4e8c\u53c9\u641c\u7d22\u6811(AVL)\n    text_01();\n    \n    return 0;\n}\n'})})]})}function c(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,d.jsx)(n,{...e,children:(0,d.jsx)(a,{...e})}):a(e)}},68991:(e,n,t)=>{t.d(n,{A:()=>i});const i=t.p+"assets/images/Clip_2024-01-27_12-26-18-7c6f789a88939305131921cff67005c8.png"},80397:(e,n,t)=>{t.d(n,{A:()=>i});const i=t.p+"assets/images/Clip_2024-01-27_13-29-56-939683f8b2ab03d33f37a4e0955464aa.png"}}]);