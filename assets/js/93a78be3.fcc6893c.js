"use strict";(self.webpackChunkhx_loli=self.webpackChunkhx_loli||[]).push([[95937],{28453:(n,e,s)=>{s.d(e,{R:()=>r,x:()=>d});var t=s(96540);const a={},i=t.createContext(a);function r(n){const e=t.useContext(i);return t.useMemo((function(){return"function"==typeof n?n(e):{...e,...n}}),[e,n])}function d(n){let e;return e=n.disableParentContext?"function"==typeof n.components?n.components(a):n.components||a:r(n.components),t.createElement(i.Provider,{value:e},n.children)}},79576:(n,e,s)=>{s.r(e),s.d(e,{assets:()=>l,contentTitle:()=>d,default:()=>p,frontMatter:()=>r,metadata:()=>t,toc:()=>c});const t=JSON.parse('{"id":"\u7a0b\u5e8f\u8bed\u8a00/C++/\u73b0\u4ee3C++/\u73b0\u4ee3C++\u9879\u76ee\u5b9e\u6218/\u7c7b\u578b\u64e6\u9664+\u5de5\u5382\u6a21\u5f0f,\u544a\u522bif\u4e36else/index","title":"\u7c7b\u578b\u64e6\u9664 + \u5de5\u5382\u6a21\u5f0f, \u544a\u522b if-else","description":"1. [\u7c7b\u578b\u64e6\u9664]: \u4ee5\u9002\u914d\u9ebb\u70e6\u7b2c\u4e09\u65b9\u5e93\u4e3a\u4f8b","source":"@site/docs/002-\u7a0b\u5e8f\u8bed\u8a00/001-C++/003-\u73b0\u4ee3C++/003-\u73b0\u4ee3C++\u9879\u76ee\u5b9e\u6218/006-\u7c7b\u578b\u64e6\u9664+\u5de5\u5382\u6a21\u5f0f,\u544a\u522bif\u4e36else/index.md","sourceDirName":"002-\u7a0b\u5e8f\u8bed\u8a00/001-C++/003-\u73b0\u4ee3C++/003-\u73b0\u4ee3C++\u9879\u76ee\u5b9e\u6218/006-\u7c7b\u578b\u64e6\u9664+\u5de5\u5382\u6a21\u5f0f,\u544a\u522bif\u4e36else","slug":"/\u7a0b\u5e8f\u8bed\u8a00/C++/\u73b0\u4ee3C++/\u73b0\u4ee3C++\u9879\u76ee\u5b9e\u6218/\u7c7b\u578b\u64e6\u9664+\u5de5\u5382\u6a21\u5f0f,\u544a\u522bif\u4e36else/","permalink":"/HXLoLi/docs/\u7a0b\u5e8f\u8bed\u8a00/C++/\u73b0\u4ee3C++/\u73b0\u4ee3C++\u9879\u76ee\u5b9e\u6218/\u7c7b\u578b\u64e6\u9664+\u5de5\u5382\u6a21\u5f0f,\u544a\u522bif\u4e36else/","draft":false,"unlisted":false,"editUrl":"https://github.com/HengXin666/HXLoLi/edit/main/docs/002-\u7a0b\u5e8f\u8bed\u8a00/001-C++/003-\u73b0\u4ee3C++/003-\u73b0\u4ee3C++\u9879\u76ee\u5b9e\u6218/006-\u7c7b\u578b\u64e6\u9664+\u5de5\u5382\u6a21\u5f0f,\u544a\u522bif\u4e36else/index.md","tags":[],"version":"current","lastUpdatedBy":"Heng_Xin_666","lastUpdatedAt":1745851959000,"frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"C++\u9ed1\u79d1\u6280\u3010\u4e36\u4e36PRETTY\u4e36FUNCTION\u4e36\u4e36\u3011\u975e\u4fb5\u5165\u5f0f\u7684\u7f16\u8bd1\u671f\u53cd\u5c04","permalink":"/HXLoLi/docs/\u7a0b\u5e8f\u8bed\u8a00/C++/\u73b0\u4ee3C++/\u73b0\u4ee3C++\u9879\u76ee\u5b9e\u6218/C++\u9ed1\u79d1\u6280\u3010\u4e36\u4e36PRETTY\u4e36FUNCTION\u4e36\u4e36\u3011\u975e\u4fb5\u5165\u5f0f\u7684\u7f16\u8bd1\u671f\u53cd\u5c04/"},"next":{"title":"\u6587\u4ef6\u6d41\u7684\u7f13\u51b2\u673a\u5236\u63a2\u7a76","permalink":"/HXLoLi/docs/\u7a0b\u5e8f\u8bed\u8a00/C++/\u73b0\u4ee3C++/\u73b0\u4ee3C++\u9879\u76ee\u5b9e\u6218/\u6587\u4ef6\u6d41\u7684\u7f13\u51b2\u673a\u5236\u63a2\u7a76/"}}');var a=s(74848),i=s(28453);const r={},d="\u7c7b\u578b\u64e6\u9664 + \u5de5\u5382\u6a21\u5f0f, \u544a\u522b if-else",l={},c=[{value:"1. [\u7c7b\u578b\u64e6\u9664]: \u4ee5\u9002\u914d\u9ebb\u70e6\u7b2c\u4e09\u65b9\u5e93\u4e3a\u4f8b",id:"1-\u7c7b\u578b\u64e6\u9664-\u4ee5\u9002\u914d\u9ebb\u70e6\u7b2c\u4e09\u65b9\u5e93\u4e3a\u4f8b",level:2},{value:"1.1 \u4f7f\u7528<code>std::variant&lt;&gt;</code>",id:"11-\u4f7f\u7528stdvariant",level:3},{value:"1.2 \u7c7b\u578b\u64e6\u9664",id:"12-\u7c7b\u578b\u64e6\u9664",level:3},{value:"2. \u5de5\u5382\u6a21\u5f0f, \u544a\u522bif-else",id:"2-\u5de5\u5382\u6a21\u5f0f-\u544a\u522bif-else",level:2}];function o(n){const e={blockquote:"blockquote",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",pre:"pre",ul:"ul",...(0,i.R)(),...n.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(e.header,{children:(0,a.jsx)(e.h1,{id:"\u7c7b\u578b\u64e6\u9664--\u5de5\u5382\u6a21\u5f0f-\u544a\u522b-if-else",children:"\u7c7b\u578b\u64e6\u9664 + \u5de5\u5382\u6a21\u5f0f, \u544a\u522b if-else"})}),"\n",(0,a.jsx)(e.h2,{id:"1-\u7c7b\u578b\u64e6\u9664-\u4ee5\u9002\u914d\u9ebb\u70e6\u7b2c\u4e09\u65b9\u5e93\u4e3a\u4f8b",children:"1. [\u7c7b\u578b\u64e6\u9664]: \u4ee5\u9002\u914d\u9ebb\u70e6\u7b2c\u4e09\u65b9\u5e93\u4e3a\u4f8b"}),"\n",(0,a.jsxs)(e.p,{children:["\u5047\u5982\u6211\u4eec\u7528\u5230\u4e86\u4e00\u4e2a",(0,a.jsx)(e.code,{children:"msglib.h"}),"\u8fd9\u4e2a\u7b2c\u4e09\u65b9\u5e93, \u5b83\u63d0\u4f9b\u4e86\u4e00\u4e9b\u7c7b, \u5e76\u4e14\u90fd\u6709",(0,a.jsx)(e.code,{children:"speak"}),"\u65b9\u6cd5, \u7136\u800c\u5374\u4e0d\u662f\u4e00\u4e2a\u865a\u51fd\u6570 (\u65e0\u6cd5\u591a\u6001\u8bbf\u95ee), \u5982\u679c\u6211\u4eec\u5e0c\u671b\u4f7f\u7528\u4e00\u4e2a\u6570\u7ec4\u5b58\u653e\u8fd9\u4e9b\u7c7b, \u7136\u540e\u8c03\u7528",(0,a.jsx)(e.code,{children:"speak"}),", \u663e\u7136\u662f\u5f88\u9762\u5012\u7684.."]}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-C++",children:'#pragma once\n#include <iostream>\n\nstruct MoveMsg {\n    int x;\n    int y;\n\n    void speak() {\n        std::cout << "Move " << x << ", " << y << \'\\n\';\n    }\n};\n\nstruct JumpMsg {\n    int height;\n\n    void speak() {\n        std::cout << "Jump " << height << \'\\n\';\n    }\n};\n\nstruct SleepMsg {\n    int time;\n\n    void speak() {\n        std::cout << "Sleep " << time << \'\\n\';\n    }\n};\n\nstruct ExitMsg {\n    void speak() {\n        std::cout << "Exit" << \'\\n\';\n    }\n};\n'})}),"\n",(0,a.jsxs)(e.h3,{id:"11-\u4f7f\u7528stdvariant",children:["1.1 \u4f7f\u7528",(0,a.jsx)(e.code,{children:"std::variant<>"})]}),"\n",(0,a.jsxs)(e.p,{children:["\u663e\u7136\u53ef\u4ee5\u4f7f\u7528",(0,a.jsx)(e.code,{children:"std::variant<>"}),"\u628a\u8fd9\u4e9b\u7c7b\u88c5\u8fdb\u53bb, \u7136\u540e\u4f7f\u7528."]}),"\n",(0,a.jsx)(e.p,{children:"\u4f46\u662f\u4f60\u9700\u8981\u628a\u6240\u6709\u53ef\u80fd\u7684\u7c7b\u578b\u7f57\u5217\u5230\u6a21\u7248\u4e2d, \u5e76\u4e14\u5b83\u5360\u7528\u7684\u7a7a\u95f4\u5f88\u5927(sizeof = \u6700\u5927\u7684\u7c7b\u7684\u5185\u5b58\u7a7a\u95f4 + std::size_t(\u8868\u793a\u5f53\u524d\u662f\u90a3\u79cd\u7c7b\u578b))"}),"\n",(0,a.jsxs)(e.p,{children:["\u5e76\u4e14\u4e0d\u7b26\u5408\u5f00\u95ed\u539f\u5219, \u4f60\u5982\u679c\u6709\u65b0\u7684\u7c7b\u578b\u9700\u8981\u652f\u6301, \u90a3\u4e48\u5fc5\u987b\u8981\u4fee\u6539",(0,a.jsx)(e.code,{children:"std::variant<>"}),". \u5982\u679c",(0,a.jsx)(e.code,{children:"std::variant<>"}),"\u4f5c\u4e3a\u4e86\u591a\u4e2a\u51fd\u6570\u7684\u53c2\u6570, \u90a3\u5c82\u4e0d\u662f\u70e6\u4e5f\u70e6\u6b7b\u5566? (using: \u662f\u4e0d\u662f\u5fd8\u4e86\u6211?!)"]}),"\n",(0,a.jsx)(e.p,{children:"\u603b\u4e4b, \u4e0d\u4f18\u96c5.."}),"\n",(0,a.jsx)(e.h3,{id:"12-\u7c7b\u578b\u64e6\u9664",children:"1.2 \u7c7b\u578b\u64e6\u9664"}),"\n",(0,a.jsx)(e.p,{children:"\u6211\u4eec\u53ef\u4ee5\u63d0\u4f9b\u4e00\u4e2a\u57fa\u7c7b(\u63a5\u53e3), \u7136\u540e\u591a\u4e2a\u5b50\u7c7b, \u7ee7\u627f\u81ea\u57fa\u7c7b, \u5b50\u7c7b\u7ec4\u5408\u4e00\u4e2a\u6210\u5458, \u800c\u8fd9\u4e2a\u6210\u5458\u7684\u7c7b\u578b\u5c31\u662f\u9700\u8981\u64e6\u9664\u7c7b\u578b\u7684\u7c7b(\u90a3\u5c82\u4e0d\u662f\u9700\u8981\u7ed9\u6bcf\u4e00\u4e2a\u9700\u8981\u64e6\u9664\u7c7b\u578b\u7684\u7c7b\u90fd\u8981\u9002\u914d\u4e00\u4e2a\u7c7b?! (\u5f53\u7136! \u4f46\u662f\u6211\u4eec\u6709\u6a21\u7248\u554a!))"}),"\n",(0,a.jsxs)(e.ul,{children:["\n",(0,a.jsx)(e.li,{children:"\u5bf9\u4e8e\u5982\u4f55\u81ea\u9002\u5e94\u6784\u9020? \u6211\u4eec\u4f7f\u7528\u53d8\u957f\u6a21\u7248+\u5b8c\u7f8e\u8f6c\u53d1\u5373\u53ef."}),"\n"]}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-C++",children:'#include <memory>\n#include <vector>\n#include "msglib.h"\n\nstruct MsgBase {\n    virtual void speak() = 0;\n    virtual ~MsgBase() = default;\n};\n\ntemplate <class Msg>\nstruct MsgImpl : public MsgBase {\n    Msg _msg;\n    \n    template <typename ...Ts>\n    MsgImpl(Ts&&... ts) : _msg{std::forward<Ts>(ts)...}\n    {}\n\n    void speak() override {\n        _msg.speak();\n    }\n};\n\ntemplate <class Msg, class ...Ts>\nstd::shared_ptr<MsgBase> makeMsg(Ts&&... ts) {\n    return std::make_shared<MsgImpl<Msg>>(std::forward<Ts>(ts)...);\n}\n\nint main() {\n    std::vector<std::shared_ptr<MsgBase>> arr;\n    arr.push_back(makeMsg<MoveMsg>(1, 2));\n    arr.push_back(makeMsg<JumpMsg>());\n    arr.push_back(makeMsg<SleepMsg>(3));\n    arr.push_back(makeMsg<ExitMsg>());\n\n    for (auto&& it : arr) {\n        it->speak();\n    }\n    return 0;\n}\n'})}),"\n",(0,a.jsx)(e.h2,{id:"2-\u5de5\u5382\u6a21\u5f0f-\u544a\u522bif-else",children:"2. \u5de5\u5382\u6a21\u5f0f, \u544a\u522bif-else"}),"\n",(0,a.jsx)(e.p,{children:"\u542c\u8bf4\u5728Ros\u4e2d, \u6709\u7c7b\u4f3c\u4ee5\u4e0b\u7684C++\u4ee3\u7801:"}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-C++",children:'#include <iostream>\n#include <memory>\n#include "msglib.h"\n\nstruct RobotClass {\n    void recv_data() {\n        int type = 0;\n        std::cin >> type;\n\n        if (type == 1) {\n            is_mov = true;\n            mov = std::make_shared<MoveMsg>(1, 2);\n        }\n        if (type == 2) {\n            is_jmp = true;\n            jmp = std::make_shared<JumpMsg>(1);\n        }\n        if (type == 3) {\n            is_slp = true;\n            slp = std::make_shared<SleepMsg>(1);\n        }\n        if (type == 4) {\n            is_ext = true;\n            ext = std::make_shared<ExitMsg>(1);\n        }\n    }\n\n    void update() {\n        if (is_mov) {\n            mov->speak();\n        }\n        if (is_jmp) {\n            jmp->speak();\n        }\n        if (is_slp) {\n            slp->speak();\n        }\n        if (is_ext) {\n            ext->speak();\n        }\n    }\n\n    std::shared_ptr<MoveMsg> mov;\n    std::shared_ptr<JumpMsg> jmp;\n    std::shared_ptr<SleepMsg> slp;\n    std::shared_ptr<ExitMsg> ext;\n\n    bool is_mov;\n    bool is_jmp;\n    bool is_slp;\n    bool is_ext;\n};\n\nint main() {\n    RobotClass ros;\n    ros.recv_data();\n    ros.update();\n    return 0;\n}\n'})}),"\n",(0,a.jsxs)(e.p,{children:["\u8fd9\u6837\u7684\u4ee3\u7801\u5b9e\u5728\u662f\u592a\u9ebb\u70e6\u4e86, \u9996\u5148\u662f",(0,a.jsx)(e.code,{children:"if-else"}),", \u7136\u540e\u5982\u679c\u8981\u6dfb\u52a0\u5185\u5bb9(\u6210\u5458), \u5c31\u5fc5\u987b\u8981\u4fee\u6539\u4e09\u5904\u4f4d\u7f6e..."]}),"\n",(0,a.jsx)(e.p,{children:"\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528\u7c7b\u578b\u64e6\u9664, \u8ba9\u4ed6\u4ee5\u591a\u6001\u5f62\u5f0f\u5b58\u5728, \u7136\u540e\u4f7f\u7528\u5de5\u5382\u6a21\u5f0f, \u7edf\u4e00\u7684\u521b\u5efa\u4ed6\u4eec\u51fa\u6765."}),"\n",(0,a.jsx)(e.p,{children:"\u5982\u679c\u6709\u9700\u6c42\u4e0d\u540c\u7684\u6784\u9020\u51fd\u6570\u5462? \u9700\u8981\u7528\u6237\u8fdb\u884c\u4e0d\u540c\u7684\u8f93\u5165, \u90a3\u4e48\u7edf\u4e00\u7684\u5de5\u5382\u63a5\u53e3\u600e\u4e48\u9002\u914d\u4e0d\u540c\u7684\u6784\u9020\u51fd\u6570\u53c2\u6570\u5217\u8868?"}),"\n",(0,a.jsxs)(e.blockquote,{children:["\n",(0,a.jsx)(e.p,{children:"\u7b54: \u4e0d\u5728\u6784\u9020\u51fd\u6570\u91cc\u9762\u6784\u9020\u4e86!"}),"\n",(0,a.jsx)(e.p,{children:"\u63d0\u4f9b\u4e00\u4e2a\u521d\u59cb\u5316\u51fd\u6570, \u4ee5\u91cd\u8f7d\u7684\u65b9\u6cd5\u4f9b\u521d\u59cb\u5316; \u5b50\u7c7b\u5c31\u901a\u8fc7\u8c03\u7528\u8fd9\u4e2a\u521d\u59cb\u5316\u65b9\u6cd5, \u4ee5\u521d\u59cb\u5316\u7c7b"}),"\n"]}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-C++",children:'#include <map>\n#include <memory>\n#include "msglib.h" // \u4e0d\u8981\u5fd8\u4e86, \u8fd9\u4e2a\u662f\u7b2c\u4e09\u65b9\u5e93, \u6211\u4eec\u53ea\u80fd\u9002\u914d, \u4e0d\u80fd\u4fee\u6539\n\nstruct MsgBase {\n    virtual void speak() = 0;\n    virtual void load() = 0;\n    virtual ~MsgBase() = default;\n\n    using Ptr = std::shared_ptr<MsgBase>;\n};\n\nnamespace msg_extra_funcs { // \u65e0\u6cd5\u4e3a Msg \u4eec\u589e\u52a0\u6210\u5458\u51fd\u6570, \u53ea\u80fd\u4ee5\u91cd\u8f7d\u7684\u5f62\u5f0f, \u5916\u6302\u8ffd\u52a0\n    void load(MoveMsg &msg) {\n        std::cin >> msg.x >> msg.y;\n    }\n\n    void load(JumpMsg &msg) {\n        std::cin >> msg.height;\n    }\n\n    void load(SleepMsg &msg) {\n        std::cin >> msg.time;\n    }\n\n    void load(ExitMsg &) {\n    }\n}\n\ntemplate <class Msg>\nstruct MsgImpl : MsgBase {\n    Msg msg;\n\n    void speak() override {\n        msg.speak();\n    }\n\n    void load() override {\n        msg_extra_funcs::load(msg);\n    }\n};\n\nstruct MsgFactoryBase {\n    virtual MsgBase::Ptr create() = 0;\n    virtual ~MsgFactoryBase() = default;\n\n    using Ptr = std::shared_ptr<MsgFactoryBase>;\n};\n\ntemplate <class Msg>\nstruct MsgFactoryImpl : MsgFactoryBase {\n    MsgBase::Ptr create() override {\n        return std::make_shared<MsgImpl<Msg>>();\n    }\n};\n\ntemplate <class Msg>\nMsgFactoryBase::Ptr makeFactory() {\n    return std::make_shared<MsgFactoryImpl<Msg>>();\n}\n\nstruct RobotClass {\n    inline static const std::map<std::string, MsgFactoryBase::Ptr> factories = {\n        {"Move", makeFactory<MoveMsg>()},\n        {"Jump", makeFactory<JumpMsg>()},\n        {"Sleep", makeFactory<SleepMsg>()},\n        {"Exit", makeFactory<ExitMsg>()},\n    };\n\n    void recv_data() {\n        std::string type;\n        std::cin >> type;\n\n        try {\n            msg = factories.at(type)->create();\n        } catch (std::out_of_range &) {\n            std::cout << "no such msg type!\\n";\n            return;\n        }\n\n        msg->load();\n    }\n\n    void update() {\n        if (msg)\n            msg->speak();\n    }\n\n    MsgBase::Ptr msg;\n};\n\n\nint main() {\n    RobotClass robot;\n    robot.recv_data();\n    robot.update();\n    return 0;\n}\n'})}),"\n",(0,a.jsx)(e.p,{children:"\u4e0d\u662f\u54e5\u4eec? \u4f60\u8fd9\u91cc\u7528\u4e86\u865a\u51fd\u6570\u8bf6! \u4f1a\u53d8\u6162\u7684barabara..."}),"\n",(0,a.jsxs)(e.blockquote,{children:["\n",(0,a.jsx)(e.p,{children:"\u4f60\u90a3\u4e2a\u540c\u4e8b\u5462\u4ed6\u5f97\u6539\u51e0\u4e2a\u5730\u65b9, \u9996\u5148\u8fd9\u91cc\u4ed6\u662fif else,\u53c8\u8981\u52a0\u4e00\u5c42if else, \u7136\u540e\u4ed6\u8fd9\u91cc\u8fd8\u8981\u52a0\u4e2a\u5e03\u554a\u5224\u65ad, \u7136\u540e\u8fd9\u91cc\u8fd8\u5f97\u5224\u65ad\u5e03\u554a, \u5e76\u5f97\u5230\u76f8\u5e94\u7684message\u90a3\u4e00\u5806\u6307\u9488, \u556a\u556a\u556a\u4e0b\u6765, \u4f60\u770b\u8111\u8111\u58f3\u90fd\u70b8\u88c2\u4e86\u662f\u5427, \u6211\u4eec\u662f\u8fd9\u4e2a\u8fd9\u4e2a\u81ea\u5df1\u65b9\u4fbf\u91cd\u8981, \u8fd8\u662f\u8ba1\u7b97\u673a\u90a3\u4e48\u51e0\u7eb3\u79d2\u7684\u6027\u80fd\u91cd\u8981, \u4f60\u4e3a\u4e86\u90a3\u51e0\u7eb3\u79d2\u7684\u6027\u80fd\u635f\u5931\u4e86\u4f60\u597d\u51e0\u4e2a\u5c0f\u65f6, \u5403\u996d\u65f6\u95f4, \u662f\u4e0d\u662f\u4f60\u4e8f\u5566, \u8ba1\u7b97\u673a\u8d5a\u5566, \u6240\u4ee5\u6211\u4eec\u5c31\u628asi\u5168\u90e8\u62c9\u7ed9\u8ba1\u7b97\u673a\u53bb\u7edf\u4e00\u5904\u7406\u5427 ,\u6211\u4eec\u4eba\u7c7b\u7684\u65f6\u95f4\u6bd4\u5b83\u73cd\u8d35\u591a\u4e86, \u54ce\u4f60\u8be5\u7528\u7684\u65f6\u5019\u7528, \u4f60\u5982\u679c\u53d1\u73b0\u74f6\u9888\u4e86\u518d\u53bb\u4f18\u5316\u4e5f\u4e0d\u8fdf\u5bf9\u5427, \u5148\u4fdd\u8bc1\u6211\u4eec\u4ee3\u7801\u80fd\u8dd1\u4e86\u518d\u8bf4, \u4f60\u90a3\u6837\u5199\u52a8\u4e0d\u52a8\u4e00\u5806bug, \u7136\u540e\u4f60\u8c03\u8bd5\u534a\u5929\u51e0\u4e2a\u5c0f\u65f6\u8dd1\u6389\u4e86, \u8dd1\u4e86\u534a\u5929,\u7ed3\u679c\u8ba1\u7b97\u673a\u5c31\u52a0\u901f\u4e86\u51e0\u7eb3\u79d2, \u503c\u5f97\u5427, \u55ef\u554a\u6240\u4ee5\u4e56\u4e56\u7ed9\u6211\u53bb\u7528\u865a\u51fd\u6570\u54c8!"}),"\n"]}),"\n",(0,a.jsxs)(e.p,{children:["\u5982\u679c\u4f60\u89c9\u5f97",(0,a.jsx)(e.code,{children:"factories"}),"\u4e2d\u8981\u6dfb\u52a0, \u5c31\u8981\u5199\u4e00\u5c0f\u4e32. \u90a3\u4f60\u5c31\u4e0a\u5b8f\u561b."]}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-C++",children:"#define PER_MSG(ClassName) \\{#ClassName, makeFactory<ClassName##Msg>()},\n    inline static const std::map<std::string, MsgFactoryBase::Ptr> factories = {\n        PER_MSG(Move)\n        PER_MSG(Jump)\n        PER_MSG(Sleep)\n        PER_MSG(Exit)\n    };\n#undef PER_MSG\n"})}),"\n",(0,a.jsxs)(e.p,{children:["\u66f4\u53ef\u4ee5: \u5199\u4e00\u4e2a",(0,a.jsx)(e.code,{children:"msgtypes.inl"}),":"]}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-C++",children:"PER_MSG(Move)\nPER_MSG(Jump)\nPER_MSG(Sleep)\nPER_MSG(Exit)\n"})}),"\n",(0,a.jsx)(e.p,{children:"\u7136\u540e\u8fd9\u6837:"}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-C++",children:'#define PER_MSG(ClassName) \\{#ClassName, makeFactory<ClassName##Msg>()},\n    inline static const std::map<std::string, MsgFactoryBase::Ptr> factories = {\n        #include "msgtypes.inl"\n    };\n#undef PER_MSG\n'})}),"\n",(0,a.jsxs)(e.p,{children:["\u5c31\u50cf\u914d\u7f6e\u6587\u4ef6\u4e00\u6837, \u5e76\u4e14\u53ef\u4ee5\u590d\u7528 (\u6bd4\u5982\u5176\u4ed6\u5730\u65b9\u4e5f\u9700\u8981\u4e00\u4e2a\u5176\u4ed6\u64cd\u4f5c, \u4f46\u662f\u5b8f\u8bbe\u8ba1\u4e3a\u4e00\u6837\u7684 (\u53cd\u6b63\u7528\u5b8c\u5c31",(0,a.jsx)(e.code,{children:"#undef"}),"\u4e86))"]})]})}function p(n={}){const{wrapper:e}={...(0,i.R)(),...n.components};return e?(0,a.jsx)(e,{...n,children:(0,a.jsx)(o,{...n})}):o(n)}}}]);