"use strict";(self.webpackChunkhx_loli=self.webpackChunkhx_loli||[]).push([[82506],{11976:(n,e,i)=>{i.d(e,{A:()=>s});const s=i.p+"assets/images/Clip_2024-01-28_11-26-28-331a17dfab89d68bcfc9a241f84c5154.png"},25569:(n,e,i)=>{i.d(e,{A:()=>s});const s=i.p+"assets/images/Clip_2024-01-28_11-00-14-f2f0783c3861532959ec58ede5392930.png"},27171:(n,e,i)=>{i.r(e),i.d(e,{assets:()=>r,contentTitle:()=>d,default:()=>h,frontMatter:()=>a,metadata:()=>s,toc:()=>c});const s=JSON.parse('{"id":"\u8ba1\u4f6c\u5e38\u8b58/\u6570\u636e\u7ed3\u6784\u4e0e\u7b97\u6cd5/\u3010\u6570\u636e\u7ed3\u6784\u3011\u6811/\u5e76\u67e5\u96c6/index","title":"\u5e76\u67e5\u96c6","description":"\u9700\u6c42\u5206\u6790","source":"@site/docs/001-\u8ba1\u4f6c\u5e38\u8b58/001-\u6570\u636e\u7ed3\u6784\u4e0e\u7b97\u6cd5/004-\u3010\u6570\u636e\u7ed3\u6784\u3011\u6811/007-\u5e76\u67e5\u96c6/index.md","sourceDirName":"001-\u8ba1\u4f6c\u5e38\u8b58/001-\u6570\u636e\u7ed3\u6784\u4e0e\u7b97\u6cd5/004-\u3010\u6570\u636e\u7ed3\u6784\u3011\u6811/007-\u5e76\u67e5\u96c6","slug":"/\u8ba1\u4f6c\u5e38\u8b58/\u6570\u636e\u7ed3\u6784\u4e0e\u7b97\u6cd5/\u3010\u6570\u636e\u7ed3\u6784\u3011\u6811/\u5e76\u67e5\u96c6/","permalink":"/HXLoLi/docs/\u8ba1\u4f6c\u5e38\u8b58/\u6570\u636e\u7ed3\u6784\u4e0e\u7b97\u6cd5/\u3010\u6570\u636e\u7ed3\u6784\u3011\u6811/\u5e76\u67e5\u96c6/","draft":false,"unlisted":false,"editUrl":"https://github.com/HengXin666/HXLoLi/edit/main/docs/001-\u8ba1\u4f6c\u5e38\u8b58/001-\u6570\u636e\u7ed3\u6784\u4e0e\u7b97\u6cd5/004-\u3010\u6570\u636e\u7ed3\u6784\u3011\u6811/007-\u5e76\u67e5\u96c6/index.md","tags":[],"version":"current","lastUpdatedBy":"Heng_Xin_666","lastUpdatedAt":1745851959000,"frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"AVL\u6811","permalink":"/HXLoLi/docs/\u8ba1\u4f6c\u5e38\u8b58/\u6570\u636e\u7ed3\u6784\u4e0e\u7b97\u6cd5/\u3010\u6570\u636e\u7ed3\u6784\u3011\u6811/AVL\u6811/"},"next":{"title":"\u8d6b\u592b\u66fc\u6811\u548c\u8d6b\u592b\u66fc\u7f16\u7801","permalink":"/HXLoLi/docs/\u8ba1\u4f6c\u5e38\u8b58/\u6570\u636e\u7ed3\u6784\u4e0e\u7b97\u6cd5/\u3010\u6570\u636e\u7ed3\u6784\u3011\u6811/\u8d6b\u592b\u66fc\u6811\u548c\u8d6b\u592b\u66fc\u7f16\u7801/"}}');var t=i(74848),l=i(28453);const a={},d="\u5e76\u67e5\u96c6",r={},c=[{value:"\u9700\u6c42\u5206\u6790",id:"\u9700\u6c42\u5206\u6790",level:2},{value:"\u5e76\u67e5\u96c6\u6982\u5ff5",id:"\u5e76\u67e5\u96c6\u6982\u5ff5",level:2},{value:"\u5e76\u67e5\u96c6\u7684\u7b97\u6cd5\u4ecb\u7ecd",id:"\u5e76\u67e5\u96c6\u7684\u7b97\u6cd5\u4ecb\u7ecd",level:2},{value:"Quick Find\u7684\u601d\u8def",id:"quick-find\u7684\u601d\u8def",level:2},{value:"QF\u4ee3\u7801\u5b9e\u73b0",id:"qf\u4ee3\u7801\u5b9e\u73b0",level:3},{value:"Quick Union\u7684\u601d\u8def",id:"quick-union\u7684\u601d\u8def",level:2},{value:"\u57fa\u4e8esize\u7684\u7b97\u6cd5\u4f18\u5316",id:"\u57fa\u4e8esize\u7684\u7b97\u6cd5\u4f18\u5316",level:3},{value:"\u57fa\u4e8erank\u7684\u7b97\u6cd5\u6539\u8fdb",id:"\u57fa\u4e8erank\u7684\u7b97\u6cd5\u6539\u8fdb",level:3},{value:"\u8def\u5f84\u538b\u7f29",id:"\u8def\u5f84\u538b\u7f29",level:3},{value:"QU \u4ee3\u7801\u5b9e\u73b0",id:"qu-\u4ee3\u7801\u5b9e\u73b0",level:3}];function o(n){const e={annotation:"annotation",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",img:"img",li:"li",math:"math",mi:"mi",mn:"mn",mo:"mo",mrow:"mrow",ol:"ol",p:"p",pre:"pre",semantics:"semantics",span:"span",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,l.R)(),...n.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(e.header,{children:(0,t.jsx)(e.h1,{id:"\u5e76\u67e5\u96c6",children:"\u5e76\u67e5\u96c6"})}),"\n",(0,t.jsx)(e.h2,{id:"\u9700\u6c42\u5206\u6790",children:"\u9700\u6c42\u5206\u6790"}),"\n",(0,t.jsx)(e.p,{children:"\u5047\u8bbe\u73b0\u5728\u6709\u8fd9\u6837\u4e00\u4e2a\u9700\u6c42\uff0c\u5982\u4e0b\u56fe\u7684\u6bcf\u4e00\u4e2a\u70b9\u4ee3\u8868\u4e00\u4e2a\u6751\u5e84\uff0c\u6bcf\u4e00\u6761\u7ebf\u5c31\u4ee3\u8868\u4e00\u6761\u8def\uff0c\u6240\u4ee5\u6709\u4e9b\u6751\u5e84\u4e4b\u95f4\u6709\u8fde\u63a5\u7684\u8def\uff0c\u6709\u4e9b\u6751\u5e84\u6ca1\u6709\u8fde\u63a5\u7684\u8def\uff0c\u4f46\u662f\u6709\u95f4\u63a5\u8fde\u63a5\u7684\u8def\uff0c\u6839\u636e\u4e0a\u9762\u7684\u6761\u4ef6\uff0c\u80fd\u8bbe\u8ba1\u51fa\u4e00\u4e2a\u6570\u636e\u7ed3\u6784\uff0c\u80fd\u5feb\u901f\u6267\u884c\u4e0b\u97622\u4e2a\u64cd\u4f5c\uff1a"}),"\n",(0,t.jsxs)(e.ol,{children:["\n",(0,t.jsx)(e.li,{children:"\u67e5\u8be2\u4e24\u4e2a\u6751\u5e84\u4e4b\u95f4\u662f\u5426\u6709\u8fde\u63a5\u7684\u8def"}),"\n",(0,t.jsx)(e.li,{children:"\u8fde\u63a5\u4e24\u4e2a\u6751\u5e84"}),"\n"]}),"\n\n\n\n\n\n\n\n\n\n\n\n",(0,t.jsxs)(e.table,{children:[(0,t.jsx)(e.thead,{children:(0,t.jsx)(e.tr,{children:(0,t.jsx)(e.th,{style:{textAlign:"center"},children:"##container##"})})}),(0,t.jsx)(e.tbody,{children:(0,t.jsx)(e.tr,{children:(0,t.jsx)(e.td,{style:{textAlign:"center"},children:(0,t.jsx)(e.img,{alt:"Clip_2024-01-28_11-00-14.png ##w500##",src:i(25569).A+"",width:"908",height:"184"})})})})]}),"\n",(0,t.jsx)(e.p,{children:"\u5982\u679c\u4f60\u8bf4\u7528\u773c\u770b\u554a, \u90a3\u8fd9\u4e2a\u5462?"}),"\n\n\n\n\n\n\n\n\n\n\n\n",(0,t.jsxs)(e.table,{children:[(0,t.jsx)(e.thead,{children:(0,t.jsx)(e.tr,{children:(0,t.jsx)(e.th,{style:{textAlign:"center"},children:"##container##"})})}),(0,t.jsx)(e.tbody,{children:(0,t.jsx)(e.tr,{children:(0,t.jsx)(e.td,{style:{textAlign:"center"},children:(0,t.jsx)(e.img,{alt:"Clip_2024-01-28_11-01-32.png ##w500##",src:i(52358).A+"",width:"674",height:"658"})})})})]}),"\n",(0,t.jsx)(e.h2,{id:"\u5e76\u67e5\u96c6\u6982\u5ff5",children:"\u5e76\u67e5\u96c6\u6982\u5ff5"}),"\n",(0,t.jsxs)(e.p,{children:[(0,t.jsx)(e.strong,{children:"\u5e76\u67e5\u96c6(\u82f1\u6587\uff1aDisjoint-set data structure\uff0c\u76f4\u8bd1\u4e3a\u4e0d\u4ea4\u96c6\u6570\u636e\u7ed3\u6784)"})," \u662f\u4e00\u79cd\u6570\u636e\u7ed3\u6784\uff0c\u7528\u4e8e\u5904\u7406\u4e00\u4e9b",(0,t.jsx)(e.strong,{children:"\u4e0d\u4ea4\u96c6(Disjoint sets\uff0c\u4e00\u7cfb\u5217\u6ca1\u6709\u91cd\u590d\u5143\u7d20\u7684\u96c6\u5408)"})," \u7684\u5408\u5e76\u53ca\u67e5\u8be2\u95ee\u9898\u3002\u5e76\u67e5\u96c6\u652f\u6301\u5982\u4e0b\u64cd\u4f5c:"]}),"\n",(0,t.jsxs)(e.ul,{children:["\n",(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.code,{children:"\u67e5\u8be2(Find)"}),": \u67e5\u8be2\u67d0\u4e2a\u5143\u7d20\u5c5e\u4e8e\u54ea\u4e2a\u96c6\u5408\uff0c\u901a\u5e38\u662f\u8fd4\u56de\u96c6\u5408\u5185\u7684\u4e00\u4e2a\u201c\u4ee3\u8868\u5143\u7d20\u201d\u3002\u8fd9\u4e2a\u64cd\u4f5c\u662f\u4e3a\u4e86\u5224\u65ad\u4e24\u4e2a\u5143\u7d20\u662f\u5426\u5728\u540c\u4e00\u4e2a\u96c6\u5408\u4e4b\u4e2d\u3002"]}),"\n",(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.code,{children:"\u5408\u5e76(Union)"}),": \u5c06\u4e24\u4e2a\u96c6\u5408\u5408\u5e76\u4e3a\u4e00\u4e2a\u3002"]}),"\n",(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.code,{children:"\u6dfb\u52a0"}),": \u6dfb\u52a0\u4e00\u4e2a\u65b0\u96c6\u5408\uff0c\u5176\u4e2d\u6709\u4e00\u4e2a\u65b0\u5143\u7d20\u3002\u6dfb\u52a0\u64cd\u4f5c\u4e0d\u5982\u67e5\u8be2\u548c\u5408\u5e76\u64cd\u4f5c\u91cd\u8981\uff0c\u5e38\u5e38\u88ab\u5ffd\u7565\u3002"]}),"\n"]}),"\n",(0,t.jsxs)(e.p,{children:["\u7531\u4e8e\u652f\u6301\u67e5\u8be2\u548c\u5408\u5e76\u8fd9\u4e24\u79cd\u64cd\u4f5c\uff0c\u5e76\u67e5\u96c6\u5728\u82f1\u6587\u4e2d\u4e5f\u88ab\u79f0\u4e3a",(0,t.jsx)(e.strong,{children:"\u8054\u5408-\u67e5\u627e\u6570\u636e\u7ed3\u6784(Union-find data structure)"})," \u6216\u8005",(0,t.jsx)(e.strong,{children:"\u5408\u5e76-\u67e5\u627e\u96c6\u5408(Merge-find set)"})]}),"\n\n\n\n\n\n\n\n\n\n\n\n",(0,t.jsxs)(e.table,{children:[(0,t.jsx)(e.thead,{children:(0,t.jsx)(e.tr,{children:(0,t.jsx)(e.th,{style:{textAlign:"center"},children:"##container##"})})}),(0,t.jsx)(e.tbody,{children:(0,t.jsx)(e.tr,{children:(0,t.jsx)(e.td,{style:{textAlign:"center"},children:(0,t.jsx)(e.img,{alt:"Clip_2024-01-28_11-09-36.png ##w800##",src:i(41306).A+"",width:"1107",height:"644"})})})})]}),"\n",(0,t.jsx)(e.h2,{id:"\u5e76\u67e5\u96c6\u7684\u7b97\u6cd5\u4ecb\u7ecd",children:"\u5e76\u67e5\u96c6\u7684\u7b97\u6cd5\u4ecb\u7ecd"}),"\n",(0,t.jsx)(e.p,{children:"\u5e76\u67e5\u96c6\u67092\u79cd\u5e38\u89c1\u5b9e\u73b0\u601d\u8def"}),"\n",(0,t.jsxs)(e.ul,{children:["\n",(0,t.jsxs)(e.li,{children:["Quick Find\n",(0,t.jsxs)(e.ul,{children:["\n",(0,t.jsxs)(e.li,{children:["\u67e5\u627e\u6548\u7387: ",(0,t.jsxs)(e.span,{className:"katex",children:[(0,t.jsx)(e.span,{className:"katex-mathml",children:(0,t.jsx)(e.math,{xmlns:"http://www.w3.org/1998/Math/MathML",children:(0,t.jsxs)(e.semantics,{children:[(0,t.jsxs)(e.mrow,{children:[(0,t.jsx)(e.mi,{children:"O"}),(0,t.jsx)(e.mo,{stretchy:"false",children:"("}),(0,t.jsx)(e.mn,{children:"1"}),(0,t.jsx)(e.mo,{stretchy:"false",children:")"})]}),(0,t.jsx)(e.annotation,{encoding:"application/x-tex",children:"O(1)"})]})})}),(0,t.jsx)(e.span,{className:"katex-html","aria-hidden":"true",children:(0,t.jsxs)(e.span,{className:"base",children:[(0,t.jsx)(e.span,{className:"strut",style:{height:"1em",verticalAlign:"-0.25em"}}),(0,t.jsx)(e.span,{className:"mord mathnormal",style:{marginRight:"0.02778em"},children:"O"}),(0,t.jsx)(e.span,{className:"mopen",children:"("}),(0,t.jsx)(e.span,{className:"mord",children:"1"}),(0,t.jsx)(e.span,{className:"mclose",children:")"})]})})]})]}),"\n",(0,t.jsxs)(e.li,{children:["\u5408\u5e76\u6548\u7387: ",(0,t.jsxs)(e.span,{className:"katex",children:[(0,t.jsx)(e.span,{className:"katex-mathml",children:(0,t.jsx)(e.math,{xmlns:"http://www.w3.org/1998/Math/MathML",children:(0,t.jsxs)(e.semantics,{children:[(0,t.jsxs)(e.mrow,{children:[(0,t.jsx)(e.mi,{children:"O"}),(0,t.jsx)(e.mo,{stretchy:"false",children:"("}),(0,t.jsx)(e.mi,{children:"N"}),(0,t.jsx)(e.mo,{stretchy:"false",children:")"})]}),(0,t.jsx)(e.annotation,{encoding:"application/x-tex",children:"O(N)"})]})})}),(0,t.jsx)(e.span,{className:"katex-html","aria-hidden":"true",children:(0,t.jsxs)(e.span,{className:"base",children:[(0,t.jsx)(e.span,{className:"strut",style:{height:"1em",verticalAlign:"-0.25em"}}),(0,t.jsx)(e.span,{className:"mord mathnormal",style:{marginRight:"0.02778em"},children:"O"}),(0,t.jsx)(e.span,{className:"mopen",children:"("}),(0,t.jsx)(e.span,{className:"mord mathnormal",style:{marginRight:"0.10903em"},children:"N"}),(0,t.jsx)(e.span,{className:"mclose",children:")"})]})})]})]}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(e.li,{children:["Quick Union\n",(0,t.jsxs)(e.ul,{children:["\n",(0,t.jsxs)(e.li,{children:["\u67e5\u627e\u6548\u7387: ",(0,t.jsxs)(e.span,{className:"katex",children:[(0,t.jsx)(e.span,{className:"katex-mathml",children:(0,t.jsx)(e.math,{xmlns:"http://www.w3.org/1998/Math/MathML",children:(0,t.jsxs)(e.semantics,{children:[(0,t.jsxs)(e.mrow,{children:[(0,t.jsx)(e.mi,{children:"O"}),(0,t.jsx)(e.mo,{stretchy:"false",children:"("}),(0,t.jsx)(e.mi,{children:"l"}),(0,t.jsx)(e.mi,{children:"o"}),(0,t.jsx)(e.mi,{children:"g"}),(0,t.jsx)(e.mi,{children:"N"}),(0,t.jsx)(e.mo,{stretchy:"false",children:")"})]}),(0,t.jsx)(e.annotation,{encoding:"application/x-tex",children:"O(logN)"})]})})}),(0,t.jsx)(e.span,{className:"katex-html","aria-hidden":"true",children:(0,t.jsxs)(e.span,{className:"base",children:[(0,t.jsx)(e.span,{className:"strut",style:{height:"1em",verticalAlign:"-0.25em"}}),(0,t.jsx)(e.span,{className:"mord mathnormal",style:{marginRight:"0.02778em"},children:"O"}),(0,t.jsx)(e.span,{className:"mopen",children:"("}),(0,t.jsx)(e.span,{className:"mord mathnormal",style:{marginRight:"0.01968em"},children:"l"}),(0,t.jsx)(e.span,{className:"mord mathnormal",children:"o"}),(0,t.jsx)(e.span,{className:"mord mathnormal",style:{marginRight:"0.03588em"},children:"g"}),(0,t.jsx)(e.span,{className:"mord mathnormal",style:{marginRight:"0.10903em"},children:"N"}),(0,t.jsx)(e.span,{className:"mclose",children:")"})]})})]})]}),"\n",(0,t.jsxs)(e.li,{children:["\u5408\u5e76\u6548\u7387: ",(0,t.jsxs)(e.span,{className:"katex",children:[(0,t.jsx)(e.span,{className:"katex-mathml",children:(0,t.jsx)(e.math,{xmlns:"http://www.w3.org/1998/Math/MathML",children:(0,t.jsxs)(e.semantics,{children:[(0,t.jsxs)(e.mrow,{children:[(0,t.jsx)(e.mi,{children:"O"}),(0,t.jsx)(e.mo,{stretchy:"false",children:"("}),(0,t.jsx)(e.mi,{children:"l"}),(0,t.jsx)(e.mi,{children:"o"}),(0,t.jsx)(e.mi,{children:"g"}),(0,t.jsx)(e.mi,{children:"N"}),(0,t.jsx)(e.mo,{stretchy:"false",children:")"})]}),(0,t.jsx)(e.annotation,{encoding:"application/x-tex",children:"O(logN)"})]})})}),(0,t.jsx)(e.span,{className:"katex-html","aria-hidden":"true",children:(0,t.jsxs)(e.span,{className:"base",children:[(0,t.jsx)(e.span,{className:"strut",style:{height:"1em",verticalAlign:"-0.25em"}}),(0,t.jsx)(e.span,{className:"mord mathnormal",style:{marginRight:"0.02778em"},children:"O"}),(0,t.jsx)(e.span,{className:"mopen",children:"("}),(0,t.jsx)(e.span,{className:"mord mathnormal",style:{marginRight:"0.01968em"},children:"l"}),(0,t.jsx)(e.span,{className:"mord mathnormal",children:"o"}),(0,t.jsx)(e.span,{className:"mord mathnormal",style:{marginRight:"0.03588em"},children:"g"}),(0,t.jsx)(e.span,{className:"mord mathnormal",style:{marginRight:"0.10903em"},children:"N"}),(0,t.jsx)(e.span,{className:"mclose",children:")"})]})})]})]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(e.h2,{id:"quick-find\u7684\u601d\u8def",children:"Quick Find\u7684\u601d\u8def"}),"\n",(0,t.jsxs)(e.ul,{children:["\n",(0,t.jsxs)(e.li,{children:["\u6838\u5fc3\u662f",(0,t.jsx)(e.strong,{children:"\u5c06\u6240\u6709\u5143\u7d20\u8fdb\u884cID\u5206\u7ec4\u7ba1\u7406\uff0c\u6bcf\u4e2a\u5143\u7d20\u5bf9\u5e94\u4e00\u4e2aID\u53f7"})]}),"\n",(0,t.jsxs)(e.li,{children:["\u67e5\u627e\u5373",(0,t.jsx)(e.code,{children:"find"}),"\u7684\u65f6\u5019\uff0c\u53ea\u9700\u8981\u8fd4\u56de\u8fd9\u4e2a\u5143\u7d20\u5bf9\u5e94\u7684\u5206\u7ec4ID"]}),"\n",(0,t.jsxs)(e.li,{children:["\u5408\u5e76\u5373",(0,t.jsx)(e.code,{children:"Union(a,b)"}),"\u65f6\u5019\uff0c\u5c06\u662f\u5c5e\u4e8ea\u5206\u7ec4\u7684\u5143\u7d20\uff0c",(0,t.jsx)(e.strong,{children:"\u90fd\u6539\u4e3ab\u5206\u7ec4\u7684ID\u53f7"})]}),"\n"]}),"\n",(0,t.jsx)(e.h3,{id:"qf\u4ee3\u7801\u5b9e\u73b0",children:"QF\u4ee3\u7801\u5b9e\u73b0"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-C",children:"#include <stdio.h>\n#include <stdlib.h>\n\n#define OK 1\n#define ERROR 0\n#define QF_MAX_SIZE 24\n\ntypedef char Element;\n\n// \u53ef\u4ee5\u4f7f\u7528\u6570\u7ec4\u5f53\u7136\u4e5f\u53ef\u4ee5\u4f7f\u7528\u94fe\u8868\ntypedef struct QF\n{\n    Element data[QF_MAX_SIZE];      // \u5143\u7d20\n    int old_index[QF_MAX_SIZE];     // \u8001\u5927\n    int len;                        // \u6709\u6548\u957f\u5ea6\n} QF;\n\nQF *initQF(void);                           // \u8fd4\u56de\u4e00\u4e2a\u521d\u59cb\u5316\u540e\u4e3a\u7a7a\u7684 \u5e76\u67e5\u96c6\nvoid addElement(QF *Q, Element e);          // \u6dfb\u52a0\u4e00\u4e2a\u5b64\u7acb\u7684\u5143\u7d20\nElement QFFind(QF *Q, Element e);           // \u67e5\u8be2 e \u5c5e\u4e8e\u90a3\u4e2a\u96c6\u5408, \u8fd4\u56de\u662f e \u5143\u7d20\u7684\u8001\u5927\n_Bool QFUnion(QF *Q, Element a, Element b); // \u5c06\u4e24\u4e2a\u5143\u7d20\u5408\u5e76\u5230\u4e00\u4e2a\u96c6\u5408\nvoid freeQF(QF *Q);                         // \u514d\u8d39\u5b83\n\nvoid freeQF(QF *Q)\n{\n    free(Q);\n}\n\n_Bool QFUnion(QF *Q, Element a, Element b)\n{\n    // \u5c06\u4e24\u4e2a\u5143\u7d20\u5408\u5e76\u5230\u4e00\u4e2a\u96c6\u5408\n    // \u5b9a\u4e49 a --\x3e b (\u5c06 a \u5408\u5e76\u5230 b \u4e2d)\n    int a_o_e = QFFind(Q, a), b_o_e = QFFind(Q, b);\n\n    if (!a_o_e || !b_o_e)\n        return ERROR;\n    \n    int b_o_e_index = -1;\n    for (int i = 0; i < Q->len; ++i)\n    {\n        if (Q->data[i] == b_o_e)\n        {\n            b_o_e_index = i;\n            break;\n        }\n    }\n\n    for (int i = 0 ; i < Q->len; ++i)\n    {\n        if (Q->data[Q->old_index[i]] == a_o_e)\n        {\n            Q->old_index[i] = b_o_e_index;\n        }\n    }\n\n    return OK;\n}\n\nElement QFFind(QF *Q, Element e)\n{\n    int i = 0;\n    for (; i <= Q->len; ++i)\n    {\n        if (Q->data[i] == e)\n            break;\n    }\n\n    if (i == Q->len)\n        return ERROR;    // \u627e\u4e0d\u5230, \u5143\u7d20e\n\n    return Q->data[Q->old_index[i]];\n}\n\nQF *initQF(void)\n{\n    QF *Q = (QF *)malloc(sizeof(QF));\n    for (int i = 0; i < QF_MAX_SIZE; ++i)\n    {\n        Q->data[i] = '\\0';\n        Q->old_index[i] = i;\n    }\n    Q->len = 0;\n    return Q;\n}\n\nvoid addElement(QF *Q, Element e)\n{\n    if (Q->len < QF_MAX_SIZE)\n        Q->data[Q->len++] = e;\n    else\n        printf(\"add Error!\\n\");     // \u53ef\u4ee5\u5199\u6269\u5bb9 (\u61d2)\n    return;\n}\n\nvoid text(void)\n{\n    QF *QF = initQF();\n    for (int i = 0; i < 6; ++i)\n        addElement(QF, 'A' + i);\n    \n    QFUnion(QF, 'B', 'A');\n    QFUnion(QF, 'C', 'A');\n\n    QFUnion(QF, 'D', 'E');\n    QFUnion(QF, 'F', 'E');\n\n    printf(\"A \u7684\u8001\u5927\u662f: %c\\n\", QFFind(QF, 'A'));\n    printf(\"B \u7684\u8001\u5927\u662f: %c\\n\", QFFind(QF, 'B'));\n    printf(\"C \u7684\u8001\u5927\u662f: %c\\n\", QFFind(QF, 'C'));\n    printf(\"D \u7684\u8001\u5927\u662f: %c\\n\", QFFind(QF, 'D'));\n    printf(\"E \u7684\u8001\u5927\u662f: %c\\n\", QFFind(QF, 'E'));\n    printf(\"F \u7684\u8001\u5927\u662f: %c\\n\", QFFind(QF, 'F'));\n\n    freeQF(QF);\n}\n\nint main(void)\n{\n    // 1. Quick Find\n    // \u67e5\u627e\u7684\u65f6\u95f4\u590d\u6742\u5ea6 O(1)\n    // \u5408\u5e76\u7684\u65f6\u95f4\u590d\u6742\u5ea6 O(N)\n    text();\n    \n    return 0;\n}\n"})}),"\n",(0,t.jsx)(e.h2,{id:"quick-union\u7684\u601d\u8def",children:"Quick Union\u7684\u601d\u8def"}),"\n",(0,t.jsx)(e.p,{children:"\u5c06\u96c6\u5408\u5206\u4e3a\u6839\u7ed3\u70b9\u548c\u7236\u8282\u70b9\u7684\u601d\u60f3\uff0c\u6240\u6709\u8282\u70b9\u4fdd\u5b58\u4ed6\u7684\u7236\u8282\u70b9\u4fe1\u606f\uff0c\u5f53\u53d1\u73b0\u67d0\u4e2a\u8282\u70b9\u7684\u7236\u8282\u70b9\u5c31\u662f\u4ed6\u81ea\u5df1\u7684\u65f6\u5019\uff0c\u8fd9\u4e2a\u8282\u70b9\u5c31\u662f\u6839\u7ed3\u70b9"}),"\n",(0,t.jsxs)(e.ul,{children:["\n",(0,t.jsxs)(e.li,{children:["\u67e5\u627e\u5373",(0,t.jsx)(e.code,{children:"find"}),"\u64cd\u4f5c\u5c31\u662f\u627e\u5230\u8fd9\u4e2a\u5143\u7d20\u7684\u6839\u7ed3\u70b9\uff0c",(0,t.jsx)(e.strong,{children:"\u5224\u65ad\u4e24\u4e2a\u5143\u7d20\u7684\u6839\u7ed3\u70b9\u662f\u4e0d\u662f\u4e00\u81f4"}),"\uff0c\u6765\u5224\u65ad\u662f\u5426\u8fde\u901a\u3002"]}),"\n",(0,t.jsxs)(e.li,{children:["\u5408\u5e76\u5373",(0,t.jsx)(e.code,{children:"Union(a\uff0cb)"}),"\u7684\u65f6\u5019\uff0c\u4e0d\u662f\u5408\u5e76a\u548cb\uff0c\u800c\u662f",(0,t.jsx)(e.strong,{children:"\u5c06a\u7684\u6839\u7ed3\u70b9\u548cb\u7684\u6839\u8282\u70b9\u8fdb\u884c\u5408\u5e76"})]}),"\n"]}),"\n",(0,t.jsx)(e.h3,{id:"\u57fa\u4e8esize\u7684\u7b97\u6cd5\u4f18\u5316",children:"\u57fa\u4e8esize\u7684\u7b97\u6cd5\u4f18\u5316"}),"\n",(0,t.jsx)(e.p,{children:"\u5728Union\u8fc7\u7a0b\u4e2d\uff0c\u53ef\u80fd\u4f1a\u51fa\u73b0\u4e0d\u5e73\u8861\u7684\u60c5\u51b5\uff0c\u751a\u81f3\u9000\u5316\u6210\u4e3a\u94fe\u8868\uff0cUnion(1,3)"}),"\n",(0,t.jsx)(e.p,{children:(0,t.jsx)(e.img,{alt:"Clip_2024-01-28_11-25-17.png ##w300##",src:i(30679).A+"",width:"446",height:"323"})}),"\n",(0,t.jsxs)(e.ul,{children:["\n",(0,t.jsx)(e.li,{children:"\u5c06\u5143\u7d20\u5c11\u7684\u6811, \u5ac1\u63a5\u5230\u5143\u7d20\u591a\u7684\u6811."}),"\n"]}),"\n",(0,t.jsx)(e.h3,{id:"\u57fa\u4e8erank\u7684\u7b97\u6cd5\u6539\u8fdb",children:"\u57fa\u4e8erank\u7684\u7b97\u6cd5\u6539\u8fdb"}),"\n",(0,t.jsx)(e.p,{children:(0,t.jsx)(e.img,{alt:"Clip_2024-01-28_11-26-28.png ##w600##",src:i(11976).A+"",width:"937",height:"278"})}),"\n",(0,t.jsxs)(e.ul,{children:["\n",(0,t.jsx)(e.li,{children:"\u77ee\u7684\u6811, \u5ac1\u63a5\u5230\u9ad8\u7684\u6811"}),"\n"]}),"\n",(0,t.jsx)(e.h3,{id:"\u8def\u5f84\u538b\u7f29",children:"\u8def\u5f84\u538b\u7f29"}),"\n",(0,t.jsx)(e.p,{children:(0,t.jsx)(e.strong,{children:"\u6838\u5fc3\u601d\u60f3"})}),"\n",(0,t.jsxs)(e.ul,{children:["\n",(0,t.jsxs)(e.li,{children:["\u5728",(0,t.jsx)(e.code,{children:"find"}),"\u65f6, \u4f7f\u8def\u5f84\u4e0a\u7684\u6240\u6709\u8282\u70b9\u90fd\u6307\u5411\u6839\u8282\u70b9, \u4ece\u800c\u964d\u4f4e\u6811\u7684\u9ad8\u5ea6\n",(0,t.jsxs)(e.ul,{children:["\n",(0,t.jsx)(e.li,{children:"\u6307\u5411\u7236\u8282\u70b9\u7684\u7236\u8282\u70b9"}),"\n",(0,t.jsx)(e.li,{children:"\u90fd\u6307\u5411\u6839\u7ed3\u70b9"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(e.p,{children:["\u4f7f\u5f97\u7b2c\u4e8c\u6b21",(0,t.jsx)(e.code,{children:"find"}),"\u65f6\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a ",(0,t.jsxs)(e.span,{className:"katex",children:[(0,t.jsx)(e.span,{className:"katex-mathml",children:(0,t.jsx)(e.math,{xmlns:"http://www.w3.org/1998/Math/MathML",children:(0,t.jsxs)(e.semantics,{children:[(0,t.jsxs)(e.mrow,{children:[(0,t.jsx)(e.mi,{children:"O"}),(0,t.jsx)(e.mo,{stretchy:"false",children:"("}),(0,t.jsx)(e.mn,{children:"1"}),(0,t.jsx)(e.mo,{stretchy:"false",children:")"})]}),(0,t.jsx)(e.annotation,{encoding:"application/x-tex",children:"O(1)"})]})})}),(0,t.jsx)(e.span,{className:"katex-html","aria-hidden":"true",children:(0,t.jsxs)(e.span,{className:"base",children:[(0,t.jsx)(e.span,{className:"strut",style:{height:"1em",verticalAlign:"-0.25em"}}),(0,t.jsx)(e.span,{className:"mord mathnormal",style:{marginRight:"0.02778em"},children:"O"}),(0,t.jsx)(e.span,{className:"mopen",children:"("}),(0,t.jsx)(e.span,{className:"mord",children:"1"}),(0,t.jsx)(e.span,{className:"mclose",children:")"})]})})]}),"."]}),"\n",(0,t.jsx)(e.h3,{id:"qu-\u4ee3\u7801\u5b9e\u73b0",children:"QU \u4ee3\u7801\u5b9e\u73b0"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-C",children:'#include <stdio.h>\n#include <stdlib.h>\n\n#define ARR_LEN_MAX 12\ntypedef char Element;\n\n// \u672c\u8d28\u662f\u6811\u7684\u7ebf\u6027\u5b58\u50a8\u7ed3\u6784\ntypedef struct\n{\n    char *data;         // \u6570\u636e\n    int len;            // \u6700\u5927\u957f\u5ea6\n    int n;              // \u5f53\u524d\u5143\u7d20\u4e2a\u6570 (\u53ef\u4ee5\u7528\u4f5c\u7d22\u5f15)\n    int *father_index;  // \u7236\u7d22\u5f15\n    int *node_size;     // \u4ee5\u5f53\u524d\u7ed3\u70b9\u4e3a\u6839\u7684\u603b\u7684\u7ed3\u70b9\u6570, \u9ed8\u8ba4\u662f 1 (\u72ec\u7acb\u4e2a\u4f53)\n} QU;\n\nQU *initQU(void);                           // \u521d\u59cb\u5316\u5e76\u67e5\u96c6\nvoid addQUNode(QU *Q, Element e);           // \u5728QU\u4e2d\u521b\u5efa\u5b64\u7acb\u7684\u7ed3\u70b9\n_Bool QUUnion(QU *Q, Element a, Element b); // \u5c06\u4e24\u4e2a\u5143\u7d20\u6240\u5728\u96c6\u5408\u5408\u5e76\u5230\u4e00\u4e2a\u96c6\u5408\n_Bool QUFind(QU *Q, Element a, Element b);  // \u67e5\u8be2 a\u4e0eb \u5143\u7d20\u662f\u4e0d\u662f\u5728\u540c\u4e00\u4e2a\u96c6\u5408\n// \u91ca\u653e\u5462\n\nQU *initQU(void)\n{\n    QU *Q = (QU *)malloc(sizeof(QU));\n    if (Q == NULL)\n    {\n        printf("ERROR - malloc - QU\\n");\n        return NULL;\n    }\n\n    Q->len = ARR_LEN_MAX;\n    Q->n = 0;\n\n    Q->data = (Element *)malloc(sizeof(Element) * ARR_LEN_MAX);\n    if (Q->data == NULL)\n    {\n        printf("ERROR - malloc - data\\n");\n        return NULL;\n    }\n\n    Q->father_index = (int *)malloc(sizeof(int) * ARR_LEN_MAX);\n    if (Q->father_index == NULL)\n    {\n        printf("ERROR - malloc - f_i\\n");\n        return NULL;\n    }\n\n    Q->node_size = (int *)malloc(sizeof(int) * ARR_LEN_MAX);\n    if (Q->node_size == NULL)\n    {\n        printf("ERROR - malloc - n_s\\n");\n        return NULL;\n    }\n\n    return Q;\n}\n\nstatic _Bool addLenQU(QU *Q)\n{\n    // \u52a0\u957f\u6570\u7ec4\n    Element *data_a = Q->data;\n    int *index_a = Q->father_index;\n    int *size_a = Q->node_size;\n\n    Q->len += ARR_LEN_MAX;  // \u8fd9\u4e2a\u53ef\u4ee5\u81ea\u5df1\u6539 (*2\u4ec0\u4e48\u7684)\n\n    Q->data = (Element *)malloc(sizeof(Element) * Q->len);\n    if (Q->data == NULL)\n    {\n        printf("ERROR - malloc - data\\n");\n        return 1;\n    }\n\n    Q->father_index = (int *)malloc(sizeof(int) * Q->len);\n    if (Q->father_index == NULL)\n    {\n        printf("ERROR - malloc - f_i\\n");\n        return 1;\n    }\n\n    Q->node_size = (int *)malloc(sizeof(int) * Q->len);\n    if (Q->node_size == NULL)\n    {\n        printf("ERROR - malloc - n_s\\n");\n        return 1;\n    }\n\n    for (int i = 0; i < Q->n; ++i)\n    {\n        Q->data[i] = data_a[i];\n        Q->father_index[i] = index_a[i];\n        Q->node_size[i] = size_a[i];\n    }\n\n    free(data_a);\n    free(index_a);\n    free(size_a);\n\n    return 0;\n}\n\nvoid addQUNode(QU *Q, Element e)\n{\n    if (Q->n == Q->len)\n    {\n        // \u957f\u5ea6\u8fc7\u957f, \u9700\u8981\u4fee\u6539\n        if (addLenQU(Q))\n        {\n            printf("ERROR: Add Node\\n");\n            return;\n        }\n    }\n\n    Q->data[Q->n] = e;\n    Q->father_index[Q->n] = Q->n;\n    Q->node_size[Q->n] = 1;\n    ++Q->n;\n}\n\n#define _LujinYaSuo_    // \u5220\u9664\u6216\u8005\u6ce8\u91ca\u8fd9\u91cc\u5c31\u53ef\u4ee5\u4f7f\u7528\u4e0b\u9762 \u666e\u901a\u7b97\u6cd5\n#ifndef _LujinYaSuo_\n// \u666e\u901a\u7b97\u6cd5 (size)\nstatic int getQUNodeIndex(QU *Q, Element e)\n{\n    // \u5bfb\u627e\u7ed3\u70b9e\u7684\u7956\u5148\u7ed3\u70b9\u7684\u7d22\u5f15, \u5982\u679c\u627e\u4e0d\u5230\u5219\u8fd4\u56de-1\n    for (int i = 0; i < Q->n; ++i)\n    {\n        if (Q->data[i] == e)\n        {\n            while (Q->father_index[i] != i)\n            {\n                i = Q->father_index[i];\n            }\n\n            return i;\n        }\n    }\n    return -1;\n}\n#else\n// \u8def\u5f84\u538b\u7f29: \u4f7f\u5f97\u6811\u7684\u9ad8\u5ea6\u53d8\u5c0f, \u5982\u679c\u5728\u5408\u5e76\u96c6\u5408\u7684\u65f6\u5019, \u5355\u72ec\u6765\u8fdb\u884c\u538b\u7f29, \u663e\u7136\u4e5f\u662f\u4f1a\u6d6a\u8d39\u4e00\u4e9b\u65f6\u95f4\u7684\n// \u4f46\u5982\u679c\u5728\u67e5\u627e\u7956\u5148\u7ed3\u70b9\u7684\u8def\u4e0a, \u987a\u4fbf\u628a\u7ed3\u70b9\u7ed9\u5b58\u50a8\u8d77\u6765, \u7b49\u627e\u5230\u4e86\u7956\u5148\u7ed3\u70b9,, \u518d\u4f9d\u6b21\u5c06\u4ed6\u4eec\u7684\u7236\u7ed3\u70b9\u6539\u4e3a\u7956\u5148\u7ed3\u70b9\u4e0d\u5c31\u5b8c\u7f8e\u4e86\u5417\n// \u90a3\u4e48\u4e0b\u6b21\u5c31\u53ef\u4ee5\u751f\u6548\u4e86!\n// \u5f53\u7136, \u8def\u4e0a\u9047\u5230\u7684\u7ed3\u70b9\u4e5f\u662f\u9700\u8981\u5b58\u50a8\u8d77\u6765\u7684, \u6bd5\u7adf\u627e\u7956\u5148\u7684\u8def\u300c\u4e00\u65b9\u901a\u884c\u300d\n// \u6240\u4ee5, \u53ef\u4ee5\u4f7f\u7528\u4e00\u4e2a\u4e1c\u897f\u5b58\u50a8, \u56e0\u4e3a\u5bf9\u987a\u5e8f\u6ca1\u6709\u4ec0\u4e48\u8981\u6c42, \u6240\u4ee5\u7406\u8bba\u4e0a\u4efb\u4f55\u4e1c\u897f\u90fd\u53ef\u4ee5\u62ff\u6765\u5b58\u50a8, \u6808/\u961f\u5217...\n// \u8fd9\u91cc\u4f7f\u7528\u6808\u6765\u8fdb\u884c\u6f14\u793a\n\n// \u56e0\u4e3a\u8fd9\u4e2a\u6808\u662f\u4e13\u95e8\u4e3a\u4e86\u8fd9\u4e2a\u51fd\u6570\u5b9a\u5236\u7684, \u6240\u4ee5\u53ef\u4ee5\u4e0d\u7528\u90a3\u4e48\u6807\u51c6(?), \u8fd9\u4e2a\u5c31\u662f\u4e34\u65f6\u6808\n// (\u7531\u4e8e\u8def\u4e0a\u4f1a\u9047\u5230\u591a\u5c11\u4e2a\u7ed3\u70b9\u6211\u4eec\u4e0d\u77e5\u9053, \u6240\u4ee5\u4f7f\u7528\u94fe\u5f0f\u7ed3\u6784\u5b58\u50a8)\n\ntypedef struct _QU_stack_node\n{\n    int data_index;         // \u8bb0\u5f55\u7ed3\u70b9\u7684\u7d22\u5f15\u5c31\u53ef\u4ee5\u4e86 (\u6211\u7684\u610f\u601d\u662f, \u5f53\u524d\u7684i, \u7136\u540e\u662f\u7236\u4eb2\u7ed3\u70b9i...)\n    struct _QU_stack_node *next;\n} _QU_stack_node;\n\ntypedef struct\n{\n    _QU_stack_node *top;    // NULL \u5c31\u662fok\u4e86\u561b\n} _QU_stack;\n\nstatic _Bool _pushQUS(_QU_stack *S, int index)\n{\n    _QU_stack_node *node = (_QU_stack_node *)malloc(sizeof(_QU_stack_node));\n    if (!node)\n    {\n        printf("ERROR - malloc - Snode\\n");\n        return 0;\n    }\n    node->data_index = index;\n    node->next = S->top;\n    S->top = node;\n    return 1;\n}\n\nstatic _Bool _popQUS(_QU_stack *S, int *index)\n{\n    if (S->top == NULL)\n        return 0;\n    _QU_stack_node *tmp = S->top;\n    *index = tmp->data_index;\n    S->top = tmp->next;\n    free(tmp);\n    return 1;\n}\n\nstatic int getQUNodeIndex(QU *Q, Element e)\n{\n    // \u521b\u5efa\u4e00\u4e2a\u4e34\u65f6\u6808\u7528\u4e8e\u8def\u5f84\u538b\u7f29\n    _QU_stack *S = (_QU_stack *)malloc(sizeof(_QU_stack));\n    if (S == NULL)\n    {\n        printf("ERROR - malloc - S\\n");\n        return -1;\n    }\n    S->top = NULL;\n\n    // \u5bfb\u627e\u7ed3\u70b9e\u7684\u7956\u5148\u7ed3\u70b9\u7684\u7d22\u5f15, \u5982\u679c\u627e\u4e0d\u5230\u5219\u8fd4\u56de-1\n    for (int i = 0; i < Q->n; ++i)\n    {\n        if (Q->data[i] == e)\n        {\n            while (Q->father_index[i] != i)\n            {\n                _pushQUS(S, i);\n                i = Q->father_index[i];\n            }\n\n            int index;\n            while (_popQUS(S, &index))\n            {\n                Q->father_index[index] = i;\n            }\n\n            return i;\n        }\n    }\n    return -1;\n}\n\n#endif\n\n_Bool QUFind(QU *Q, Element a, Element b)\n{\n    int aRoot_index = getQUNodeIndex(Q, a);\n    if (aRoot_index == -1)\n    {\n        printf("\u6ca1\u6709\u627e\u5230\u5143\u7d20 %c \u4e8e\u5e76\u67e5\u96c6\u4e2d!\\n", a);\n        return 0;\n    }\n\n    int bRoot_index = getQUNodeIndex(Q, b);\n    if (bRoot_index == -1)\n    {\n        printf("\u6ca1\u6709\u627e\u5230\u5143\u7d20 %c \u4e8e\u5e76\u67e5\u96c6\u4e2d!\\n", b);\n        return 0;\n    }\n\n    return aRoot_index == bRoot_index;\n}\n\n_Bool QUUnion(QU *Q, Element a, Element b)\n{\n    // \u8fd4\u56de\u503c\u4e3a 0 \u662f\u6267\u884c\u5931\u8d25, \u53cd\u4e4b\u6210\u529f (1)\n    // \u5408\u5e76\u5143\u7d20: \u9009\u62e9\u5c06 a, b \u4e2d \u7ed3\u70b9\u6570(node_size)\u6700\u5c0f\u7684\u5408\u5e76\u5230\u7ed3\u70b9\u6570\u5927\u7684\u53bb, \u5982\u679c\u7ed3\u70b9\u6570\u76f8\u540c\u5219 a--\x3eb (a\u5408\u5e76\u5230b\u53bb)\n    // 1. \u627e\u5230a, b\u7684\u7d22\u5f15\n    int aRoot_index = getQUNodeIndex(Q, a);\n    if (aRoot_index == -1)\n    {\n        printf("\u6ca1\u6709\u627e\u5230\u5143\u7d20 %c \u4e8e\u5e76\u67e5\u96c6\u4e2d!\\n", a);\n        return 0;\n    }\n\n    int bRoot_index = getQUNodeIndex(Q, b);\n    if (bRoot_index == -1)\n    {\n        printf("\u6ca1\u6709\u627e\u5230\u5143\u7d20 %c \u4e8e\u5e76\u67e5\u96c6\u4e2d!\\n", b);\n        return 0;\n    }\n\n    if (aRoot_index == bRoot_index)\n    {\n        printf("\u4e0d\u80fd\u5408\u5e76\u4e00\u4e2a\u76f8\u540c\u7684\u5143\u7d20!\\n");\n        return 0;\n    }\n\n    if (Q->node_size[aRoot_index] > Q->father_index[bRoot_index])\n    {\n        // B --\x3e A\n        Q->father_index[bRoot_index] = aRoot_index;\n        Q->node_size[aRoot_index] += Q->node_size[bRoot_index];\n    }\n    else\n    {\n        // A --\x3e B\n        Q->father_index[aRoot_index] = bRoot_index;\n        Q->node_size[bRoot_index] += Q->node_size[aRoot_index];\n    }\n    return 1;\n}\n\nvoid text_01(void)\n{\n    QU *Q = initQU();\n    for (int i = 0 ; i < 6; ++i)\n    {\n        addQUNode(Q, \'A\' + i);\n    }\n\n    QUUnion(Q, \'A\', \'B\');\n    QUUnion(Q, \'B\', \'C\');\n    printf("A\u4e0eB %s\\n", QUFind(Q, \'A\', \'B\') ? "\u5728\u540c\u4e00\u4e2a\u96c6\u5408" : "\u4e0d\u5728\u540c\u4e00\u4e2a\u96c6\u5408");\n    printf("A\u4e0eC %s\\n", QUFind(Q, \'A\', \'C\') ? "\u5728\u540c\u4e00\u4e2a\u96c6\u5408" : "\u4e0d\u5728\u540c\u4e00\u4e2a\u96c6\u5408");\n    printf("B\u4e0eC %s\\n", QUFind(Q, \'B\', \'C\') ? "\u5728\u540c\u4e00\u4e2a\u96c6\u5408" : "\u4e0d\u5728\u540c\u4e00\u4e2a\u96c6\u5408");\n    printf("D\u4e0eE %s\\n", QUFind(Q, \'D\', \'E\') ? "\u5728\u540c\u4e00\u4e2a\u96c6\u5408" : "\u4e0d\u5728\u540c\u4e00\u4e2a\u96c6\u5408");\n    printf("A\u4e0eD %s\\n", QUFind(Q, \'A\', \'D\') ? "\u5728\u540c\u4e00\u4e2a\u96c6\u5408" : "\u4e0d\u5728\u540c\u4e00\u4e2a\u96c6\u5408");\n    putchar(\'\\n\');\n    QUUnion(Q, \'D\', \'E\');\n    printf("A\u4e0eB %s\\n", QUFind(Q, \'A\', \'B\') ? "\u5728\u540c\u4e00\u4e2a\u96c6\u5408" : "\u4e0d\u5728\u540c\u4e00\u4e2a\u96c6\u5408");\n    printf("A\u4e0eC %s\\n", QUFind(Q, \'A\', \'C\') ? "\u5728\u540c\u4e00\u4e2a\u96c6\u5408" : "\u4e0d\u5728\u540c\u4e00\u4e2a\u96c6\u5408");\n    printf("B\u4e0eC %s\\n", QUFind(Q, \'B\', \'C\') ? "\u5728\u540c\u4e00\u4e2a\u96c6\u5408" : "\u4e0d\u5728\u540c\u4e00\u4e2a\u96c6\u5408");\n    printf("D\u4e0eE %s\\n", QUFind(Q, \'D\', \'E\') ? "\u5728\u540c\u4e00\u4e2a\u96c6\u5408" : "\u4e0d\u5728\u540c\u4e00\u4e2a\u96c6\u5408");\n    printf("A\u4e0eD %s\\n", QUFind(Q, \'A\', \'D\') ? "\u5728\u540c\u4e00\u4e2a\u96c6\u5408" : "\u4e0d\u5728\u540c\u4e00\u4e2a\u96c6\u5408");\n}\n\nint main(void)\n{\n    // \u5e76\u67e5\u96c6\u7684QU\u7b97\u6cd5\n    // \u5305\u542bsize\u8ba1\u6570\u6cd5 \u4e0e \u8def\u5f84\u538b\u7f29\n    text_01();\n\n    return 0;\n}\n'})})]})}function h(n={}){const{wrapper:e}={...(0,l.R)(),...n.components};return e?(0,t.jsx)(e,{...n,children:(0,t.jsx)(o,{...n})}):o(n)}},28453:(n,e,i)=>{i.d(e,{R:()=>a,x:()=>d});var s=i(96540);const t={},l=s.createContext(t);function a(n){const e=s.useContext(l);return s.useMemo((function(){return"function"==typeof n?n(e):{...e,...n}}),[e,n])}function d(n){let e;return e=n.disableParentContext?"function"==typeof n.components?n.components(t):n.components||t:a(n.components),s.createElement(l.Provider,{value:e},n.children)}},30679:(n,e,i)=>{i.d(e,{A:()=>s});const s=i.p+"assets/images/Clip_2024-01-28_11-25-17-a6142c4efbd115d7485413dd5b81f5c3.png"},41306:(n,e,i)=>{i.d(e,{A:()=>s});const s=i.p+"assets/images/Clip_2024-01-28_11-09-36-90823090ea6d31ae90005e8413b7af28.png"},52358:(n,e,i)=>{i.d(e,{A:()=>s});const s=i.p+"assets/images/Clip_2024-01-28_11-01-32-653012f53b715951383f6b846646e846.png"}}]);