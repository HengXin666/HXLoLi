"use strict";(self.webpackChunkhx_loli=self.webpackChunkhx_loli||[]).push([[17919],{28453:(n,t,i)=>{i.d(t,{R:()=>l,x:()=>r});var e=i(96540);const s={},L=e.createContext(s);function l(n){const t=e.useContext(L);return e.useMemo((function(){return"function"==typeof n?n(t):{...t,...n}}),[t,n])}function r(n){let t;return t=n.disableParentContext?"function"==typeof n.components?n.components(s):n.components||s:l(n.components),e.createElement(L.Provider,{value:t},n.children)}},86006:(n,t,i)=>{i.r(t),i.d(t,{assets:()=>d,contentTitle:()=>r,default:()=>c,frontMatter:()=>l,metadata:()=>e,toc:()=>a});const e=JSON.parse('{"id":"\u8ba1\u4f6c\u5e38\u8b58/\u6570\u636e\u7ed3\u6784\u4e0e\u7b97\u6cd5/\u3010\u6570\u636e\u7ed3\u6784\u3011\u7ebf\u6027\u8868/\u94fe\u5f0f\u5b58\u50a8\u7ed3\u6784\u4e36\u5faa\u73af\u94fe\u8868\u3010\u6539\u3011/index","title":"\u94fe\u5f0f\u5b58\u50a8\u7ed3\u6784-\u5faa\u73af\u94fe\u8868(\u6539)","description":"\u4ee3\u7801\u5b9e\u73b0","source":"@site/docs/001-\u8ba1\u4f6c\u5e38\u8b58/001-\u6570\u636e\u7ed3\u6784\u4e0e\u7b97\u6cd5/003-\u3010\u6570\u636e\u7ed3\u6784\u3011\u7ebf\u6027\u8868/006-\u94fe\u5f0f\u5b58\u50a8\u7ed3\u6784\u4e36\u5faa\u73af\u94fe\u8868\u3010\u6539\u3011/index.md","sourceDirName":"001-\u8ba1\u4f6c\u5e38\u8b58/001-\u6570\u636e\u7ed3\u6784\u4e0e\u7b97\u6cd5/003-\u3010\u6570\u636e\u7ed3\u6784\u3011\u7ebf\u6027\u8868/006-\u94fe\u5f0f\u5b58\u50a8\u7ed3\u6784\u4e36\u5faa\u73af\u94fe\u8868\u3010\u6539\u3011","slug":"/\u8ba1\u4f6c\u5e38\u8b58/\u6570\u636e\u7ed3\u6784\u4e0e\u7b97\u6cd5/\u3010\u6570\u636e\u7ed3\u6784\u3011\u7ebf\u6027\u8868/\u94fe\u5f0f\u5b58\u50a8\u7ed3\u6784\u4e36\u5faa\u73af\u94fe\u8868\u3010\u6539\u3011/","permalink":"/HXLoLi/docs/\u8ba1\u4f6c\u5e38\u8b58/\u6570\u636e\u7ed3\u6784\u4e0e\u7b97\u6cd5/\u3010\u6570\u636e\u7ed3\u6784\u3011\u7ebf\u6027\u8868/\u94fe\u5f0f\u5b58\u50a8\u7ed3\u6784\u4e36\u5faa\u73af\u94fe\u8868\u3010\u6539\u3011/","draft":false,"unlisted":false,"editUrl":"https://github.com/HengXin666/HXLoLi/edit/main/docs/001-\u8ba1\u4f6c\u5e38\u8b58/001-\u6570\u636e\u7ed3\u6784\u4e0e\u7b97\u6cd5/003-\u3010\u6570\u636e\u7ed3\u6784\u3011\u7ebf\u6027\u8868/006-\u94fe\u5f0f\u5b58\u50a8\u7ed3\u6784\u4e36\u5faa\u73af\u94fe\u8868\u3010\u6539\u3011/index.md","tags":[],"version":"current","lastUpdatedBy":"Heng_Xin_666","lastUpdatedAt":1745851959000,"frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"\u94fe\u5f0f\u5b58\u50a8\u7ed3\u6784\u4e36\u5faa\u73af\u94fe\u8868","permalink":"/HXLoLi/docs/\u8ba1\u4f6c\u5e38\u8b58/\u6570\u636e\u7ed3\u6784\u4e0e\u7b97\u6cd5/\u3010\u6570\u636e\u7ed3\u6784\u3011\u7ebf\u6027\u8868/\u94fe\u5f0f\u5b58\u50a8\u7ed3\u6784\u4e36\u5faa\u73af\u94fe\u8868/"},"next":{"title":"\u94fe\u5f0f\u5b58\u50a8\u7ed3\u6784\u4e36\u53cc\u5411\u5faa\u73af\u94fe\u8868","permalink":"/HXLoLi/docs/\u8ba1\u4f6c\u5e38\u8b58/\u6570\u636e\u7ed3\u6784\u4e0e\u7b97\u6cd5/\u3010\u6570\u636e\u7ed3\u6784\u3011\u7ebf\u6027\u8868/\u94fe\u5f0f\u5b58\u50a8\u7ed3\u6784\u4e36\u53cc\u5411\u5faa\u73af\u94fe\u8868/"}}');var s=i(74848),L=i(28453);const l={},r="\u94fe\u5f0f\u5b58\u50a8\u7ed3\u6784-\u5faa\u73af\u94fe\u8868(\u6539)",d={},a=[{value:"\u4ee3\u7801\u5b9e\u73b0",id:"\u4ee3\u7801\u5b9e\u73b0",level:2}];function o(n){const t={code:"code",h1:"h1",h2:"h2",header:"header",p:"p",pre:"pre",...(0,L.R)(),...n.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(t.header,{children:(0,s.jsx)(t.h1,{id:"\u94fe\u5f0f\u5b58\u50a8\u7ed3\u6784-\u5faa\u73af\u94fe\u8868\u6539",children:"\u94fe\u5f0f\u5b58\u50a8\u7ed3\u6784-\u5faa\u73af\u94fe\u8868(\u6539)"})}),"\n",(0,s.jsx)(t.h2,{id:"\u4ee3\u7801\u5b9e\u73b0",children:"\u4ee3\u7801\u5b9e\u73b0"}),"\n",(0,s.jsx)(t.p,{children:"\u592a\u61d2\u4e86, \u91ca\u653e\u5c31\u4e0d\u8bf4, \u5220\u9664\u90fd\u4e0d\u5199..."}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-C",children:"#include <stdio.h>\n#include <stdlib.h>\n\n#define OK 1    // \u7a0b\u5e8f\u6b63\u5e38\u8fd0\u884c\n#define ERROR 0 // \u7a0b\u5e8f\u8fd0\u884c\u62a5\u9519\n#define TRUE 1  //\n#define FALSE 0 //\n\n// --- \u7ebf\u6027\u8868 \u5c01\u88c5 --- <\u94fe\u8868>\ntypedef int ElemType;\ntypedef struct Nobe{\n    ElemType data;\n    struct Nobe* next;\n} Nobe;\ntypedef Nobe* LinkList;\n\nint initList(LinkList *L);                      // \u521d\u59cb\u5316\u64cd\u4f5c, \u5efa\u7acb\u4e00\u4e2a\u7a7a\u7684\u7ebf\u6027\u8868 \u548c \u5934\u8282\u70b9\nint getElem(LinkList L, int i, int *e);         // \u5c06\u7ebf\u6027\u8868L\u7b2ci\u4e2a\u5143\u7d20\u8fd4\u56de\u7ed9e\nint listEmpty(LinkList L);                      // \u5224\u65ad\u662f\u5426\u4e3a\u7a7a\u8868 1\u662f0\u5426\nvoid clearList(LinkList *L);                    // \u5c06\u7ebf\u6027\u8868\u6e05\u7a7a\nint locateElem(LinkList L, int e);              // \u67e5\u627e\u7ebf\u6027\u8868L\u4e2d\u662f\u5426\u6709\u503c\u4e3ae\u7684\u5143\u7d20, \u6709\u5219\u8fd4\u56de\u5176\u5728\u8868\u4e2d\u7684\u5e8f\u53f7, \u54260\nint listInsert(LinkList *L, int i, int e);      // \u5728\u7ebf\u6027\u8868L\u4e2d\u7b2ci\u4e2a\u4f4d\u7f6e\u63d2\u5165\u65b0\u5143\u7d20e\nint listDelete(LinkList *L, int i, int *e);     // \u5220\u9664\u7ebf\u6027\u8868L\u4e2d\u7b2ci\u4e2a\u4f4d\u7f6e\u7684\u5143\u7d20, \u5e76\u8fd4\u56de\u5176\u503c\u7ed9e\n\nint listMontage(LinkList *L_main, LinkList *L_free);    // \u62fc\u63a5\u94fe\u8868\nint listHAdd(LinkList *L, int e);               // \u5934\u63d2\u5143\u7d20\nint listAdd(LinkList *L, int e);                // \u5728\u7ebf\u6027\u8868\u5c3e\u90e8\u6dfb\u52a0\u5143\u7d20\nint listPrint(LinkList L);                      // \u6253\u5370\u5355\u94fe\u8868\nint listLength(LinkList L);                     // \u8fd4\u56de\u7ebf\u6027\u8868\u7684\u957f\u5ea6\n\nint initList(LinkList *L)\n{\n    if (*L == NULL)\n    {\n        LinkList h;\n        h = (LinkList)malloc(sizeof(Nobe));// \u5934\u8282\u70b9\n        h->next = h;\n        *L = h;\n        return OK;\n    }\n    else\n    {\n        return ERROR;\n    }\n}\n\nint listPrint(LinkList L)\n{\n    // \u6253\u5370\u5355\u94fe\u8868\n    LinkList p = L->next->next;\n\n    while (p != L->next)\n    {\n        printf(\"%d \", p->data);\n        p = p->next;\n    }\n    putchar('\\n');\n\n    return OK;\n}\n\nint listAdd(LinkList *L, int e)\n{\n    // \u5728\u7ebf\u6027\u8868\u5c3e\u90e8\u6dfb\u52a0\u5143\u7d20\n    if (*L == NULL)\n    {\n        return ERROR;\n    }\n    LinkList p;\n    LinkList cache = NULL;\n    p = (LinkList)malloc(sizeof(Nobe));\n    p->data = e;\n    \n    cache = (*L)->next;\n    (*L)->next = p;\n    *L = p;\n    p->next = cache;\n    return OK;\n}\n\nint listMontage(LinkList *L_main, LinkList *L_free)\n{\n    // \u62fc\u63a5\u94fe\u8868\n    LinkList p = (*L_free)->next;\n    (*L_free)->next = (*L_main)->next->next;\n\n    // free((*L_main)->next);\n    (*L_main)->next = p;\n    return OK;\n}\n\nint main(void)\n{\n    // (\u5355)\u5faa\u73af\u94fe\u8868 + \u7ec8\u7aef\u7ed3\u70b9 + \u5934\u8282\u70b9 \u7248\n    LinkList tail = NULL;\n    LinkList tail_two = NULL;\n    initList(&tail);\n    listAdd(&tail, 1);\n    listAdd(&tail, 2);\n    listAdd(&tail, 3);\n    listAdd(&tail, 4);\n\n    initList(&tail_two);\n    listAdd(&tail_two, 5);\n    listAdd(&tail_two, 6);\n    listAdd(&tail_two, 7);\n    listAdd(&tail_two, 8);\n    listPrint(tail);\n    listPrint(tail_two);\n\n    listMontage(&tail_two, &tail);\n    listPrint(tail);\n    listPrint(tail_two);\n\n    return 0;\n}\n"})})]})}function c(n={}){const{wrapper:t}={...(0,L.R)(),...n.components};return t?(0,s.jsx)(t,{...n,children:(0,s.jsx)(o,{...n})}):o(n)}}}]);