"use strict";(self.webpackChunkhx_loli=self.webpackChunkhx_loli||[]).push([[52300],{99:(n,t,e)=>{e.r(t),e.d(t,{assets:()=>r,contentTitle:()=>s,default:()=>p,frontMatter:()=>i,metadata:()=>S,toc:()=>k});const S=JSON.parse('{"id":"\u8ba1\u4f6c\u5e38\u8b58/\u6570\u636e\u7ed3\u6784\u4e0e\u7b97\u6cd5/\u3010\u6570\u636e\u7ed3\u6784\u3011\u7ebf\u6027\u8868/\u6808\u4e36\u8bfe\u540e\u4e60\u9898code/index","title":"index","description":"\u8bfe\u540e\u4e60\u9898","source":"@site/docs/001-\u8ba1\u4f6c\u5e38\u8b58/001-\u6570\u636e\u7ed3\u6784\u4e0e\u7b97\u6cd5/003-\u3010\u6570\u636e\u7ed3\u6784\u3011\u7ebf\u6027\u8868/013-\u6808\u4e36\u8bfe\u540e\u4e60\u9898code/index.md","sourceDirName":"001-\u8ba1\u4f6c\u5e38\u8b58/001-\u6570\u636e\u7ed3\u6784\u4e0e\u7b97\u6cd5/003-\u3010\u6570\u636e\u7ed3\u6784\u3011\u7ebf\u6027\u8868/013-\u6808\u4e36\u8bfe\u540e\u4e60\u9898code","slug":"/\u8ba1\u4f6c\u5e38\u8b58/\u6570\u636e\u7ed3\u6784\u4e0e\u7b97\u6cd5/\u3010\u6570\u636e\u7ed3\u6784\u3011\u7ebf\u6027\u8868/\u6808\u4e36\u8bfe\u540e\u4e60\u9898code/","permalink":"/HXLoLi/docs/\u8ba1\u4f6c\u5e38\u8b58/\u6570\u636e\u7ed3\u6784\u4e0e\u7b97\u6cd5/\u3010\u6570\u636e\u7ed3\u6784\u3011\u7ebf\u6027\u8868/\u6808\u4e36\u8bfe\u540e\u4e60\u9898code/","draft":false,"unlisted":false,"editUrl":"https://github.com/HengXin666/HXLoLi/edit/main/docs/001-\u8ba1\u4f6c\u5e38\u8b58/001-\u6570\u636e\u7ed3\u6784\u4e0e\u7b97\u6cd5/003-\u3010\u6570\u636e\u7ed3\u6784\u3011\u7ebf\u6027\u8868/013-\u6808\u4e36\u8bfe\u540e\u4e60\u9898code/index.md","tags":[],"version":"current","lastUpdatedBy":"Heng_Xin_666","lastUpdatedAt":1745851959000,"frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"\u94fe\u5f0f\u5b58\u50a8\u7ed3\u6784\u4e36\u94fe\u5f0f\u6808","permalink":"/HXLoLi/docs/\u8ba1\u4f6c\u5e38\u8b58/\u6570\u636e\u7ed3\u6784\u4e0e\u7b97\u6cd5/\u3010\u6570\u636e\u7ed3\u6784\u3011\u7ebf\u6027\u8868/\u94fe\u5f0f\u5b58\u50a8\u7ed3\u6784\u4e36\u94fe\u5f0f\u6808/"},"next":{"title":"\u961f\u5217","permalink":"/HXLoLi/docs/\u8ba1\u4f6c\u5e38\u8b58/\u6570\u636e\u7ed3\u6784\u4e0e\u7b97\u6cd5/\u3010\u6570\u636e\u7ed3\u6784\u3011\u7ebf\u6027\u8868/\u961f\u5217/"}}');var a=e(74848),c=e(28453);const i={},s=void 0,r={},k=[{value:"\u8bfe\u540e\u4e60\u9898",id:"\u8bfe\u540e\u4e60\u9898",level:2},{value:"\u8bfe\u5802\u7ec3\u4e60: \u8fdb\u5236\u8f6c\u6362 \u4e8c\u8fdb\u5236 \u8f6c\u4e3a \u5341\u8fdb\u5236",id:"\u8bfe\u5802\u7ec3\u4e60-\u8fdb\u5236\u8f6c\u6362-\u4e8c\u8fdb\u5236-\u8f6c\u4e3a-\u5341\u8fdb\u5236",level:3},{value:"\u8bfe\u5802\u7ec3\u4e60: \u8fdb\u5236\u8f6c\u6362 \u4e8c\u8fdb\u5236 \u8f6c\u4e3a \u516b\u8fdb\u5236",id:"\u8bfe\u5802\u7ec3\u4e60-\u8fdb\u5236\u8f6c\u6362-\u4e8c\u8fdb\u5236-\u8f6c\u4e3a-\u516b\u8fdb\u5236",level:3},{value:"\u9006\u6ce2\u5170\u8868\u8fbe\u5f0f\u8ba1\u7b97\u52a0\u51cf\u4e58\u9664",id:"\u9006\u6ce2\u5170\u8868\u8fbe\u5f0f\u8ba1\u7b97\u52a0\u51cf\u4e58\u9664",level:3},{value:"\u8f93\u5165\u4e2d\u7f00\u8868\u8fbe\u5f0f\u8f93\u51fa\u9006\u6ce2\u5170\u8868\u8fbe\u5f0f",id:"\u8f93\u5165\u4e2d\u7f00\u8868\u8fbe\u5f0f\u8f93\u51fa\u9006\u6ce2\u5170\u8868\u8fbe\u5f0f",level:3}];function o(n){const t={code:"code",h2:"h2",h3:"h3",p:"p",pre:"pre",...(0,c.R)(),...n.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(t.h2,{id:"\u8bfe\u540e\u4e60\u9898",children:"\u8bfe\u540e\u4e60\u9898"}),"\n",(0,a.jsx)(t.h3,{id:"\u8bfe\u5802\u7ec3\u4e60-\u8fdb\u5236\u8f6c\u6362-\u4e8c\u8fdb\u5236-\u8f6c\u4e3a-\u5341\u8fdb\u5236",children:"\u8bfe\u5802\u7ec3\u4e60: \u8fdb\u5236\u8f6c\u6362 \u4e8c\u8fdb\u5236 \u8f6c\u4e3a \u5341\u8fdb\u5236"}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-C++",children:'#include <stdio.h>\n#include <stdlib.h>\n\n#define OK 1    // \u7a0b\u5e8f\u6b63\u5e38\u8fd0\u884c\n#define ERROR 0 // \u7a0b\u5e8f\u8fd0\u884c\u62a5\u9519\n#define TRUE 1  //\n#define FALSE 0 //\n\n#define STACK_INIT_SIZE 100\n#define STACK_REALLOC_SIZE 4\n\ntypedef int State;      // \u72b6\u6001 OK or ERROR\ntypedef int SElemType;\n\ntypedef struct SqStack\n{\n    SElemType *top;     // \u6808\u9876\n    SElemType *base;    // \u6808\u5e95\n    int stackSize;      // \u6808\u5927\u5c0f(\u5b57\u8282)\n}SqStack;\n\nState initStack(SqStack *S);        // \u521d\u59cb\u5316\u64cd\u4f5c, \u5efa\u7acb\u4e00\u4e2a\u7a7a\u6808\u7684S\nState destroyStack(SqStack *S);     // \u9500\u6bc1\u6808S\nState pushStack(SqStack *S, int e); // \u82e5\u6808S\u5b58\u5728, \u63d2\u5165\u65b0\u5143\u7d20e\u5230\u6808\u4e2d\u5e76\u4e14\u6210\u4e3a\u65b0\u7684\u6808\u9876\u5143\u7d20\nState popStack(SqStack *S, int *e); // \u5220\u9664\u6808\u9876\u5143\u7d20, \u5e76\u7528e\u8fd4\u56de\u5176\u503c \nint StackLen(SqStack S);            // \u8fd4\u56de\u6808\u7684\u957f\u5ea6\n\nint decimalism(SqStack S);          // \u8fd4\u56de\u5341\u8fdb\u5236\u6570\nState printStack(SqStack S);        // \u5148\u51fa\u5148\u6253\u5370\n\nint decimalism(SqStack S)\n{\n    // \u8fd4\u56de\u5341\u8fdb\u5236\u6570\n    int decimalism_num = 0;\n    int len = StackLen(S);\n    for (int i = 1; i <= len;  i++)\n    {\n        decimalism_num += *(S.top - i) * (1 << i - 1);// \u4f7f\u7528\u4f4d\u64cd\u4f5c\u5c31\u4e0d\u7528\u6570\u5b66\u5e93\n    }\n\n    return decimalism_num;\n}\n\nint StackLen(SqStack S)\n{\n    // \u8fd4\u56de\u6808\u7684\u957f\u5ea6\n    return S.top - S.base;// C\u8bed\u8a00\u306e\u667a\u80fd: \u76f8\u540c\u7c7b\u578b\u7684\u5185\u5b58\u5730\u5740\u76f8\u51cf, \u5f97\u5230\u7684\u4e0d\u662f\u5185\u5b58\u5dee \u800c\u662f \u5185\u5b58\u5dee/sizeof(\u6307\u9488\u7c7b\u578b)\n    // \u5927\u5730\u5740 - \u5c0f\u5730\u5740 \u6b63\u786e\n    // \u5c0f\u5730\u5740 - \u5927\u5730\u5740 \u4e5f\u6b63\u786e, \u53ea\u662f\u4e3a\u8d1f\u6570\u7f62\u4e86\n}\n\nState initStack(SqStack *S)\n{\n    // \u521d\u59cb\u5316\u64cd\u4f5c, \u5efa\u7acb\u4e00\u4e2a\u7a7a\u6808\u7684S\n    S->base = (SElemType *)malloc(STACK_INIT_SIZE * sizeof(SElemType));\n    if (!S->base)\n        return ERROR;\n    S->top = S->base;   // \u6808\u9876\u5c31\u662f\u6808\u5e95\n    S->stackSize = STACK_INIT_SIZE * sizeof(SElemType);\n    return OK;\n}\n\nState pushStack(SqStack *S, int e)\n{\n    // \u82e5\u6808S\u5b58\u5728, \u63d2\u5165\u65b0\u5143\u7d20e\u5230\u6808\u4e2d\u5e76\u4e14\u6210\u4e3a\u65b0\u7684\u6808\u9876\u5143\u7d20\n    if (S->top - S->base >= S->stackSize)\n    {\n        realloc(S->base, S->stackSize + STACK_REALLOC_SIZE * sizeof(SElemType));\n        if (!S->base)\n            return ERROR;\n        S->stackSize = S->stackSize + STACK_REALLOC_SIZE * sizeof(SElemType);\n    }\n\n    *(S->top)++ = e;\n    return OK;\n}\n\nState popStack(SqStack *S, int *e)\n{\n    // \u5220\u9664\u6808\u9876\u5143\u7d20, \u5e76\u7528e\u8fd4\u56de\u5176\u503c \n    if (S->top == S->base)\n        return ERROR;\n    \n    *e = *--S->top;\n    return OK;\n}\n\nState destroyStack(SqStack *S)\n{\n    // \u9500\u6bc1\u6808S\n    free(S->base);// \u56e0\u4e3a\u5185\u5b58\u662fS->base\u7533\u8bf7\u7684, \u6240\u4ee5\u9500\u6bc1\u5b83\u5c31OK\u4e86\n    S->top = NULL;\n    S->base = NULL;\n    S->stackSize = 0;\n    return OK;\n}\n\nState printStack(SqStack S)\n{\n    // \u5148\u51fa\u5148\u6253\u5370\n    while (S.top != S.base)\n    {\n        printf("%d ", *--S.top);\n    }\n\n    return OK;\n}\n\nint main(void)\n{\n    // \u6808 \u6307\u9488\u987a\u5e8f\u8868\u793a\n    // \u8bfe\u5802\u7ec3\u4e60: \u8fdb\u5236\u8f6c\u6362 \u4e8c\u8fdb\u5236 \u8f6c\u4e3a \u5341\u8fdb\u5236\n    SqStack s;\n    char str_binary_system[128];\n    initStack(&s);\n    printf("\u8bf7\u8f93\u5165\u4e00\u4e2a\u4e8c\u8fdb\u5236\u6570:");\n    scanf("%s", str_binary_system);\n    getchar();\n    for (int i = 0; str_binary_system[i] != \'\\0\'; ++i)\n    {\n        if (str_binary_system[i] == \'1\')\n        {\n            pushStack(&s, 1);\n        }\n        else\n        {\n            pushStack(&s, 0);\n        }\n    }\n    printf("\u5bf9\u5e94\u7684\u5341\u8fdb\u5236\u662f: %d\\n", decimalism(s));\n\n    destroyStack(&s);\n\n    return 0;\n}\n'})}),"\n",(0,a.jsx)(t.h3,{id:"\u8bfe\u5802\u7ec3\u4e60-\u8fdb\u5236\u8f6c\u6362-\u4e8c\u8fdb\u5236-\u8f6c\u4e3a-\u516b\u8fdb\u5236",children:"\u8bfe\u5802\u7ec3\u4e60: \u8fdb\u5236\u8f6c\u6362 \u4e8c\u8fdb\u5236 \u8f6c\u4e3a \u516b\u8fdb\u5236"}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-C",children:'#include <stdio.h>\n#include <stdlib.h>\n\n#define OK 1    // \u7a0b\u5e8f\u6b63\u5e38\u8fd0\u884c\n#define ERROR 0 // \u7a0b\u5e8f\u8fd0\u884c\u62a5\u9519\n#define TRUE 1  //\n#define FALSE 0 //\n\n#define STACK_INIT_SIZE 100\n#define STACK_REALLOC_SIZE 4\n\ntypedef int State;      // \u72b6\u6001 OK or ERROR\ntypedef int SElemType;\n\ntypedef struct SqStack\n{\n    SElemType *top;     // \u6808\u9876\n    SElemType *base;    // \u6808\u5e95\n    int stackSize;      // \u6808\u5927\u5c0f(\u5b57\u8282)\n}SqStack;\n\nState initStack(SqStack *S);        // \u521d\u59cb\u5316\u64cd\u4f5c, \u5efa\u7acb\u4e00\u4e2a\u7a7a\u6808\u7684S\nState destroyStack(SqStack *S);     // \u9500\u6bc1\u6808S\nState pushStack(SqStack *S, int e); // \u82e5\u6808S\u5b58\u5728, \u63d2\u5165\u65b0\u5143\u7d20e\u5230\u6808\u4e2d\u5e76\u4e14\u6210\u4e3a\u65b0\u7684\u6808\u9876\u5143\u7d20\nState popStack(SqStack *S, int *e); // \u5220\u9664\u6808\u9876\u5143\u7d20, \u5e76\u7528e\u8fd4\u56de\u5176\u503c \nint StackLen(SqStack S);            // \u8fd4\u56de\u6808\u7684\u957f\u5ea6\n\nint octal(SqStack S, SqStack *S_O); // \u8fd4\u56de\u5341\u8fdb\u5236\u6570\nState printStack(SqStack S);        // \u5148\u51fa\u540e\u6253\u5370 awa\n\nint octal(SqStack S, SqStack *S_O)\n{\n    // \u538b\u6808\u516b\u8fdb\u5236\u6570\n    int len = StackLen(S);\n    int octal_num;\n    for (int i = 1; i <= len;)\n    {\n        octal_num = 0;\n        for (int j = 2; j > -1 && i <= len; j--, i++)\n        {\n            octal_num += *(S.top - i) * (1 << j);// \u4f7f\u7528\u4f4d\u64cd\u4f5c\u5c31\u4e0d\u7528\u6570\u5b66\u5e93\n        }\n        pushStack(S_O, octal_num);\n    }\n\n    return OK;\n}\n\nint StackLen(SqStack S)\n{\n    // \u8fd4\u56de\u6808\u7684\u957f\u5ea6\n    return S.top - S.base;// C\u8bed\u8a00\u306e\u667a\u80fd: \u76f8\u540c\u7c7b\u578b\u7684\u5185\u5b58\u5730\u5740\u76f8\u51cf, \u5f97\u5230\u7684\u4e0d\u662f\u5185\u5b58\u5dee \u800c\u662f \u5185\u5b58\u5dee/sizeof(\u6307\u9488\u7c7b\u578b)\n    // \u5927\u5730\u5740 - \u5c0f\u5730\u5740 \u6b63\u786e\n    // \u5c0f\u5730\u5740 - \u5927\u5730\u5740 \u4e5f\u6b63\u786e, \u53ea\u662f\u4e3a\u8d1f\u6570\u7f62\u4e86\n}\n\nState initStack(SqStack *S)\n{\n    // \u521d\u59cb\u5316\u64cd\u4f5c, \u5efa\u7acb\u4e00\u4e2a\u7a7a\u6808\u7684S\n    S->base = (SElemType *)malloc(STACK_INIT_SIZE * sizeof(SElemType));\n    if (!S->base)\n        return ERROR;\n    S->top = S->base;   // \u6808\u9876\u5c31\u662f\u6808\u5e95\n    S->stackSize = STACK_INIT_SIZE * sizeof(SElemType);\n    return OK;\n}\n\nState pushStack(SqStack *S, int e)\n{\n    // \u82e5\u6808S\u5b58\u5728, \u63d2\u5165\u65b0\u5143\u7d20e\u5230\u6808\u4e2d\u5e76\u4e14\u6210\u4e3a\u65b0\u7684\u6808\u9876\u5143\u7d20\n    if (S->top - S->base >= S->stackSize)\n    {\n        realloc(S->base, S->stackSize + STACK_REALLOC_SIZE * sizeof(SElemType));\n        if (!S->base)\n            return ERROR;\n        S->stackSize = S->stackSize + STACK_REALLOC_SIZE * sizeof(SElemType);\n    }\n\n    *(S->top)++ = e;\n    return OK;\n}\n\nState popStack(SqStack *S, int *e)\n{\n    // \u5220\u9664\u6808\u9876\u5143\u7d20, \u5e76\u7528e\u8fd4\u56de\u5176\u503c \n    if (S->top == S->base)\n        return ERROR;\n    \n    *e = *--S->top;\n    return OK;\n}\n\nState destroyStack(SqStack *S)\n{\n    // \u9500\u6bc1\u6808S\n    free(S->base);// \u56e0\u4e3a\u5185\u5b58\u662fS->base\u7533\u8bf7\u7684, \u6240\u4ee5\u9500\u6bc1\u5b83\u5c31OK\u4e86\n    S->top = NULL;\n    S->base = NULL;\n    S->stackSize = 0;\n    return OK;\n}\n\nState printStack(SqStack S)\n{\n    // \u5148\u51fa\u540e\u6253\u5370\n    for (int i = StackLen(S); i > 0; i--)\n    {\n        printf("%d ", *(S.top - i));\n    }\n\n    return OK;\n}\n\nint main(void)\n{\n    // \u6808 \u6307\u9488\u987a\u5e8f\u8868\u793a\n    // \u8bfe\u5802\u7ec3\u4e60: \u8fdb\u5236\u8f6c\u6362 \u4e8c\u8fdb\u5236 \u8f6c\u4e3a \u516b\u8fdb\u5236\n    SqStack s, s_octal;\n    char str_binary_system[128];\n    initStack(&s);\n    initStack(&s_octal);\n    printf("\u8bf7\u8f93\u5165\u4e00\u4e2a\u4e8c\u8fdb\u5236\u6570:");\n    scanf("%s", str_binary_system);\n    getchar();\n    for (int i = 0; str_binary_system[i] != \'\\0\'; ++i)\n    {\n        if (str_binary_system[i] == \'1\')\n        {\n            pushStack(&s, 1);\n        }\n        else\n        {\n            pushStack(&s, 0);\n        }\n    }\n    octal(s, &s_octal);\n    printf("\u5bf9\u5e94\u7684\u516b\u8fdb\u5236\u662f: ");\n    printStack(s_octal);\n\n    destroyStack(&s);\n    destroyStack(&s_octal);\n    \n    return 0;\n}\n'})}),"\n",(0,a.jsx)(t.h3,{id:"\u9006\u6ce2\u5170\u8868\u8fbe\u5f0f\u8ba1\u7b97\u52a0\u51cf\u4e58\u9664",children:"\u9006\u6ce2\u5170\u8868\u8fbe\u5f0f\u8ba1\u7b97\u52a0\u51cf\u4e58\u9664"}),"\n",(0,a.jsx)(t.p,{children:"\u600e\u4e48\u7528\u7684? \u6211\u5fd8\u8bb0\u4e86..."}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-C",children:"#include <stdio.h>\n#include <stdlib.h>\n\n#define OK 1    // \u7a0b\u5e8f\u6b63\u5e38\u8fd0\u884c\n#define ERROR 0 // \u7a0b\u5e8f\u8fd0\u884c\u62a5\u9519\n#define TRUE 1  //\n#define FALSE 0 //\n\ntypedef int State;      // \u72b6\u6001 OK or ERROR\ntypedef int SElemType;\n\ntypedef struct StackNobe\n{\n    SElemType data;\n    struct StackNobe *next;\n}StackNobe, *LinkStackPtr;\n\ntypedef struct LinkStack\n{\n    LinkStackPtr top;\n    int count;\n}LinkStack;\n\nState initStack(LinkStack *S);        // \u521d\u59cb\u5316\u64cd\u4f5c, \u5efa\u7acb\u4e00\u4e2a\u7a7a\u6808\u7684S\nState destroyStack(LinkStack *S);     // \u9500\u6bc1\u6808S\nState pushStack(LinkStack *S, int e); // \u82e5\u6808S\u5b58\u5728, \u63d2\u5165\u65b0\u5143\u7d20e\u5230\u6808\u4e2d\u5e76\u4e14\u6210\u4e3a\u65b0\u7684\u6808\u9876\u5143\u7d20\nState popStack(LinkStack *S, int *e); // \u5220\u9664\u6808\u9876\u5143\u7d20, \u5e76\u7528e\u8fd4\u56de\u5176\u503c \n\nState printStack(LinkStack S);       // \u5148\u51fa\u5148\u6253\u5370\n\nState initStack(LinkStack *S)\n{\n    // \u521d\u59cb\u5316\u64cd\u4f5c, \u5efa\u7acb\u4e00\u4e2a\u7a7a\u6808\u7684S\n    S->top = NULL;\n    S->count = 0;\n    return OK;\n}\n\nState destroyStack(LinkStack *S)\n{\n    // \u9500\u6bc1\u6808S\n    LinkStackPtr p_free = NULL;\n    while (S->top != NULL)\n    {\n        p_free = S->top;\n        S->top = S->top->next;\n        free(p_free);\n    }\n    \n    return OK;\n}\n\nState pushStack(LinkStack *S, int e)\n{\n    // \u82e5\u6808S\u5b58\u5728, \u63d2\u5165\u65b0\u5143\u7d20e\u5230\u6808\u4e2d\u5e76\u4e14\u6210\u4e3a\u65b0\u7684\u6808\u9876\u5143\u7d20\n    LinkStackPtr p;\n    p = (LinkStackPtr)malloc(sizeof(StackNobe));\n    if (!p)\n        return ERROR;\n    p->data = e;\n    p->next = S->top;\n    S->top = p;\n    S->count++;\n    return OK;\n}\n\nState popStack(LinkStack *S, int *e)\n{\n    // \u5220\u9664\u6808\u9876\u5143\u7d20, \u5e76\u7528e\u8fd4\u56de\u5176\u503c \n    if (!S->count)\n        return ERROR;\n    \n    *e = S->top->data;\n    LinkStackPtr p_free = S->top;\n    S->top = S->top->next;\n    S->count--;\n    free(p_free);\n    return OK;\n}\n\nState printStack(LinkStack S)\n{\n    // \u5148\u51fa\u5148\u6253\u5370\n\n    while (S.top != NULL)\n    {\n        printf(\"%d \", S.top->data);\n        S.top = S.top->next;\n    }\n    \n    return OK;\n}\n\nint main(void)\n{\n    // \u6808 \u94fe\u5f0f\u5b58\u50a8\u7ed3\u6784\u53ca\u5b9e\u73b0 + \u9006\u6ce2\u5170\u8868\u8fbe\u5f0f\n    LinkStack stack;\n    int e, i, x, y;\n    char str[8];\n    initStack(&stack);\n    do\n    {\n        scanf(\"%s\", str);\n        getchar();\n        for (i = 0; str[i] != '\\0'; i++)\n        {\n            switch(str[i])\n            {\n                case '+':\n                popStack(&stack, &x);\n                popStack(&stack, &y);\n                pushStack(&stack, x + y);\n                goto _continue;\n                case '-':\n                popStack(&stack, &x);\n                popStack(&stack, &y);\n                pushStack(&stack, y - x);\n                goto _continue;\n                case '*':\n                popStack(&stack, &x);\n                popStack(&stack, &y);\n                pushStack(&stack, x * y);\n                goto _continue;\n                case '/':\n                popStack(&stack, &x);\n                popStack(&stack, &y);\n                pushStack(&stack, y / x);\n                goto _continue;\n                case '#':\n                goto exit;\n                default:\n                e = e * 10 + str[i] - '0';\n                break;\n            }\n        }\n        pushStack(&stack, e);\n        e = 0;\n        _continue:\n        continue;\n    } while (1);\n    exit:\n    printStack(stack);\n\n    destroyStack(&stack);\n    while (1)\n        getchar();\n    return 0;\n}\n"})}),"\n",(0,a.jsx)(t.h3,{id:"\u8f93\u5165\u4e2d\u7f00\u8868\u8fbe\u5f0f\u8f93\u51fa\u9006\u6ce2\u5170\u8868\u8fbe\u5f0f",children:"\u8f93\u5165\u4e2d\u7f00\u8868\u8fbe\u5f0f\u8f93\u51fa\u9006\u6ce2\u5170\u8868\u8fbe\u5f0f"}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-C",children:"#include <stdio.h>\n#include <stdlib.h>\n\n#define OK 1    // \u7a0b\u5e8f\u6b63\u5e38\u8fd0\u884c\n#define ERROR 0 // \u7a0b\u5e8f\u8fd0\u884c\u62a5\u9519\n#define TRUE 1  //\n#define FALSE 0 //\n\ntypedef int State;      // \u72b6\u6001 OK or ERROR\ntypedef char SElemType;\n\ntypedef struct StackNobe\n{\n    SElemType data;\n    struct StackNobe *next;\n}StackNobe, *LinkStackPtr;\n\ntypedef struct LinkStack\n{\n    LinkStackPtr top;\n    int count;\n}LinkStack;\n\nState initStack(LinkStack *S);        // \u521d\u59cb\u5316\u64cd\u4f5c, \u5efa\u7acb\u4e00\u4e2a\u7a7a\u6808\u7684S\nState destroyStack(LinkStack *S);     // \u9500\u6bc1\u6808S\nState pushStack(LinkStack *S, char e); // \u82e5\u6808S\u5b58\u5728, \u63d2\u5165\u65b0\u5143\u7d20e\u5230\u6808\u4e2d\u5e76\u4e14\u6210\u4e3a\u65b0\u7684\u6808\u9876\u5143\u7d20\nState popStack(LinkStack *S, char *e); // \u5220\u9664\u6808\u9876\u5143\u7d20, \u5e76\u7528e\u8fd4\u56de\u5176\u503c \n\nState printStack(LinkStack S);       // \u5148\u51fa\u5148\u6253\u5370\n\nState initStack(LinkStack *S)\n{\n    // \u521d\u59cb\u5316\u64cd\u4f5c, \u5efa\u7acb\u4e00\u4e2a\u7a7a\u6808\u7684S\n    S->top = NULL;\n    S->count = 0;\n    return OK;\n}\n\nState destroyStack(LinkStack *S)\n{\n    // \u9500\u6bc1\u6808S\n    LinkStackPtr p_free = NULL;\n    while (S->top != NULL)\n    {\n        p_free = S->top;\n        S->top = S->top->next;\n        free(p_free);\n    }\n    \n    return OK;\n}\n\nState pushStack(LinkStack *S, char e)\n{\n    // \u82e5\u6808S\u5b58\u5728, \u63d2\u5165\u65b0\u5143\u7d20e\u5230\u6808\u4e2d\u5e76\u4e14\u6210\u4e3a\u65b0\u7684\u6808\u9876\u5143\u7d20\n    LinkStackPtr p;\n    p = (LinkStackPtr)malloc(sizeof(StackNobe));\n    if (!p)\n        return ERROR;\n    p->data = e;\n    p->next = S->top;\n    S->top = p;\n    S->count++;\n    return OK;\n}\n\nState popStack(LinkStack *S, char *e)\n{\n    // \u5220\u9664\u6808\u9876\u5143\u7d20, \u5e76\u7528e\u8fd4\u56de\u5176\u503c \n    if (!S->count)\n        return ERROR;\n    \n    *e = S->top->data;\n    LinkStackPtr p_free = S->top;\n    S->top = S->top->next;\n    S->count--;\n    free(p_free);\n    return OK;\n}\n\nState printStack(LinkStack S)\n{\n    // \u5148\u51fa\u5148\u6253\u5370\n\n    while (S.top != NULL)\n    {\n        printf(\"%d \", S.top->data);\n        S.top = S.top->next;\n    }\n    \n    return OK;\n}\n\nint main(void)\n{\n    // \u6808 \u94fe\u5f0f\u5b58\u50a8\u7ed3\u6784\u53ca\u5b9e\u73b0 + \u8f93\u5165\u4e2d\u7f00\u8868\u8fbe\u5f0f\u8f93\u51fa\u9006\u6ce2\u5170\u8868\u8fbe\u5f0f\n    LinkStack stack;\n    char scan, cache;\n    initStack(&stack);\n    // \u8f93\u5165\n    printf(\"\u8bf7\u8f93\u5165\u4e00\u4e2a\u4e2d\u7f00\u8868\u8fbe\u5f0f(\u6570\u5b57\u4e4b\u95f4\u7d27\u5bc6\u8fde\u63a5, \u7b26\u53f7\u4e4b\u95f4\u7a7a\u683c\u8fde\u63a5, \u4ee5 '#' \u4ee3\u8868\u7ed3\u675f):\\n\");\n    while (1)\n    {\n        scan = getchar();\n        if (scan == '(')\n        {   // \u538b\u6808 '('\n            pushStack(&stack, scan);\n            getchar();\n            continue;\n        }\n        else\n        {\n            // \u6570\u5b57\u5904\u7406\n            if (scan >= '0' && scan <= '9')\n            {\n                while (1)\n                {\n                    putchar(scan);\n                    scan = getchar();\n                    if (scan == ' ')\n                    {\n                        putchar(' ');\n                        break;\n                    }\n                }\n                continue;\n            }\n            else\n            {\n                getchar();\n                if (scan == ')')\n                {\n                    while (1)\n                    {\n                        popStack(&stack, &cache);\n                        if (cache == '(')\n                            break;\n                        putchar(cache);\n                        putchar(' ');\n                    }\n                    continue;\n                }\n\n                while (1)\n                {\n                    if (!popStack(&stack, &cache))\n                    {   // \u7a7a\u6808\u5219\u538b\u6808\n                        pushStack(&stack, scan);\n                        break;\n                    }\n\n                    if (cache == '(' || ((scan == '*' || scan == '/') && (cache == '+' || cache == '-')))\n                    {   // '(' \u5e76\u4e14\u65e0\u5185\u5bb9 \u6216\u8005 scan\u4f18\u5148\u5ea6\u9ad8\u4e8ecache \u5219\u538b\u6808\n                        pushStack(&stack, cache);\n                        pushStack(&stack, scan);\n                        break;\n                    }\n                    else if (scan != '#')\n                    {   // \u5f39\u6808\u6253\u5370\n                        putchar(cache);\n                        putchar(' ');\n                    }\n                    else\n                    {   // \u7ed3\u675f\n                        pushStack(&stack, cache);\n                        while(stack.count)\n                        {\n                            popStack(&stack, &scan);\n                            putchar(scan);\n                            putchar(' ');\n                        }\n                        goto owari;\n                    }\n                }\n            }\n        }\n    }\n    owari:\n    destroyStack(&stack);\n    getchar();\n    getchar();\n    return 0;\n}\n"})})]})}function p(n={}){const{wrapper:t}={...(0,c.R)(),...n.components};return t?(0,a.jsx)(t,{...n,children:(0,a.jsx)(o,{...n})}):o(n)}},28453:(n,t,e)=>{e.d(t,{R:()=>i,x:()=>s});var S=e(96540);const a={},c=S.createContext(a);function i(n){const t=S.useContext(c);return S.useMemo((function(){return"function"==typeof n?n(t):{...t,...n}}),[t,n])}function s(n){let t;return t=n.disableParentContext?"function"==typeof n.components?n.components(a):n.components||a:i(n.components),S.createElement(c.Provider,{value:t},n.children)}}}]);