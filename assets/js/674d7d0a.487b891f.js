"use strict";(self.webpackChunkhx_loli=self.webpackChunkhx_loli||[]).push([[9130],{28453:(n,e,t)=>{t.d(e,{R:()=>s,x:()=>a});var i=t(96540);const c={},L=i.createContext(c);function s(n){const e=i.useContext(L);return i.useMemo((function(){return"function"==typeof n?n(e):{...e,...n}}),[e,n])}function a(n){let e;return e=n.disableParentContext?"function"==typeof n.components?n.components(c):n.components||c:s(n.components),i.createElement(L.Provider,{value:e},n.children)}},86752:(n,e,t)=>{t.r(e),t.d(e,{assets:()=>r,contentTitle:()=>a,default:()=>o,frontMatter:()=>s,metadata:()=>i,toc:()=>d});const i=JSON.parse('{"id":"\u8ba1\u4f6c\u5e38\u8b58/\u6570\u636e\u7ed3\u6784\u4e0e\u7b97\u6cd5/\u3010\u6570\u636e\u7ed3\u6784\u3011\u7ebf\u6027\u8868/\u94fe\u5f0f\u5b58\u50a8\u7ed3\u6784\u4e36\u5faa\u73af\u94fe\u8868/index","title":"\u94fe\u5f0f\u5b58\u50a8\u7ed3\u6784-\u5faa\u73af\u94fe\u8868","description":"\u4ee3\u7801\u5b9e\u73b0","source":"@site/docs/001-\u8ba1\u4f6c\u5e38\u8b58/001-\u6570\u636e\u7ed3\u6784\u4e0e\u7b97\u6cd5/003-\u3010\u6570\u636e\u7ed3\u6784\u3011\u7ebf\u6027\u8868/005-\u94fe\u5f0f\u5b58\u50a8\u7ed3\u6784\u4e36\u5faa\u73af\u94fe\u8868/index.md","sourceDirName":"001-\u8ba1\u4f6c\u5e38\u8b58/001-\u6570\u636e\u7ed3\u6784\u4e0e\u7b97\u6cd5/003-\u3010\u6570\u636e\u7ed3\u6784\u3011\u7ebf\u6027\u8868/005-\u94fe\u5f0f\u5b58\u50a8\u7ed3\u6784\u4e36\u5faa\u73af\u94fe\u8868","slug":"/\u8ba1\u4f6c\u5e38\u8b58/\u6570\u636e\u7ed3\u6784\u4e0e\u7b97\u6cd5/\u3010\u6570\u636e\u7ed3\u6784\u3011\u7ebf\u6027\u8868/\u94fe\u5f0f\u5b58\u50a8\u7ed3\u6784\u4e36\u5faa\u73af\u94fe\u8868/","permalink":"/HXLoLi/docs/\u8ba1\u4f6c\u5e38\u8b58/\u6570\u636e\u7ed3\u6784\u4e0e\u7b97\u6cd5/\u3010\u6570\u636e\u7ed3\u6784\u3011\u7ebf\u6027\u8868/\u94fe\u5f0f\u5b58\u50a8\u7ed3\u6784\u4e36\u5faa\u73af\u94fe\u8868/","draft":false,"unlisted":false,"editUrl":"https://github.com/HengXin666/HXLoLi/edit/main/docs/001-\u8ba1\u4f6c\u5e38\u8b58/001-\u6570\u636e\u7ed3\u6784\u4e0e\u7b97\u6cd5/003-\u3010\u6570\u636e\u7ed3\u6784\u3011\u7ebf\u6027\u8868/005-\u94fe\u5f0f\u5b58\u50a8\u7ed3\u6784\u4e36\u5faa\u73af\u94fe\u8868/index.md","tags":[],"version":"current","lastUpdatedBy":"Heng_Xin_666","lastUpdatedAt":1745851959000,"frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"\u94fe\u5f0f\u5b58\u50a8\u7ed3\u6784\u4e36\u5355\u5411\u94fe\u8868","permalink":"/HXLoLi/docs/\u8ba1\u4f6c\u5e38\u8b58/\u6570\u636e\u7ed3\u6784\u4e0e\u7b97\u6cd5/\u3010\u6570\u636e\u7ed3\u6784\u3011\u7ebf\u6027\u8868/\u94fe\u5f0f\u5b58\u50a8\u7ed3\u6784\u4e36\u5355\u5411\u94fe\u8868/"},"next":{"title":"\u94fe\u5f0f\u5b58\u50a8\u7ed3\u6784\u4e36\u5faa\u73af\u94fe\u8868\u3010\u6539\u3011","permalink":"/HXLoLi/docs/\u8ba1\u4f6c\u5e38\u8b58/\u6570\u636e\u7ed3\u6784\u4e0e\u7b97\u6cd5/\u3010\u6570\u636e\u7ed3\u6784\u3011\u7ebf\u6027\u8868/\u94fe\u5f0f\u5b58\u50a8\u7ed3\u6784\u4e36\u5faa\u73af\u94fe\u8868\u3010\u6539\u3011/"}}');var c=t(74848),L=t(28453);const s={},a="\u94fe\u5f0f\u5b58\u50a8\u7ed3\u6784-\u5faa\u73af\u94fe\u8868",r={},d=[{value:"\u4ee3\u7801\u5b9e\u73b0",id:"\u4ee3\u7801\u5b9e\u73b0",level:2}];function l(n){const e={code:"code",h1:"h1",h2:"h2",header:"header",pre:"pre",...(0,L.R)(),...n.components};return(0,c.jsxs)(c.Fragment,{children:[(0,c.jsx)(e.header,{children:(0,c.jsx)(e.h1,{id:"\u94fe\u5f0f\u5b58\u50a8\u7ed3\u6784-\u5faa\u73af\u94fe\u8868",children:"\u94fe\u5f0f\u5b58\u50a8\u7ed3\u6784-\u5faa\u73af\u94fe\u8868"})}),"\n",(0,c.jsx)(e.h2,{id:"\u4ee3\u7801\u5b9e\u73b0",children:"\u4ee3\u7801\u5b9e\u73b0"}),"\n",(0,c.jsx)(e.pre,{children:(0,c.jsx)(e.code,{className:"language-C",children:'#include <stdio.h>\n#include <stdlib.h>\n\n#define MAXPOOL 1024\n#define OK 1    // \u7a0b\u5e8f\u6b63\u5e38\u8fd0\u884c\n#define ERROR 0 // \u7a0b\u5e8f\u8fd0\u884c\u62a5\u9519\n#define TRUE 1  //\n#define FALSE 0 //\n\n// --- \u7ebf\u6027\u8868 \u5c01\u88c5 --- <\u94fe\u8868>\ntypedef int ElemType;\ntypedef struct Nobe{\n    ElemType data;\n    struct Nobe* next;\n} Nobe;\ntypedef Nobe* LinkList;\n\nint getElem(LinkList L, int i, int *e);         // \u5c06\u7ebf\u6027\u8868L\u7b2ci\u4e2a\u5143\u7d20\u8fd4\u56de\u7ed9e\nint listEmpty(LinkList L);                      // \u5224\u65ad\u662f\u5426\u4e3a\u7a7a\u8868 1\u662f0\u5426\nvoid clearList(LinkList *L);                    // \u5c06\u7ebf\u6027\u8868\u6e05\u7a7a\nint locateElem(LinkList L, int e);              // \u67e5\u627e\u7ebf\u6027\u8868L\u4e2d\u662f\u5426\u6709\u503c\u4e3ae\u7684\u5143\u7d20, \u6709\u5219\u8fd4\u56de\u5176\u5728\u8868\u4e2d\u7684\u5e8f\u53f7, \u54260\nint listInsert(LinkList *L, int i, int e);      // \u5728\u7ebf\u6027\u8868L\u4e2d\u7b2ci\u4e2a\u4f4d\u7f6e\u63d2\u5165\u65b0\u5143\u7d20e\nint listDelete(LinkList *L, int i, int *e);     // \u5220\u9664\u7ebf\u6027\u8868L\u4e2d\u7b2ci\u4e2a\u4f4d\u7f6e\u7684\u5143\u7d20, \u5e76\u8fd4\u56de\u5176\u503c\u7ed9e\n\nint listHAdd(LinkList *L, int e);               // \u5934\u63d2\u5143\u7d20\nint listAdd(LinkList *L, int e);                // \u5728\u7ebf\u6027\u8868\u5c3e\u90e8\u6dfb\u52a0\u5143\u7d20\nint listPrint(LinkList L);                      // \u6253\u5370\u5355\u94fe\u8868\nint listLength(LinkList L);                     // \u8fd4\u56de\u7ebf\u6027\u8868\u7684\u957f\u5ea6\n\nint listHAdd(LinkList *L, int e)\n{\n    // \u5934\u63d2\u6cd5\n    LinkList p;\n    p = (LinkList)malloc(sizeof(Nobe));\n    if (p == NULL)\n    {\n        printf("\u5185\u5b58\u7533\u8bf7\u5931\u8d25!\\n");\n        return ERROR;\n    }\n\n    p->data = e;\n    if (*L == NULL)\n    {\n        *L = p;\n        p->next = p;\n    }\n    else\n    {\n        LinkList cache = (*L)->next;\n        while (cache->next != *L)\n        {\n            cache = cache->next;\n        }\n        \n        p->next = *L;\n        *L = p;\n        cache->next = p; \n    }\n    return OK;\n}\n\nint listPrint(LinkList L)\n{\n    // \u6253\u5370\u5355\u94fe\u8868\n    LinkList cache = L;\n    if (L != NULL)\n    {\n        printf("%d ", cache->data);\n        while (cache->next != L)\n        {\n            cache = cache->next;\n            printf("%d ", cache->data);\n        }\n    }\n    putchar(\'\\n\');\n    return OK;\n}\n\nint listInsert(LinkList *L, int i, int e)\n{\n    // \u5728\u7ebf\u6027\u8868L\u4e2d\u7b2ci\u4e2a\u4f4d\u7f6e\u63d2\u5165\u65b0\u5143\u7d20e\n    if (i < 0)\n    {\n        return ERROR;\n    }\n\n    LinkList p;\n    p = (LinkList)malloc(sizeof(Nobe));\n    if (p == NULL)\n    {\n        printf("\u5185\u5b58\u7533\u8bf7\u5931\u8d25!\\n");\n        return ERROR;\n    }\n\n    p->data = e;\n    if (i == 1)\n    {\n        LinkList cache = (*L)->next;\n        while (cache->next != *L)\n        {\n            cache = cache->next;\n        }\n        \n        p->next = *L;\n        *L = p;\n        cache->next = p; \n    }\n    else\n    {\n        LinkList cache = *L;\n        for (int j = 2; j < i && cache->next != *L; j++)\n        {\n            cache = cache->next;\n        }// \u524d\u4e00\u4e2a\n\n        p->next = cache->next;\n        cache->next = p;\n    }\n\n    return OK;\n}\n\nint listDelete(LinkList *L, int i, int *e)\n{\n    // \u5220\u9664\u7ebf\u6027\u8868L\u4e2d\u7b2ci\u4e2a\u4f4d\u7f6e\u7684\u5143\u7d20, \u5e76\u8fd4\u56de\u5176\u503c\u7ed9e\n    if (i < 0)\n    {\n        return ERROR;\n    }\n\n    LinkList cache = NULL;\n    LinkList free_nobe = NULL;\n    if (i == 1)\n    {\n        free_nobe = *L;\n        cache = free_nobe->next;\n        *e = free_nobe->data;\n        if (cache == *L)\n        {\n            *L = NULL;\n        }\n        else\n        {\n            while (cache->next != free_nobe)\n            {\n                cache = cache->next;\n            }\n            cache->next = free_nobe->next;\n            *L = free_nobe->next;\n        }\n        free(free_nobe);\n    }\n    else\n    {\n        cache = *L;\n        int j = 2;\n        for (; j < i && cache->next != *L; j++)\n        {\n            cache = cache->next;\n        }// \u524d\u4e00\u4e2a\n\n        if (cache->next != *L)\n        {\n            *e = cache->next->data;\n            free_nobe = cache->next;\n            cache->next = cache->next->next;\n            free(free_nobe);\n        }\n       else\n       {\n            return ERROR;\n       }\n    }\n    return OK;\n}\n\nint main(void)\n{\n    // \u5faa\u73af(\u5355)\u94fe\u8868 (\u65e0\u5934\u7ed3\u70b9\u7248)\n    LinkList head = NULL;\n    int e;\n    listHAdd(&head, 1);\n    listHAdd(&head, 4);\n    listHAdd(&head, 3);\n    listHAdd(&head, 3);\n    listHAdd(&head, 2);\n    listHAdd(&head, 2);\n    listHAdd(&head, 3);\n    listInsert(&head, 2, 666);\n    listInsert(&head, 1, 314);\n    listDelete(&head, 9, &e);\n    printf("\u5220\u9664\u4e86%d\\n", e);\n    listPrint(head);\n\n    return 0;\n}\n'})})]})}function o(n={}){const{wrapper:e}={...(0,L.R)(),...n.components};return e?(0,c.jsx)(e,{...n,children:(0,c.jsx)(l,{...n})}):l(n)}}}]);