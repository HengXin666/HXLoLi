"use strict";(self.webpackChunkhx_loli=self.webpackChunkhx_loli||[]).push([[91244],{28453:(n,e,t)=>{t.d(e,{R:()=>a,x:()=>d});var o=t(96540);const r={},i=o.createContext(r);function a(n){const e=o.useContext(i);return o.useMemo((function(){return"function"==typeof n?n(e):{...e,...n}}),[e,n])}function d(n){let e;return e=n.disableParentContext?"function"==typeof n.components?n.components(r):n.components||r:a(n.components),o.createElement(i.Provider,{value:e},n.children)}},66306:(n,e,t)=>{t.r(e),t.d(e,{assets:()=>s,contentTitle:()=>d,default:()=>T,frontMatter:()=>a,metadata:()=>o,toc:()=>l});const o=JSON.parse('{"id":"\u7a0b\u5e8f\u8bed\u8a00/C++/tmp\u4e36C++\u4e36memo/C++\u591a\u8fdb\u7a0b\u4e0e\u591a\u7ebf\u7a0b/\u7ebf\u7a0b\u6c60/\u4ee3\u7801\u5b9e\u73b0/index","title":"\u7ebf\u7a0b\u6c60\u4ee3\u7801\u5b9e\u73b0","description":"\u4ee3\u7801 \u7248\u672cV1.0.1 STL + \u51fd\u6570\u5f0f","source":"@site/docs/002-\u7a0b\u5e8f\u8bed\u8a00/001-C++/002-tmp\u4e36C++\u4e36memo/005-C++\u591a\u8fdb\u7a0b\u4e0e\u591a\u7ebf\u7a0b/003-\u7ebf\u7a0b\u6c60/002-\u4ee3\u7801\u5b9e\u73b0/index.md","sourceDirName":"002-\u7a0b\u5e8f\u8bed\u8a00/001-C++/002-tmp\u4e36C++\u4e36memo/005-C++\u591a\u8fdb\u7a0b\u4e0e\u591a\u7ebf\u7a0b/003-\u7ebf\u7a0b\u6c60/002-\u4ee3\u7801\u5b9e\u73b0","slug":"/\u7a0b\u5e8f\u8bed\u8a00/C++/tmp\u4e36C++\u4e36memo/C++\u591a\u8fdb\u7a0b\u4e0e\u591a\u7ebf\u7a0b/\u7ebf\u7a0b\u6c60/\u4ee3\u7801\u5b9e\u73b0/","permalink":"/HXLoLi/docs/\u7a0b\u5e8f\u8bed\u8a00/C++/tmp\u4e36C++\u4e36memo/C++\u591a\u8fdb\u7a0b\u4e0e\u591a\u7ebf\u7a0b/\u7ebf\u7a0b\u6c60/\u4ee3\u7801\u5b9e\u73b0/","draft":false,"unlisted":false,"editUrl":"https://github.com/HengXin666/HXLoLi/edit/main/docs/002-\u7a0b\u5e8f\u8bed\u8a00/001-C++/002-tmp\u4e36C++\u4e36memo/005-C++\u591a\u8fdb\u7a0b\u4e0e\u591a\u7ebf\u7a0b/003-\u7ebf\u7a0b\u6c60/002-\u4ee3\u7801\u5b9e\u73b0/index.md","tags":[],"version":"current","lastUpdatedBy":"Heng_Xin_666","lastUpdatedAt":1745851959000,"frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"\u7ebf\u7a0b\u6c60\u539f\u7406","permalink":"/HXLoLi/docs/\u7a0b\u5e8f\u8bed\u8a00/C++/tmp\u4e36C++\u4e36memo/C++\u591a\u8fdb\u7a0b\u4e0e\u591a\u7ebf\u7a0b/\u7ebf\u7a0b\u6c60/\u7ebf\u7a0b\u6c60\u539f\u7406/"},"next":{"title":"github\u5f00\u6e90HX\u7ebf\u7a0b\u6c60","permalink":"/HXLoLi/docs/\u7a0b\u5e8f\u8bed\u8a00/C++/tmp\u4e36C++\u4e36memo/C++\u591a\u8fdb\u7a0b\u4e0e\u591a\u7ebf\u7a0b/\u7ebf\u7a0b\u6c60/github\u5f00\u6e90HX\u7ebf\u7a0b\u6c60/"}}');var r=t(74848),i=t(28453);const a={},d="\u7ebf\u7a0b\u6c60\u4ee3\u7801\u5b9e\u73b0",s={},l=[{value:"\u4ee3\u7801 \u7248\u672cV1.0.1 STL + \u51fd\u6570\u5f0f",id:"\u4ee3\u7801-\u7248\u672cv101-stl--\u51fd\u6570\u5f0f",level:2},{value:"\u4ee3\u7801 V2.0.1 STL + \u7c7b\u5c01\u88c5",id:"\u4ee3\u7801-v201-stl--\u7c7b\u5c01\u88c5",level:2},{value:"C++11\u5e93\u5b9e\u73b0\u7ebf\u7a0b\u6c60 std::thread \u539f\u5b50\u53d8\u91cf, \u652f\u6301\u53ef\u53d8\u53c2\u6570\u53ef\u8c03\u7528\u5bf9\u8c61!",id:"c11\u5e93\u5b9e\u73b0\u7ebf\u7a0b\u6c60-stdthread-\u539f\u5b50\u53d8\u91cf-\u652f\u6301\u53ef\u53d8\u53c2\u6570\u53ef\u8c03\u7528\u5bf9\u8c61",level:2}];function _(n){const e={code:"code",h1:"h1",h2:"h2",header:"header",p:"p",pre:"pre",...(0,i.R)(),...n.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(e.header,{children:(0,r.jsx)(e.h1,{id:"\u7ebf\u7a0b\u6c60\u4ee3\u7801\u5b9e\u73b0",children:"\u7ebf\u7a0b\u6c60\u4ee3\u7801\u5b9e\u73b0"})}),"\n",(0,r.jsx)(e.h2,{id:"\u4ee3\u7801-\u7248\u672cv101-stl--\u51fd\u6570\u5f0f",children:"\u4ee3\u7801 \u7248\u672cV1.0.1 STL + \u51fd\u6570\u5f0f"}),"\n",(0,r.jsx)(e.p,{children:"\u5934\u6587\u4ef6"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-C++",children:"#ifndef _HX_POOL_H_\n#define _HX_POOL_H_\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <pthread.h>\n#include <unistd.h>\n#include <queue>\n#include <vector>\n\n#define REDUCE_THREAD_NUMER 2   // \u4e00\u6b21 \u51cf\u5c11\u7ebf\u7a0b\u6570\n\n// \u4efb\u52a1\u7ed3\u6784\u4f53\ntypedef struct\n{\n    void *(*fun)(void *arg);    // \u4efb\u52a1\u51fd\u6570\u6307\u9488\n    void *arg;                  // \u8be5\u51fd\u6570\u7684\u53c2\u6570\u5305\n} Task;\n\n// \u7ebf\u7a0b\u6c60\u7ed3\u6784\u4f53\ntypedef struct\n{\n    // --- \u4efb\u52a1\u961f\u5217\u53ca\u7ba1\u7406\u4e0e\u4f7f\u7528 ---\n    std::queue<Task> TP_task;           // \u5b9a\u4e49\u4efb\u52a1\u961f\u5217\n    pthread_t TP_op;                    // \u7ba1\u7406\u8005\u7ebf\u7a0b\n    std::vector<pthread_t> TP_consumer; // \u6d88\u8d39\u8005\u7ebf\u7a0b\u5217\u8868\n    int TP_exitNum;                     // \u9700\u8981\u9500\u6bc1\u7684\u7ebf\u7a0b\u4e2a\u6570\n\n    // --- \u7ebf\u7a0b\u5b89\u5168(\u7ebf\u7a0b\u540c\u6b65) ---\n    pthread_mutex_t TP_m_all;           // \u6574\u4e2a\u7ebf\u7a0b\u6c60\u7684\u4e92\u65a5\u9501\n    pthread_mutex_t TP_m_busy;          // \u7e41\u5fd9\u7ebf\u7a0b\u7684\u4e92\u65a5\u9501 (\u56e0\u4e3a\u4efb\u52a1\u53ef\u80fd\u4f1a\u9891\u7e41\u52a0\u51cf, \u7ebf\u7a0b\u4e5f\u4f1a\u5207\u6362\u4efb\u52a1/\u6267\u884c\u65b0\u4efb\u52a1)\n    pthread_cond_t TP_c_taskFull;       // \u4efb\u52a1\u961f\u5217\u6ee1\u4e86 (\u4e0d\u80fd\u518d\u52a0\u4e86)\n    pthread_cond_t TP_c_taskEmpty;      // \u4efb\u52a1\u961f\u5217\u7a7a\u4e86 (\u770b\u662f\u5426\u9700\u8981\u51cf\u5c11\u7a7a\u95f2\u7ebf\u7a0b)\n\n    // --- \u7ebf\u7a0b\u6c60\u4fe1\u606f ---\n    int TP_taskMaxSize;                 // \u6700\u5927\u4efb\u52a1\u6570\n    int TP_max;                         // \u6700\u5927\u7ebf\u7a0b\u6570\n    int TP_min;                         // \u6700\u5c0f\u7ebf\u7a0b\u6570 (\u521d\u59cb\u7ebf\u7a0b\u6570)\n    int TP_busy;                        // \u7e41\u5fd9\u7ebf\u7a0b\u6570 (\u6b63\u5728\u6267\u884c\u4efb\u52a1)\n    int TP_idle;                        // \u7a7a\u95f2\u7ebf\u7a0b\u6570 (\u5df2\u6302\u8d77)\n    int TP_live;                        // \u5b58\u6d3b\u7ebf\u7a0b\u6570 == \u7a7a\u95f2\u7ebf\u7a0b\u6570 + \u7e41\u5fd9\u7ebf\u7a0b\u6570\n\n    // --- \u7ebf\u7a0b\u6c60\u5f00\u5173 ---\n    bool TP_free;                       // \u662f\u5426\u91ca\u653e\u7ebf\u7a0b\u6c60 (1\u662f, 0\u5426)\n} ThreadPool;\n\n/**\n * @brief \u521b\u5efa\u7ebf\u7a0b\u6c60\u5e76\u521d\u59cb\u5316\n * @param TP_min \u6700\u5c0f\u7ebf\u7a0b\u6570\n * @param TP_max \u6700\u5927\u7ebf\u7a0b\u6570\n * @return \u7ebf\u7a0b\u6c60\u6307\u9488\n */\nThreadPool *initThreadPool(int TP_min, int TP_max, int TP_taskMaxSize);\n\n// \u9500\u6bc1\u7ebf\u7a0b\u6c60\nint freeThreadPool(ThreadPool *pool);\n\n/**\n * @brief \u7ed9\u7ebf\u7a0b\u6c60\u6dfb\u52a0\u4efb\u52a1\n * @param pool \u7ebf\u7a0b\u6c60\u6307\u9488\n * @param fun \u4efb\u52a1\u51fd\u6570\u6307\u9488\n * @param arg \u53c2\u6570\u5305\u6307\u9488\n * @return 1 \u662f\u6210\u529f; -1 \u662f\u5931\u8d25\n */\nint addTask(ThreadPool *pool, void *(*fun)(void *arg), void *arg);\n\n// \u83b7\u53d6\u7ebf\u7a0b\u6c60\u4e2d\u5de5\u4f5c\u7684\u7ebf\u7a0b\u7684\u4e2a\u6570\nint getTP_busyThreadNumer(ThreadPool *pool);\n\n// \u83b7\u53d6\u7ebf\u7a0b\u6c60\u4e2d\u6d3b\u7740\u7684\u7ebf\u7a0b\u7684\u4e2a\u6570\nint getTP_liveThreadNumer(ThreadPool *pool);\n\n//////////////////////\n// \u5de5\u4f5c\u7684\u7ebf\u7a0b(\u6d88\u8d39\u8005\u7ebf\u7a0b)\u4efb\u52a1\u51fd\u6570\nvoid *consumerThreadFun(void *arg);\n\n// \u7ba1\u7406\u8005\u7ebf\u7a0b \u4efb\u52a1\u51fd\u6570\nvoid *OpThreadFun(void *arg);\n\n// \u5355\u4e2a\u7ebf\u7a0b\u9000\u51fa\n//\n\n#endif // _HX_POOL_H_\n"})}),"\n",(0,r.jsx)(e.p,{children:"\u5b9e\u73b0"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-C++",children:'#include "hx_pool.h"\n\nThreadPool *initThreadPool(int TP_min, int TP_max, int TP_taskMaxSize)\n{\n    ThreadPool *pool = (ThreadPool *)malloc(sizeof(ThreadPool));\n    if (!pool)\n    {\n        printf("ERROR: Malloc error!\\n");\n        return NULL;\n    }\n\n    do\n    {\n        // \u521d\u59cb\u5316\u7ebf\u7a0b\u540c\u6b65\u53d8\u91cf\n        if ( pthread_mutex_init(&pool->TP_m_all, NULL) < 0      ||\n             pthread_mutex_init(&pool->TP_m_busy, NULL) < 0     ||\n             pthread_cond_init(&pool->TP_c_taskEmpty, NULL) < 0 ||\n             pthread_cond_init(&pool->TP_c_taskFull, NULL) < 0 )\n        {\n            printf("ERROR: init error!\\n");\n            break;\n        }\n\n        printf("[INFO]: init \u540c\u6b65\u53d8\u91cf OK!\\n");\n\n        // \u521d\u59cb\u5316\u7ebf\u7a0b\u4fe1\u606f\n        pool->TP_task = std::queue<Task>();\n        pool->TP_exitNum = 0;\n        pool->TP_max = TP_max;\n        pool->TP_min = TP_min;\n        pool->TP_taskMaxSize = TP_taskMaxSize;\n        pool->TP_free = 0;\n        pool->TP_live = pool->TP_idle = pool->TP_min;\n        pool->TP_busy = 0;\n        std::vector<pthread_t>(TP_max, 0).swap(pool->TP_consumer);\n\n        printf("[INFO]: init \u7ebf\u7a0b\u4fe1\u606f OK!\\n");\n\n        // \u542f\u52a8\u751f\u4ea7\u8005(\u7ba1\u7406\u8005)\u4e0e\u6d88\u8d39\u8005\n        pthread_create(&pool->TP_op, NULL, OpThreadFun, pool);\n\n        printf("[INFO]: start OP Thread OK!\\n");\n\n        for (int i = 0; i < pool->TP_live; ++i)\n        {\n            pthread_create(&pool->TP_consumer[i], NULL, consumerThreadFun, pool);\n        }\n\n        printf("[INFO]: start consumer Thread OK!\\n");\n\n        return pool;\n    } while (0);\n\n    free(pool);\n    return NULL;\n}\n\nvoid *consumerThreadFun(void *arg)\n{\n    ThreadPool *pool = (ThreadPool *)arg;\n\n    printf("[INFO]: The Thread uid = %ld, Start!\\n", pthread_self());\n\n    while (!pool->TP_free)\n    {\n        pthread_mutex_lock(&pool->TP_m_all);\n        // \u5224\u65ad\u662f\u5426\u6709\u4efb\u52a1\n        while (pool->TP_task.empty() && !pool->TP_free && !pool->TP_exitNum)\n        {\n            // \u6ca1\u6709\u4efb\u52a1\u5219\u6302\u8d77\n            printf("[INFO]: uid = %ld, \u6ca1\u6709\u4efb\u52a1\u7761\u5927\u89c9!\\n", pthread_self());\n            pthread_cond_wait(&pool->TP_c_taskEmpty, &pool->TP_m_all);\n        }\n\n        // \u9500\u6bc1\u7ebf\u7a0b (\u81ea\u6740)\n        if (pool->TP_exitNum > 0 || pool->TP_free)\n        {\n            --pool->TP_exitNum;\n            for (auto& it : pool->TP_consumer)\n            {\n                if (it == pthread_self())\n                {\n                    it = 0;\n                    break;\n                }\n            }\n            --pool->TP_idle;\n            --pool->TP_live;\n            pthread_mutex_unlock(&pool->TP_m_all);\n            printf("[INFO]: The Thread tid: %ld Eixt!\\n", pthread_self());\n            pthread_exit(NULL);\n        }\n\n        // \u63a5\u4efb\u52a1\n        Task task = pool->TP_task.front();\n        pool->TP_task.pop();\n        ++pool->TP_busy;\n        --pool->TP_idle;\n        pthread_mutex_unlock(&pool->TP_m_all);\n        printf("[INFO]: The uid = %ld, Start Do Task!\\n", pthread_self());\n\n        // \u505a\u4efb\u52a1\n        task.fun(task.arg);\n\n        // \u505a\u5b8c\u4e86\n        pthread_mutex_lock(&pool->TP_m_all);\n        --pool->TP_busy;\n        ++pool->TP_idle;\n        pthread_cond_signal(&pool->TP_c_taskFull);\n        pthread_mutex_unlock(&pool->TP_m_all);\n    }\n\n    pthread_exit(NULL);\n}\n\nvoid *OpThreadFun(void *arg)\n{\n    ThreadPool *pool = (ThreadPool *)arg;\n    while (!pool->TP_free || pool->TP_live > 0)\n    {\n        sleep(3);   // \u6bcf\u95f4\u96943\u79d2\u68c0\u67e5\u4e00\u4e0b\u7ebf\u7a0b\n        printf("[INFO]: \u68c0\u67e5\u6d88\u8d39\u8005\u7ebf\u7a0b\u4e2d...\\n");\n\n\n        // \u5b89\u5168\u7684\u83b7\u53d6\u6570\u636e\n        pthread_mutex_lock(&pool->TP_m_all);\n        int queueLen = pool->TP_task.size();\n        int tLive = pool->TP_live;\n        int tBusy = pool->TP_busy;\n        pthread_mutex_unlock(&pool->TP_m_all); \n\n        printf("\u5f53\u524d\u4efb\u52a1\u961f\u5217\u5269\u6709 %d \u4e2a\u4efb\u52a1, \u7e41\u5fd9\u7ebf\u7a0b: %d, \u5b58\u6d3b\u7ebf\u7a0b: %d\\n", queueLen, tBusy, tLive);\n\n        // \u6dfb\u52a0\u7ebf\u7a0b\n        // \u4efb\u52a1\u7684\u4e2a\u6570 > \u5b58\u6d3b\u7684\u7ebf\u7a0b\u4e2a\u6570 && \u5b58\u6d3b\u7684\u7ebf\u7a0b\u6570 < \u6700\u5927\u7ebf\u7a0b\u6570\n        if (queueLen > tLive && tLive < pool->TP_max)\n        {\n            // \u589e\u52a0\n            for (int i = 0; i < REDUCE_THREAD_NUMER; ++i)\n            {\n                pthread_mutex_lock(&pool->TP_m_all);\n                for (auto& it : pool->TP_consumer)\n                {\n                    if (!it)\n                    {\n                        pthread_create(&it, NULL, consumerThreadFun, pool);\n                        break;\n                    }\n                }\n                ++pool->TP_idle;\n                ++pool->TP_live;\n                pthread_mutex_unlock(&pool->TP_m_all); \n            }\n            printf("[INFO]: \u7ebf\u7a0b\u8fc7\u5c11, \u6dfb\u52a0\u7ebf\u7a0b!\\n");\n        }\n\n        // \u9500\u6bc1\u7ebf\u7a0b\n        // \u5fd9\u7684\u7ebf\u7a0b * 2 < \u5b58\u6d3b\u7684\u7ebf\u7a0b\u6570 && \u5b58\u6d3b\u7684\u7ebf\u7a0b > \u6700\u5c0f\u7ebf\u7a0b\u6570\n        if (tBusy * 2 < tLive && tLive > pool->TP_min || pool->TP_free)\n        {\n            // \u51cf\u5c11\n            pthread_mutex_lock(&pool->TP_m_all);\n            pool->TP_exitNum = REDUCE_THREAD_NUMER;\n            pthread_mutex_unlock(&pool->TP_m_all);\n\n            // \u8ba9\u6d88\u8d39\u8005\u7ebf\u7a0b\u81ea\u6740\n            for (int i = 0; i < REDUCE_THREAD_NUMER; ++i)\n            {\n                pthread_cond_signal(&pool->TP_c_taskEmpty);\n            }\n            printf("[INFO]: \u7ebf\u7a0b\u8fc7\u591a, \u51cf\u5c11\u7ebf\u7a0b!\\n");\n        }\n    }\n    \n    pthread_exit(NULL);\n}\n\nint addTask(ThreadPool *pool, void *(*fun)(void *arg), void *arg)\n{\n    Task task;\n    task.fun = fun;\n    task.arg = arg;\n    pthread_mutex_lock(&pool->TP_m_all);\n    do\n    {\n        if (pool->TP_free)\n            break;\n\n        while (pool->TP_task.size() == pool->TP_taskMaxSize)\n        {\n            // \u4efb\u52a1\u961f\u5217\u5df2\u6ee1, \u7b49\u5f85\u6dfb\u52a0\n            pthread_cond_wait(&pool->TP_c_taskFull, &pool->TP_m_all);\n        }\n\n        if (pool->TP_task.size() < pool->TP_taskMaxSize)\n        {\n            pool->TP_task.push(task);\n            pthread_cond_signal(&pool->TP_c_taskEmpty);\n        }\n        \n        pthread_mutex_unlock(&pool->TP_m_all);\n        printf("[INFO]: Add Task Ok!\\n");\n        return 1;\n    } while(0);\n\n    pthread_mutex_unlock(&pool->TP_m_all);\n    printf("ERROR: Add Task Error!\\n");\n    return -1;\n}\n\nint getTP_busyThreadNumer(ThreadPool *pool)\n{\n    int res = 0;\n    pthread_mutex_lock(&pool->TP_m_busy);\n    res = pool->TP_busy;\n    pthread_mutex_unlock(&pool->TP_m_busy);\n    return res;\n}\n\nint getTP_liveThreadNumer(ThreadPool *pool)\n{\n    int res = 0;\n    pthread_mutex_lock(&pool->TP_m_all);\n    res = pool->TP_live;\n    pthread_mutex_unlock(&pool->TP_m_all);\n    return res;\n}\n\nint freeThreadPool(ThreadPool *pool)\n{\n    pthread_mutex_lock(&pool->TP_m_all);\n    pool->TP_free = 1;\n    pthread_mutex_unlock(&pool->TP_m_all);\n\n    // \u963b\u585e \u7b49\u5f85\u7ebf\u7a0b\u9000\u51fa\n    pthread_join(pool->TP_op, NULL);\n\n    pthread_mutex_destroy(&pool->TP_m_all);\n    pthread_mutex_destroy(&pool->TP_m_busy);\n    pthread_cond_destroy(&pool->TP_c_taskEmpty);\n    pthread_cond_destroy(&pool->TP_c_taskFull);\n\n    // \u91ca\u653e\u8d44\u6e90\n    free(pool);\n\n    printf("[INFO]: Free ThreadPool OK!\\n");\n    return 1;\n}\n'})}),"\n",(0,r.jsx)(e.p,{children:"\u4f7f\u7528"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-C++",children:'#include <stdio.h>\n#include "hx_pool.h"\n\n// \u4efb\u52a1\u51fd\u6570\nvoid* taskFunc(void* arg)\n{\n    int num = *(int*)arg;\n    printf("thread %ld is working, number = %d\\n",\n        pthread_self(), num);\n    sleep(1);\n    free(arg);\n    return NULL;\n}\n\nint main()\n{\n    // \u521b\u5efa\u7ebf\u7a0b\u6c60\n    ThreadPool *pool = initThreadPool(2, 10, 20);\n    for (int i = 0; i < 100; ++i)\n    {\n        int *arg = (int *)malloc(sizeof(int));\n        *arg = i + 100;\n        addTask(pool, taskFunc, arg);\n    }\n\n    sleep(15); // \u7b49\u5f85\u7ebf\u7a0b\u6267\u884c\n    printf("\u91ca\u653e\u7ebf\u7a0b\u4e2d...\\n");\n    freeThreadPool(pool);\n    return 0;\n}\n'})}),"\n",(0,r.jsx)(e.p,{children:"\u8fd0\u884c\u7ed3\u679c:"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-Shell",children:"[root@localhost pool]# g++ hx_pool.cpp main.cpp -l pthread -o app2\n[root@localhost pool]# ./app2\n[INFO]: init \u540c\u6b65\u53d8\u91cf OK!\n[INFO]: init \u7ebf\u7a0b\u4fe1\u606f OK!\n[INFO]: start OP Thread OK!\n[INFO]: start consumer Thread OK!\n[INFO]: Add Task Ok!\n[INFO]: Add Task Ok!\n[INFO]: Add Task Ok!\n[INFO]: Add Task Ok!\n[INFO]: Add Task Ok!\n[INFO]: Add Task Ok!\n[INFO]: Add Task Ok!\n[INFO]: Add Task Ok!\n[INFO]: Add Task Ok!\n[INFO]: Add Task Ok!\n[INFO]: Add Task Ok!\n[INFO]: Add Task Ok!\n[INFO]: Add Task Ok!\n[INFO]: Add Task Ok!\n[INFO]: Add Task Ok!\n[INFO]: Add Task Ok!\n[INFO]: Add Task Ok!\n[INFO]: Add Task Ok!\n[INFO]: Add Task Ok!\n[INFO]: Add Task Ok!\n[INFO]: The Thread uid = 140582403958528, Start!\n[INFO]: The uid = 140582403958528, Start Do Task!\nthread 140582403958528 is working, number = 100\n[INFO]: The Thread uid = 140582395565824, Start!\n[INFO]: The uid = 140582395565824, Start Do Task!\nthread 140582395565824 is working, number = 101\n[INFO]: The uid = 140582403958528, Start Do Task!\nthread 140582403958528 is working, number = 102\n[INFO]: The uid = 140582395565824, Start Do Task!\nthread 140582395565824 is working, number = 103\n[INFO]: Add Task Ok!\n[INFO]: Add Task Ok!\n[INFO]: Add Task Ok!\n[INFO]: Add Task Ok!\n[INFO]: The uid = 140582403958528, Start Do Task!\n[INFO]: The uid = 140582395565824, Start Do Task!\nthread 140582395565824 is working, number = 105\nthread 140582403958528 is working, number = 104\n[INFO]: Add Task Ok!\n[INFO]: Add Task Ok!\n[INFO]: \u68c0\u67e5\u6d88\u8d39\u8005\u7ebf\u7a0b\u4e2d...\n\u5f53\u524d\u4efb\u52a1\u961f\u5217\u5269\u6709 20 \u4e2a\u4efb\u52a1, \u7e41\u5fd9\u7ebf\u7a0b: 2, \u5b58\u6d3b\u7ebf\u7a0b: 2\n[INFO]: The Thread uid = 140582387173120, Start!\n[INFO]: \u7ebf\u7a0b\u8fc7\u5c11, \u6dfb\u52a0\u7ebf\u7a0b!\n[INFO]: The uid = 140582387173120, Start Do Task!\nthread 140582387173120 is working, number = 106\n[INFO]: The Thread uid = 140582378780416, Start!\n[INFO]: The uid = 140582378780416, Start Do Task!\nthread 140582378780416 is working, number = 107\n[INFO]: The uid = 140582395565824, Start Do Task!\nthread 140582395565824 is working, number = 108\n[INFO]: Add Task Ok!\n[INFO]: Add Task Ok!\n[INFO]: Add Task Ok!\n[INFO]: Add Task Ok!\n[INFO]: The uid = 140582403958528, Start Do Task!\nthread 140582403958528 is working, number = 109\n[INFO]: The uid = 140582378780416, Start Do Task!\nthread 140582378780416 is working, number = 110\n[INFO]: The uid = 140582387173120, Start Do Task!\nthread 140582387173120 is working, number = 111\n[INFO]: Add Task Ok!\n[INFO]: Add Task Ok!\n[INFO]: The uid = 140582395565824, Start Do Task!\nthread 140582395565824 is working, number = 112\n[INFO]: The uid = 140582403958528, Start Do Task!\nthread 140582403958528 is working, number = 113\n[INFO]: Add Task Ok!\n[INFO]: Add Task Ok!\n[INFO]: The uid = 140582378780416, Start Do Task!\nthread 140582378780416 is working, number = 114\n[INFO]: Add Task Ok!\n[INFO]: Add Task Ok!\n[INFO]: The uid = 140582387173120, Start Do Task!\nthread 140582387173120 is working, number = 115\n[INFO]: The uid = 140582395565824, Start Do Task!\nthread 140582395565824 is working, number = 116\n[INFO]: The uid = 140582403958528, Start Do Task!\nthread 140582403958528 is working, number = 117\n[INFO]: Add Task Ok!\n[INFO]: Add Task Ok!\n[INFO]: \u68c0\u67e5\u6d88\u8d39\u8005\u7ebf\u7a0b\u4e2d...\n\u5f53\u524d\u4efb\u52a1\u961f\u5217\u5269\u6709 20 \u4e2a\u4efb\u52a1, \u7e41\u5fd9\u7ebf\u7a0b: 4, \u5b58\u6d3b\u7ebf\u7a0b: 4\n[INFO]: The Thread uid = 140582370387712, Start!\n[INFO]: The Thread uid = 140582361995008, Start!\n[INFO]: The uid = 140582361995008, Start Do Task!\nthread 140582361995008 is working, number = 118\n[INFO]: \u7ebf\u7a0b\u8fc7\u5c11, \u6dfb\u52a0\u7ebf\u7a0b!\n[INFO]: The uid = 140582370387712, Start Do Task!\nthread 140582370387712 is working, number = 119\n[INFO]: The uid = 140582378780416, Start Do Task!\nthread 140582378780416 is working, number = 120\n[INFO]: Add Task Ok!\n[INFO]: Add Task Ok!\n[INFO]: Add Task Ok!\n[INFO]: The uid = 140582387173120, Start Do Task!\nthread 140582387173120 is working, number = 121\n[INFO]: Add Task Ok!\n[INFO]: Add Task Ok!\n[INFO]: Add Task Ok!\n[INFO]: The uid = 140582395565824, Start Do Task!\nthread 140582395565824 is working, number = 122\n[INFO]: The uid = 140582403958528, Start Do Task!\nthread 140582403958528 is working, number = 123\n[INFO]: The uid = 140582361995008, Start Do Task!\nthread 140582361995008 is working, number = 124\n[INFO]: The uid = 140582370387712, Start Do Task!\nthread 140582370387712 is working, number = 125\n[INFO]: Add Task Ok!\n[INFO]: Add Task Ok!\n[INFO]: The uid = 140582378780416, Start Do Task!\nthread 140582378780416 is working, number = 126\n[INFO]: Add Task Ok!\n[INFO]: The uid = 140582387173120, Start Do Task!\nthread 140582387173120 is working, number = 127\n[INFO]: The uid = 140582395565824, Start Do Task!\nthread 140582395565824 is working, number = 128\n[INFO]: The uid = 140582403958528, Start Do Task!\nthread 140582403958528 is working, number = 129\n[INFO]: Add Task Ok!\n[INFO]: Add Task Ok!\n[INFO]: Add Task Ok!\n[INFO]: The uid = 140582361995008, Start Do Task!\nthread 140582361995008 is working, number = 130\n[INFO]: Add Task Ok!\n[INFO]: Add Task Ok!\n[INFO]: The uid = 140582370387712, Start Do Task!\nthread 140582370387712 is working, number = 131\n[INFO]: The uid = 140582378780416, Start Do Task!\nthread 140582378780416 is working, number = 132\n[INFO]: Add Task Ok!\n[INFO]: The uid = 140582387173120, Start Do Task!\nthread 140582387173120 is working, number = 133\n[INFO]: Add Task Ok!\n[INFO]: The uid = 140582403958528, Start Do Task!\nthread 140582403958528 is working, number = 135\n[INFO]: Add Task Ok!\n[INFO]: Add Task Ok!\n[INFO]: The uid = 140582395565824, Start Do Task!\nthread 140582395565824 is working, number = 134\n[INFO]: \u68c0\u67e5\u6d88\u8d39\u8005\u7ebf\u7a0b\u4e2d...\n\u5f53\u524d\u4efb\u52a1\u961f\u5217\u5269\u6709 20 \u4e2a\u4efb\u52a1, \u7e41\u5fd9\u7ebf\u7a0b: 6, \u5b58\u6d3b\u7ebf\u7a0b: 6\n[INFO]: The Thread uid = 140582353602304, Start!\n[INFO]: The uid = 140582353602304, Start Do Task!\nthread 140582353602304 is working, number = 136\n[INFO]: \u7ebf\u7a0b\u8fc7\u5c11, \u6dfb\u52a0\u7ebf\u7a0b!\n[INFO]: The Thread uid = 140582345209600, Start!\n[INFO]: The uid = 140582345209600, Start Do Task!\nthread 140582345209600 is working, number = 137\n[INFO]: The uid = 140582361995008, Start Do Task!\nthread 140582361995008 is working, number = 138\n[INFO]: Add Task Ok!\n[INFO]: Add Task Ok!\n[INFO]: Add Task Ok!\n[INFO]: The uid = 140582370387712, Start Do Task!\nthread 140582370387712 is working, number = 139\n[INFO]: Add Task Ok!\n[INFO]: The uid = 140582378780416, Start Do Task!\n[INFO]: Add Task Ok!\nthread 140582378780416 is working, number = 140\n[INFO]: The uid = 140582387173120, Start Do Task!\nthread 140582387173120 is working, number = 141\n[INFO]: Add Task Ok!\n[INFO]: The uid = 140582403958528, Start Do Task!\nthread 140582403958528 is working, number = 142\n[INFO]: Add Task Ok!\n[INFO]: The uid = 140582395565824, Start Do Task!\nthread 140582395565824 is working, number = 143\n[INFO]: Add Task Ok!\n[INFO]: The uid = 140582345209600, Start Do Task!\n[INFO]: The uid = 140582353602304, Start Do Task!\nthread 140582353602304 is working, number = 146\nthread 140582345209600 is working, number = 144\n[INFO]: Add Task Ok!\n[INFO]: Add Task Ok!\n[INFO]: Add Task Ok!\n[INFO]: The uid = 140582361995008, Start Do Task!\nthread 140582361995008 is working, number = 145\n[INFO]: Add Task Ok!\n[INFO]: The uid = 140582370387712, Start Do Task!\nthread 140582370387712 is working, number = 147\n[INFO]: The uid = 140582378780416, Start Do Task!\nthread 140582378780416 is working, number = 148\n[INFO]: Add Task Ok!\n[INFO]: The uid = 140582387173120, Start Do Task!\n[INFO]: Add Task Ok!\n[INFO]: Add Task Ok!\nthread 140582387173120 is working, number = 149\n[INFO]: The uid = 140582403958528, Start Do Task!\nthread 140582403958528 is working, number = 150\n[INFO]: The uid = 140582395565824, Start Do Task!\nthread 140582395565824 is working, number = 151\n[INFO]: Add Task Ok!\n[INFO]: The uid = 140582353602304, Start Do Task!\nthread 140582353602304 is working, number = 152\n[INFO]: Add Task Ok!\n[INFO]: Add Task Ok!\n[INFO]: The uid = 140582345209600, Start Do Task!\nthread 140582345209600 is working, number = 153\n[INFO]: The uid = 140582361995008, Start Do Task!\nthread 140582361995008 is working, number = 154\n[INFO]: The uid = 140582370387712, Start Do Task!\nthread 140582370387712 is working, number = 155\n[INFO]: Add Task Ok!\n[INFO]: Add Task Ok!\n[INFO]: The uid = 140582378780416, Start Do Task!\nthread 140582378780416 is working, number = 156\n[INFO]: Add Task Ok!\n[INFO]: The uid = 140582387173120, Start Do Task!\n[INFO]: The uid = 140582403958528, Start Do Task!\nthread 140582403958528 is working, number = 158\nthread 140582387173120 is working, number = 157\n[INFO]: Add Task Ok!\n[INFO]: Add Task Ok!\n[INFO]: Add Task Ok!\n[INFO]: The uid = 140582395565824, Start Do Task!\nthread 140582395565824 is working, number = 159\n[INFO]: \u68c0\u67e5\u6d88\u8d39\u8005\u7ebf\u7a0b\u4e2d...\n\u5f53\u524d\u4efb\u52a1\u961f\u5217\u5269\u6709 20 \u4e2a\u4efb\u52a1, \u7e41\u5fd9\u7ebf\u7a0b: 8, \u5b58\u6d3b\u7ebf\u7a0b: 8\n[INFO]: The Thread uid = 140582131332864, Start!\n[INFO]: The Thread uid = 140582122940160, Start!\n[INFO]: The uid = 140582122940160, Start Do Task!\nthread 140582122940160 is working, number = 161\n[INFO]: The uid = 140582131332864, Start Do Task!\n[INFO]: \u7ebf\u7a0b\u8fc7\u5c11, \u6dfb\u52a0\u7ebf\u7a0b!\n[INFO]: The uid = 140582353602304, Start Do Task!\n[INFO]: Add Task Ok!\n[INFO]: Add Task Ok!\n[INFO]: Add Task Ok!\nthread 140582353602304 is working, number = 162\nthread 140582131332864 is working, number = 160\n[INFO]: The uid = 140582370387712, Start Do Task!\n[INFO]: The uid = 140582361995008, Start Do Task!\nthread 140582361995008 is working, number = 165\nthread 140582370387712 is working, number = 163\n[INFO]: Add Task Ok!\n[INFO]: Add Task Ok!\n[INFO]: Add Task Ok!\n[INFO]: The uid = 140582345209600, Start Do Task!\nthread 140582345209600 is working, number = 164\n[INFO]: The uid = 140582378780416, Start Do Task!\nthread 140582378780416 is working, number = 166\n[INFO]: Add Task Ok!\n[INFO]: The uid = 140582403958528, Start Do Task!\nthread 140582403958528 is working, number = 167\n[INFO]: The uid = 140582387173120, Start Do Task!\n[INFO]: The uid = 140582395565824, Start Do Task!\n[INFO]: Add Task Ok!\n[INFO]: Add Task Ok!\n[INFO]: Add Task Ok!\nthread 140582395565824 is working, number = 169\nthread 140582387173120 is working, number = 168\n[INFO]: The uid = 140582122940160, Start Do Task!\nthread 140582122940160 is working, number = 170\n[INFO]: Add Task Ok!\n[INFO]: The uid = 140582353602304, Start Do Task!\nthread 140582353602304 is working, number = 171\n[INFO]: Add Task Ok!\n[INFO]: Add Task Ok!\n[INFO]: The uid = 140582131332864, Start Do Task!\nthread 140582131332864 is working, number = 172\n[INFO]: The uid = 140582361995008, Start Do Task!\n[INFO]: Add Task Ok!\n[INFO]: The uid = 140582370387712, Start Do Task!\nthread 140582370387712 is working, number = 174\n[INFO]: The uid = 140582345209600, Start Do Task!\nthread 140582361995008 is working, number = 173\n[INFO]: Add Task Ok!\n[INFO]: The uid = 140582378780416, Start Do Task!\nthread 140582378780416 is working, number = 176\nthread 140582345209600 is working, number = 175\n[INFO]: The uid = 140582403958528, Start Do Task!\nthread 140582403958528 is working, number = 177\n[INFO]: Add Task Ok!\n[INFO]: Add Task Ok!\n[INFO]: Add Task Ok!\n[INFO]: The uid = 140582395565824, Start Do Task!\nthread 140582395565824 is working, number = 178\n[INFO]: Add Task Ok!\n[INFO]: The uid = 140582387173120, Start Do Task!\nthread 140582387173120 is working, number = 179\n[INFO]: Add Task Ok!\n[INFO]: The uid = 140582122940160, Start Do Task!\nthread 140582122940160 is working, number = 180\n[INFO]: The uid = 140582131332864, Start Do Task!\nthread 140582131332864 is working, number = 181\n[INFO]: The uid = 140582353602304, Start Do Task!\nthread 140582353602304 is working, number = 182\n[INFO]: The uid = 140582370387712, Start Do Task!\nthread 140582370387712 is working, number = 183\n[INFO]: The uid = 140582361995008, Start Do Task!\nthread 140582361995008 is working, number = 184\n[INFO]: The uid = 140582378780416, Start Do Task!\nthread 140582378780416 is working, number = 185\n[INFO]: The uid = 140582345209600, Start Do Task!\nthread 140582345209600 is working, number = 186\n[INFO]: The uid = 140582403958528, Start Do Task!\nthread 140582403958528 is working, number = 187\n[INFO]: The uid = 140582395565824, Start Do Task!\nthread 140582395565824 is working, number = 188\n[INFO]: The uid = 140582387173120, Start Do Task!\nthread 140582387173120 is working, number = 189\n[INFO]: \u68c0\u67e5\u6d88\u8d39\u8005\u7ebf\u7a0b\u4e2d...\n\u5f53\u524d\u4efb\u52a1\u961f\u5217\u5269\u6709 10 \u4e2a\u4efb\u52a1, \u7e41\u5fd9\u7ebf\u7a0b: 10, \u5b58\u6d3b\u7ebf\u7a0b: 10\n[INFO]: The uid = 140582122940160, Start Do Task!\nthread 140582122940160 is working, number = 190\n[INFO]: The uid = 140582131332864, Start Do Task!\nthread 140582131332864 is working, number = 191\n[INFO]: The uid = 140582353602304, Start Do Task!\nthread 140582353602304 is working, number = 192\n[INFO]: The uid = 140582370387712, Start Do Task!\nthread 140582370387712 is working, number = 193\n[INFO]: The uid = 140582378780416, Start Do Task!\nthread 140582378780416 is working, number = 194\n[INFO]: The uid = 140582361995008, Start Do Task!\nthread 140582361995008 is working, number = 195\n[INFO]: The uid = 140582403958528, Start Do Task!\nthread 140582403958528 is working, number = 196\n[INFO]: The uid = 140582345209600, Start Do Task!\nthread 140582345209600 is working, number = 197\n[INFO]: The uid = 140582395565824, Start Do Task!\nthread 140582395565824 is working, number = 198\n[INFO]: The uid = 140582387173120, Start Do Task!\nthread 140582387173120 is working, number = 199\n[INFO]: uid = 140582122940160, \u6ca1\u6709\u4efb\u52a1\u7761\u5927\u89c9!\n[INFO]: uid = 140582353602304, \u6ca1\u6709\u4efb\u52a1\u7761\u5927\u89c9!\n[INFO]: uid = 140582131332864, \u6ca1\u6709\u4efb\u52a1\u7761\u5927\u89c9!\n[INFO]: uid = 140582370387712, \u6ca1\u6709\u4efb\u52a1\u7761\u5927\u89c9!\n[INFO]: uid = 140582378780416, \u6ca1\u6709\u4efb\u52a1\u7761\u5927\u89c9!\n[INFO]: uid = 140582361995008, \u6ca1\u6709\u4efb\u52a1\u7761\u5927\u89c9!\n[INFO]: uid = 140582403958528, \u6ca1\u6709\u4efb\u52a1\u7761\u5927\u89c9!\n[INFO]: uid = 140582345209600, \u6ca1\u6709\u4efb\u52a1\u7761\u5927\u89c9!\n[INFO]: uid = 140582387173120, \u6ca1\u6709\u4efb\u52a1\u7761\u5927\u89c9!\n[INFO]: uid = 140582395565824, \u6ca1\u6709\u4efb\u52a1\u7761\u5927\u89c9!\n[INFO]: \u68c0\u67e5\u6d88\u8d39\u8005\u7ebf\u7a0b\u4e2d...\n\u5f53\u524d\u4efb\u52a1\u961f\u5217\u5269\u6709 0 \u4e2a\u4efb\u52a1, \u7e41\u5fd9\u7ebf\u7a0b: 0, \u5b58\u6d3b\u7ebf\u7a0b: 10\n[INFO]: \u7ebf\u7a0b\u8fc7\u591a, \u51cf\u5c11\u7ebf\u7a0b!\n[INFO]: The Thread tid: 140582122940160 Eixt!\n[INFO]: The Thread tid: 140582353602304 Eixt!\n[INFO]: \u68c0\u67e5\u6d88\u8d39\u8005\u7ebf\u7a0b\u4e2d...\n\u5f53\u524d\u4efb\u52a1\u961f\u5217\u5269\u6709 0 \u4e2a\u4efb\u52a1, \u7e41\u5fd9\u7ebf\u7a0b: 0, \u5b58\u6d3b\u7ebf\u7a0b: 8\n[INFO]: \u7ebf\u7a0b\u8fc7\u591a, \u51cf\u5c11\u7ebf\u7a0b!\n[INFO]: The Thread tid: 140582131332864 Eixt!\n[INFO]: The Thread tid: 140582370387712 Eixt!\n[INFO]: \u68c0\u67e5\u6d88\u8d39\u8005\u7ebf\u7a0b\u4e2d...\n\u5f53\u524d\u4efb\u52a1\u961f\u5217\u5269\u6709 0 \u4e2a\u4efb\u52a1, \u7e41\u5fd9\u7ebf\u7a0b: 0, \u5b58\u6d3b\u7ebf\u7a0b: 6\n[INFO]: The Thread tid: 140582378780416 Eixt!\n[INFO]: The Thread tid: 140582361995008 Eixt!\n[INFO]: \u7ebf\u7a0b\u8fc7\u591a, \u51cf\u5c11\u7ebf\u7a0b!\n[INFO]: \u68c0\u67e5\u6d88\u8d39\u8005\u7ebf\u7a0b\u4e2d...\n\u5f53\u524d\u4efb\u52a1\u961f\u5217\u5269\u6709 0 \u4e2a\u4efb\u52a1, \u7e41\u5fd9\u7ebf\u7a0b: 0, \u5b58\u6d3b\u7ebf\u7a0b: 4\n[INFO]: \u7ebf\u7a0b\u8fc7\u591a, \u51cf\u5c11\u7ebf\u7a0b!\n[INFO]: The Thread tid: 140582403958528 Eixt!\n[INFO]: The Thread tid: 140582345209600 Eixt!\n\u91ca\u653e\u7ebf\u7a0b\u4e2d...\n[INFO]: \u68c0\u67e5\u6d88\u8d39\u8005\u7ebf\u7a0b\u4e2d...\n\u5f53\u524d\u4efb\u52a1\u961f\u5217\u5269\u6709 0 \u4e2a\u4efb\u52a1, \u7e41\u5fd9\u7ebf\u7a0b: 0, \u5b58\u6d3b\u7ebf\u7a0b: 2\n[INFO]: \u7ebf\u7a0b\u8fc7\u591a, \u51cf\u5c11\u7ebf\u7a0b!\n[INFO]: The Thread tid: 140582395565824 Eixt!\n[INFO]: The Thread tid: 140582387173120 Eixt!\n[INFO]: Free ThreadPool OK!\n"})}),"\n",(0,r.jsx)(e.h2,{id:"\u4ee3\u7801-v201-stl--\u7c7b\u5c01\u88c5",children:"\u4ee3\u7801 V2.0.1 STL + \u7c7b\u5c01\u88c5"}),"\n",(0,r.jsx)(e.p,{children:"\u4fee\u6539\u4f7f\u7528\u7684STL\u4e3aset\u56e0\u4e3a\u662f\u7ea2\u9ed1\u6811\u6240\u4ee5\u65f6\u95f4\u590d\u6742\u5ea6\u4e3aO(lngN);"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-C++",children:"#ifndef _HX_POOL_H_\n#define _HX_POOL_H_\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <pthread.h>\n#include <unistd.h>\n#include <queue>\n#include <set>\n\n#define REDUCE_THREAD_NUMER 2   // \u4e00\u6b21 \u51cf\u5c11\u7ebf\u7a0b\u6570\n\n// \u4efb\u52a1\u7ed3\u6784\u4f53\ntypedef struct\n{\n    void *(*fun)(void *arg);    // \u4efb\u52a1\u51fd\u6570\u6307\u9488\n    void *arg;                  // \u8be5\u51fd\u6570\u7684\u53c2\u6570\u5305\n} Task;\n\n// \u7ebf\u7a0b\u6c60\u7ed3\u6784\u4f53\ntypedef struct\n{\n    // --- \u4efb\u52a1\u961f\u5217\u53ca\u7ba1\u7406\u4e0e\u4f7f\u7528 ---\n    std::queue<Task> TP_task;           // \u5b9a\u4e49\u4efb\u52a1\u961f\u5217\n    pthread_t TP_op;                    // \u7ba1\u7406\u8005\u7ebf\u7a0b\n    std::set<pthread_t> TP_consumer; // \u6d88\u8d39\u8005\u7ebf\u7a0b\u5217\u8868\n    int TP_exitNum;                     // \u9700\u8981\u9500\u6bc1\u7684\u7ebf\u7a0b\u4e2a\u6570\n\n    // --- \u7ebf\u7a0b\u5b89\u5168(\u7ebf\u7a0b\u540c\u6b65) ---\n    pthread_mutex_t TP_m_all;           // \u6574\u4e2a\u7ebf\u7a0b\u6c60\u7684\u4e92\u65a5\u9501\n    pthread_mutex_t TP_m_busy;          // \u7e41\u5fd9\u7ebf\u7a0b\u7684\u4e92\u65a5\u9501 (\u56e0\u4e3a\u4efb\u52a1\u53ef\u80fd\u4f1a\u9891\u7e41\u52a0\u51cf, \u7ebf\u7a0b\u4e5f\u4f1a\u5207\u6362\u4efb\u52a1/\u6267\u884c\u65b0\u4efb\u52a1)\n    pthread_cond_t TP_c_taskFull;       // \u4efb\u52a1\u961f\u5217\u6ee1\u4e86 (\u4e0d\u80fd\u518d\u52a0\u4e86)\n    pthread_cond_t TP_c_taskEmpty;      // \u4efb\u52a1\u961f\u5217\u7a7a\u4e86 (\u770b\u662f\u5426\u9700\u8981\u51cf\u5c11\u7a7a\u95f2\u7ebf\u7a0b)\n\n    // --- \u7ebf\u7a0b\u6c60\u4fe1\u606f ---\n    int TP_taskMaxSize;                 // \u6700\u5927\u4efb\u52a1\u6570\n    int TP_max;                         // \u6700\u5927\u7ebf\u7a0b\u6570\n    int TP_min;                         // \u6700\u5c0f\u7ebf\u7a0b\u6570 (\u521d\u59cb\u7ebf\u7a0b\u6570)\n    int TP_busy;                        // \u7e41\u5fd9\u7ebf\u7a0b\u6570 (\u6b63\u5728\u6267\u884c\u4efb\u52a1)\n    int TP_idle;                        // \u7a7a\u95f2\u7ebf\u7a0b\u6570 (\u5df2\u6302\u8d77)\n    int TP_live;                        // \u5b58\u6d3b\u7ebf\u7a0b\u6570 == \u7a7a\u95f2\u7ebf\u7a0b\u6570 + \u7e41\u5fd9\u7ebf\u7a0b\u6570\n\n    // --- \u7ebf\u7a0b\u6c60\u5f00\u5173 ---\n    bool TP_free;                       // \u662f\u5426\u91ca\u653e\u7ebf\u7a0b\u6c60 (1\u662f, 0\u5426)\n} ThreadPool;\n\nclass HX_ThreadPool\n{\npublic:\n    /**\n     * @brief \u521b\u5efa\u7ebf\u7a0b\u6c60\u5e76\u521d\u59cb\u5316\n     * @param TP_min \u6700\u5c0f\u7ebf\u7a0b\u6570\n     * @param TP_max \u6700\u5927\u7ebf\u7a0b\u6570\n     * @param TP_taskMaxSize \u6700\u5927\u4efb\u52a1\u6570\n     */\n    HX_ThreadPool(int TP_min, int TP_max, int TP_taskMaxSize);\n\n    ~HX_ThreadPool();\n\n    // \u9500\u6bc1\u7ebf\u7a0b\u6c60\n    int freeThreadPool();\n\n    /**\n     * @brief \u7ed9\u7ebf\u7a0b\u6c60\u6dfb\u52a0\u4efb\u52a1\n     * @param fun \u4efb\u52a1\u51fd\u6570\u6307\u9488\n     * @param arg \u53c2\u6570\u5305\u6307\u9488\n     * @return 1 \u662f\u6210\u529f; -1 \u662f\u5931\u8d25\n     */\n    int addTask(void *(*fun)(void *arg), void *arg);\n\n    // \u83b7\u53d6\u7ebf\u7a0b\u6c60\u4e2d\u5de5\u4f5c\u7684\u7ebf\u7a0b\u7684\u4e2a\u6570\n    int getTP_busyThreadNumer();\n\n    // \u83b7\u53d6\u7ebf\u7a0b\u6c60\u4e2d\u6d3b\u7740\u7684\u7ebf\u7a0b\u7684\u4e2a\u6570\n    int getTP_liveThreadNumer();\n\nprivate:\n    // \u4e0d\u4f7f\u7528\u9759\u6001\u51fd\u6570/\u5168\u5c40\u51fd\u6570, \u4e0d\u80fd\u4f7f\u7528\u5176\u7c7b\u51fd\u6570\u51fd\u6570\u6307\u9488\n\n    // \u5de5\u4f5c\u7684\u7ebf\u7a0b(\u6d88\u8d39\u8005\u7ebf\u7a0b)\u4efb\u52a1\u51fd\u6570\n    static void *consumerThreadFun(void *arg);\n\n    // \u7ba1\u7406\u8005\u7ebf\u7a0b \u4efb\u52a1\u51fd\u6570\n    static void *OpThreadFun(void *arg);\n\n    // \u5355\u4e2a\u7ebf\u7a0b\u9000\u51fa\n    \n    ThreadPool* pool;\n};\n#endif // _HX_POOL_H_\n"})}),"\n",(0,r.jsx)(e.p,{children:"\u5b9e\u73b0"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-C++",children:'#include "hx_pool.h"\n\nHX_ThreadPool::HX_ThreadPool(int TP_min, int TP_max, int TP_taskMaxSize)\n{\n    this->pool = new ThreadPool[1];\n\n    do\n    {\n        // \u521d\u59cb\u5316\u7ebf\u7a0b\u540c\u6b65\u53d8\u91cf\n        if ( pthread_mutex_init(&pool->TP_m_all, NULL) < 0      ||\n             pthread_mutex_init(&pool->TP_m_busy, NULL) < 0     ||\n             pthread_cond_init(&pool->TP_c_taskEmpty, NULL) < 0 ||\n             pthread_cond_init(&pool->TP_c_taskFull, NULL) < 0 )\n        {\n            printf("ERROR: init error!\\n");\n            break;\n        }\n\n        printf("[INFO]: init \u540c\u6b65\u53d8\u91cf OK!\\n");\n\n        // \u521d\u59cb\u5316\u7ebf\u7a0b\u4fe1\u606f\n        pool->TP_consumer = std::set<pthread_t>();\n        pool->TP_task = std::queue<Task>();\n        pool->TP_exitNum = 0;\n        pool->TP_max = TP_max;\n        pool->TP_min = TP_min;\n        pool->TP_taskMaxSize = TP_taskMaxSize;\n        pool->TP_free = 0;\n        pool->TP_live = pool->TP_idle = pool->TP_min;\n        pool->TP_busy = 0;\n\n        printf("[INFO]: init \u7ebf\u7a0b\u4fe1\u606f OK!\\n");\n\n        // \u542f\u52a8\u751f\u4ea7\u8005(\u7ba1\u7406\u8005)\u4e0e\u6d88\u8d39\u8005\n        pthread_create(&pool->TP_op, NULL, this->OpThreadFun, pool);\n\n        printf("[INFO]: start OP Thread OK!\\n");\n\n        for (int i = 0; i < pool->TP_live; ++i)\n        {\n            pthread_t c_t;\n            pthread_create(&c_t, NULL, this->consumerThreadFun, pool);\n            pool->TP_consumer.insert(c_t);\n        }\n\n        printf("[INFO]: start consumer Thread OK!\\n");\n        return;\n    } while (0);\n\n    delete pool;\n}\n\nvoid *HX_ThreadPool::consumerThreadFun(void *arg)\n{\n    ThreadPool *pool = (ThreadPool *)arg;\n\n    printf("[INFO]: The Thread uid = %ld, Start!\\n", pthread_self());\n\n    while (!pool->TP_free)\n    {\n        pthread_mutex_lock(&pool->TP_m_all);\n        // \u5224\u65ad\u662f\u5426\u6709\u4efb\u52a1\n        while (pool->TP_task.empty() && !pool->TP_free && !pool->TP_exitNum)\n        {\n            // \u6ca1\u6709\u4efb\u52a1\u5219\u6302\u8d77\n            printf("[INFO]: uid = %ld, \u6ca1\u6709\u4efb\u52a1\u7761\u5927\u89c9!\\n", pthread_self());\n            pthread_cond_wait(&pool->TP_c_taskEmpty, &pool->TP_m_all);\n        }\n\n        // \u9500\u6bc1\u7ebf\u7a0b (\u81ea\u6740)\n        if (pool->TP_exitNum > 0 || pool->TP_free)\n        {\n            --pool->TP_exitNum;\n            pool->TP_consumer.emplace(pthread_self());\n            --pool->TP_idle;\n            --pool->TP_live;\n            pthread_mutex_unlock(&pool->TP_m_all);\n            printf("[INFO]: The Thread tid: %ld Eixt!\\n", pthread_self());\n            pthread_exit(NULL);\n        }\n\n        // \u63a5\u4efb\u52a1\n        Task task = pool->TP_task.front();\n        pool->TP_task.pop();\n        ++pool->TP_busy;\n        --pool->TP_idle;\n        pthread_mutex_unlock(&pool->TP_m_all);\n        printf("[INFO]: The uid = %ld, Start Do Task!\\n", pthread_self());\n\n        // \u505a\u4efb\u52a1\n        task.fun(task.arg);\n\n        // \u505a\u5b8c\u4e86\n        pthread_mutex_lock(&pool->TP_m_all);\n        --pool->TP_busy;\n        ++pool->TP_idle;\n        pthread_cond_signal(&pool->TP_c_taskFull);\n        pthread_mutex_unlock(&pool->TP_m_all);\n    }\n\n    pthread_exit(NULL);\n}\n\nvoid *HX_ThreadPool::OpThreadFun(void *arg)\n{\n    ThreadPool *pool = (ThreadPool *)arg;\n    while (!pool->TP_free || pool->TP_live > 0)\n    {\n        sleep(3);   // \u6bcf\u95f4\u96943\u79d2\u68c0\u67e5\u4e00\u4e0b\u7ebf\u7a0b\n        printf("[INFO]: \u68c0\u67e5\u6d88\u8d39\u8005\u7ebf\u7a0b\u4e2d...\\n");\n\n        // \u5b89\u5168\u7684\u83b7\u53d6\u6570\u636e\n        pthread_mutex_lock(&pool->TP_m_all);\n        int queueLen = pool->TP_task.size();\n        int tLive = pool->TP_live;\n        int tBusy = pool->TP_busy;\n        pthread_mutex_unlock(&pool->TP_m_all); \n\n        printf("\u5f53\u524d\u4efb\u52a1\u961f\u5217\u5269\u6709 %d \u4e2a\u4efb\u52a1, \u7e41\u5fd9\u7ebf\u7a0b: %d, \u5b58\u6d3b\u7ebf\u7a0b: %d\\n", queueLen, tBusy, tLive);\n\n        // \u6dfb\u52a0\u7ebf\u7a0b\n        // \u4efb\u52a1\u7684\u4e2a\u6570 > \u5b58\u6d3b\u7684\u7ebf\u7a0b\u4e2a\u6570 && \u5b58\u6d3b\u7684\u7ebf\u7a0b\u6570 < \u6700\u5927\u7ebf\u7a0b\u6570\n        if (queueLen > tLive && tLive < pool->TP_max)\n        {\n            // \u589e\u52a0\n            for (int i = 0; i < REDUCE_THREAD_NUMER; ++i)\n            {\n                pthread_mutex_lock(&pool->TP_m_all);\n                pthread_t c_t;\n                pthread_create(&c_t, NULL, consumerThreadFun, pool);\n                pool->TP_consumer.insert(c_t);\n                ++pool->TP_idle;\n                ++pool->TP_live;\n                pthread_mutex_unlock(&pool->TP_m_all); \n            }\n            printf("[INFO]: \u7ebf\u7a0b\u8fc7\u5c11, \u6dfb\u52a0\u7ebf\u7a0b!\\n");\n        }\n\n        // \u9500\u6bc1\u7ebf\u7a0b\n        // \u5fd9\u7684\u7ebf\u7a0b * 2 < \u5b58\u6d3b\u7684\u7ebf\u7a0b\u6570 && \u5b58\u6d3b\u7684\u7ebf\u7a0b > \u6700\u5c0f\u7ebf\u7a0b\u6570\n        if (tBusy * 2 < tLive && tLive > pool->TP_min || pool->TP_free)\n        {\n            // \u51cf\u5c11\n            pthread_mutex_lock(&pool->TP_m_all);\n            if (pool->TP_free)\n                pool->TP_exitNum = tLive;\n            else\n                pool->TP_exitNum = REDUCE_THREAD_NUMER;\n            pthread_mutex_unlock(&pool->TP_m_all);\n\n            // \u8ba9\u6d88\u8d39\u8005\u7ebf\u7a0b\u81ea\u6740\n            for (int i = 0; i < (pool->TP_free ? tLive : REDUCE_THREAD_NUMER); ++i)\n            {\n                pthread_cond_signal(&pool->TP_c_taskEmpty);\n            }\n\n            if (pool->TP_free)\n                printf("[INFO]: \u6b63\u5728\u5173\u95ed\u7ebf\u7a0b\u6c60\\n");\n            else\n                printf("[INFO]: \u7ebf\u7a0b\u8fc7\u591a, \u51cf\u5c11\u7ebf\u7a0b!\\n");\n        }\n    }\n    \n    pthread_exit(NULL);\n}\n\nint HX_ThreadPool::addTask(void *(*fun)(void *arg), void *arg)\n{\n    Task task;\n    task.fun = fun;\n    task.arg = arg;\n    pthread_mutex_lock(&pool->TP_m_all);\n    do\n    {\n        if (pool->TP_free)\n            break;\n\n        while (pool->TP_task.size() == pool->TP_taskMaxSize)\n        {\n            // \u4efb\u52a1\u961f\u5217\u5df2\u6ee1, \u7b49\u5f85\u6dfb\u52a0\n            pthread_cond_wait(&pool->TP_c_taskFull, &pool->TP_m_all);\n        }\n\n        if (pool->TP_task.size() < pool->TP_taskMaxSize)\n        {\n            pool->TP_task.push(task);\n            pthread_cond_signal(&pool->TP_c_taskEmpty);\n        }\n        \n        pthread_mutex_unlock(&pool->TP_m_all);\n        printf("[INFO]: Add Task Ok!\\n");\n        return 1;\n    } while(0);\n\n    pthread_mutex_unlock(&pool->TP_m_all);\n    printf("ERROR: Add Task Error!\\n");\n    return -1;\n}\n\nint HX_ThreadPool::getTP_busyThreadNumer()\n{\n    int res = 0;\n    pthread_mutex_lock(&pool->TP_m_busy);\n    res = pool->TP_busy;\n    pthread_mutex_unlock(&pool->TP_m_busy);\n    return res;\n}\n\nint HX_ThreadPool::getTP_liveThreadNumer()\n{\n    int res = 0;\n    pthread_mutex_lock(&pool->TP_m_all);\n    res = pool->TP_live;\n    pthread_mutex_unlock(&pool->TP_m_all);\n    return res;\n}\n\nint HX_ThreadPool::freeThreadPool()\n{\n    pthread_mutex_lock(&pool->TP_m_all);\n    pool->TP_free = 1;\n    pthread_mutex_unlock(&pool->TP_m_all);\n\n    // \u963b\u585e \u7b49\u5f85\u7ebf\u7a0b\u9000\u51fa\n    pthread_join(pool->TP_op, NULL);\n\n    pthread_mutex_destroy(&pool->TP_m_all);\n    pthread_mutex_destroy(&pool->TP_m_busy);\n    pthread_cond_destroy(&pool->TP_c_taskEmpty);\n    pthread_cond_destroy(&pool->TP_c_taskFull);\n\n    // \u91ca\u653e\u8d44\u6e90\n    delete []pool;\n\n    pool = nullptr;\n    printf("[INFO]: Free ThreadPool OK!\\n");\n    return 1;\n}\n\nHX_ThreadPool::~HX_ThreadPool()\n{\n    if (this->pool)\n    {\n        freeThreadPool();\n    }\n}\n'})}),"\n",(0,r.jsx)(e.p,{children:"\u4f7f\u7528"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-C++",children:'#include <stdio.h>\n#include "hx_pool.h"\n\n// \u4efb\u52a1\u51fd\u6570\nvoid* taskFunc(void* arg)\n{\n    int num = *(int*)arg;\n    printf("thread %ld is working, number = %d\\n",\n        pthread_self(), num);\n    sleep(1);\n    free(arg);\n    return NULL;\n}\n\nint main()\n{\n    // \u521b\u5efa\u7ebf\u7a0b\u6c60\n    HX_ThreadPool pool(2, 10, 20);\n    for (int i = 0; i < 100; ++i)\n    {\n        int *arg = (int *)malloc(sizeof(int));\n        *arg = i + 100;\n        pool.addTask(taskFunc, arg);\n    }\n\n    sleep(5);\n    printf("\u91ca\u653e\u7ebf\u7a0b\u4e2d...\\n");\n    pool.freeThreadPool(); // \u5982\u679c\u4e0d\u5199\u5219\u5728\u7c7b\u51fa\u5b83\u7684\u4f5c\u7528\u57df\u7684\u65f6\u5019\u8fdb\u884c\u6790\u6784\u91ca\u653e\n    return 0;\n}\n'})}),"\n",(0,r.jsx)(e.h2,{id:"c11\u5e93\u5b9e\u73b0\u7ebf\u7a0b\u6c60-stdthread-\u539f\u5b50\u53d8\u91cf-\u652f\u6301\u53ef\u53d8\u53c2\u6570\u53ef\u8c03\u7528\u5bf9\u8c61",children:"C++11\u5e93\u5b9e\u73b0\u7ebf\u7a0b\u6c60 std::thread \u539f\u5b50\u53d8\u91cf, \u652f\u6301\u53ef\u53d8\u53c2\u6570\u53ef\u8c03\u7528\u5bf9\u8c61!"}),"\n",(0,r.jsx)(e.p,{children:"\u9644\u5e26\u5b9e\u73b0\u4e86\u4e00\u4e2a\u53ef\u66ff\u6362\u7684\u5355\u4f8b\u7c7b, \u4e13\u95e8\u7528\u4e8e\u65e5\u5fd7\u8f93\u51fa, \u53ef\u901a\u8fc7\u51fd\u6570\u6307\u9488\u66ff\u6362!"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-C++",children:'#pragma once\n#ifndef _HX_THREAD_POOL_H_\n#define _HX_THREAD_POOL_H_\n#include <thread>                // C++\u7ebf\u7a0b\n#include <functional>            // \u53ef\u8c03\u7528\u5bf9\u8c61\u5c01\u88c5\n#include <atomic>                // \u539f\u5b50\u53d8\u91cf\n#include <mutex>                // \u4e92\u65a5\u9501\n#include <condition_variable>    // \u6761\u4ef6\u53d8\u91cf\n#include <cstdarg>                // C \u7684\u53ef\u53d8\u53c2\u6570\n#include <chrono>                // \u65f6\u95f4\u65e5\u671f\u5e93\n#include <map>\n#include <queue>\n\n#define SINGLE_NUME 2                // \u5355\u6b21\u589e\u52a0\u7684\u7ebf\u7a0b\u6570\u91cf\n#define CACHE_STR_ARR_SIZE_MAX 1024 // \u7f13\u51b2\u5b57\u7b26\u4e32\u6700\u5927\u957f\u5ea6\n\nusing namespace std;\n\nnamespace HX {\n    namespace tools {\n        // \u5355\u4f8b-\u997f\u6c49-\u8f93\u51fa\u7c7b\n        class HXprint {\n            HXprint();\n        private:\n            HXprint(const HXprint&) = delete;\n            HXprint& operator =(const HXprint&) = delete;\n\n            // \u81ea\u5e26\u8f93\u51fa\u6b63\u5e38\n            static void printInfo(const char* str, ...);\n\n            // \u81ea\u5e26\u8f93\u51fa\u5f02\u5e38\n            static void printError(const char* str, ...);\n        public:\n            static HXprint* getHXprint();\n            \n            // \u8bbe\u7f6einfo\u8f93\u51fa\u51fd\u6570\n            void setPrintInfoFun(void (*fun)(const char* str, ...));\n\n            // \u8bbe\u7f6eerror\u8f93\u51fa\u51fd\u6570\n            void setPrintErrorFun(void (*fun)(const char* str, ...));\n            \n            void (*ptr_pInfo)(const char* str, ...);\n            void (*ptr_pError)(const char* str, ...);\n        };\n    }\n\n    // \u7ebf\u7a0b\u6c60\n    class ThreadPool {\n    public:\n        // \u4e3a\u4ec0\u4e48\u9700\u8981\u6838\u5fc3\u6570 - 1?, \u56e0\u4e3a \u8fd8\u6709\u4e3b\u7ebf\u7a0b (-1); \u8fd8\u6709\u4e00\u4e2a\u7ba1\u7406\u8005\u7ebf\u7a0b (-1), \u4f46\u662f\u56e0\u4e3a\u6709\u65f6\u95f4\u95f4\u9694, \u6240\u4ee5\u53ef\u4ee5\u5ffd\u7565...\n        /**\n         * @brief \u521b\u5efa\u7ebf\u7a0b\u6c60\u5e76\u521d\u59cb\u5316, [-1] \u4ee3\u8868\u4f7f\u7528 (\u5f53\u524dCPU\u7684\u6838\u5fc3\u6570 - 1)\n         * @param t_min \u6700\u5c0f\u7ebf\u7a0b\u6570\n         * @param t_max \u6700\u5927\u7ebf\u7a0b\u6570\n         * @param taskMaxSize \u6700\u5927\u4efb\u52a1\u6570\n         * @param opTime \u7ba1\u7406\u8005\u7ebf\u7a0b \u68c0\u67e5 \u6d88\u8d39\u8005\u7ebf\u7a0b \u7684\u65f6\u95f4\u95f4\u9694, \u5355\u4f4d ms\n         */\n        ThreadPool(int t_min, int t_max = -1, int taskMaxSize = -1, int opTime = 2000);\n\n        /**\n         * @brief \u7ed9\u7ebf\u7a0b\u6c60\u6dfb\u52a0\u4efb\u52a1\n         * @param func \u5b50\u7ebf\u7a0b\u9700\u8981\u6267\u884c\u7684\u4efb\u52a1\u53ef\u8c03\u7528\u5bf9\u8c61\n         * @param ... \u53ef\u8c03\u7528\u5bf9\u8c61\u5206\u522b\u5bf9\u5e94\u7684\u53c2\u6570, \u82e5\u6ca1\u6709\u53ef\u4ee5\u4e3a\u7a7a (\u53ea\u5199\u53c2\u6570func)\n         * @return \u6dfb\u52a0\u6210\u529f 1, \u51fa\u9519 0\n         */\n        template<typename Function, typename... Args>\n        bool addTask(Function&& func, Args&&... args);\n\n        template<typename Function>\n        bool addTask(Function&& func);\n\n        /**\n         * @brief \u8bbe\u7f6e\u5355\u6b21\u589e\u51cf\u7ebf\u7a0b\u6570\u91cf\n         * @param add \u5355\u6b21\u589e\u52a0\u7684\u7ebf\u7a0b\u6570\u91cf\n         * @param sub \u5355\u6b21\u51cf\u5c0f\u7684\u7ebf\u7a0b\u6570\u91cf\n         * @return \u65e0\n         */\n        inline void setSinglNumer(int add = SINGLE_NUME, int sub = SINGLE_NUME);\n\n        /**\n         * @brief \u8bbe\u7f6e\u7ba1\u7406\u8005\u7ebf\u7a0b\u5224\u65ad\u51fd\u6570\n         * @param addPtr \u5355\u6b21\u589e\u52a0\u7684\u7ebf\u7a0b\u7684\u5224\u65ad\u51fd\u6570\n         * @param subPtr \u5355\u6b21\u51cf\u5c0f\u7684\u7ebf\u7a0b\u7684\u5224\u65ad\u51fd\u6570\n         * @return \u65e0\n         */\n        void setSinglFunPtr(bool (*addPtr)(int, int, int, int, int, int, int) = ifAddThread ,\n                            bool (*subPtr)(int, int, int, int, int, int, int) = ifSubThread );\n\n        /**\n         * @brief \u83b7\u53d6\u5f53\u524d\u7ebf\u7a0b\u6c60\u5fd9\u788c\u7684\u7ebf\u7a0b\u6570\n         * @param \u65e0\n         * @return \u5fd9\u788c\u7684\u7ebf\u7a0b\u6570\n         */\n        int getPoolBusySize();\n\n        /**\n         * @brief \u83b7\u53d6\u5f53\u524d\u7ebf\u7a0b\u6c60\u5b58\u6d3b\u7684\u7ebf\u7a0b\u6570\n         * @param \u65e0\n         * @return \u5b58\u6d3b\u7684\u7ebf\u7a0b\u6570\n         */\n        int getPoolLiveSize();\n\n        /**\n         * @brief \u83b7\u53d6\u5f53\u524d\u7ebf\u7a0b\u6c60\u7684\u4efb\u52a1\u961f\u5217\u7684\u957f\u5ea6\n         * @param \u65e0\n         * @return \u4efb\u52a1\u961f\u5217\u7684\u957f\u5ea6\n         */\n        int getTaskSize();\n\n        // \u9500\u6bc1\u7ebf\u7a0b\u6c60\n        void freeThreadPool();\n        ~ThreadPool();\n    private:\n        // \u5de5\u4f5c\u7684\u7ebf\u7a0b(\u6d88\u8d39\u8005\u7ebf\u7a0b)\u4efb\u52a1\u51fd\u6570\n        static void consumerThreadFun(ThreadPool& pool);\n\n        // \u7ba1\u7406\u8005\u7ebf\u7a0b \u4efb\u52a1\u51fd\u6570\n        static void OpThreadFun(ThreadPool& pool);\n\n        // \u4efb\u52a1\u7684\u4e2a\u6570>\u5b58\u6d3b\u7684\u7ebf\u7a0b\u4e2a\u6570 && \u5b58\u6d3b\u7684\u7ebf\u7a0b\u6570<\u6700\u5927\u7ebf\u7a0b\u6570\n        /**\n         * @brief \u81ea\u5e26\u7684\u589e\u52a0\u7ebf\u7a0b\u6570\u91cf \u5224\u65ad\u51fd\u6570\n         * @param now_taskSize \u5f53\u524d\u4efb\u52a1\u6570\n         * @param now_busy \u5f53\u524d\u7e41\u5fd9\u7684\u7ebf\u7a0b\n         * @param now_idle \u5f53\u524d\u95f2\u7f6e\u7684\u7ebf\u7a0b\n         * @param now_live \u5f53\u524d\u5b58\u6d3b\u7684\u7ebf\u7a0b\n         * @param t_min    \u7ebf\u7a0b\u6c60\u7684\u6700\u5c0f\u7ebf\u7a0b\u6570\n         * @param t_max       \u7ebf\u7a0b\u6c60\u7684\u6700\u5927\u7ebf\u7a0b\u6570\n         * @param taskMaxSize \u4efb\u52a1\u961f\u5217\u6700\u5927\u957f\u5ea6\n         * @return 0 \u4e0d\u8fdb\u884c\u589e\u52a0 / 1 \u8fdb\u884c\u589e\u52a0\n         */\n        static bool ifAddThread(int now_taskSize, int now_busy, int now_idle, int now_live, int t_min, int t_max, int taskMaxSize);\n\n        // \u5fd9\u7684\u7ebf\u7a0b*2 < \u5b58\u6d3b\u7684\u7ebf\u7a0b\u6570 && \u5b58\u6d3b\u7684\u7ebf\u7a0b>\u6700\u5c0f\u7ebf\u7a0b\u6570\n        /**\n         * @brief \u81ea\u5e26\u7684\u51cf\u5c11\u7ebf\u7a0b\u6570\u91cf \u5224\u65ad\u51fd\u6570\n         * @param now_taskSize \u5f53\u524d\u4efb\u52a1\u6570\n         * @param now_busy \u5f53\u524d\u7e41\u5fd9\u7684\u7ebf\u7a0b\n         * @param now_idle \u5f53\u524d\u95f2\u7f6e\u7684\u7ebf\u7a0b\n         * @param now_live \u5f53\u524d\u5b58\u6d3b\u7684\u7ebf\u7a0b\n         * @param t_min    \u7ebf\u7a0b\u6c60\u7684\u6700\u5c0f\u7ebf\u7a0b\u6570\n         * @param t_max       \u7ebf\u7a0b\u6c60\u7684\u6700\u5927\u7ebf\u7a0b\u6570\n         * @param taskMaxSize \u4efb\u52a1\u961f\u5217\u6700\u5927\u957f\u5ea6\n         * @return 0 \u4e0d\u8fdb\u884c\u51cf\u5c11 / 1 \u8fdb\u884c\u51cf\u5c11\n         */\n        static bool ifSubThread(int now_taskSize, int now_busy, int now_idle, int now_live, int t_min, int t_max, int taskMaxSize);\n\n        // --- \u4efb\u52a1\u961f\u5217 \u7ec4 ---\n        queue<std::function<void()>> TP_threadTaskQueue; // \u4efb\u52a1\u961f\u5217\n        int taskMaxSize;            // \u4efb\u52a1\u6570\u91cf\n        int opTime;                    // \u95f4\u9694\u68c0\u67e5\u65f6\u95f4\n        thread* TP_op;                // \u7ba1\u7406\u8005\u7ebf\u7a0b\n\n        mutex TP_mutex_all;                        // \u6574\u4e2a\u7ebf\u7a0b\u6c60\u7684\u4e92\u65a5\u9501\n\n        condition_variable taskQueueFull;        // \u6761\u4ef6\u53d8\u91cf: \u4efb\u52a1\u961f\u5217\u6ee1\u4e86\n        condition_variable taskQueueEmpty;        // \u6761\u4ef6\u53d8\u91cf: \u4efb\u52a1\u961f\u5217\u7a7a\u4e86\n        condition_variable freeConsumer_cond;    // \u6761\u4ef6\u53d8\u91cf: \u9700\u8981\u91ca\u653e\u7684\u7ebf\u7a0b\n\n        bool (*ifAddFunPtr)(int, int, int, int, int, int, int); // \u51fd\u6570\u6307\u9488\u6307\u5411\u662f\u5426\u589e\u52a0\u7ebf\u7a0b\u7684\u5224\u65ad\u51fd\u6570\n        bool (*ifSubFunPtr)(int, int, int, int, int, int, int); // \u51fd\u6570\u6307\u9488\u6307\u5411\u662f\u5426\u51cf\u5c11\u7ebf\u7a0b\u7684\u5224\u65ad\u51fd\u6570\n\n        // --- \u7ebf\u7a0b\u6c60 \u4fe1\u606f ---\n        int t_min;                    // \u6700\u5c0f\u7ebf\u7a0b\u6570\n        int t_max;                    // \u6700\u5927\u7ebf\u7a0b\u6570\n        int singleAdd;                // \u5355\u6b21\u6dfb\u52a0\u7684\u7ebf\u7a0b\u6570\n        int singleSub;                // \u5355\u6b21\u9500\u6bc1\u7684\u7ebf\u7a0b\u6570\n\n        atomic_int TP_busy;         // \u7e41\u5fd9\u7ebf\u7a0b\u6570 (\u6b63\u5728\u6267\u884c\u4efb\u52a1)\n        atomic_int TP_idle;         // \u7a7a\u95f2\u7ebf\u7a0b\u6570 (\u5df2\u6302\u8d77)\n        atomic_int TP_live;         // \u5b58\u6d3b\u7ebf\u7a0b\u6570 == \u7a7a\u95f2\u7ebf\u7a0b\u6570 + \u7e41\u5fd9\u7ebf\u7a0b\u6570\n        atomic_int del_t_num;        // \u76ee\u524d\u9700\u8981\u5220\u9664\u7684\u7ebf\u7a0b\u6570\n\n        // --- \u7ebf\u7a0b\u6c60 \u793e\u755c ---\n        map<thread::id, thread *> TP_consumer;    // \u6d88\u8d39\u8005\u7ea2\u9ed1\u6811 (\u6dfb\u52a0/\u67e5\u627e/\u5220\u9664 O(logN) \u65f6\u95f4\u590d\u6742\u5ea6)\n        queue<thread*> free_consumer;            // \u9700\u8981\u91ca\u653e\u7684\u7ebf\u7a0b\n\n        // --- \u7ebf\u7a0b\u6c60 \u5f00\u5173 ---\n        atomic_bool TP_free;                    // \u7ebf\u7a0b\u6c60\u662f\u5426\u91ca\u653e\n    };\n}\n\ntemplate<typename Function, typename... Args>\nbool HX::ThreadPool::addTask(Function&& func, Args&&... args)\n{\n    auto print = HX::tools::HXprint::getHXprint();\n\n    unique_lock<mutex> lock(this->TP_mutex_all);\n    do\n    {\n        if (this->TP_free)\n            break;\n\n        while (this->TP_threadTaskQueue.size() == this->taskMaxSize)\n        {\n            // \u4efb\u52a1\u961f\u5217\u5df2\u6ee1, \u7b49\u5f85\u6dfb\u52a0\n            this->taskQueueFull.wait(lock);\n        }\n\n        if (this->TP_threadTaskQueue.size() < this->taskMaxSize)\n        {\n            this->TP_threadTaskQueue.push(std::bind(func, std::forward<Args>(args)...));\n            this->taskQueueEmpty.notify_one();\n        }\n\n        lock.unlock();\n\n        print->ptr_pInfo("\u6dfb\u52a0\u4efb\u52a1\u6210\u529f!");\n        return 1;\n    } while (0);\n\n    lock.unlock();\n    print->ptr_pError("\u6dfb\u52a0\u4efb\u52a1\u51fa\u9519: \u7ebf\u7a0b\u6c60\u5728\u6dfb\u52a0\u65f6\u5df2\u7ecf\u5728\u9500\u6bc1!");\n    return 0;\n}\n\ntemplate<typename Function>\nbool HX::ThreadPool::addTask(Function&& func)\n{\n    auto print = HX::tools::HXprint::getHXprint();\n\n    unique_lock<mutex> lock(this->TP_mutex_all);\n    do\n    {\n        if (this->TP_free)\n            break;\n\n        while (this->TP_threadTaskQueue.size() == this->taskMaxSize)\n        {\n            // \u4efb\u52a1\u961f\u5217\u5df2\u6ee1, \u7b49\u5f85\u6dfb\u52a0\n            this->taskQueueFull.wait(lock);\n        }\n\n        if (this->TP_threadTaskQueue.size() < this->taskMaxSize)\n        {\n            this->TP_threadTaskQueue.push(func);\n            this->taskQueueEmpty.notify_one();\n        }\n        lock.unlock();\n\n        print->ptr_pInfo("\u6dfb\u52a0\u4efb\u52a1\u6210\u529f!");\n        return 1;\n    } while (0);\n\n    lock.unlock();\n    print->ptr_pError("\u6dfb\u52a0\u4efb\u52a1\u51fa\u9519: \u7ebf\u7a0b\u6c60\u5728\u6dfb\u52a0\u65f6\u5df2\u7ecf\u5728\u9500\u6bc1!");\n    return 0;\n}\n\n#endif // _HX_THREAD_POOL_H_\n'})}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-C++",children:'#include "HXThreadPool.h"\n\nvoid HX::tools::HXprint::printInfo(const char* str, ...)\n{\n    va_list args;\n    va_start(args, str);\n\n    // \u6784\u5efa\u8f93\u51fa\u5b57\u7b26\u4e32\n    char buffer[CACHE_STR_ARR_SIZE_MAX];\n    vsnprintf(buffer, sizeof(buffer), str, args);\n\n    printf("[INFO]: %s\\n", buffer);\n    va_end(args);\n}\n\nHX::tools::HXprint::HXprint()\n{\n    this->ptr_pInfo = printInfo;\n    this->ptr_pError = printError;\n}\n\nvoid HX::tools::HXprint::printError(const char* str, ...)\n{\n    va_list args;\n    va_start(args, str);\n\n    // \u6784\u5efa\u8f93\u51fa\u5b57\u7b26\u4e32\n    char buffer[CACHE_STR_ARR_SIZE_MAX];\n    vsnprintf(buffer, sizeof(buffer), str, args);\n\n    printf("[ERROR]: %s\\n", buffer);\n    va_end(args);\n}\n\nHX::tools::HXprint* HX::tools::HXprint::getHXprint()\n{\n    static HXprint hxPrint;\n    return &hxPrint;\n}\n\nvoid HX::tools::HXprint::setPrintInfoFun(void(*fun)(const char* str, ...))\n{\n    this->ptr_pInfo = fun;\n}\n\nvoid HX::tools::HXprint::setPrintErrorFun(void(*fun)(const char* str, ...))\n{\n    this->ptr_pError = fun;\n}\n\n\n/////////////////////////////////////////////////////////////////////////////\n// \u6b63\u6587                                                                        /\n/////////////////////////////////////////////////////////////////////////////\n\nHX::ThreadPool::ThreadPool(int t_min, int t_max, int taskMaxSize, int opTime) : TP_mutex_all(), taskQueueFull(), taskQueueEmpty(), TP_threadTaskQueue(), TP_consumer(), free_consumer(), freeConsumer_cond()\n{\n    auto print = HX::tools::HXprint::getHXprint();\n\n    do \n    {\n        this->TP_free = false;\n        this->setSinglNumer();\n        this->setSinglFunPtr();\n\n        this->t_min = t_min;\n        this->t_max = (t_max == -1) ? thread::hardware_concurrency() - 1: t_max;\n\n        this->taskMaxSize = (taskMaxSize == -1) ? thread::hardware_concurrency() - 1 : taskMaxSize;\n        this->opTime = opTime;\n\n        this->TP_busy = 0;\n        this->del_t_num = 0;\n        this->TP_idle = t_min;\n        this->TP_live = t_min;\n\n        print->ptr_pInfo("\u521d\u59cb\u5316\u6210\u5458\u53d8\u91cf\u6210\u529f!");\n\n        // \u542f\u52a8\u5b50\u7ebf\u7a0b\n        for (int i = 0; i < this->TP_live; ++i)\n        {\n            auto p = new thread(consumerThreadFun, std::ref(*this));\n            this->TP_consumer.insert(make_pair(p->get_id(), p));\n        }\n\n        print->ptr_pInfo("\u5df2\u7ecf\u542f\u52a8 %d \u4e2a\u6d88\u8d39\u8005\u7ebf\u7a0b!", t_min);\n\n        // \u542f\u52a8\u7ba1\u7406\u8005\u7ebf\u7a0b\n        this->TP_op = new thread(OpThreadFun, std::ref(*this));\n\n        print->ptr_pInfo("\u5df2\u7ecf\u542f\u52a8\u7ba1\u7406\u8005\u7ebf\u7a0b");\n\n        return;\n    } while (0);\n    \n    print->ptr_pError("\u521d\u59cb\u5316\u7ebf\u7a0b\u6c60\u51fa\u9519!");\n}\n\nvoid HX::ThreadPool::consumerThreadFun(ThreadPool& pool)\n{\n    auto print = HX::tools::HXprint::getHXprint();\n    print->ptr_pInfo("\u5b50\u7ebf\u7a0b: %ld, \u542f\u52a8!", this_thread::get_id());\n\n    unique_lock<mutex> lock(pool.TP_mutex_all);\n    lock.unlock();\n\n    while (!pool.TP_free)\n    {\n        lock.lock();\n        // \u5224\u65ad\u662f\u5426\u6709\u4efb\u52a1\n        while (pool.TP_threadTaskQueue.empty() && !pool.TP_free && !pool.del_t_num.load())\n        {\n            // \u6ca1\u6709\u4efb\u52a1\u5219\u6302\u8d77\n            print->ptr_pInfo("uid = %ld, \u6ca1\u6709\u4efb\u52a1\u7761\u5927\u89c9!", this_thread::get_id());\n            pool.taskQueueEmpty.wait(lock);\n        }\n\n        // \u9500\u6bc1\u7ebf\u7a0b (\u81ea\u6740)\n        if (pool.del_t_num > 0 || pool.TP_free)\n        {\n            --pool.del_t_num;\n            auto p = pool.TP_consumer.find(this_thread::get_id());\n            pool.free_consumer.push(p->second);\n            pool.TP_consumer.erase(p);\n            lock.unlock();\n            --pool.TP_idle;\n            --pool.TP_live;\n            print->ptr_pInfo("\u7ebf\u7a0b: %ld \u5df2\u9000\u51fa!", this_thread::get_id());\n            pool.freeConsumer_cond.notify_one();\n            return;\n        }\n\n        // \u63a5\u4efb\u52a1\n        auto task = pool.TP_threadTaskQueue.front();\n        pool.TP_threadTaskQueue.pop();\n        lock.unlock();\n\n        ++pool.TP_busy;\n        --pool.TP_idle;\n        print->ptr_pInfo("\u7ebf\u7a0b: %ld, \u5f00\u5de5!", this_thread::get_id());\n\n        // \u505a\u4efb\u52a1\n        task();\n\n        // \u505a\u5b8c\u4e86\n        --pool.TP_busy;\n        ++pool.TP_idle;\n        lock.lock();\n        pool.taskQueueFull.notify_one(); // \u901a\u77e5\u4efb\u52a1\u6dfb\u52a0\u51fd\u6570, \u5982\u679c\u5728\u6392\u961f\u53ef\u4ee5\u653e\u4e00\u4e2a\u4eba\u8fc7\u6765\u4e86\n        lock.unlock();\n    }\n\n    print->ptr_pError("\u7ebf\u7a0b\u521b\u5efa\u65f6, \u7ebf\u7a0b\u6c60\u5df2\u5728\u9500\u6bc1!");\n    \n    lock.lock();\n    auto p = pool.TP_consumer.find(this_thread::get_id());\n    pool.free_consumer.push(p->second);\n    pool.TP_consumer.erase(p);\n    lock.unlock();\n    pool.freeConsumer_cond.notify_one();\n    \n    --pool.del_t_num;\n    --pool.TP_idle;\n    --pool.TP_live;\n}\n\nvoid HX::ThreadPool::OpThreadFun(ThreadPool& pool)\n{\n    auto print = HX::tools::HXprint::getHXprint();\n    print->ptr_pInfo("\u7ba1\u7406\u8005\u7ebf\u7a0b: %ld, \u542f\u52a8!", this_thread::get_id());\n\n    while (!pool.TP_free || pool.TP_live > 0)\n    {\n        std::this_thread::sleep_for(std::chrono::milliseconds(pool.opTime));   // \u6bcf\u95f4\u9694{opTime}\u6beb\u79d2\u68c0\u67e5\u4e00\u4e0b\u7ebf\u7a0b\n        //print->ptr_pInfo("\u68c0\u67e5\u6d88\u8d39\u8005\u7ebf\u7a0b\u4e2d...");\n\n        // \u5b89\u5168\u7684\u83b7\u53d6\u6570\u636e\n        unique_lock<mutex> lock(pool.TP_mutex_all);\n        int queueLen = pool.TP_threadTaskQueue.size();\n        lock.unlock();\n        int now_busy = pool.TP_busy;\n        int now_idle = pool.TP_idle;\n        int now_live = pool.TP_live;\n\n        print->ptr_pInfo("\u5f53\u524d\u4efb\u52a1\u961f\u5217\u5269\u6709 %d \u4e2a\u4efb\u52a1, \u7e41\u5fd9\u7ebf\u7a0b: %d, \u5b58\u6d3b\u7ebf\u7a0b: %d", queueLen, now_busy, now_live);\n\n        // \u6dfb\u52a0\u7ebf\u7a0b\n        if (!pool.TP_free && pool.ifAddFunPtr(queueLen, now_busy, now_idle, now_live, pool.t_min, pool.t_max, pool.taskMaxSize))\n        {\n            // \u589e\u52a0\n            for (int i = 0; i < pool.singleAdd; ++i)\n            {\n                lock.lock();\n                auto p = new thread(consumerThreadFun, std::ref(pool));\n                pool.TP_consumer.insert(make_pair(p->get_id(), p));\n                lock.unlock();\n\n                ++pool.TP_idle;\n                ++pool.TP_live;\n            }\n            print->ptr_pInfo("\u7ebf\u7a0b\u8fc7\u5c11, \u6dfb\u52a0\u7ebf\u7a0b!");\n            continue;\n        }\n\n        // \u9500\u6bc1\u7ebf\u7a0b\n        if (pool.TP_free || pool.ifSubFunPtr(queueLen, now_busy, now_idle, now_live, pool.t_min, pool.t_max, pool.taskMaxSize))\n        {\n            // \u51cf\u5c11\n            if (pool.TP_free)\n                pool.del_t_num = now_live;\n            else\n                pool.del_t_num = pool.singleSub;\n\n            if (pool.TP_free)\n                print->ptr_pInfo("\u6b63\u5728\u5173\u95ed\u7ebf\u7a0b\u6c60...");\n            else\n                print->ptr_pInfo("\u7ebf\u7a0b\u8fc7\u591a, \u51cf\u5c11\u7ebf\u7a0b!");\n\n            // \u8ba9\u6d88\u8d39\u8005\u7ebf\u7a0b\u81ea\u6740\n            int n = pool.del_t_num;\n            for (int i = 0; i < n; ++i)\n            {\n                lock.lock();\n                pool.taskQueueEmpty.notify_one();\n                print->ptr_pInfo("<<<<<<<<<<<<<<");\n                pool.freeConsumer_cond.wait(lock);\n                print->ptr_pInfo(">>>>>>>>>>>>>>");\n                auto p = pool.free_consumer.front();\n                pool.free_consumer.pop();\n                p->join();\n                delete p;\n                lock.unlock();\n            }\n            continue;\n        }\n    }\n\n    while (!pool.free_consumer.empty())\n    {\n        print->ptr_pInfo("\u53d1\u73b0\u5185\u5b58\u6cc4\u6f0f!");\n        auto p = pool.free_consumer.front();\n        pool.free_consumer.pop();\n        p->join();\n        delete p;\n    }\n}\n\nvoid HX::ThreadPool::freeThreadPool()\n{\n    this->TP_free = true;\n\n    this->TP_op->join();\n    delete this->TP_op;\n    HX::tools::HXprint::getHXprint()->ptr_pInfo("\u5df2\u91ca\u653e\u7ebf\u7a0b\u6c60!");\n}\n\ninline void HX::ThreadPool::setSinglNumer(int add, int sub)\n{\n    this->singleAdd = add;\n    this->singleSub = sub;\n}\n\n// \u4efb\u52a1\u7684\u4e2a\u6570>\u5b58\u6d3b\u7684\u7ebf\u7a0b\u4e2a\u6570 && \u5b58\u6d3b\u7684\u7ebf\u7a0b\u6570<\u6700\u5927\u7ebf\u7a0b\u6570\nbool HX::ThreadPool::ifAddThread(int now_taskSize, int now_busy, int now_idle, int now_live, int t_min, int t_max, int taskMaxSize)\n{\n    return now_taskSize > now_live && now_live < t_max;\n}\n\n// \u5fd9\u7684\u7ebf\u7a0b*2 < \u5b58\u6d3b\u7684\u7ebf\u7a0b\u6570 && \u5b58\u6d3b\u7684\u7ebf\u7a0b>\u6700\u5c0f\u7ebf\u7a0b\u6570\nbool HX::ThreadPool::ifSubThread(int now_taskSize, int now_busy, int now_idle, int now_live, int t_min, int t_max, int taskMaxSize)\n{\n    return (now_busy << 1) < now_live && now_live > t_min;\n}\n\nHX::ThreadPool::~ThreadPool()\n{\n    if (!this->TP_free)\n    {\n        this->freeThreadPool();\n    }\n}\n\nvoid HX::ThreadPool::setSinglFunPtr(bool(*addPtr)(int, int, int, int, int, int, int), bool(*subPtr)(int, int, int, int, int, int, int))\n{\n    this->ifAddFunPtr = addPtr;\n    this->ifSubFunPtr = subPtr;\n}\n\nint HX::ThreadPool::getPoolBusySize()\n{\n    return this->TP_busy.load();\n}\n\nint HX::ThreadPool::getPoolLiveSize()\n{\n    return this->TP_live.load();\n}\n\nint HX::ThreadPool::getTaskSize()\n{\n    return this->TP_threadTaskQueue.size();\n}\n'})}),"\n",(0,r.jsx)(e.p,{children:"\u4f7f\u7528\u793a\u4f8b"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-C++",children:'#include "HXThreadPool.h"\n#include "vld.h" // \u5185\u5b58\u6cc4\u6f0f\u68c0\u6d4b\nvoid fun(int a);\n\nvoid fun(int a)\n{\n    printf("%ld \u7ebf\u7a0b\u5df2\u8fd0\u884c %d\\n", this_thread::get_id(), a);\n    std::this_thread::sleep_for(std::chrono::seconds(1));\n}\n\nvoid fun_2()\n{\n    printf("%ld \u7ebf\u7a0b\u5df2\u8fd0\u884c !!!\\n", this_thread::get_id());\n    std::this_thread::sleep_for(std::chrono::seconds(1));\n}\n\nstruct MyStruct\n{\n    void operator() (int i) {\n        printf("%ld \u7ebf\u7a0b [%d] \u5df2\u8fd0\u884c awa\\n", this_thread::get_id(), i);\n        std::this_thread::sleep_for(std::chrono::milliseconds(200));\n    }\n};\n\nint main()\n{\n    HX::ThreadPool pool(2);\n    pool.setSinglNumer(10, 2);\n    for (int i = 0; i < 50; ++i)\n        pool.addTask(MyStruct(), i);\n        \n    std::this_thread::sleep_for(std::chrono::seconds(6));\n    return 0;\n}\n'})})]})}function T(n={}){const{wrapper:e}={...(0,i.R)(),...n.components};return e?(0,r.jsx)(e,{...n,children:(0,r.jsx)(_,{...n})}):_(n)}}}]);