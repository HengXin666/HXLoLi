"use strict";(self.webpackChunkhx_loli=self.webpackChunkhx_loli||[]).push([[50827],{12788:(n,e,t)=>{t.d(e,{A:()=>o});const o=t.p+"assets/images/Clip_2024-08-02_22-23-52-ed594b4d6f54d1c3447ec00204a3ce3a.png"},13058:(n,e,t)=>{t.d(e,{A:()=>o});const o=t.p+"assets/images/export-2024-8-3-134209-b73f620caa54ae5e746f7ab082e4c73b.png"},28453:(n,e,t)=>{t.d(e,{R:()=>i,x:()=>a});var o=t(96540);const r={},s=o.createContext(r);function i(n){const e=o.useContext(s);return o.useMemo((function(){return"function"==typeof n?n(e):{...e,...n}}),[e,n])}function a(n){let e;return e=n.disableParentContext?"function"==typeof n.components?n.components(r):n.components||r:i(n.components),o.createElement(s.Provider,{value:e},n.children)}},39478:(n,e,t)=>{t.d(e,{A:()=>o});const o=t.p+"assets/images/export-2024-8-6-214700-08d55c150c98c1ffcacb95589559b2ba.png"},60065:(n,e,t)=>{t.r(e),t.d(e,{assets:()=>d,contentTitle:()=>a,default:()=>u,frontMatter:()=>i,metadata:()=>o,toc:()=>l});const o=JSON.parse('{"id":"\u7a0b\u5e8f\u8bed\u8a00/C++/\u73b0\u4ee3C++/\u73b0\u4ee3C++\u534f\u7a0b/\u3010C++\u3011\u4ece\u5f00\u59cb\u81ea\u5236\u534f\u7a0b\u5e93,\u6709\u624b\u5c31\u884c/index","title":"\u4e00\u3001\u3010C++20\u3011\u4ece0\u5f00\u59cb\u81ea\u5236\u534f\u7a0b\u5e93, \u6709\u624b\u5c31\u884c","description":"\u5b66\u4e60\u53c2\u8003:","source":"@site/docs/002-\u7a0b\u5e8f\u8bed\u8a00/001-C++/003-\u73b0\u4ee3C++/006-\u73b0\u4ee3C++\u534f\u7a0b/001-\u3010C++\u3011\u4ece\u5f00\u59cb\u81ea\u5236\u534f\u7a0b\u5e93,\u6709\u624b\u5c31\u884c/index.md","sourceDirName":"002-\u7a0b\u5e8f\u8bed\u8a00/001-C++/003-\u73b0\u4ee3C++/006-\u73b0\u4ee3C++\u534f\u7a0b/001-\u3010C++\u3011\u4ece\u5f00\u59cb\u81ea\u5236\u534f\u7a0b\u5e93,\u6709\u624b\u5c31\u884c","slug":"/\u7a0b\u5e8f\u8bed\u8a00/C++/\u73b0\u4ee3C++/\u73b0\u4ee3C++\u534f\u7a0b/\u3010C++\u3011\u4ece\u5f00\u59cb\u81ea\u5236\u534f\u7a0b\u5e93,\u6709\u624b\u5c31\u884c/","permalink":"/HXLoLi/docs/\u7a0b\u5e8f\u8bed\u8a00/C++/\u73b0\u4ee3C++/\u73b0\u4ee3C++\u534f\u7a0b/\u3010C++\u3011\u4ece\u5f00\u59cb\u81ea\u5236\u534f\u7a0b\u5e93,\u6709\u624b\u5c31\u884c/","draft":false,"unlisted":false,"editUrl":"https://github.com/HengXin666/HXLoLi/edit/main/docs/002-\u7a0b\u5e8f\u8bed\u8a00/001-C++/003-\u73b0\u4ee3C++/006-\u73b0\u4ee3C++\u534f\u7a0b/001-\u3010C++\u3011\u4ece\u5f00\u59cb\u81ea\u5236\u534f\u7a0b\u5e93,\u6709\u624b\u5c31\u884c/index.md","tags":[],"version":"current","lastUpdatedBy":"Heng_Xin_666","lastUpdatedAt":1747379049000,"frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"io\u4e36uring","permalink":"/HXLoLi/docs/\u7a0b\u5e8f\u8bed\u8a00/C++/\u73b0\u4ee3C++/\u73b0\u4ee3C++\u7f51\u7edc\u7f16\u7a0b/io\u4e36uring/"},"next":{"title":"\u533a\u5206\u6709\u6808\u3001\u65e0\u6808\u534f\u7a0b","permalink":"/HXLoLi/docs/\u7a0b\u5e8f\u8bed\u8a00/C++/\u73b0\u4ee3C++/\u73b0\u4ee3C++\u534f\u7a0b/\u533a\u5206\u6709\u6808\u3001\u65e0\u6808\u534f\u7a0b/"}}');var r=t(74848),s=t(28453);const i={},a="\u4e00\u3001\u3010C++20\u3011\u4ece0\u5f00\u59cb\u81ea\u5236\u534f\u7a0b\u5e93, \u6709\u624b\u5c31\u884c",d={},l=[{value:"1.1 \u4ec0\u4e48\u662f\u534f\u7a0b?",id:"11-\u4ec0\u4e48\u662f\u534f\u7a0b",level:2},{value:"1.2 \u534f\u7a0b\u7684\u4f18\u70b9",id:"12-\u534f\u7a0b\u7684\u4f18\u70b9",level:2},{value:"1.3 C++20\u4e2d\u7684\u534f\u7a0b",id:"13-c20\u4e2d\u7684\u534f\u7a0b",level:2},{value:"1.3.1 co_await \u548c Awaitable",id:"131-co_await-\u548c-awaitable",level:3},{value:"1.3.2 \u9884\u5b9a\u4e49\u7684 Awaitable \u7c7b\u578b",id:"132-\u9884\u5b9a\u4e49\u7684-awaitable-\u7c7b\u578b",level:3},{value:"1.3.3 \u534f\u7a0b\u7684\u8fd4\u56de\u7c7b\u578b\u548c promise_type",id:"133-\u534f\u7a0b\u7684\u8fd4\u56de\u7c7b\u578b\u548c-promise_type",level:3},{value:"1.3.4 co_return",id:"134-co_return",level:3},{value:"1.3.5 co_yield",id:"135-co_yield",level:3},{value:"1.3.5 \u534f\u7a0b\u7684\u751f\u547d\u5468\u671f",id:"135-\u534f\u7a0b\u7684\u751f\u547d\u5468\u671f",level:3},{value:"1.3.6 \u5f02\u5e38\u5904\u7406",id:"136-\u5f02\u5e38\u5904\u7406",level:3},{value:"1.3.7 \u603b\u7ed3",id:"137-\u603b\u7ed3",level:3},{value:"1.3.8 \u672a\u5b9a\u4e49\u884c\u4e3a",id:"138-\u672a\u5b9a\u4e49\u884c\u4e3a",level:3},{value:"1.4 \u534f\u7a0b\u5b9e\u4f8b",id:"14-\u534f\u7a0b\u5b9e\u4f8b",level:2},{value:"1.4.1 \u521d\u8bc6",id:"141-\u521d\u8bc6",level:3},{value:"1.4.2 \u534f\u7a0b\u4e2d\u7b49\u5f85\u534f\u7a0b",id:"142-\u534f\u7a0b\u4e2d\u7b49\u5f85\u534f\u7a0b",level:3},{value:"1.4.3 \u6bd4 1.4.2 \u66f4\u7b80\u5355\u7684\u793a\u4f8b",id:"143-\u6bd4-142-\u66f4\u7b80\u5355\u7684\u793a\u4f8b",level:3},{value:"1.4.4 \u6a21\u7248Task\u4e0e\u5f02\u5e38\u5904\u7406",id:"144-\u6a21\u7248task\u4e0e\u5f02\u5e38\u5904\u7406",level:3},{value:"1.4.5 \u57fa\u4e8e\u5806\u7684\u534f\u7a0b\u8ba1\u65f6\u5668",id:"145-\u57fa\u4e8e\u5806\u7684\u534f\u7a0b\u8ba1\u65f6\u5668",level:3},{value:"1.4.6 \u57fa\u4e8e\u7ea2\u9ed1\u6811\u7684\u8ba1\u65f6\u5668(\u53ea\u8981\u6700\u5148\u5b8c\u6210\u7684)",id:"146-\u57fa\u4e8e\u7ea2\u9ed1\u6811\u7684\u8ba1\u65f6\u5668\u53ea\u8981\u6700\u5148\u5b8c\u6210\u7684",level:3},{value:"1.4.7 \u4fee\u590d 1.4.5 \u7684\u6bb5\u9519\u8bef",id:"147-\u4fee\u590d-145-\u7684\u6bb5\u9519\u8bef",level:3}];function c(n){const e={a:"a",blockquote:"blockquote",code:"code",div:"div",h1:"h1",h2:"h2",h3:"h3",header:"header",img:"img",li:"li",p:"p",pre:"pre",span:"span",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,s.R)(),...n.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(e.header,{children:(0,r.jsx)(e.h1,{id:"\u4e00c20\u4ece0\u5f00\u59cb\u81ea\u5236\u534f\u7a0b\u5e93-\u6709\u624b\u5c31\u884c",children:"\u4e00\u3001\u3010C++20\u3011\u4ece0\u5f00\u59cb\u81ea\u5236\u534f\u7a0b\u5e93, \u6709\u624b\u5c31\u884c"})}),"\n",(0,r.jsx)(e.p,{children:"\u5b66\u4e60\u53c2\u8003:"}),"\n",(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsx)(e.li,{children:(0,r.jsx)(e.a,{href:"https://zplutor.github.io/2022/03/25/cpp-coroutine-beginner/",children:"Zplutor's C++20\u534f\u7a0b\u5165\u95e8\u6559\u7a0b"})}),"\n",(0,r.jsx)(e.li,{children:(0,r.jsx)(e.a,{href:"https://www.bilibili.com/video/BV1Yz421Z7rZ/",children:"\u3010C++20\u3011\u4ece0\u5f00\u59cb\u81ea\u5236\u534f\u7a0b\u5e93\uff0c\u6709\u624b\u5c31\u884c\uff08\u4e0a\uff09"})}),"\n",(0,r.jsx)(e.li,{children:(0,r.jsx)(e.a,{href:"https://zh.cppreference.com/w/cpp/language/coroutines",children:"cppreference \u534f\u7a0b"})}),"\n"]}),"\n",(0,r.jsx)(e.h2,{id:"11-\u4ec0\u4e48\u662f\u534f\u7a0b",children:"1.1 \u4ec0\u4e48\u662f\u534f\u7a0b?"}),"\n",(0,r.jsxs)(e.div,{className:"markdown-alert markdown-alert-tip",children:["\n",(0,r.jsxs)(e.p,{className:"markdown-alert-title",children:[(0,r.jsx)(e.span,{className:"octicon octicon-tip",style:{"--oct-icon":"url(\"data:image/svg+xml;utf8,%3Csvg xmlns='http://www.w3.org/2000/svg' class='octicon octicon-light-bulb mr-2' viewBox='0 0 16 16' version='1.1' width='16' height='16' aria-hidden='true'%3E%3Cpath d='M8 1.5c-2.363 0-4 1.69-4 3.75 0 .984.424 1.625.984 2.304l.214.253c.223.264.47.556.673.848.284.411.537.896.621 1.49a.75.75 0 0 1-1.484.211c-.04-.282-.163-.547-.37-.847a8.456 8.456 0 0 0-.542-.68c-.084-.1-.173-.205-.268-.32C3.201 7.75 2.5 6.766 2.5 5.25 2.5 2.31 4.863 0 8 0s5.5 2.31 5.5 5.25c0 1.516-.701 2.5-1.328 3.259-.095.115-.184.22-.268.319-.207.245-.383.453-.541.681-.208.3-.33.565-.37.847a.751.751 0 0 1-1.485-.212c.084-.593.337-1.078.621-1.489.203-.292.45-.584.673-.848.075-.088.147-.173.213-.253.561-.679.985-1.32.985-2.304 0-2.06-1.637-3.75-4-3.75ZM5.75 12h4.5a.75.75 0 0 1 0 1.5h-4.5a.75.75 0 0 1 0-1.5ZM6 15.25a.75.75 0 0 1 .75-.75h2.5a.75.75 0 0 1 0 1.5h-2.5a.75.75 0 0 1-.75-.75Z'%3E%3C/path%3E%3C/svg%3E\")"}}),"Tip"]}),"\n",(0,r.jsxs)(e.p,{children:["\u5b9a\u7fa9: ",(0,r.jsx)(e.span,{style:{color:"yellow"},children:"\u534f\u7a0b\u662f\u4e00\u79cd\u53ef\u4ee5\u6682\u505c\u548c\u6062\u590d\u7684\u51fd\u6570."})]}),"\n"]}),"\n",(0,r.jsx)(e.p,{children:"\u6309\u7167\u6211\u4eec\u5bf9\u666e\u901a\u51fd\u6570\u7684\u7406\u89e3\uff0c\u51fd\u6570\u6682\u505c\u610f\u5473\u7740\u7ebf\u7a0b\u505c\u6b62\u8fd0\u884c\u4e86\uff08\u5c31\u50cf\u547d\u4e2d\u4e86\u65ad\u70b9\u4e00\u6837\uff09\uff0c\u90a3\u534f\u7a0b\u7684\u4e0d\u540c\u4e4b\u5904\u5728\u54ea\u91cc\u5462\uff1f\u533a\u522b\u5728\u4e8e\uff0c\u666e\u901a\u51fd\u6570\u662f\u7ebf\u7a0b\u76f8\u5173\u7684\uff0c\u51fd\u6570\u7684\u72b6\u6001\u8ddf\u7ebf\u7a0b\u7d27\u5bc6\u5173\u8054\uff1b\u800c\u534f\u7a0b\u662f\u7ebf\u7a0b\u65e0\u5173\u7684\uff0c\u5b83\u7684\u72b6\u6001\u4e0e\u4efb\u4f55\u7ebf\u7a0b\u90fd\u6ca1\u6709\u5173\u7cfb\u3002"}),"\n",(0,r.jsxs)(e.p,{children:["\u8fd9\u4e2a\u89e3\u91ca\u6bd4\u8f83\u62bd\u8c61\uff0c\u4e3a\u4e86\u66f4\u597d\u5730\u7406\u89e3\uff0c\u6211\u4eec\u5148\u6765\u56de\u987e\u4e00\u4e0b\u51fd\u6570\u7684\u8c03\u7528\u673a\u5236\u3002\u5728\u8c03\u7528\u4e00\u4e2a\u51fd\u6570\u7684\u65f6\u5019\uff0c\u7ebf\u7a0b\u7684\u6808\u4e0a\u4f1a\u8bb0\u5f55\u8fd9\u4e2a\u51fd\u6570\u7684\u72b6\u6001\uff08\u53c2\u6570\u3001\u5c40\u90e8\u53d8\u91cf\u7b49\uff09\uff0c\u8fd9\u662f\u901a\u8fc7\u79fb\u52a8\u6808\u9876\u6307\u9488\u6765\u5b8c\u6210\u7684\u3002\u4f8b\u5982\uff0c\u51fd\u6570",(0,r.jsx)(e.code,{children:"Foo()"}),"\u8c03\u7528",(0,r.jsx)(e.code,{children:"Bar()"}),"\u7684\u8fc7\u7a0b\u5982\u4e0b\u6240\u793a:"]}),"\n\n\n\n\n\n\n\n\n\n\n\n",(0,r.jsxs)(e.table,{children:[(0,r.jsx)(e.thead,{children:(0,r.jsx)(e.tr,{children:(0,r.jsx)(e.th,{style:{textAlign:"center"},children:"##container##"})})}),(0,r.jsx)(e.tbody,{children:(0,r.jsx)(e.tr,{children:(0,r.jsx)(e.td,{style:{textAlign:"center"},children:(0,r.jsx)(e.img,{alt:"Clip_2024-08-02_21-28-57.png ##w600##",src:t(73467).A+"",width:"1557",height:"603"})})})})]}),"\n",(0,r.jsxs)(e.p,{children:["\u9996\u5148\uff0c\u201c\u5730\u57403\u201d\u5230\u201c\u5730\u57402\u201d\u8fd9\u6bb5\u7a7a\u95f4\uff0c\u662f\u5206\u914d\u7ed9",(0,r.jsx)(e.code,{children:"Foo()"}),"\u4fdd\u5b58\u72b6\u6001\u4f7f\u7528\u7684\uff0c\u6808\u9876\u6307\u9488\u6307\u5411\u201c\u5730\u57402\u201d\uff1b\u5f53\u8c03\u7528",(0,r.jsx)(e.code,{children:"Bar()"}),"\u7684\u65f6\u5019\uff0c\u6808\u9876\u6307\u9488\u79fb\u52a8\u5230\u201c\u5730\u57401\u201d\uff0c\u6b64\u65f6\u201c\u5730\u57402\u201d\u5230\u201c\u5730\u57401\u201d\u8fd9\u6bb5\u7a7a\u95f4\u662f\u5206\u914d\u7ed9",(0,r.jsx)(e.code,{children:"Bar()"}),"\u4fdd\u5b58\u72b6\u6001\u4f7f\u7528\u7684\u3002\u5f53",(0,r.jsx)(e.code,{children:"Bar()"}),"\u6267\u884c\u5b8c\u6bd5\uff0c\u6808\u9876\u6307\u9488\u79fb\u52a8\u56de\u201c\u5730\u57402\u201d\uff0c",(0,r.jsx)(e.code,{children:"Bar()"}),"\u7684\u72b6\u6001\u88ab\u9500\u6bc1\uff0c\u5185\u5b58\u7a7a\u95f4\u88ab\u56de\u6536\u3002"]}),"\n",(0,r.jsx)(e.p,{children:"\u7531\u6b64\u53ef\u89c1\uff0c\u51fd\u6570\u72b6\u6001\u7684\u7ef4\u62a4\u5b8c\u5168\u4f9d\u8d56\u4e8e\u7ebf\u7a0b\u6808\uff0c\u8131\u79bb\u4e86\u7ebf\u7a0b\uff0c\u51fd\u6570\u5c31\u4e0d\u590d\u5b58\u5728\uff0c\u6240\u4ee5\u8bf4\u51fd\u6570\u662f\u7ebf\u7a0b\u76f8\u5173\u7684\u3002"}),"\n",(0,r.jsxs)(e.p,{children:["\u800c\u534f\u7a0b\u4e0d\u4e00\u6837\uff0c\u534f\u7a0b\u7684\u72b6\u6001\u662f\u4fdd\u5b58\u5728\u5806\u5185\u5b58\u4e0a\u7684\u3002\u5047\u8bbe",(0,r.jsx)(e.code,{children:"Bar()"}),"\u662f\u4e00\u4e2a\u534f\u7a0b\uff0c\u90a3\u4e48\u8c03\u7528\u5b83\u7684\u8fc7\u7a0b\u5982\u4e0b\u6240\u793a:"]}),"\n\n\n\n\n\n\n\n\n\n\n\n",(0,r.jsxs)(e.table,{children:[(0,r.jsx)(e.thead,{children:(0,r.jsx)(e.tr,{children:(0,r.jsx)(e.th,{style:{textAlign:"center"},children:"##container##"})})}),(0,r.jsx)(e.tbody,{children:(0,r.jsx)(e.tr,{children:(0,r.jsx)(e.td,{style:{textAlign:"center"},children:(0,r.jsx)(e.img,{alt:"Clip_2024-08-02_21-29-39.png ##w600##",src:t(67024).A+"",width:"1546",height:"437"})})})})]}),"\n",(0,r.jsxs)(e.p,{children:["\u9996\u5148\uff0c",(0,r.jsx)(e.code,{children:"Bar()"}),"\u7684\u72b6\u6001\u6240\u9700\u7684\u5185\u5b58\u4f1a\u5728\u5806\u4e0a\u5206\u914d\uff0c\u72ec\u7acb\u4e8e\u7ebf\u7a0b\u6808\u800c\u5b58\u5728\u3002\u4f20\u9012\u7ed9\u5b83\u7684\u53c2\u6570\u90fd\u4f1a\u590d\u5236\u5230\u8fd9\u4e2a\u72b6\u6001\u4e2d\uff0c\u800c\u5c40\u90e8\u53d8\u91cf\u4f1a\u76f4\u63a5\u5728\u8fd9\u4e2a\u72b6\u6001\u4e2d\u521b\u5efa\u3002\u8c03\u7528",(0,r.jsx)(e.code,{children:"Bar()"}),"\u7684\u65f6\u5019\uff0c\u7531\u4e8e\u672c\u8d28\u4e0a\u8fd8\u662f\u4e00\u4e2a\u51fd\u6570\u8c03\u7528\uff0c\u6240\u4ee5\u6808\u9876\u6307\u9488\u4e5f\u4f1a\u5f80\u4e0b\u79fb\u52a8\uff0c\u5728\u6808\u4e0a\u7ed9\u6267\u884c",(0,r.jsx)(e.code,{children:"Bar()"}),"\u6240\u9700\u7684\u72b6\u6001\u5206\u914d\u7a7a\u95f4\uff0c\u5176\u4e2d\u4f1a\u6709\u4e00\u4e2a\u5f15\u7528\u6307\u5411\u5728\u5806\u4e0a\u7684\u72b6\u6001\uff0c\u8fd9\u6837\u4e00\u6765\uff0c",(0,r.jsx)(e.code,{children:"Bar()"}),"\u5c31\u53ef\u4ee5\u50cf\u4e00\u4e2a\u666e\u901a\u51fd\u6570\u90a3\u6837\u6267\u884c\u4e86\uff0c\u7ebf\u7a0b\u4e5f\u53ef\u4ee5\u8bbf\u95ee\u5230\u4f4d\u4e8e\u5806\u4e0a\u7684\u72b6\u6001\u3002"]}),"\n",(0,r.jsx)(e.p,{children:"\u5982\u679c\u534f\u7a0b\u9700\u8981\u6682\u505c\uff0c\u90a3\u4e48\u5f53\u524d\u6267\u884c\u5230\u7684\u4ee3\u7801\u4f4d\u7f6e\u4f1a\u8bb0\u5f55\u5230\u5806\u7684\u72b6\u6001\u4e2d\u3002\u7136\u540e\u6808\u4e0a\u7684\u6267\u884c\u65f6\u72b6\u6001\u88ab\u9500\u6bc1\uff0c\u6808\u9876\u6307\u9488\u79fb\u52a8\u4ee5\u56de\u6536\u7a7a\u95f4\uff0c\u5c31\u50cf\u666e\u901a\u51fd\u6570\u7ed3\u675f\u65f6\u90a3\u6837\u3002\u5728\u4e0b\u4e00\u6b21\u6062\u590d\u6267\u884c\u65f6\uff0c\u5806\u72b6\u6001\u4e2d\u8bb0\u5f55\u7684\u6682\u505c\u4f4d\u7f6e\u4f1a\u8bfb\u53d6\u51fa\u6765\uff0c\u4ece\u8fd9\u4e2a\u4f4d\u7f6e\u63a5\u7740\u6267\u884c\u3002\u8fd9\u6837\u5c31\u5b9e\u73b0\u4e86\u4e00\u4e2a\u53ef\u6682\u505c\u548c\u6062\u590d\u6267\u884c\u7684\u51fd\u6570\u3002"}),"\n",(0,r.jsx)(e.p,{children:"\u7531\u6b64\u53ef\u89c1\uff0c\u5f53\u534f\u7a0b\u6267\u884c\u7684\u65f6\u5019\uff0c\u5b83\u8ddf\u666e\u901a\u51fd\u6570\u4e00\u6837\uff0c\u4e5f\u662f\u9700\u8981\u4f9d\u8d56\u7ebf\u7a0b\u6808\uff1b\u4f46\u662f\uff0c\u4e00\u65e6\u5b83\u6682\u505c\u4e86\uff0c\u5b83\u7684\u72b6\u6001\u5c31\u4f1a\u72ec\u7acb\u4fdd\u5b58\u5728\u5806\u4e2d\uff0c\u6b64\u65f6\u5b83\u8ddf\u4efb\u4f55\u7ebf\u7a0b\u90fd\u6ca1\u6709\u5173\u7cfb\uff0c\u8c03\u7528\u5b83\u7684\u7ebf\u7a0b\u53ef\u4ee5\u7ee7\u7eed\u53bb\u505a\u5176\u5b83\u4e8b\u60c5\u800c\u4e0d\u4f1a\u505c\u6b62\u3002\u5728\u4e0b\u4e00\u6b21\u6062\u590d\u6267\u884c\u65f6\uff0c\u534f\u7a0b\u53ef\u4ee5\u7531\u4e0a\u6b21\u6267\u884c\u7684\u7ebf\u7a0b\u6765\u6267\u884c\uff0c\u4e5f\u53ef\u4ee5\u7531\u53e6\u5916\u4e00\u4e2a\u5b8c\u5168\u4e0d\u540c\u7684\u7ebf\u7a0b\u6765\u6267\u884c\u3002\u6240\u4ee5\u8bf4\u534f\u7a0b\u662f\u7ebf\u7a0b\u65e0\u5173\u7684\u3002"}),"\n",(0,r.jsx)(e.h2,{id:"12-\u534f\u7a0b\u7684\u4f18\u70b9",children:"1.2 \u534f\u7a0b\u7684\u4f18\u70b9"}),"\n",(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsxs)(e.li,{children:["\n",(0,r.jsx)(e.p,{children:"\u5199\u6cd5\u6bd4\u57fa\u4e8e\u56de\u8c03\u51fd\u6570\u7684\u5f02\u6b65\u4ee3\u7801\u7b80\u5355, \u907f\u514d\u4e86\u56de\u8c03\u5730\u72f1..; \u5199\u8d77\u534f\u7a0b\u5c31\u548c\u666e\u901a\u7684\u4ee3\u7801\u6ca1\u6709\u533a\u522b..."}),"\n"]}),"\n",(0,r.jsxs)(e.li,{children:["\n",(0,r.jsx)(e.p,{children:"\u6027\u80fd\u4f18\u4e8e\u591a\u7ebf\u7a0b, \u5207\u6362\u5f00\u9500\u6781\u5c0f:"}),"\n"]}),"\n"]}),"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",(0,r.jsxs)(e.table,{children:[(0,r.jsx)(e.thead,{children:(0,r.jsx)(e.tr,{children:(0,r.jsx)(e.th,{style:{textAlign:"center"},children:"##container##"})})}),(0,r.jsxs)(e.tbody,{children:[(0,r.jsx)(e.tr,{children:(0,r.jsx)(e.td,{style:{textAlign:"center"},children:(0,r.jsx)(e.img,{alt:"Clip_2024-08-02_21-33-45.png ##w600##",src:t(67690).A+"",width:"846",height:"637"})})}),(0,r.jsx)(e.tr,{children:(0,r.jsxs)(e.td,{style:{textAlign:"center"},children:["\u6765\u6e90: ",(0,r.jsx)(e.a,{href:"https://www.bilibili.com/video/BV1RV4y1L7ar/",children:"https://www.bilibili.com/video/BV1RV4y1L7ar/"})]})})]})]}),"\n",(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsxs)(e.li,{children:["\n",(0,r.jsx)(e.p,{children:"\u7279\u522b\u9002\u7528\u4e8eI/O\u5bc6\u96c6\u578b\u4efb\u52a1"}),"\n"]}),"\n",(0,r.jsxs)(e.li,{children:["\n",(0,r.jsx)(e.p,{children:"..."}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(e.h2,{id:"13-c20\u4e2d\u7684\u534f\u7a0b",children:"1.3 C++20\u4e2d\u7684\u534f\u7a0b"}),"\n",(0,r.jsxs)(e.p,{children:["\u5728C++\u4e2d\uff0c\u53ea\u8981\u5728\u51fd\u6570\u4f53\u5185\u51fa\u73b0\u4e86",(0,r.jsx)(e.code,{children:"co_await"}),"\u3001",(0,r.jsx)(e.code,{children:"co_return"}),"\u548c",(0,r.jsx)(e.code,{children:"co_yield"}),"\u8fd9\u4e09\u4e2a\u64cd\u4f5c\u7b26\u4e2d\u7684\u5176\u4e2d\u4e00\u4e2a\uff0c\u8fd9\u4e2a\u51fd\u6570\u5c31\u6210\u4e3a\u4e86\u534f\u7a0b\u3002"]}),"\n",(0,r.jsxs)(e.p,{children:["\u4f46\u662f, C++\u5b9a\u4e49\u4e86\u4e00\u4e2a\u534f\u8bae\u89c4\u8303\uff0c\u53ea\u8981\u6211\u4eec\u7684\u7c7b\u578b\u6309\u7167\u8fd9\u4e2a\u89c4\u8303\u5b9e\u73b0\u597d\uff0c\u624d\u53ef\u4ee5\u4f7f\u7528",(0,r.jsx)(e.code,{children:"co_await"}),"\u7b49\u3002"]}),"\n",(0,r.jsx)(e.h3,{id:"131-co_await-\u548c-awaitable",children:"1.3.1 co_await \u548c Awaitable"}),"\n",(0,r.jsxs)(e.p,{children:["\u6211\u4eec\u5148\u6765\u5173\u6ce8\u4e00\u4e0b",(0,r.jsx)(e.code,{children:"co_await"}),"\u64cd\u4f5c\u7b26\u3002"]}),"\n",(0,r.jsxs)(e.p,{children:["\u8fd9\u4e2a\u89c4\u8303\u79f0\u4f5c",(0,r.jsx)(e.code,{children:"Awaitable"}),"\uff0c\u5b83\u5b9a\u4e49\u4e86\u82e5\u5e72\u4e2a\u51fd\u6570\uff0c\u4f20\u7ed9",(0,r.jsx)(e.code,{children:"co_await"}),"\u64cd\u4f5c\u7b26\u7684\u5bf9\u8c61\u5fc5\u987b\u5b9e\u73b0\u8fd9\u4e9b\u51fd\u6570\u3002\u8fd9\u4e9b\u51fd\u6570\u5305\u62ec:"]}),"\n",(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsxs)(e.li,{children:["\n",(0,r.jsxs)(e.p,{children:[(0,r.jsx)(e.code,{children:"await_ready()"}),": \u8fd4\u56de\u7c7b\u578b\u662f",(0,r.jsx)(e.code,{children:"bool"}),"\u3002\u534f\u7a0b\u5728\u6267\u884c",(0,r.jsx)(e.code,{children:"co_await"}),"\u7684\u65f6\u5019\uff0c\u4f1a\u5148\u8c03\u7528",(0,r.jsx)(e.code,{children:"await_ready()"}),"\u6765\u8be2\u95ee\u201c\u64cd\u4f5c\u662f\u5426\u5df2\u5b8c\u6210\u201d\uff0c\u5982\u679c\u51fd\u6570\u8fd4\u56de\u4e86",(0,r.jsx)(e.code,{children:"true"}),"\uff0c\u534f\u7a0b\u5c31",(0,r.jsx)(e.strong,{children:"\u4e0d\u4f1a\u6682\u505c"}),"\uff0c\u800c\u662f\u7ee7\u7eed\u5f80\u4e0b\u6267\u884c\u3002\u5b9e\u73b0\u8fd9\u4e2a\u51fd\u6570\u7684\u539f\u56e0\u662f\uff0c\u5f02\u6b65\u8c03\u7528\u7684\u65f6\u5e8f\u662f\u4e0d\u786e\u5b9a\u7684\uff0c\u5982\u679c\u5728\u6267\u884c",(0,r.jsx)(e.code,{children:"co_await"}),"\u4e4b\u524d\u5c31\u5df2\u7ecf\u542f\u52a8\u4e86\u5f02\u6b65\u64cd\u4f5c\uff0c\u90a3\u4e48\u5728\u6267\u884c",(0,r.jsx)(e.code,{children:"co_await"}),"\u7684\u65f6\u5019\u5f02\u6b65\u64cd\u4f5c\u6709\u53ef\u80fd\u5df2\u7ecf\u5b8c\u6210\u4e86\uff0c\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\u5c31\u4e0d\u9700\u8981\u6682\u505c\uff0c\u901a\u8fc7",(0,r.jsx)(e.code,{children:"await_ready()"}),"\u5c31\u53ef\u4ee5\u5230\u8fbe\u5230\u8fd9\u4e2a\u76ee\u7684\u3002"]}),"\n"]}),"\n",(0,r.jsxs)(e.li,{children:["\n",(0,r.jsxs)(e.p,{children:[(0,r.jsx)(e.code,{children:"await_suspend()"}),": \u6709\u4e00\u4e2a\u7c7b\u578b\u4e3a",(0,r.jsx)(e.code,{children:"std::coroutine_handle<>"}),"\u7684\u53c2\u6570\uff0c\u8fd4\u56de\u7c7b\u578b\u53ef\u4ee5\u662f",(0,r.jsx)(e.code,{children:"void"}),"\u6216\u8005",(0,r.jsx)(e.code,{children:"bool"}),"\u3002\u5982\u679c",(0,r.jsx)(e.code,{children:"await_ready()"}),"\u8fd4\u56de\u4e86",(0,r.jsx)(e.code,{children:"false"}),"\uff0c\u610f\u5473\u7740\u534f\u7a0b\u8981",(0,r.jsx)(e.strong,{children:"\u6682\u505c"}),"\uff0c\u90a3\u4e48\u7d27\u63a5\u7740\u4f1a\u8c03\u7528\u8fd9\u4e2a\u51fd\u6570\u3002\u8be5\u51fd\u6570\u7684\u76ee\u7684\u662f\u7528\u6765\u63a5\u6536\u534f\u7a0b\u53e5\u67c4\uff08\u4e5f\u5c31\u662f",(0,r.jsx)(e.code,{children:"std::coroutine_handle<>"}),"\u53c2\u6570\uff09\uff0c\u5e76\u5728\u5f02\u6b65\u64cd\u4f5c\u5b8c\u6210\u7684\u65f6\u5019\u901a\u8fc7\u8fd9\u4e2a\u53e5\u67c4\u8ba9\u534f\u7a0b\u6062\u590d\u6267\u884c\u3002\u534f\u7a0b\u53e5\u67c4\u7c7b\u4f3c\u4e8e\u51fd\u6570\u6307\u9488\uff0c\u5b83\u8868\u793a\u4e00\u4e2a\u534f\u7a0b\u5b9e\u4f8b\uff0c\u8c03\u7528\u53e5\u67c4\u4e0a\u7684\u5bf9\u5e94\u51fd\u6570\uff0c\u53ef\u4ee5\u8ba9\u8fd9\u4e2a\u534f\u7a0b\u6062\u590d\u6267\u884c\u3002"]}),"\n"]}),"\n",(0,r.jsxs)(e.li,{children:["\n",(0,r.jsxs)(e.p,{children:[(0,r.jsx)(e.code,{children:"await_suspend()"}),": \u7684\u8fd4\u56de\u7c7b\u578b\u4e00\u822c\u4e3a",(0,r.jsx)(e.code,{children:"void"}),"\uff0c\u4f46\u4e5f\u53ef\u4ee5\u662f",(0,r.jsx)(e.code,{children:"bool"}),"\uff0c\u8fd9\u65f6\u5019\u7684\u8fd4\u56de\u503c\u7528\u6765\u63a7\u5236\u534f\u7a0b\u662f\u5426\u771f\u7684\u8981\u6682\u505c\uff0c\u8fd9\u91cc\u662f\u7b2c\u4e8c\u6b21\u53ef\u4ee5\u963b\u6b62\u534f\u7a0b\u6682\u505c\u7684\u673a\u4f1a\u3002\u5982\u679c\u8be5\u51fd\u6570\u8fd4\u56de\u4e86",(0,r.jsx)(e.code,{children:"false"}),"\uff0c\u534f\u7a0b\u5c31",(0,r.jsx)(e.strong,{children:"\u4e0d\u4f1a\u6682\u505c"}),"\uff08\u6ce8\u610f\u8fd4\u56de\u503c\u7684\u542b\u4e49\u8ddf",(0,r.jsx)(e.code,{children:"await_ready()"}),"\u662f\u76f8\u53cd\u7684\uff09\u3002"]}),"\n"]}),"\n",(0,r.jsxs)(e.li,{children:["\n",(0,r.jsxs)(e.p,{children:[(0,r.jsx)(e.code,{children:"await_resume()"}),": \u8fd4\u56de\u7c7b\u578b\u53ef\u4ee5\u662f",(0,r.jsx)(e.code,{children:"void"}),"\uff0c\u4e5f\u53ef\u4ee5\u662f\u5176\u5b83\u7c7b\u578b\uff0c\u5b83\u7684\u8fd4\u56de\u503c\u5c31\u662f",(0,r.jsx)(e.code,{children:"co_await"}),"\u64cd\u4f5c\u7b26\u7684\u8fd4\u56de\u503c\u3002\u5f53",(0,r.jsx)(e.strong,{children:"\u534f\u7a0b\u6062\u590d\u6267\u884c"}),"\uff0c\u6216\u8005",(0,r.jsx)(e.strong,{children:"\u4e0d\u9700\u8981\u6682\u505c"}),"\u7684\u65f6\u5019\uff0c\u4f1a\u8c03\u7528\u8fd9\u4e2a\u51fd\u6570\u3002"]}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-C++",children:"class IntReader {\npublic:\n    bool await_ready() { // \u8be2\u95ee\u201c\u64cd\u4f5c\u662f\u5426\u5df2\u5b8c\u6210\u201d\n        return false;    // false: \u6682\u505c\n    }\n\n    void await_suspend(std::coroutine_handle<> handle) { // \u534f\u7a0b\u53e5\u67c4\u53c2\u6570\n        std::thread thread([this, handle]() { // \u521b\u5efa\u4e00\u4e2a\u7ebf\u7a0b, \u5e76\u4e14\u6267\u884c\n            std::srand(static_cast<unsigned int>(std::time(nullptr)));\n            value_ = std::rand(); // \u751f\u6210\u968f\u673a\u6570\u540e (\u4f5c\u4e3a\u8fd4\u56de\u503c)\n            handle.resume();      // \u8ba9\u534f\u7a0b\u7ee7\u7eed\u6267\u884c\n        });\n\n        thread.detach(); // \u5206\u79bb\u7ebf\u7a0b, \u4e0d\u7528join, \u81ea\u5df1\u7ba1\u7406\u81ea\u5df1\u751f\u547d\u5468\u671f\n    }\n\n    int await_resume() { // \u8fd4\u56de\u503c: \u5f53\u534f\u7a0b\u6062\u590d\u6267\u884c\uff0c\u6216\u8005\u4e0d\u9700\u8981\u6682\u505c\u7684\u65f6\u5019\uff0c\u4f1a\u8c03\u7528\u8fd9\u4e2a\u51fd\u6570\u3002\n        return value_;\n    }\n\nprivate:\n    int value_{};\n};\n\nclass MyTask { // \u4efb\u52a1\u53e5\u67c4\npublic:\n    class promise_type {\n    public:\n        MyTask get_return_object() { return {}; }\n        std::suspend_never initial_suspend() { return {}; }\n        std::suspend_never final_suspend() noexcept { return {}; }\n        void unhandled_exception() {}\n        void return_void() {}\n    };\n};\n\nMyTask PrintInt() { // \u534f\u7a0b\n    IntReader reader1;\n    int total = co_await reader1;\n\n    IntReader reader2;\n    total += co_await reader2;\n\n    IntReader reader3;\n    total += co_await reader3;\n\n    std::cout << total << std::endl;\n}\n\nint main() {\n    PrintInt();\n    HXTools::sleep(1s); // \u6682\u505c\u4e00\u79d2\n    return 0;\n}\n"})}),"\n",(0,r.jsx)(e.h3,{id:"132-\u9884\u5b9a\u4e49\u7684-awaitable-\u7c7b\u578b",children:"1.3.2 \u9884\u5b9a\u4e49\u7684 Awaitable \u7c7b\u578b"}),"\n",(0,r.jsxs)(e.p,{children:["C++\u9884\u5b9a\u4e49\u4e86\u4e24\u4e2a\u7b26\u5408",(0,r.jsx)(e.code,{children:"Awaitable"}),"\u89c4\u8303\u7684\u7c7b\u578b: ",(0,r.jsx)(e.code,{children:"std::suspend_never"}),"\u548c",(0,r.jsx)(e.code,{children:"std::suspend_always"}),"\u3002\u987e\u540d\u601d\u4e49\uff0c\u8fd9\u4e24\u4e2a\u7c7b\u578b\u5206\u522b\u8868\u793a\u201c\u4e0d\u6682\u505c\u201d\u548c\u201c\u8981\u6682\u505c\u201d\uff0c\u5b9e\u9645\u4e0a\u5b83\u4eec\u7684\u533a\u522b\u4ec5\u5728\u4e8e",(0,r.jsx)(e.code,{children:"await_ready()"}),"\u51fd\u6570\u7684\u8fd4\u56de\u503c\uff0c",(0,r.jsx)(e.code,{children:"std::suspend_never"}),"\u4f1a\u8fd4\u56de",(0,r.jsx)(e.code,{children:"true"}),"\uff0c\u800c",(0,r.jsx)(e.code,{children:"std::suspend_always"}),"\u4f1a\u8fd4\u56de",(0,r.jsx)(e.code,{children:"false"}),"\u3002\u9664\u6b64\u4e4b\u5916\uff0c\u8fd9\u4e24\u4e2a\u7c7b\u578b\u7684",(0,r.jsx)(e.code,{children:"await_supsend()"}),"\u548c",(0,r.jsx)(e.code,{children:"await_resume()"}),"\u51fd\u6570\u5b9e\u73b0\u90fd\u662f\u7a7a\u7684\u3002"]}),"\n",(0,r.jsxs)(e.p,{children:["\u8fd9\u4e24\u4e2a\u7c7b\u578b\u662f\u5de5\u5177\u7c7b\uff0c\u7528\u6765\u4f5c\u4e3a",(0,r.jsx)(e.code,{children:"promise_type"}),"\u90e8\u5206\u51fd\u6570\u7684\u8fd4\u56de\u7c7b\u578b\uff0c\u4ee5\u63a7\u5236\u534f\u7a0b\u5728\u67d0\u4e9b\u65f6\u673a\u662f\u5426\u8981\u6682\u505c\u3002\u4e0b\u6587\u4f1a\u8be6\u7ec6\u4ecb\u7ecd",(0,r.jsx)(e.code,{children:"promise_type"}),"\u3002"]}),"\n",(0,r.jsx)(e.h3,{id:"133-\u534f\u7a0b\u7684\u8fd4\u56de\u7c7b\u578b\u548c-promise_type",children:"1.3.3 \u534f\u7a0b\u7684\u8fd4\u56de\u7c7b\u578b\u548c promise_type"}),"\n",(0,r.jsxs)(e.p,{children:["\u73b0\u5728\u6211\u4eec\u628a\u5173\u6ce8\u70b9\u805a\u7126\u5728\u534f\u7a0b\u7684\u8fd4\u56de\u7c7b\u578b\u4e0a\u3002C++\u5bf9",(0,r.jsx)(e.strong,{children:"\u534f\u7a0b\u7684\u8fd4\u56de\u7c7b\u578b"}),"\u53ea\u6709\u4e00\u4e2a\u8981\u6c42:"]}),"\n",(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsxs)(e.li,{children:["\u5305\u542b\u540d\u4e3a",(0,r.jsx)(e.code,{children:"promise_type"}),"\u7684\u5185\u5d4c\u7c7b\u578b\u3002"]}),"\n"]}),"\n",(0,r.jsxs)(e.p,{children:["\u8ddf\u4e0a\u6587\u4ecb\u7ecd\u7684",(0,r.jsx)(e.code,{children:"Awaitable"}),"\u4e00\u6837\uff0c",(0,r.jsx)(e.code,{children:"promise_type"}),"\u9700\u8981\u7b26\u5408C++\u89c4\u5b9a\u7684\u534f\u8bae\u89c4\u8303\uff0c\u4e5f\u5c31\u662f\u8981\u5b9a\u4e49\u51e0\u4e2a\u7279\u5b9a\u7684\u51fd\u6570\u3002",(0,r.jsx)(e.code,{children:"promise_type"}),"\u662f\u534f\u7a0b\u7684\u4e00\u90e8\u5206\uff0c\u5f53\u534f\u7a0b\u88ab\u8c03\u7528\uff0c\u5728\u5806\u4e0a\u4e3a\u5176\u72b6\u6001\u5206\u914d\u7a7a\u95f4\u7684\u65f6\u5019\uff0c\u540c\u65f6\u4e5f\u4f1a\u5728\u5176\u4e2d\u521b\u5efa\u4e00\u4e2a\u5bf9\u5e94\u7684",(0,r.jsx)(e.code,{children:"promise_type"}),"\u5bf9\u8c61\u3002\u901a\u8fc7\u5728\u5b83\u4e0a\u9762\u5b9a\u4e49\u7684\u51fd\u6570\uff0c\u6211\u4eec\u53ef\u4ee5\u4e0e\u534f\u7a0b\u8fdb\u884c\u6570\u636e\u4ea4\u4e92\uff0c\u4ee5\u53ca\u63a7\u5236\u534f\u7a0b\u7684\u884c\u4e3a\u3002"]}),"\n",(0,r.jsxs)(e.p,{children:[(0,r.jsx)(e.code,{children:"promise_type"}),"\u8981\u5b9e\u73b0\u7684\u7b2c\u4e00\u4e2a\u51fd\u6570\u662f",(0,r.jsx)(e.code,{children:"get_return_object()"}),"\uff0c\u7528\u6765",(0,r.jsx)(e.strong,{children:"\u521b\u5efa\u534f\u7a0b\u7684\u8fd4\u56de\u503c"}),"\u3002\u5728\u534f\u7a0b\u5185\uff0c\u6211\u4eec\u4e0d\u9700\u8981\u663e\u5f0f\u5730\u521b\u5efa\u8fd4\u56de\u503c\uff0c\u8fd9\u662f\u7531\u7f16\u8bd1\u5668\u9690\u5f0f\u8c03\u7528",(0,r.jsx)(e.code,{children:"get_return_object()"}),"\u6765\u521b\u5efa\u5e76\u8fd4\u56de\u7684\u3002\u8fd9\u4e2a\u5173\u7cfb\u770b\u8d77\u6765\u6bd4\u8f83\u602a\u5f02\uff0c",(0,r.jsx)(e.code,{children:"promise_type"}),"\u662f\u8fd4\u56de\u7c7b\u578b\u7684\u5185\u5d4c\u7c7b\u578b\uff0c\u4f46\u7f16\u8bd1\u5668\u4e0d\u4f1a\u76f4\u63a5\u521b\u5efa\u8fd4\u56de\u503c\uff0c\u800c\u662f\u5148\u521b\u5efa\u4e00\u4e2a",(0,r.jsx)(e.code,{children:"promise_type"}),"\u5bf9\u8c61\uff0c\u518d\u901a\u8fc7\u8fd9\u4e2a\u5bf9\u8c61\u6765\u521b\u5efa\u8fd4\u56de\u503c\u3002"]}),"\n\n\n\n\n\n\n\n\n\n\n\n",(0,r.jsxs)(e.table,{children:[(0,r.jsx)(e.thead,{children:(0,r.jsx)(e.tr,{children:(0,r.jsx)(e.th,{style:{textAlign:"center"},children:"##container##"})})}),(0,r.jsx)(e.tbody,{children:(0,r.jsx)(e.tr,{children:(0,r.jsx)(e.td,{style:{textAlign:"center"},children:(0,r.jsx)(e.img,{alt:"Clip_2024-08-02_22-23-52.png ##w600##",src:t(12788).A+"",width:"1528",height:"254"})})})})]}),"\n",(0,r.jsxs)(e.p,{children:["\u90a3\u4e48\u534f\u7a0b\u7684\u8fd4\u56de\u503c\u6709\u4ec0\u4e48\u7528\u5462\uff1f\u8fd9\u53d6\u51b3\u4e8e\u534f\u7a0b\u7684\u8bbe\u8ba1\u8005\u7684\u610f\u56fe\uff0c\u53d6\u51b3\u4e8e\u4ed6\u60f3\u8981\u4ee5\u4ec0\u4e48\u6837\u7684\u65b9\u5f0f\u6765\u4f7f\u7528\u534f\u7a0b\u3002\u4f8b\u5982\uff0c\u5728\u4e0a\u6587\u7684\u793a\u4f8b\u4e2d\uff0c",(0,r.jsx)(e.code,{children:"PrintInt()"}),"\u8fd9\u4e2a\u534f\u7a0b\u53ea\u662f\u8f93\u51fa\u4e00\u4e2a\u6574\u6570\uff0c\u4e0d\u9700\u8981\u4e0e\u8c03\u7528\u8005\u6709\u4ea4\u4e92\uff0c\u6240\u4ee5\u5b83\u7684\u8fd4\u56de\u503c\u53ea\u662f\u4e00\u4e2a\u7a7a\u58f3\u3002"]}),"\n",(0,r.jsxs)(e.p,{children:["\u5047\u5982\u6211\u4eec\u60f3\u5b9e\u73b0\u4e00\u4e2a",(0,r.jsx)(e.code,{children:"GetInt()"}),"\u534f\u7a0b\uff0c\u5b83\u4f1a\u8fd4\u56de\u4e00\u4e2a\u6574\u6570\u7ed9\u8c03\u7528\u8005\uff0c\u7531\u8c03\u7528\u8005\u6765\u8f93\u51fa\u7ed3\u679c\uff0c\u90a3\u4e48\u5c31\u9700\u8981\u5bf9\u534f\u7a0b\u7684\u8fd4\u56de\u7c7b\u578b\u505a\u4e00\u4e9b\u4fee\u6539\u4e86\u3002"]}),"\n",(0,r.jsx)(e.h3,{id:"134-co_return",children:"1.3.4 co_return"}),"\n",(0,r.jsxs)(e.p,{children:["\u6211\u4eec\u73b0\u5728\u628a",(0,r.jsx)(e.code,{children:"PrintInt()"}),"\u4fee\u6539\u6210",(0,r.jsx)(e.code,{children:"GetInt()"}),"\u3002\u4f7f\u7528",(0,r.jsx)(e.code,{children:"co_return"}),"\u64cd\u4f5c\u7b26\u53ef\u4ee5\u4ece\u534f\u7a0b\u4e2d\u8fd4\u56de\u6570\u636e\uff0c\u5982\u4e0b\u6240\u793a:"]}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-C++",children:"MyTask GetInt() {\n    IntReader reader1;\n    int total = co_await reader1;\n\n    IntReader reader2;\n    total += co_await reader2;\n\n    IntReader reader3;\n    total += co_await reader3;\n\n    co_return total;\n}\n"})}),"\n",(0,r.jsxs)(e.p,{children:[(0,r.jsx)(e.code,{children:"co_return total"}),"\u8fd9\u4e2a\u8868\u8fbe\u5f0f\u7b49\u4ef7\u4e8e",(0,r.jsx)(e.code,{children:"promise_type.return_value(total)"}),"\uff0c\u4e5f\u5c31\u662f\u8bf4\uff0c\u8fd4\u56de\u7684\u6570\u636e\u4f1a\u901a\u8fc7",(0,r.jsx)(e.code,{children:"return_value()"}),"\u51fd\u6570\u4f20\u9012\u7ed9",(0,r.jsx)(e.code,{children:"promise_type"}),"\u5bf9\u8c61\uff0c",(0,r.jsx)(e.code,{children:"promise_type"}),"\u8981\u5b9e\u73b0\u8fd9\u4e2a\u51fd\u6570\u624d\u80fd\u63a5\u6536\u5230\u6570\u636e\u3002\u9664\u6b64\u4e4b\u5916\uff0c\u8fd8\u8981\u60f3\u529e\u6cd5\u8ba9\u8fd4\u56de\u503c",(0,r.jsx)(e.code,{children:"MyTask"}),"\u80fd\u8bbf\u95ee\u5230\u8fd9\u4e2a\u6570\u636e\u3002\u4e3a\u4e86\u51cf\u5c11\u6570\u636e\u4f20\u9012\uff0c\u6211\u4eec\u53ef\u4ee5\u5728",(0,r.jsx)(e.code,{children:"promise_type"}),"\u548c",(0,r.jsx)(e.code,{children:"MyTask"}),"\u4e4b\u95f4\u5171\u4eab\u540c\u4e00\u4efd\u6570\u636e\u3002\u4fee\u6539\u4e4b\u540e\u7684\u5b8c\u6574\u793a\u4f8b\u5982\u4e0b\u6240\u793a:"]}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-C++",children:"class IntReader {\npublic:\n    bool await_ready() { // co_await \u8be2\u95ee \u64cd\u4f5c\u662f\u5426\u5df2\u5b8c\u6210\n        return false;    // false: \u6ca1\u6709\u5b8c\u6210, \u5219\u8c03\u7528 await_suspend\n                         // true: \u5df2\u5b8c\u6210, \u76f4\u63a5\u8fd4\u56de\n    }\n\n    void await_suspend(std::coroutine_handle<> handle) { // \u534f\u7a0b\u53e5\u67c4\u53c2\u6570\n        std::thread thread([this, handle]() { // \u521b\u5efa\u4e00\u4e2a\u7ebf\u7a0b, \u5e76\u4e14\u6267\u884c\n            std::srand(static_cast<unsigned int>(std::time(nullptr)));\n            value_ = std::rand(); // \u751f\u6210\u968f\u673a\u6570\u540e (\u4f5c\u4e3a\u8fd4\u56de\u503c)\n            handle.resume();      // \u8ba9\u534f\u7a0b\u7ee7\u7eed\u6267\u884c\n        });\n\n        thread.detach(); // \u5206\u79bb\u7ebf\u7a0b, \u4e0d\u7528join, \u81ea\u5df1\u7ba1\u7406\u81ea\u5df1\u751f\u547d\u5468\u671f\n    }\n\n    int await_resume() { // \u8fd4\u56de\u503c: \u5f53\u534f\u7a0b\u6062\u590d\u6267\u884c\uff0c\u6216\u8005\u4e0d\u9700\u8981\u6682\u505c\u7684\u65f6\u5019\uff0c\u4f1a\u8c03\u7528\u8fd9\u4e2a\u51fd\u6570\u3002\n        return value_;\n    }\n\nprivate:\n    int value_{};\n};\n\nclass MyTask { // \u4efb\u52a1\u53e5\u67c4\npublic:\n    class promise_type {\n/**\n * \u5728C++\u534f\u7a0b\u4e2d\uff0c\u5f53\u521b\u5efapromise_type\u5bf9\u8c61\u65f6\uff0c\n * \u7f16\u8bd1\u5668\u4f1a\u6839\u636e\u534f\u7a0b\u51fd\u6570\u7684\u58f0\u660e\u548c\u4e0a\u4e0b\u6587\u9009\u62e9\u5408\u9002\u7684\u6784\u9020\u51fd\u6570\u3002\n * \u5982\u679cpromise_type\u6709\u591a\u4e2a\u6784\u9020\u51fd\u6570\uff0c\u90a3\u4e48\u7f16\u8bd1\u5668\u4f1a\u6839\u636e\u4ee5\u4e0b\u89c4\u5219\u9009\u62e9\u6700\u5408\u9002\u7684\u6784\u9020\u51fd\u6570\uff1a\n * \n * 1. \u65e0\u53c2\u6784\u9020\u51fd\u6570:\n * \u5982\u679cpromise_type\u6709\u4e00\u4e2a\u65e0\u53c2\u6784\u9020\u51fd\u6570\uff0c\n * \u4e14\u8be5\u6784\u9020\u51fd\u6570\u80fd\u591f\u521d\u59cb\u5316\u6240\u6709\u6210\u5458\u53d8\u91cf\uff0c\n * \u90a3\u4e48\u7f16\u8bd1\u5668\u4f1a\u4f18\u5148\u9009\u62e9\u8fd9\u4e2a\u6784\u9020\u51fd\u6570\u3002\n * \n * 2. \u5339\u914d\u53c2\u6570\u7684\u6784\u9020\u51fd\u6570:\n * \u5982\u679c\u534f\u7a0b\u51fd\u6570\u4f20\u9012\u4e86\u989d\u5916\u7684\u53c2\u6570\uff0c\n * \u8fd9\u4e9b\u53c2\u6570\u53ef\u4ee5\u88ab\u4f20\u9012\u7ed9promise_type\u7684\u6784\u9020\u51fd\u6570\u6765\u521d\u59cb\u5316\u5176\u6210\u5458\u53d8\u91cf\uff0c\n * \u90a3\u4e48\u7f16\u7f16\u8bd1\u5668\u4f1a\u9009\u62e9\u80fd\u5339\u914d\u8fd9\u4e9b\u53c2\u6570\u7684\u6784\u9020\u51fd\u6570\u3002\n * \n * 3. \u7f16\u8bd1\u5668\u7684\u9009\u62e9:\n * \u7f16\u8bd1\u5668\u6839\u636e\u6784\u9020\u51fd\u6570\u7684\u53c2\u6570\u548c\u521d\u59cb\u5316\u8981\u6c42\u6765\u9009\u62e9\u6700\u5408\u9002\u7684\u6784\u9020\u51fd\u6570\u3002\n * \u5982\u679c\u6709\u591a\u4e2a\u5339\u914d\u7684\u6784\u9020\u51fd\u6570\u4e14\u6ca1\u6709\u660e\u663e\u7684\u6700\u4f73\u9009\u62e9\uff0c\u5219\u7f16\u8bd1\u4f1a\u5931\u8d25\uff0c\u8981\u6c42\u63d0\u4f9b\u660e\u786e\u7684\u6784\u9020\u51fd\u6570\u9009\u62e9\u3002\n */\n    public:\n        promise_type() \n        : value_(std::make_shared<int>()) \n        {}\n\n        MyTask get_return_object() { // 3. \u6784\u5efa\u8fd4\u56de\u5bf9\u8c61\n            return MyTask{ value_ };\n        }\n\n        void return_value(int value) { // 2. \u4fdd\u5b58\u8fd4\u56de\u503c\n            *value_ = value;\n        }\n        std::suspend_never initial_suspend() { return {}; }\n        std::suspend_never final_suspend() noexcept { return {}; }\n        void unhandled_exception() {}\n\n   private:\n        std::shared_ptr<int> value_;\n    };\n\npublic:\n    MyTask(const std::shared_ptr<int>& value) \n    : value_(value) \n    {}\n\n    int GetValue() const {\n        return *value_;\n    }\n\nprivate:\n    std::shared_ptr<int> value_;\n};\n\nMyTask GetInt() {\n    // \u8c03\u7528\u534f\u7a0b(\u7b2c\u4e00\u6b21\u8fdb\u5165)\u7684\u77ac\u95f4: \u521b\u5efa\u4e00\u4e2apromise_type\u5bf9\u8c61\n\n    IntReader reader1;\n    std::cout << \"\u7b49\u5f85...\\n\";\n    std::this_thread::sleep_for(0.5s); // \u7a0b\u5e8f\u963b\u585e\u4e8e\u6b64\n\n    int total = co_await reader1; // \u8fd4\u56de\u6267\u884c\u6743\u9650\u7ed9 main (), get_return_object() \u8fd4\u56de\u4e00\u4e2a MyTask\n    std::cout << \"OK!!!\\n\"; // \u7531 await_suspend \u521b\u5efa\u7684\u7ebf\u7a0b, \u5524\u9192 \u6211\u8fd9\u4e2a\u534f\u7a0b\u7ee7\u7eed\u6267\u884c, \u4e0b\u9762\u540c\u7406\n                            // \u5148\u8c03\u7528 await_resume \u6062\u590d\n    IntReader reader2;\n    total += co_await reader2;\n\n    IntReader reader3;\n    total += co_await reader3;\n\n    co_return total; // 1. \u8fd4\u56de: \u7b49\u4ef7\u4e8e promise_type.return_value(total)\n}\n\n\nint main() {\n    auto task = GetInt();\n    std::cout << task.GetValue() << '\\n'; // GetInt() \u8fd8\u5728\u6267\u884c, \u6b64\u5904\u65e0\u503c\n    std::this_thread::sleep_for(1s);\n    std::cout << task.GetValue() << '\\n'; // GetInt() \u6267\u884c\u5b8c\u6bd5, \u6709\u503c\n    return 0;\n}\n"})}),"\n",(0,r.jsxs)(e.p,{children:["\u5728\u771f\u5b9e\u7684\u4f7f\u7528\u573a\u666f\u4e2d\uff0c\u534f\u7a0b\u7684\u8fd4\u56de\u7c7b\u578b\u8fd8\u9700\u8981\u63d0\u4f9b\u5404\u79cd\u540c\u6b65\u673a\u5236\u624d\u80fd\u7ed9\u8c03\u7528\u8005\u4f7f\u7528\uff0c\u4f8b\u5982\u52a0\u4e0a\u56de\u8c03\u3001\u901a\u77e5\u7b49\uff0c\u5c31\u50cf\u666e\u901a\u7684\u5f02\u6b65\u64cd\u4f5c\u4e00\u6837\u3002\u7531\u6b64\u53ef\u89c1\uff0c\u534f\u7a0b\u7684\u4f18\u70b9\u4f53\u73b0\u5728\u5b83\u5185\u90e8\u7684\u4ee3\u7801\u903b\u8f91\u4e0a\uff0c\u800c\u4e0d\u662f\u5bf9\u5916\u7684\u4f7f\u7528\u65b9\u5f0f\u4e0a\u3002\u5f53\u7136\uff0c\u6211\u4eec\u4e5f\u53ef\u4ee5\u8ba9\u534f\u7a0b\u7684\u8fd4\u56de\u7c7b\u578b\u5b9e\u73b0",(0,r.jsx)(e.code,{children:"Awaitable"}),"\u89c4\u8303\uff0c\u8ba9\u5b83\u53ef\u4ee5\u88ab\u53e6\u5916\u4e00\u4e2a\u534f\u7a0b\u66f4\u597d\u5730\u8c03\u7528\u3002\u8fd9\u6837\u4e00\u6765\uff0c\u8c03\u7528\u534f\u7a0b\u7684\u4e5f\u5fc5\u987b\u662f\u534f\u7a0b\uff0c\u8fd9\u6837\u5c42\u5c42\u5f80\u4e0a\u4f20\u9012\uff0c\u76f4\u5230\u9047\u5230\u4e0d\u80fd\u6539\u6210\u534f\u7a0b\u7684\u51fd\u6570\u4e3a\u6b62\uff0c\u4f8b\u5982",(0,r.jsx)(e.code,{children:"main()"}),"\u51fd\u6570\u3002\u4ece\u8fd9\u4e2a\u89d2\u5ea6\u6765\u8bf4\uff0c\u534f\u7a0b\u4e5f\u662f\u5177\u6709\u4f20\u67d3\u6027\u7684\u3002"]}),"\n",(0,r.jsxs)(e.p,{children:["\u6700\u540e\uff0c\u8ddf\u666e\u901a\u7684",(0,r.jsx)(e.code,{children:"return"}),"\u4e00\u6837\uff0c",(0,r.jsx)(e.code,{children:"co_return"}),"\u4e5f\u53ef\u4ee5\u4e0d\u5e26\u4efb\u4f55\u53c2\u6570\uff0c\u8fd9\u65f6\u5019\u534f\u7a0b\u4ee5\u4e0d\u5e26\u6570\u636e\u7684\u65b9\u5f0f\u8fd4\u56de\uff0c\u76f8\u5f53\u4e8e\u8c03\u7528\u4e86",(0,r.jsx)(e.code,{children:"promise_type.return_void()"}),"\uff0c",(0,r.jsx)(e.code,{children:"promise_type"}),"\u9700\u8981\u5b9a\u4e49\u8fd9\u4e2a\u51fd\u6570\u4ee5\u652f\u6301\u4e0d\u5e26\u6570\u636e\u7684\u8fd4\u56de\u3002\u5982\u679c\u6211\u4eec\u5728\u534f\u7a0b\u7ed3\u675f\u7684\u65f6\u5019\u6ca1\u6709\u8c03\u7528\u4efb\u4f55",(0,r.jsx)(e.code,{children:"co_return"}),"\uff0c\u90a3\u4e48\u7f16\u8bd1\u5668\u4f1a\u9690\u5f0f\u5730\u52a0\u4e0a\u4e00\u4e2a\u4e0d\u5e26\u53c2\u6570\u7684",(0,r.jsx)(e.code,{children:"co_return"}),"\u8c03\u7528\u3002"]}),"\n",(0,r.jsx)(e.h3,{id:"135-co_yield",children:"1.3.5 co_yield"}),"\n",(0,r.jsxs)(e.p,{children:["\u5f53\u534f\u7a0b\u8c03\u7528\u4e86",(0,r.jsx)(e.code,{children:"co_return"}),"\uff0c\u610f\u5473\u7740\u534f\u7a0b\u7ed3\u675f\u4e86\uff0c\u5c31\u8ddf\u6211\u4eec\u5728\u666e\u901a\u51fd\u6570\u4e2d\u7528",(0,r.jsx)(e.code,{children:"return"}),"\u7ed3\u675f\u51fd\u6570\u4e00\u6837\u3002\u8fd9\u65f6\u5019\uff0c\u4e0e\u8fd9\u4e2a\u534f\u7a0b\u5b9e\u4f8b\u6709\u5173\u7684\u5185\u5b58\u90fd\u4f1a\u88ab\u91ca\u653e\u6389\uff0c\u5b83\u4e0d\u80fd\u518d\u6267\u884c\u4e86\u3002\u5982\u679c\u9700\u8981\u5728\u534f\u7a0b\u4e2d\u591a\u6b21\u8fd4\u56de\u6570\u636e\u800c\u4e0d\u7ed3\u675f\u534f\u7a0b\u7684\u8bdd\uff0c\u53ef\u4ee5\u4f7f\u7528",(0,r.jsx)(e.code,{children:"co_yield"}),"\u64cd\u4f5c\u7b26\u3002"]}),"\n",(0,r.jsxs)(e.p,{children:[(0,r.jsx)(e.code,{children:"co_yield"}),"\u7684\u4f5c\u7528\u662f: \u8fd4\u56de\u4e00\u4e2a\u6570\u636e\uff0c\u5e76\u4e14\u8ba9\u534f\u7a0b\u6682\u505c\uff0c\u7136\u540e\u7b49\u4e0b\u4e00\u6b21\u673a\u4f1a\u6062\u590d\u6267\u884c\u3002"]}),"\n",(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.code,{children:"co_yield value"}),"\u8fd9\u4e2a\u8868\u8fbe\u5f0f\u7b49\u4ef7\u4e8e",(0,r.jsx)(e.code,{children:"co_await promise_type.yield_value(value)"})]}),"\n"]}),"\n",(0,r.jsxs)(e.p,{children:[(0,r.jsx)(e.code,{children:"co_yield"}),"\u7684\u53c2\u6570\u4f1a\u4f20\u9012\u7ed9",(0,r.jsx)(e.code,{children:"promise_type"}),"\u7684",(0,r.jsx)(e.code,{children:"yield_value()"}),"\u51fd\u6570\uff0c\u518d\u628a\u8fd9\u4e2a\u51fd\u6570\u7684\u8fd4\u56de\u503c\u4f20\u7ed9",(0,r.jsx)(e.code,{children:"co_await"}),"\u3002\u4e0a\u6587\u63d0\u5230\uff0c\u4f20\u7ed9",(0,r.jsx)(e.code,{children:"co_await"}),"\u7684\u53c2\u6570\u8981\u7b26\u5408",(0,r.jsx)(e.code,{children:"Awaitable"}),"\u89c4\u8303\uff0c\u6240\u4ee5",(0,r.jsx)(e.code,{children:"yield_value()"}),"\u7684\u8fd4\u56de\u7c7b\u578b\u4e5f\u8981\u6ee1\u8db3\u8fd9\u4e2a\u89c4\u8303\u3002"]}),"\n",(0,r.jsxs)(e.p,{children:["\u5728\u8fd9\u91cc\u5c31\u53ef\u4ee5\u4f7f\u7528\u9884\u5b9a\u4e49\u7684",(0,r.jsx)(e.code,{children:"std::supsend_never"}),"\u6216",(0,r.jsx)(e.code,{children:"std::suspend_always"}),"\uff0c\u901a\u5e38\u4f1a\u4f7f\u7528\u540e\u8005\u6765\u8ba9\u534f\u7a0b\u6bcf\u6b21\u8c03\u7528",(0,r.jsx)(e.code,{children:"co_yield"}),"\u7684\u65f6\u5019\u90fd\u6682\u505c\u3002"]}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-C++",children:"class IntReader {\npublic:\n    bool await_ready() {\n        return false;\n    }\n\n    void await_suspend(std::coroutine_handle<> handle) {\n        std::thread thread([this, handle]() {\n            static int seed = 0;\n            value_ = ++seed;\n            handle.resume();\n        });\n        thread.detach();\n    }\n\n    int await_resume() {\n        return value_;\n    }\n\nprivate:\n    int value_{};\n};\n\nclass MyTask {\npublic:\n    class promise_type {\n    public:\n        MyTask get_return_object() { \n            // \u8fd9\u610f\u5473\u7740 Task \u9700\u8981\u62ff\u5230\u534f\u7a0b\u7684\u53e5\u67c4, \n            // \u8fd9\u662f\u5728 promise_type \u7684 get_return_object() \u4e2d\u901a\u8fc7\u4ee5\u4e0b\u65b9\u5f0f\u4f20\u9012\u8fc7\u53bb\u7684\n            return MyTask{ std::coroutine_handle<promise_type>::from_promise(*this) };\n        }\n\n        // \u5728 promise_type \u4e2d\u5b9a\u4e49\u4e86 yield_value() \u51fd\u6570\u6765\u63a5\u6536 co_yield \u8fd4\u56de\u7684\u6570\u636e\u3002\n        // \u6211\u4eec\u5e0c\u671b\u8fd4\u56de\u6570\u636e\u4e4b\u540e\u7acb\u5373\u6682\u505c\u534f\u7a0b, \u6240\u4ee5\u8fd4\u56de\u7c7b\u578b\u5b9a\u4e49\u6210\u4e86 std::supsend_always\n        std::suspend_always yield_value(int value) {\n            value_ = value;\n            return {};\n        }\n\n        void return_void() { }\n        std::suspend_never initial_suspend() { return {}; }\n        std::suspend_never final_suspend() noexcept { return {}; }\n        void unhandled_exception() {}\n\n        int GetValue() const {\n            return value_;\n        }\n\n    private:\n        int value_{};\n    };\n\npublic:\n    MyTask(std::coroutine_handle<promise_type> handle) \n    : coroutine_handle_(handle) \n    {}\n\n    int GetValue() const {\n        // std::coroutine_handle \u7684 from_promise() \u51fd\u6570\u53ef\u4ee5\u901a\u8fc7 promise_type \u5bf9\u8c61\u83b7\u53d6\u4e0e\u4e4b\u5173\u8054\u7684\u534f\u7a0b\u53e5\u67c4, \n        // \u53cd\u4e4b, \u534f\u7a0b\u53e5\u67c4\u4e0a\u4e5f\u6709\u4e00\u4e2a promise() \u51fd\u6570\u53ef\u4ee5\u83b7\u53d6\u5bf9\u5e94\u7684 promise_type \u5bf9\u8c61, \u4ed6\u4eec\u662f\u53ef\u4ee5\u4e92\u76f8\u8f6c\u6362\u7684\u3002\n        // \u6240\u4ee5, \u5728 Task \u548c promise_type \u4e4b\u95f4\u5c31\u4e0d\u9700\u8981\u4f7f\u7528 std::shared_ptr<int> \u6765\u5171\u4eab\u6570\u636e\u4e86, \n        // Task \u901a\u8fc7\u534f\u7a0b\u53e5\u67c4\u5c31\u80fd\u8bbf\u95ee\u5230 promise_type \u5bf9\u8c61, \u50cf\u4e0b\u9762\u8fd9\u6837\u76f4\u63a5\u53d6\u6570\u636e\u5c31\u53ef\u4ee5\u4e86\n        return coroutine_handle_.promise().GetValue();\n    }\n\n    /// @brief \u4e3a\u4e86\u8ba9\u4f7f\u7528\u8005\u53ef\u4ee5\u6062\u590d\u534f\u7a0b\u6267\u884c, Task \u589e\u52a0\u4e86\u4e00\u4e2a Next() \u51fd\u6570, \n    /// \u8fd9\u4e2a\u51fd\u6570\u8c03\u7528\u4e86\u4f5c\u4e3a\u6210\u5458\u53d8\u91cf\u7684\u534f\u7a0b\u53e5\u67c4\u6765\u6062\u590d\u6267\u884c\n    void Next() {\n        coroutine_handle_.resume();\n    }\n\nprivate:\n/**\n * @warning \u8fd9\u91cc\u8981\u6ce8\u610f\u4e00\u4e0b\u534f\u7a0b\u53e5\u67c4 std::coroutine_handle \u7684\u6a21\u677f\u7c7b\u578b\u3002\n * \u5728\u524d\u9762\u7684\u4f8b\u5b50\u4e2d, \u534f\u7a0b\u53e5\u67c4\u7684\u7c7b\u578b\u662f std::coroutine_handle<>, \u4e0d\u5e26\u6a21\u677f\u53c2\u6570; (\u5982 await_suspend \u7684\u53c2\u6570)\n * \u800c\u5728\u8fd9\u4e2a\u4f8b\u5b50\u4e2d, \u534f\u7a0b\u53e5\u67c4\u7684\u7c7b\u578b\u662f std::coroutine_handle<promise_type>,\n * \u6a21\u677f\u53c2\u6570\u4e2d\u586b\u5165\u4e86 promise_type \u7c7b\u578b\u3002\u5b83\u4eec\u7684\u533a\u522b\u7c7b\u4f3c\u4e8e\u6307\u9488 void* \u548c promise_type* \u7684\u533a\u522b ,\n * \u524d\u8005\u662f\u65e0\u7c7b\u578b\u7684, \u540e\u8005\u662f\u5f3a\u7c7b\u578b\u7684\u3002\n * \u4e24\u79cd\u7c7b\u578b\u7684\u534f\u7a0b\u53e5\u67c4\u672c\u8d28\u4e0a\u662f\u76f8\u540c\u7684\u4e1c\u897f, \u5b83\u4eec\u53ef\u4ee5\u6709\u76f8\u540c\u7684\u503c, \u6307\u5411\u540c\u4e00\u4e2a\u534f\u7a0b\u5b9e\u4f8b ,\u800c\u4e14\u4e5f\u90fd\u53ef\u4ee5\u6062\u590d\u534f\u7a0b\u6267\u884c\u3002\n * \u4f46\u53ea\u6709\u5f3a\u7c7b\u578b\u7684 std::coroutine_handle<promise_type> \u624d\u80fd\u8c03\u7528 from_promise() \u83b7\u53d6\u5230 promise_type \u5bf9\u8c61\u3002\n */\n    std::coroutine_handle<promise_type> coroutine_handle_;\n};\n\nMyTask GetInt() {\n    while (true) {\n        IntReader reader;\n        int value = co_await reader; // \u7b2c\u4e00\u6b21\u8fdb\u5165: \u7b49\u5f85\u5904\u7406(\u521b\u65b0\u7ebf\u7a0b\u7ba1\u7406\u534f\u7a0b\u72b6\u6001), \u79fb\u4ea4\u6267\u884c\u6743\u7ed9main, \u5e76\u8fd4\u56de\n        co_yield value;              // \u7ebf\u7a0b\u6267\u884c\u5b8c\u6062\u590d\u534f\u7a0b, \u5c31\u51c6\u5907\u597d\u8fd4\u56de\u503c\u4e86\n    }\n}\n\nint main() {\n    auto task = GetInt();\n    std::string line;\n    while (std::cin >> line) { // \u7b49\u5f85\u8f93\u5165\n        std::cout << task.GetValue() << std::endl;\n        task.Next(); // \u7ee7\u7eed\u6267\u884c\u534f\u7a0b\n    }\n    return 0;\n}\n"})}),"\n",(0,r.jsx)(e.h3,{id:"135-\u534f\u7a0b\u7684\u751f\u547d\u5468\u671f",children:"1.3.5 \u534f\u7a0b\u7684\u751f\u547d\u5468\u671f"}),"\n",(0,r.jsx)(e.p,{children:"\u6b63\u5982\u4e0a\u6587\u6240\u8bf4\u7684\uff0c\u5728\u4e00\u5f00\u59cb\u8c03\u7528\u534f\u7a0b\u7684\u65f6\u5019\uff0cC++\u4f1a\u5728\u5806\u4e0a\u4e3a\u534f\u7a0b\u7684\u72b6\u6001\u5206\u914d\u5185\u5b58\uff0c\u8fd9\u5757\u5185\u5b58\u5fc5\u987b\u5728\u9002\u5f53\u7684\u65f6\u673a\u6765\u91ca\u653e\uff0c\u5426\u5219\u5c31\u4f1a\u9020\u6210\u5185\u5b58\u6cc4\u6f0f\u3002\u91ca\u653e\u534f\u7a0b\u7684\u5185\u5b58\u6709\u4e24\u79cd\u65b9\u5f0f\uff1a\u81ea\u52a8\u91ca\u653e\u548c\u624b\u52a8\u91ca\u653e\u3002"}),"\n",(0,r.jsxs)(e.p,{children:["\u5f53\u534f\u7a0b\u7ed3\u675f\u7684\u65f6\u5019\uff0c\u5982\u679c\u6211\u4eec\u4e0d\u505a\u4efb\u4f55\u5e72\u9884\uff0c\u90a3\u4e48\u534f\u7a0b\u7684\u5185\u5b58\u5c31\u4f1a\u88ab\u81ea\u52a8\u91ca\u653e\u3002\u8c03\u7528\u4e86",(0,r.jsx)(e.code,{children:"co_return"}),"\u8bed\u53e5\u4e4b\u540e\uff0c\u534f\u7a0b\u5c31\u4f1a\u7ed3\u675f\uff0c\u4e0b\u9762\u4e24\u4e2a\u534f\u7a0b\u662f\u81ea\u52a8\u91ca\u653e\u7684\u4f8b\u5b50:"]}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-C++",children:"Task GetInt() {\n    IntReader reader;\n    int value = co_await reader;\n    co_return value;\n}\n\nTask PrintInt() {\n    IntReader reader1;\n    int value = co_await reader;\n    std::cout << value << std::endl;\n}\n"})}),"\n",(0,r.jsxs)(e.div,{className:"markdown-alert markdown-alert-tip",children:["\n",(0,r.jsxs)(e.p,{className:"markdown-alert-title",children:[(0,r.jsx)(e.span,{className:"octicon octicon-tip",style:{"--oct-icon":"url(\"data:image/svg+xml;utf8,%3Csvg xmlns='http://www.w3.org/2000/svg' class='octicon octicon-light-bulb mr-2' viewBox='0 0 16 16' version='1.1' width='16' height='16' aria-hidden='true'%3E%3Cpath d='M8 1.5c-2.363 0-4 1.69-4 3.75 0 .984.424 1.625.984 2.304l.214.253c.223.264.47.556.673.848.284.411.537.896.621 1.49a.75.75 0 0 1-1.484.211c-.04-.282-.163-.547-.37-.847a8.456 8.456 0 0 0-.542-.68c-.084-.1-.173-.205-.268-.32C3.201 7.75 2.5 6.766 2.5 5.25 2.5 2.31 4.863 0 8 0s5.5 2.31 5.5 5.25c0 1.516-.701 2.5-1.328 3.259-.095.115-.184.22-.268.319-.207.245-.383.453-.541.681-.208.3-.33.565-.37.847a.751.751 0 0 1-1.485-.212c.084-.593.337-1.078.621-1.489.203-.292.45-.584.673-.848.075-.088.147-.173.213-.253.561-.679.985-1.32.985-2.304 0-2.06-1.637-3.75-4-3.75ZM5.75 12h4.5a.75.75 0 0 1 0 1.5h-4.5a.75.75 0 0 1 0-1.5ZM6 15.25a.75.75 0 0 1 .75-.75h2.5a.75.75 0 0 1 0 1.5h-2.5a.75.75 0 0 1-.75-.75Z'%3E%3C/path%3E%3C/svg%3E\")"}}),"Tip"]}),"\n",(0,r.jsxs)(e.p,{children:[(0,r.jsx)(e.code,{children:"PrintInt()"}),"\u6ca1\u6709\u51fa\u73b0",(0,r.jsx)(e.code,{children:"co_return"}),"\u8bed\u53e5\uff0c\u7f16\u8bd1\u5668\u4f1a\u5728\u672b\u5c3e\u9690\u5f0f\u5730\u52a0\u4e0a",(0,r.jsx)(e.code,{children:"co_return"}),"\u3002"]}),"\n"]}),"\n",(0,r.jsx)(e.p,{children:"\u81ea\u52a8\u91ca\u653e\u7684\u65b9\u5f0f\u6709\u65f6\u5019\u5e76\u4e0d\u662f\u6211\u4eec\u60f3\u8981\u7684\uff0c\u53c2\u8003\u4e0b\u9762\u8fd9\u4e2a\u4f8b\u5b50:"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-C++",children:"class MyTask {\npublic:\n    class promise_type {\n    public:\n        MyTask get_return_object() {\n            return MyTask{ std::coroutine_handle<promise_type>::from_promise(*this) };\n        }\n\n        void return_value(int value) {\n            value_ = value;\n        }\n\n        int GetValue() const {\n            return value_;\n        }\n\n        std::suspend_never initial_suspend() { return {}; }\n        std::suspend_never final_suspend() noexcept { return {}; }\n        void unhandled_exception() {}\n\n    private:\n        int value_{};\n    };\n\npublic:\n    MyTask(std::coroutine_handle<promise_type> handle)\n    : coroutine_handle_(handle)\n    {}\n\n    int GetValue() const {\n        return coroutine_handle_.promise().GetValue();\n    }\n\nprivate:\n    std::coroutine_handle<promise_type> coroutine_handle_;\n};\n\nMyTask GetInt() {\n    co_return 1024;\n}\n\nint main() {\n    auto task = GetInt();\n    std::string line;\n    while (std::cin >> line) {\n        std::cout << task.GetValue() << std::endl;\n    }\n    return 0;\n}\n"})}),"\n",(0,r.jsxs)(e.p,{children:["\u5728\u8fd9\u4e2a\u4f8b\u5b50\u4e2d\uff0c",(0,r.jsx)(e.code,{children:"GetInt()"}),"\u534f\u7a0b\u901a\u8fc7",(0,r.jsx)(e.code,{children:"co_return"}),"\u8fd4\u56de\u4e86",(0,r.jsx)(e.code,{children:"1024"}),"\u7ed9",(0,r.jsx)(e.code,{children:"promise_type"}),"\uff1b\u534f\u7a0b\u8fd4\u56de\u503c",(0,r.jsx)(e.code,{children:"MyTask"}),"\u901a\u8fc7\u534f\u7a0b\u53e5\u67c4\u8bbf\u95ee",(0,r.jsx)(e.code,{children:"promise_type"}),"\uff0c\u4ece\u4e2d\u53d6\u51fa\u8fd9\u4e2a\u503c\u3002\u968f\u7740\u7528\u6237\u7684\u8f93\u5165\uff0c\u628a\u8fd9\u4e2a\u503c\u8f93\u51fa\u6765\u3002\u8fd0\u884c\u7a0b\u5e8f\uff0c\u6211\u4eec\u4f1a\u53d1\u73b0\u8f93\u51fa\u7684\u503c\u5e76\u4e0d\u662f",(0,r.jsx)(e.code,{children:"1024"}),"\uff0c\u800c\u662f\u4e00\u4e2a\u968f\u673a\u503c\uff1b\u4e5f\u6709\u53ef\u80fd\u4f1a\u51fa\u73b0\u5730\u5740\u8bbf\u95ee\u9519\u8bef\u7684\u5f02\u5e38\u3002"]}),"\n",(0,r.jsxs)(e.p,{children:["\u9020\u6210\u8fd9\u4e2a\u73b0\u8c61\u7684\u539f\u56e0\u662f\uff0c\u534f\u7a0b\u5728\u8fd4\u56de",(0,r.jsx)(e.code,{children:"1024"}),"\u4e4b\u540e\u5c31\u88ab\u81ea\u52a8\u91ca\u653e\u4e86\uff0c",(0,r.jsx)(e.code,{children:"promise_type"}),"\u4e5f\u8ddf\u7740\u88ab\u4e00\u8d77\u91ca\u653e\u4e86\uff0c\u6b64\u65f6\u5728",(0,r.jsx)(e.code,{children:"MyTask"}),"\u5185\u90e8\u6301\u6709\u7684\u534f\u7a0b\u53e5\u67c4\u5df2\u7ecf\u53d8\u6210\u4e86\u91ce\u6307\u9488\uff0c\u6307\u5411\u4e00\u5757\u5df2\u7ecf\u88ab\u91ca\u653e\u7684\u5185\u5b58\u3002\u6240\u4ee5\u8bbf\u95ee\u8fd9\u4e2a\u534f\u7a0b\u53e5\u67c4\u7684\u4efb\u4f55\u884c\u4e3a\u90fd\u4f1a\u9020\u6210\u4e0d\u786e\u5b9a\u7684\u540e\u679c\u3002"]}),"\n",(0,r.jsxs)(e.p,{children:["\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\u7684\u65b9\u6cd5\u662f\uff0c\u4fee\u6539",(0,r.jsx)(e.code,{children:"promise_type"}),"\u4e2d",(0,r.jsx)(e.code,{children:"final_supsend()"}),"\u51fd\u6570\u7684\u8fd4\u56de\u7c7b\u578b\uff0c\u4ece",(0,r.jsx)(e.code,{children:"std::suspend_never"}),"\u6539\u6210",(0,r.jsx)(e.code,{children:"std::suspend_always"}),"\u3002\u534f\u7a0b\u5728\u7ed3\u675f\u7684\u65f6\u5019\uff0c\u4f1a\u8c03\u7528",(0,r.jsx)(e.code,{children:"final_suspend()"}),"\u6765\u51b3\u5b9a\u662f\u5426\u6682\u505c\uff0c\u5982\u679c\u8fd9\u4e2a\u51fd\u6570\u8fd4\u56de\u4e86\u8981\u6682\u505c\uff0c\u90a3\u4e48\u534f\u7a0b\u4e0d\u4f1a\u81ea\u52a8\u91ca\u653e\uff0c\u6b64\u65f6\u534f\u7a0b\u53e5\u67c4\u8fd8\u662f\u6709\u6548\u7684\uff0c\u53ef\u4ee5\u5b89\u5168\u8bbf\u95ee\u5b83\u5185\u90e8\u7684\u6570\u636e\u3002"]}),"\n",(0,r.jsxs)(e.p,{children:["\u4e0d\u8fc7\uff0c\u8fd9\u65f6\u5019\u91ca\u653e\u534f\u7a0b\u5c31\u53d8\u6210\u6211\u4eec\u7684\u8d23\u4efb\u4e86\uff0c\u6211\u4eec\u5fc5\u987b\u5728\u9002\u5f53\u7684\u65f6\u673a\u8c03\u7528\u534f\u7a0b\u53e5\u67c4\u4e0a\u7684",(0,r.jsx)(e.code,{children:"destroy()"}),"\u51fd\u6570\u6765\u624b\u52a8\u91ca\u653e\u8fd9\u4e2a\u534f\u7a0b\u3002\u5728\u8fd9\u4e2a\u4f8b\u5b50\u4e2d\uff0c\u53ef\u4ee5\u5728",(0,r.jsx)(e.code,{children:"MyTask"}),"\u7684\u6790\u6784\u51fd\u6570\u4e2d\u505a\u8fd9\u4e2a\u4e8b\u60c5:"]}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-C++",children:"// class promise_type \u4e2d:\nstd::suspend_always final_suspend() noexcept { return {}; }\n\n// class MyTask \u4e2d:\n~MyTask() {\n    if (coroutine_handle_)\n        coroutine_handle_.destroy();\n}\n"})}),"\n",(0,r.jsxs)(e.p,{children:["\u53ea\u8981\u534f\u7a0b\u5904\u4e8e\u6682\u505c\u72b6\u6001\uff0c\u5c31\u53ef\u4ee5\u8c03\u7528\u534f\u7a0b\u53e5\u67c4\u7684",(0,r.jsx)(e.code,{children:"destroy()"}),"\u51fd\u6570\u6765\u91ca\u653e\u5b83\uff0c\u4e0d\u4e00\u5b9a\u8981\u6c42\u534f\u7a0b\u7ed3\u675f\u3002\u5bf9\u4e8e\u901a\u8fc7\u65e0\u9650\u5faa\u73af\u6765\u5b9e\u73b0\u7684\u534f\u7a0b\uff0c\u624b\u52a8\u91ca\u653e\u662f\u5fc5\u9700\u7684\u3002"]}),"\n",(0,r.jsxs)(e.p,{children:["\u4e0e",(0,r.jsx)(e.code,{children:"final_suspend()"}),"\u76f8\u5bf9\u5e94\u7684\u662f",(0,r.jsx)(e.code,{children:"initial_suspend()"}),"\uff0c\u5728\u534f\u7a0b\u521a\u5f00\u59cb\u6267\u884c\u7684\u65f6\u5019\uff0c\u4f1a\u8c03\u7528\u8fd9\u4e2a\u51fd\u6570\u6765\u51b3\u5b9a\u662f\u5426\u6682\u505c\u3002\u6211\u4eec\u53ef\u4ee5\u5c06\u8fd9\u4e2a\u51fd\u6570\u7684\u8fd4\u56de\u7c7b\u578b\u6539\u6210",(0,r.jsx)(e.code,{children:"std::suspend_always"}),"\u6765\u8ba9\u534f\u7a0b\u4e00\u6267\u884c\u5373\u6682\u505c\u3002\u8fd9\u5bf9\u4e8e\u4e00\u4e9b\u9700\u8981\u5ef6\u8fdf\u6267\u884c\u7684\u573a\u666f\u662f\u6709\u7528\u7684\uff0c\u4f8b\u5982\uff0c\u6211\u4eec\u60f3\u5148\u83b7\u53d6\u4e00\u6279\u534f\u7a0b\u53e5\u67c4\uff0c\u50cf\u6570\u636e\u90a3\u6837\u5bf9\u5b83\u4eec\u8fdb\u884c\u7ba1\u7406\uff0c\u5728\u7a0d\u540e\u7684\u65f6\u673a\u518d\u6311\u9009\u5408\u9002\u7684\u534f\u7a0b\u6765\u6267\u884c\u3002"]}),"\n",(0,r.jsx)(e.h3,{id:"136-\u5f02\u5e38\u5904\u7406",children:"1.3.6 \u5f02\u5e38\u5904\u7406"}),"\n",(0,r.jsx)(e.p,{children:"\u6700\u540e\uff0c\u6211\u4eec\u770b\u4e00\u4e0b\u534f\u7a0b\u7684\u5f02\u5e38\u5904\u7406\u3002\u7f16\u8bd1\u5668\u751f\u6210\u7684\u6267\u884c\u534f\u7a0b\u7684\u4f2a\u4ee3\u7801\u5927\u6982\u5982\u4e0b\u6240\u793a:"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-C++",children:"try {\n    co_await promise_type.initial_suspend();\n    //\u534f\u7a0b\u51fd\u6570\u4f53\u7684\u4ee3\u7801...\n}\ncatch (...) {\n    promise_type.unhandled_exception();\n}\nco_await promise_type.final_suspend();\n"})}),"\n",(0,r.jsxs)(e.p,{children:["\u534f\u7a0b\u4e3b\u8981\u7684\u6267\u884c\u4ee3\u7801\u90fd\u88ab",(0,r.jsx)(e.code,{children:"try - catch"}),"\u5305\u88f9\uff0c\u5047\u5982\u629b\u51fa\u4e86\u672a\u5904\u7406\u7684\u5f02\u5e38\uff0c",(0,r.jsx)(e.code,{children:"promise_type"}),"\u7684",(0,r.jsx)(e.code,{children:"unhandled_exception()"}),"\u51fd\u6570\u4f1a\u88ab\u8c03\u7528\uff0c\u6211\u4eec\u53ef\u4ee5\u5728\u8fd9\u4e2a\u51fd\u6570\u91cc\u9762\u505a\u5bf9\u5e94\u7684\u5f02\u5e38\u5904\u7406\u3002\u7531\u4e8e\u8fd9\u4e2a\u51fd\u6570\u662f\u5728",(0,r.jsx)(e.code,{children:"catch"}),"\u8bed\u53e5\u4e2d\u8c03\u7528\u7684\uff0c\u6211\u4eec\u53ef\u4ee5\u5728\u51fd\u6570\u5185\u8c03\u7528",(0,r.jsx)(e.code,{children:"std::current_exception()"}),"\u51fd\u6570\u83b7\u53d6\u5f02\u5e38\u5bf9\u8c61\uff0c\u4e5f\u53ef\u4ee5\u8c03\u7528",(0,r.jsx)(e.code,{children:"throw"}),"\u91cd\u65b0\u629b\u51fa\u5f02\u5e38\u3002"]}),"\n",(0,r.jsxs)(e.p,{children:["\u8c03\u7528\u4e86",(0,r.jsx)(e.code,{children:"unhandled_exception()"}),"\u4e4b\u540e\uff0c\u534f\u7a0b\u5c31\u7ed3\u675f\u4e86\uff0c\u63a5\u4e0b\u6765\u4f1a\u7ee7\u7eed\u8c03\u7528",(0,r.jsx)(e.code,{children:"final_suspend()"}),"\uff0c\u4e0e\u6b63\u5e38\u7ed3\u675f\u534f\u7a0b\u7684\u6d41\u7a0b\u4e00\u6837\u3002C++\u89c4\u5b9a",(0,r.jsx)(e.code,{children:"final_suspend()"}),"\u5fc5\u987b\u5b9a\u4e49\u6210",(0,r.jsx)(e.code,{children:"noexcept"}),"\uff0c\u4e5f\u5c31\u662f\u8bf4\u5b83\u4e0d\u5141\u8bb8\u629b\u51fa\u4efb\u4f55\u5f02\u5e38\u3002"]}),"\n",(0,r.jsx)(e.p,{children:"\u603b\u7ed3:"}),"\n",(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsxs)(e.li,{children:["\n",(0,r.jsx)(e.p,{children:"\u534f\u7a0b\u5728\u5f02\u5e38\u53d1\u751f\u540e\u901a\u5e38\u4e0d\u80fd\u7ee7\u7eed\u6062\u590d\u6267\u884c\uff0c\u56e0\u4e3a\u5f02\u5e38\u5904\u7406\u9636\u6bb5\u4f1a\u7ec8\u6b62\u534f\u7a0b\u7684\u6b63\u5e38\u6267\u884c\u3002"}),"\n"]}),"\n",(0,r.jsxs)(e.li,{children:["\n",(0,r.jsxs)(e.p,{children:[(0,r.jsx)(e.code,{children:"final_suspend"}),"\u65b9\u6cd5\u5141\u8bb8\u4f60\u5b9a\u4e49\u534f\u7a0b\u5728\u7ed3\u675f\u65f6\u7684\u884c\u4e3a\uff0c\u65e0\u8bba\u662f\u5904\u7406\u5f02\u5e38\u540e\u7684\u6e05\u7406\u8fd8\u662f\u76f4\u63a5\u7ed3\u675f\u3002"]}),"\n"]}),"\n",(0,r.jsxs)(e.li,{children:["\n",(0,r.jsx)(e.p,{children:"\u5f02\u5e38\u5904\u7406\u548c\u6062\u590d\u9700\u8981\u7cbe\u5fc3\u8bbe\u8ba1\uff0c\u4ee5\u786e\u4fdd\u534f\u7a0b\u7684\u8d44\u6e90\u80fd\u591f\u6b63\u786e\u91ca\u653e\uff0c\u907f\u514d\u5185\u5b58\u6cc4\u6f0f\u6216\u5176\u4ed6\u8d44\u6e90\u6cc4\u9732\u95ee\u9898\u3002"}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(e.h3,{id:"137-\u603b\u7ed3",children:"1.3.7 \u603b\u7ed3"}),"\n",(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsxs)(e.li,{children:["\u8c03\u7528\u5173\u7cfb (\u6ce8: ",(0,r.jsx)(e.code,{children:"get_return_object"}),"\u624d\u662f\u6700\u5148\u8c03\u7528\u7684(\u4e3b\u8981\u4f5c\u7528\u662f\u8fd4\u56de\u4e00\u4e2a\u53ef\u4ee5\u8868\u793a\u534f\u7a0b\u7684\u5bf9\u8c61))"]}),"\n"]}),"\n\n\n\n\n\n\n\n\n\n\n\n",(0,r.jsxs)(e.table,{children:[(0,r.jsx)(e.thead,{children:(0,r.jsx)(e.tr,{children:(0,r.jsx)(e.th,{style:{textAlign:"center"},children:"##container##"})})}),(0,r.jsx)(e.tbody,{children:(0,r.jsx)(e.tr,{children:(0,r.jsx)(e.td,{style:{textAlign:"center"},children:(0,r.jsx)(e.img,{alt:"export-2024-8-3-134209.png",src:t(13058).A+"",width:"1548",height:"1800"})})})})]}),"\n",(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsx)(e.li,{children:"\u5fc5\u9700\u306e\u5b9a\u4e49\u4e0e\u5b9a\u4e49\u4f4d\u7f6e"}),"\n"]}),"\n\n\n\n\n\n\n\n\n\n\n\n",(0,r.jsxs)(e.table,{children:[(0,r.jsx)(e.thead,{children:(0,r.jsx)(e.tr,{children:(0,r.jsx)(e.th,{style:{textAlign:"center"},children:"##container##"})})}),(0,r.jsx)(e.tbody,{children:(0,r.jsx)(e.tr,{children:(0,r.jsx)(e.td,{style:{textAlign:"center"},children:(0,r.jsx)(e.img,{alt:"export-2024-8-6-214700.png",src:t(39478).A+"",width:"5400",height:"1980"})})})})]}),"\n",(0,r.jsx)(e.h3,{id:"138-\u672a\u5b9a\u4e49\u884c\u4e3a",children:"1.3.8 \u672a\u5b9a\u4e49\u884c\u4e3a"}),"\n",(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsx)(e.li,{children:"\u5982\u679c\u534f\u7a0bA\u6b63\u5728 co_await \u534f\u7a0b B, \u6b64\u65f6\u5982\u679c\u518d\u6b21 \u5bf9\u534f\u7a0bA \u8fdb\u884c.resume(), \u5219\u662f\u975e\u5e38\u5371\u9669\u7684! \u7b97\u662f\u672a\u5b9a\u4e49\u884c\u4e3a!"}),"\n"]}),"\n",(0,r.jsx)(e.h2,{id:"14-\u534f\u7a0b\u5b9e\u4f8b",children:"1.4 \u534f\u7a0b\u5b9e\u4f8b"}),"\n",(0,r.jsxs)(e.blockquote,{children:["\n",(0,r.jsx)(e.p,{children:"\u4e0a\u9762\u53ea\u662f\u7b80\u5355\u7684\u4ecb\u7ecd, \u4e0b\u9762\u6b63\u5f0f\u5f00\u59cb!"}),"\n"]}),"\n",(0,r.jsxs)(e.div,{className:"markdown-alert markdown-alert-tip",children:["\n",(0,r.jsxs)(e.p,{className:"markdown-alert-title",children:[(0,r.jsx)(e.span,{className:"octicon octicon-tip",style:{"--oct-icon":"url(\"data:image/svg+xml;utf8,%3Csvg xmlns='http://www.w3.org/2000/svg' class='octicon octicon-light-bulb mr-2' viewBox='0 0 16 16' version='1.1' width='16' height='16' aria-hidden='true'%3E%3Cpath d='M8 1.5c-2.363 0-4 1.69-4 3.75 0 .984.424 1.625.984 2.304l.214.253c.223.264.47.556.673.848.284.411.537.896.621 1.49a.75.75 0 0 1-1.484.211c-.04-.282-.163-.547-.37-.847a8.456 8.456 0 0 0-.542-.68c-.084-.1-.173-.205-.268-.32C3.201 7.75 2.5 6.766 2.5 5.25 2.5 2.31 4.863 0 8 0s5.5 2.31 5.5 5.25c0 1.516-.701 2.5-1.328 3.259-.095.115-.184.22-.268.319-.207.245-.383.453-.541.681-.208.3-.33.565-.37.847a.751.751 0 0 1-1.485-.212c.084-.593.337-1.078.621-1.489.203-.292.45-.584.673-.848.075-.088.147-.173.213-.253.561-.679.985-1.32.985-2.304 0-2.06-1.637-3.75-4-3.75ZM5.75 12h4.5a.75.75 0 0 1 0 1.5h-4.5a.75.75 0 0 1 0-1.5ZM6 15.25a.75.75 0 0 1 .75-.75h2.5a.75.75 0 0 1 0 1.5h-2.5a.75.75 0 0 1-.75-.75Z'%3E%3C/path%3E%3C/svg%3E\")"}}),"Tip"]}),"\n",(0,r.jsx)(e.p,{children:"\u6ce8: \u5982\u679c\u662f\u6807\u51c6\u5e93\u7684, \u5219\u4f7f\u7528\u4e0b\u5212\u7ebf\u547d\u540d(\u4e5f\u53ea\u80fd\u8fd9\u6837); \u6211\u4eec\u81ea\u5df1\u5b9a\u4e49\u7684, \u5219\u4f7f\u7528\u9a7c\u5cf0\u547d\u540d"}),"\n"]}),"\n",(0,r.jsx)(e.h3,{id:"141-\u521d\u8bc6",children:"1.4.1 \u521d\u8bc6"}),"\n",(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsxs)(e.li,{children:["\n",(0,r.jsxs)(e.p,{children:["\u533a\u5206: ",(0,r.jsx)(e.code,{children:"RepeatAwaiter"}),"\u4e0e",(0,r.jsx)(e.code,{children:"RepeatAwaitable"})]}),"\n"]}),"\n",(0,r.jsxs)(e.li,{children:["\n",(0,r.jsxs)(e.p,{children:["Task\u4e2d\u4e0d\u4e00\u5b9a\u8981\u5185\u5d4c",(0,r.jsx)(e.code,{children:"promise_type"}),"\u7c7b, \u4f7f\u7528using\u4e5f\u6ca1\u95ee\u9898!"]}),"\n"]}),"\n",(0,r.jsxs)(e.li,{children:["\n",(0,r.jsx)(e.p,{children:"\u4f7f\u7528class\u4e0estruct\u90fd\u53ef\u4ee5 (\u5e9f\u8bdd) (\u4e0d\u5c31\u662fclass + public\u5417)"}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-C++",children:'struct RepeatAwaiter { // awaiter(\u539f\u59cb\u6307\u9488) / awaitable(operator->)\n    bool await_ready() const noexcept { \n        return false;\n    }\n\n    /**\n     * @brief \u5b83\u7684\u8fd4\u56de\u503c\u51b3\u5b9a\u4e86\u534f\u7a0b\u5728\u6302\u8d77\u540e\u662f\u5426\u4ee5\u53ca\u5982\u4f55\u6062\u590d\u3002\u8fd9\u4e2a\u8fd4\u56de\u503c\u7c7b\u578b\u662f\u7075\u6d3b\u7684!\n     * @param coroutine \n     * @return \u53ef\u4ee5\u8fd4\u56de\u6307\u5411\u540c\u4e00\u4e2a\u534f\u7a0b\u3001\u53e6\u4e00\u4e2a\u534f\u7a0b\u3001\u6216 std::noop_coroutine() \u7684\u53e5\u67c4\u3002\n     * \n     * std::noop_coroutine():\n     * \u8fd4\u56de\u8fd9\u4e2a\u7279\u6b8a\u7684\u534f\u7a0b\u53e5\u67c4\u8868\u793a\u6ca1\u6709\u5b9e\u9645\u7684\u5de5\u4f5c\u9700\u8981\u505a\u3002\n     * \u8fd9\u610f\u5473\u7740\u5f53\u524d\u534f\u7a0b\u88ab\u6302\u8d77\u540e, \u4e0d\u9700\u8981\u6062\u590d\u4efb\u4f55\u534f\u7a0b\u7684\u6267\u884c\u3002\u8fd9\u901a\u5e38\u7528\u4e8e\u8868\u793a\u534f\u7a0b\u5df2\u7ecf\u5b8c\u6210\u4e86\u5176\u76ee\u7684, \u6ca1\u6709\u540e\u7eed\u64cd\u4f5c\u3002\n     * \n     * std::coroutine_handle<>::from_address(nullptr) \u6216\u7b49\u6548\u503c:\n     * \u6307\u793a\u534f\u7a0b\u5df2\u5b8c\u6210, \u5176\u534f\u7a0b\u5e27\u5e94\u8be5\u88ab\u9500\u6bc1\u3002\u8fd9\u79cd\u60c5\u51b5\u4e0b, \u63a7\u5236\u6743\u8fd4\u56de\u7ed9\u8c03\u5ea6\u5668\u6216\u534f\u7a0b\u7684\u8c03\u7528\u8005\u3002\n     * \n     * coroutine (\u4f20\u5165\u7684\u534f\u7a0b\u53e5\u67c4):\n     * \u8fd4\u56de\u4f20\u5165\u7684\u534f\u7a0b\u53e5\u67c4\u8868\u793a\u6062\u590d\u6267\u884c\u8fd9\u4e2a\u534f\u7a0b\u3002\u8fd9\u901a\u5e38\u7528\u4e8e\u534f\u7a0b\u4e4b\u95f4\u7684\u5207\u6362\u6216\u63a7\u5236\u6d41\u7684\u8f6c\u79fb\u3002\n     */\n    std::coroutine_handle<> await_suspend(std::coroutine_handle<> coroutine) const noexcept {\n        // (\u6bcf\u6b21co_yield)\u505c\u6b62\u6267\u884c\n        // return std::noop_coroutine();\n\n        // \u5982\u679c coroutine \u53ef\u4ee5\u6267\u884c\u5c31\u7ee7\u7eed\u6267\u884c\n        if (coroutine.done())\n            return std::noop_coroutine();\n        else\n            return coroutine; // \u7ee7\u7eed\u6267\u884c\u672c\u534f\u7a0b\n    }\n\n    void await_resume() const noexcept {}\n};\n\nstruct RepeatAwaitable { // awaitable(operator->)\n    RepeatAwaiter operator co_await() {\n        return RepeatAwaiter(); // \u7c7b\u578b\u8f6c\u6362\n    }\n};\n\nstruct Promise {\n    auto initial_suspend() {\n        return std::suspend_always(); // \u8fd4\u56de\u534f\u7a0b\u63a7\u5236\u6743\n    }\n\n    auto final_suspend() noexcept {\n        return std::suspend_always();\n    }\n\n    void unhandled_exception() {\n        throw;\n    }\n\n    auto yield_value(int ret) {\n        mRetValue = ret;\n        return RepeatAwaiter(); // \u5fc5\u987b\u6ee1\u8db3\u6240\u8c13\u7684\u89c4\u8303\n    }\n\n    void return_void() {\n        mRetValue = 0;\n    }\n\n    std::coroutine_handle<Promise> get_return_object() {\n        return std::coroutine_handle<Promise>::from_promise(*this);\n    }\n\n    int mRetValue;\n};\n\n/// @brief \u5b9a\u4e49\u534f\u7a0b\u4efb\u52a1\u53e5\u67c4\nstruct Task {\n    using promise_type = Promise; // \u534f\u7a0b\u4efb\u52a1 \u5fc5\u9700\u8981\u5305\u542b promise_type\n\n    Task(std::coroutine_handle<promise_type> coroutine) // \u4f1a\u81ea\u884c\u9009\u62e9\u5408\u9002\u7684\u6784\u9020\u51fd\u6570 (\u53ef\u4ee5\u7406\u89e3\u6210 [](){} \u7684\u6355\u83b7)\n        : mCoroutine(coroutine) {}\n\n    std::coroutine_handle<promise_type> mCoroutine; // \u534f\u7a0b\u53e5\u67c4\n};\n\nTask hello() {\n    debug(), "hello 42";\n    co_yield 42;\n    debug(), "hello 12";\n    co_yield 12;\n    debug(), "hello 6";\n    co_yield 6;\n    debug(), "hello \u7ed3\u675f";\n    co_return;\n}\n\nint main() {\n    debug(), "main\u5373\u5c06\u8c03\u7528hello";\n    Task t = hello();\n    debug(), "main\u8c03\u7528\u5b8c\u4e86hello";\n    // \u5b9e\u9645\u4e0a\u4e0a\u9762\u4ec0\u4e48\u4e5f\u6ca1\u6709\u505a(\u5e76\u6ca1\u6709\u8c03\u7528hello) \n    // \u56e0\u4e3a initial_suspend \u662f return std::suspend_always(); // \u8fd4\u56de\u534f\u7a0b\u63a7\u5236\u6743\n\n    while (!t.mCoroutine.done()) {\n        t.mCoroutine.resume();\n        debug(), "main\u5f97\u5230hello\u7ed3\u679c\u4e3a",\n            t.mCoroutine.promise().mRetValue;\n    }\n    return 0;\n}\n'})}),"\n",(0,r.jsx)(e.p,{children:"\u6267\u884c\u8f93\u51fa:"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-C++",children:"step1.cpp:97:    main\u5373\u5c06\u8c03\u7528hello\nstep1.cpp:99:    main\u8c03\u7528\u5b8c\u4e86hello\nstep1.cpp:86:    hello 42\nstep1.cpp:88:    hello 12\nstep1.cpp:90:    hello 6\nstep1.cpp:92:    hello \u7ed3\u675f\nstep1.cpp:104:   main\u5f97\u5230hello\u7ed3\u679c\u4e3a 0\n"})}),"\n",(0,r.jsx)(e.h3,{id:"142-\u534f\u7a0b\u4e2d\u7b49\u5f85\u534f\u7a0b",children:"1.4.2 \u534f\u7a0b\u4e2d\u7b49\u5f85\u534f\u7a0b"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-C++",children:'#include <chrono>\n#include <coroutine>\n#include "debug.hpp"\n\nstruct PreviousAwaiter {\n    std::coroutine_handle<> mPrevious;\n\n    bool await_ready() const noexcept { return false; }\n\n    std::coroutine_handle<> await_suspend(std::coroutine_handle<> coroutine) const noexcept {\n        if (mPrevious) // \u5982\u679c Task \u534f\u7a0b\u53ef\u4ee5\u7ee7\u7eed\u6267\u884c, \u5219\u6267\u884c\n            return mPrevious;\n        else\n            return std::noop_coroutine(); // \u6302\u8d77\n    }\n\n    void await_resume() const noexcept {}\n};\n\nstruct Promise {\n    auto initial_suspend() {\n        return std::suspend_always();\n    }\n\n    auto final_suspend() noexcept {\n        return PreviousAwaiter(mPrevious);\n    }\n\n    void unhandled_exception() {\n        throw;\n    }\n\n    auto yield_value(int ret) {\n        mRetValue = ret;\n        return std::suspend_always();\n    }\n\n    void return_void() {\n        mRetValue = 0;\n    }\n\n    std::coroutine_handle<Promise> get_return_object() {\n        return std::coroutine_handle<Promise>::from_promise(*this);\n    }\n\n    int mRetValue;\n    std::coroutine_handle<> mPrevious = nullptr;\n};\n\nstruct Task {\n    using promise_type = Promise;\n\n    Task(std::coroutine_handle<promise_type> coroutine)\n        : mCoroutine(coroutine) {}\n\n    Task(Task &&) = delete;\n\n    ~Task() {\n        mCoroutine.destroy();\n    }\n\n    std::coroutine_handle<promise_type> mCoroutine;\n};\n\nstruct WorldTask {\n    using promise_type = Promise;\n\n    WorldTask(std::coroutine_handle<promise_type> coroutine)\n        : mCoroutine(coroutine) {}\n\n    WorldTask(WorldTask &&) = delete;\n\n    ~WorldTask() {\n        mCoroutine.destroy();\n    }\n\n    struct WorldAwaiter {\n        bool await_ready() const noexcept { return false; }\n\n        std::coroutine_handle<> await_suspend(std::coroutine_handle<> coroutine) const noexcept {\n            mCoroutine.promise().mPrevious = coroutine; // \u4fdd\u5b58\u8fd9\u4e2a\u534f\u7a0b\u7684\u4e0a\u4e0b\u6587\u53e5\u67c4(\u8c03\u7528\u8005Task)\n            return mCoroutine;\n        }\n\n        void await_resume() const noexcept {}\n\n        std::coroutine_handle<promise_type> mCoroutine;\n    };\n\n    auto operator co_await() {\n        return WorldAwaiter(mCoroutine);\n    }\n\n    std::coroutine_handle<promise_type> mCoroutine;\n};\n\nWorldTask world() {\n    debug(), "world";\n    co_yield 422;\n    co_yield 444;\n    co_return;\n}\n\nTask hello() {\n    debug(), "hello \u6b63\u5728\u6784\u5efaworldTask";\n    WorldTask worldTask = world();\n    debug(), "hello \u6784\u5efa\u5b8c\u4e86worldTask, \u5f00\u59cb\u7b49\u5f85world";\n    co_await worldTask; // \u7b49\u5f85 worldTask, worldTask OK\u540e, \u56de\u6765\u8fd9\u91cc, \u7acb\u9a6c\u53c8\u79fb\u4ea4\u6267\u884c\u6743\u9650\u7ed9\u4e0a\u4e0b\u6587(main), \u7136\u540e\u518d\u6062\u590d\u624d\u6267\u884c\u4e0b\u9762:\n    debug(), "hello\u5f97\u5230world\u8fd4\u56de", worldTask.mCoroutine.promise().mRetValue;\n    co_await worldTask;\n    debug(), "hello\u5f97\u5230world\u8fd4\u56de", worldTask.mCoroutine.promise().mRetValue;\n    debug(), "hello 42";\n    co_yield 42;\n    debug(), "hello 12";\n    co_yield 12;\n    debug(), "hello 6";\n    co_yield 6;\n    debug(), "hello \u7ed3\u675f";\n    co_return;\n}\n\nint main() {\n    debug(), "main\u5373\u5c06\u8c03\u7528hello";\n    Task t = hello();\n    debug(), "main\u8c03\u7528\u5b8c\u4e86hello"; // \u5176\u5b9e\u53ea\u521b\u5efa\u4e86task\u5bf9\u8c61\uff0c\u5e76\u6ca1\u6709\u771f\u6b63\u5f00\u59cb\u6267\u884c\n    while (!t.mCoroutine.done()) {\n        t.mCoroutine.resume();\n        debug(), "main\u5f97\u5230hello\u7ed3\u679c\u4e3a",\n            t.mCoroutine.promise().mRetValue;\n    }\n    return 0;\n}\n'})}),"\n",(0,r.jsx)(e.p,{children:"\u8f93\u51fa:"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-C++",children:"step2.cpp:123:   main\u5373\u5c06\u8c03\u7528hello\nstep2.cpp:125:   main\u8c03\u7528\u5b8c\u4e86hello\nstep2.cpp:105:   hello \u6b63\u5728\u6784\u5efaworldTask\nstep2.cpp:107:   hello \u6784\u5efa\u5b8c\u4e86worldTask, \u5f00\u59cb\u7b49\u5f85world\nstep2.cpp:98:    world                     \u3010A\u3011\nstep2.cpp:128:   main\u5f97\u5230hello\u7ed3\u679c\u4e3a 0       \u3010B\u3011\nstep2.cpp:109:   hello\u5f97\u5230world\u8fd4\u56de 422     \u3010C\u3011\nstep2.cpp:128:   main\u5f97\u5230hello\u7ed3\u679c\u4e3a 0\nstep2.cpp:111:   hello\u5f97\u5230world\u8fd4\u56de 444\nstep2.cpp:112:   hello 42\nstep2.cpp:128:   main\u5f97\u5230hello\u7ed3\u679c\u4e3a 42\nstep2.cpp:114:   hello 12\nstep2.cpp:128:   main\u5f97\u5230hello\u7ed3\u679c\u4e3a 12\nstep2.cpp:116:   hello 6\nstep2.cpp:128:   main\u5f97\u5230hello\u7ed3\u679c\u4e3a 6\nstep2.cpp:118:   hello \u7ed3\u675f\nstep2.cpp:128:   main\u5f97\u5230hello\u7ed3\u679c\u4e3a 0\n"})}),"\n",(0,r.jsx)(e.p,{children:"\u6ce8\u610f\u4e0a\u9762\u7684[ABC]\u5904"}),"\n",(0,r.jsx)(e.h3,{id:"143-\u6bd4-142-\u66f4\u7b80\u5355\u7684\u793a\u4f8b",children:"1.4.3 \u6bd4 1.4.2 \u66f4\u7b80\u5355\u7684\u793a\u4f8b"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-C++",children:'#include <chrono>\n#include <coroutine>\n#include "debug.hpp"\n\nstruct RepeatAwaiter {\n    bool await_ready() const noexcept { return false; }\n\n    std::coroutine_handle<> await_suspend(std::coroutine_handle<> coroutine) const noexcept {\n        if (coroutine.done())\n            return std::noop_coroutine();\n        else\n            return coroutine;\n    }\n\n    void await_resume() const noexcept {}\n};\n\nstruct PreviousAwaiter {\n    std::coroutine_handle<> mPrevious;\n\n    bool await_ready() const noexcept { return false; }\n\n    std::coroutine_handle<> await_suspend(std::coroutine_handle<> coroutine) const noexcept {\n        if (mPrevious)\n            return mPrevious;\n        else\n            return std::noop_coroutine();\n    }\n\n    void await_resume() const noexcept {}\n};\n\nstruct Promise {\n    auto initial_suspend() {\n        return std::suspend_always();\n    }\n\n    auto final_suspend() noexcept {\n        return PreviousAwaiter(mPrevious);\n    }\n\n    void unhandled_exception() {\n        throw;\n    }\n\n    auto yield_value(int ret) {\n        mRetValue = ret;\n        return std::suspend_always();\n    }\n\n    void return_value(int ret) {\n        mRetValue = ret;\n    }\n\n    std::coroutine_handle<Promise> get_return_object() {\n        return std::coroutine_handle<Promise>::from_promise(*this);\n    }\n\n    int mRetValue;\n    std::coroutine_handle<> mPrevious = nullptr;\n};\n\nstruct Task {\n    using promise_type = Promise;\n\n    Task(std::coroutine_handle<promise_type> coroutine)\n        : mCoroutine(coroutine) {}\n\n    Task(Task &&) = delete;\n\n    ~Task() {\n        mCoroutine.destroy();\n    }\n\n    struct Awaiter {\n        bool await_ready() const { return false; }\n\n        std::coroutine_handle<> await_suspend(std::coroutine_handle<> coroutine) const {\n            mCoroutine.promise().mPrevious = coroutine;\n            return mCoroutine;\n        }\n\n        auto await_resume() const { return mCoroutine.promise().mRetValue; }\n\n        std::coroutine_handle<promise_type> mCoroutine;\n    };\n\n    auto operator co_await() const {\n        return Awaiter(mCoroutine);\n    }\n\n    std::coroutine_handle<promise_type> mCoroutine;\n};\n\nTask world() {\n    debug(), "world";\n    co_return 41;\n}\n\nTask hello() {\n    int i = co_await world();\n    debug(), "hello\u5f97\u5230world\u7ed3\u679c\u4e3a", i;\n    co_return i + 1;\n}\n\nint main() {\n    debug(), "main\u5373\u5c06\u8c03\u7528hello";\n    Task t = hello();\n    debug(), "main\u8c03\u7528\u5b8c\u4e86hello"; // \u5176\u5b9e\u53ea\u521b\u5efa\u4e86task\u5bf9\u8c61, \u5e76\u6ca1\u6709\u771f\u6b63\u5f00\u59cb\u6267\u884c\n    while (!t.mCoroutine.done()) {\n        t.mCoroutine.resume();\n        debug(), "main\u5f97\u5230hello\u7ed3\u679c\u4e3a",\n            t.mCoroutine.promise().mRetValue;\n    }\n    return 0;\n}\n'})}),"\n",(0,r.jsx)(e.p,{children:"\u8f93\u51fa:"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-C++",children:"step3.cpp:108:   main\u5373\u5c06\u8c03\u7528hello\nstep3.cpp:110:   main\u8c03\u7528\u5b8c\u4e86hello\nstep3.cpp:97:    world\nstep3.cpp:103:   hello\u5f97\u5230world\u7ed3\u679c\u4e3a 41\nstep3.cpp:113:   main\u5f97\u5230hello\u7ed3\u679c\u4e3a 42\n"})}),"\n",(0,r.jsx)(e.h3,{id:"144-\u6a21\u7248task\u4e0e\u5f02\u5e38\u5904\u7406",children:"1.4.4 \u6a21\u7248Task\u4e0e\u5f02\u5e38\u5904\u7406"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-C++",children:'struct RepeatAwaiter {\n    bool await_ready() const noexcept { return false; }\n\n    std::coroutine_handle<> await_suspend(std::coroutine_handle<> coroutine) const noexcept {\n        if (coroutine.done())\n            return std::noop_coroutine();\n        else\n            return coroutine;\n    }\n\n    void await_resume() const noexcept {}\n};\n\nstruct PreviousAwaiter {\n    std::coroutine_handle<> mPrevious;\n\n    bool await_ready() const noexcept { return false; }\n\n    std::coroutine_handle<> await_suspend(std::coroutine_handle<> coroutine) const noexcept {\n        if (mPrevious)\n            return mPrevious;\n        else\n            return std::noop_coroutine();\n    }\n\n    void await_resume() const noexcept {}\n};\n\ntemplate <class T>\nstruct Promise {\n    auto initial_suspend() noexcept {\n        return std::suspend_always();\n    }\n\n    auto final_suspend() noexcept {\n        return PreviousAwaiter(mPrevious);\n    }\n\n    void unhandled_exception() noexcept {\n        mException = std::current_exception(); // \u4fdd\u5b58\u5f02\u5e38\u4fe1\u606f\n    }\n\n    auto yield_value(T ret) noexcept {\n        new (&mResult) T(std::move(ret));\n        return std::suspend_always();\n    }\n\n    void return_value(T ret) noexcept {\n        new (&mResult) T(std::move(ret));\n    }\n\n    T result() {\n        if (mException) [[unlikely]] { // unlikely \u662f\u544a\u8bc9\u7f16\u8bd1\u5668 if\u5185 \u4e3a\u51b7\u4ee3\u7801 (\u5f88\u5c11\u4e3atrue)\n            std::rethrow_exception(mException);\n        }\n        T ret = std::move(mResult);\n        mResult.~T();\n        return ret;\n    }\n\n    std::coroutine_handle<Promise> get_return_object() {\n        return std::coroutine_handle<Promise>::from_promise(*this);\n    }\n\n    std::coroutine_handle<> mPrevious{};\n    std::exception_ptr mException{};\n    union { // \u4f7f\u7528 union \u53ef\u4ee5\u907f\u514d\u521d\u59cb\u5316\n        T mResult;\n    };\n\n    Promise() noexcept {}\n    Promise(Promise &&) = delete;\n    ~Promise() {}\n};\n\ntemplate <>\nstruct Promise<void> { // \u6a21\u7248\u7279\u5316\n    auto initial_suspend() noexcept {\n        return std::suspend_always();\n    }\n\n    auto final_suspend() noexcept {\n        return PreviousAwaiter(mPrevious);\n    }\n\n    void unhandled_exception() noexcept {\n        mException = std::current_exception();\n    }\n\n    void return_void() noexcept {\n    }\n\n    void result() {\n        if (mException) [[unlikely]] {\n            std::rethrow_exception(mException);\n        }\n    }\n\n    std::coroutine_handle<Promise> get_return_object() {\n        return std::coroutine_handle<Promise>::from_promise(*this);\n    }\n\n    std::coroutine_handle<> mPrevious{};\n    std::exception_ptr mException{};\n\n    Promise() = default;\n    Promise(Promise &&) = delete;\n    ~Promise() = default;\n};\n\ntemplate <class T>\nstruct Task {\n    using promise_type = Promise<T>;\n\n    Task(std::coroutine_handle<promise_type> coroutine) noexcept\n        : mCoroutine(coroutine) {}\n\n    Task(Task &&) = delete;\n\n    ~Task() {\n        mCoroutine.destroy();\n    }\n\n    struct Awaiter {\n        bool await_ready() const noexcept { return false; }\n\n        std::coroutine_handle<promise_type> await_suspend(std::coroutine_handle<> coroutine) const noexcept {\n            mCoroutine.promise().mPrevious = coroutine;\n            return mCoroutine;\n        }\n\n        T await_resume() const {\n            return mCoroutine.promise().result();\n        }\n\n        std::coroutine_handle<promise_type> mCoroutine;\n    };\n\n    auto operator co_await() const noexcept {\n        return Awaiter(mCoroutine);\n    }\n\n    std::coroutine_handle<promise_type> mCoroutine;\n};\n\nTask<std::string> baby() {\n    debug(), "baby";\n    co_return "aaa\\n";\n}\n\nTask<double> world() {\n    debug(), "world";\n    co_return 3.14;\n}\n\nTask<int> hello() {\n    auto ret = co_await baby();\n    debug(), ret;\n    int i = (int)co_await world();\n    debug(), "hello\u5f97\u5230world\u7ed3\u679c\u4e3a", i;\n    co_return i + 1;\n}\n\nint main() {\n    debug(), "main\u5373\u5c06\u8c03\u7528hello";\n    auto t = hello();\n    debug(), "main\u8c03\u7528\u5b8c\u4e86hello"; // \u5176\u5b9e\u53ea\u521b\u5efa\u4e86task\u5bf9\u8c61\uff0c\u5e76\u6ca1\u6709\u771f\u6b63\u5f00\u59cb\u6267\u884c\n    while (!t.mCoroutine.done()) {\n        t.mCoroutine.resume();\n        debug(), "main\u5f97\u5230hello\u7ed3\u679c\u4e3a",\n            t.mCoroutine.promise().result();\n    }\n    return 0;\n}\n'})}),"\n",(0,r.jsx)(e.h3,{id:"145-\u57fa\u4e8e\u5806\u7684\u534f\u7a0b\u8ba1\u65f6\u5668",children:"1.4.5 \u57fa\u4e8e\u5806\u7684\u534f\u7a0b\u8ba1\u65f6\u5668"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-C++",children:'/**\n * @brief \u534f\u7a0b\u6a21\u5f0f: \u4e0d\u6682\u505c\n */\nstruct RepeatAwaiter {\n    bool await_ready() const noexcept { return false; }\n\n    std::coroutine_handle<> await_suspend(std::coroutine_handle<> coroutine) const noexcept {\n        if (coroutine.done())\n            return std::noop_coroutine();\n        else\n            return coroutine;\n    }\n\n    void await_resume() const noexcept {}\n};\n\n/**\n * @brief \u534f\u7a0b\u6a21\u5f0f: \u6682\u505c, \u4f1a\u8fd0\u884c\u4e4b\u524d\u7684\u534f\u7a0b\n */\nstruct PreviousAwaiter {\n    std::coroutine_handle<> mPrevious;\n\n    bool await_ready() const noexcept { return false; }\n\n    std::coroutine_handle<> await_suspend(std::coroutine_handle<> coroutine) const noexcept {\n        if (mPrevious)\n            return mPrevious;\n        else\n            return std::noop_coroutine();\n    }\n\n    void await_resume() const noexcept {}\n};\n\n/**\n * @brief \u4e3b\u6a21\u7248\n */\ntemplate <class T>\nstruct Promise {\n    auto initial_suspend() noexcept {\n        return std::suspend_always();\n    }\n\n    auto final_suspend() noexcept {\n        return PreviousAwaiter(mPrevious);\n    }\n\n    void unhandled_exception() noexcept {\n        mException = std::current_exception();\n    }\n\n    auto yield_value(T ret) noexcept {\n        new (&mResult) T(std::move(ret)); // \u751f\u6210\u534f\u7a0b\u7684\u4e2d\u95f4\u7ed3\u679c\n        return std::suspend_always();     // \u6302\u8d77\u534f\u7a0b\n    }\n\n    void return_value(T ret) noexcept {\n        new (&mResult) T(std::move(ret)); // \u8bbe\u7f6e\u534f\u7a0b\u7684\u8fd4\u56de\u503c\n    }\n\n    T result() {\n        if (mException) [[unlikely]] {\n            std::rethrow_exception(mException);\n        }\n        T ret = std::move(mResult);\n        mResult.~T();\n        return ret;\n    }\n\n    std::coroutine_handle<Promise> get_return_object() {\n        return std::coroutine_handle<Promise>::from_promise(*this); // \u83b7\u53d6\u534f\u7a0b\u53e5\u67c4\n    }\n\n    std::coroutine_handle<> mPrevious{}; // \u4e0a\u4e00\u4e2a\u534f\u7a0b\u53e5\u67c4\n    std::exception_ptr mException{};\n    union {\n        T mResult;\n    };\n\n    Promise() noexcept {}\n    Promise(Promise &&) = delete;\n    ~Promise() {}\n};\n\ntemplate <>\nstruct Promise<void> {\n    auto initial_suspend() noexcept {\n        return std::suspend_always();\n    }\n\n    auto final_suspend() noexcept {\n        return PreviousAwaiter(mPrevious); // \u534f\u7a0b\u7ed3\u675f\u65f6\u4f7f\u7528 PreviousAwaiter \u8fdb\u884c\u5904\u7406\n    }\n\n    void unhandled_exception() noexcept {\n        mException = std::current_exception();\n    }\n\n    void return_void() noexcept {\n    }\n\n    void result() {\n        if (mException) [[unlikely]] {\n            std::rethrow_exception(mException); // \u91cd\u65b0\u629b\u51fa\u5f02\u5e38\n        }\n    }\n\n    std::coroutine_handle<Promise> get_return_object() {\n        return std::coroutine_handle<Promise>::from_promise(*this);\n    }\n\n    std::coroutine_handle<> mPrevious{}; // \u4e0a\u4e00\u4e2a\u534f\u7a0b\u53e5\u67c4\n    std::exception_ptr mException{};\n\n    Promise() = default;\n    Promise(Promise &&) = delete;\n    ~Promise() = default;\n};\n\ntemplate <class T = void>\nstruct Task {\n    using promise_type = Promise<T>;\n\n    Task(std::coroutine_handle<promise_type> coroutine) noexcept\n        : mCoroutine(coroutine) {}\n\n    Task(Task &&) = delete;\n\n    ~Task() {\n        mCoroutine.destroy();\n    }\n\n    struct Awaiter {\n        bool await_ready() const noexcept { return false; }\n\n        std::coroutine_handle<promise_type> await_suspend(std::coroutine_handle<> coroutine) const noexcept {\n            mCoroutine.promise().mPrevious = coroutine;\n            return mCoroutine;\n        }\n\n        T await_resume() const {\n            return mCoroutine.promise().result();\n        }\n\n        std::coroutine_handle<promise_type> mCoroutine;\n    };\n\n    auto operator co_await() const noexcept {\n        return Awaiter(mCoroutine);\n    }\n\n    operator std::coroutine_handle<>() const noexcept {\n        return mCoroutine;\n    }\n\n    std::coroutine_handle<promise_type> mCoroutine;\n};\n\n/**\n * @brief \u57fa\u4e8e\u5c0f\u6839\u5806\u7684\u8ba1\u65f6\u5668\u7cfb\u7edf\n */\nstruct Loop {\n    /// @brief \u534f\u7a0b\u53e5\u67c4\u961f\u5217\n    std::deque<std::coroutine_handle<>> mReadyQueue;\n\n    /// @brief \u8ba1\u65f6\u5668\u5757\n    struct TimerEntry {\n        std::chrono::system_clock::time_point expireTime; // \u7ed3\u675f\u65f6\u95f4\u70b9\n        std::coroutine_handle<> coroutine; // \u534f\u7a0b\u53e5\u67c4\n\n        bool operator<(TimerEntry const &that) const noexcept {\n            return expireTime > that.expireTime;\n        }\n    };\n\n    // \u5806\n    std::priority_queue<TimerEntry> mTimerHeap;\n\n    /**\n     * @brief \u6dfb\u52a0\u4efb\u52a1\n     * @param coroutine \n     */\n    void addTask(std::coroutine_handle<> coroutine) {\n        mReadyQueue.push_front(coroutine);\n    }\n\n    /**\n     * @brief \u6dfb\u52a0\u8ba1\u65f6\u5668\n     * @param expireTime \n     * @param coroutine \n     */\n    void addTimer(std::chrono::system_clock::time_point expireTime, std::coroutine_handle<> coroutine) {\n        mTimerHeap.push({expireTime, coroutine});\n    }\n\n    void runAll() { // \u534f\u7a0b\u8c03\u5ea6\u5668?\n        while (!mTimerHeap.empty() || !mReadyQueue.empty()) {\n            while (!mReadyQueue.empty()) {\n                auto coroutine = mReadyQueue.front();\n                mReadyQueue.pop_front();\n                coroutine.resume();\n            }\n            if (!mTimerHeap.empty()) {\n                auto nowTime = std::chrono::system_clock::now();\n                auto timer = std::move(mTimerHeap.top());\n                if (timer.expireTime < nowTime) {\n                    mTimerHeap.pop();\n                    timer.coroutine.resume();\n                } else {\n                    std::this_thread::sleep_until(timer.expireTime); // \u7ee7\u7eed\u7b49\u5f85\n                }\n            }\n        }\n    }\n\n    Loop &operator=(Loop &&) = delete;\n};\n\n/**\n * @brief \u5168\u5c40\u61d2\u6c49\u5355\u4f8b\n * @return Loop& \n */\nLoop &getLoop() {\n    static Loop loop;\n    return loop;\n}\n\nstruct SleepAwaiter {\n    bool await_ready() const noexcept {\n        return false;\n    }\n\n    void await_suspend(std::coroutine_handle<> coroutine) const {\n        getLoop().addTimer(mExpireTime, coroutine);\n    }\n\n    void await_resume() const noexcept {\n    }\n\n    std::chrono::system_clock::time_point mExpireTime; // \u8fc7\u671f\u65f6\u95f4\n};\n\n// \u8fd9\u4e2a\u624d\u662f\u66f4\u52a0\u5e95\u5c42\u7684\u4e1c\u897f\nTask<void> sleep_until(std::chrono::system_clock::time_point expireTime) {\n    co_await SleepAwaiter(expireTime);\n    co_return;\n}\n\n// \u503c\u5f97\u6ce8\u610f\u7684\u662f sleep_for \u5b9e\u9645\u4e0a\u662f\u57fa\u4e8e sleep_until \u5b9e\u73b0\u7684\nTask<void> sleep_for(std::chrono::system_clock::duration duration) {\n    co_await SleepAwaiter(std::chrono::system_clock::now() + duration);\n    co_return;\n}\n\nTask<int> hello1() {\n    debug(), "hello1\u5f00\u59cb\u77611\u79d2";\n    co_await sleep_for(1s); // 1s \u7b49\u4ef7\u4e8e std::chrono::seconds(1)\n    debug(), "hello1\u7761\u9192\u4e86";\n    co_return 1;\n}\n\nTask<int> hello2() {\n    debug(), "hello2\u5f00\u59cb\u77612\u79d2";\n    co_await sleep_for(2s); // 2s \u7b49\u4ef7\u4e8e std::chrono::seconds(2)\n    debug(), "hello2\u7761\u9192\u4e86";\n    co_return 2;\n}\n\nint main() {\n    auto t1 = hello1();\n    auto t2 = hello2();\n    getLoop().addTask(t1);\n    getLoop().addTask(t2);\n    getLoop().runAll();\n    // \u5355\u7ebf\u7a0b\u8fd9\u6837\u73a9, \u4f1a\u4f11\u7720 sum(1, 2) \u79d2,\n    // \u800c\u534f\u7a0b\u5b9a\u65f6\u5668, \u4f1a\u4f11\u7720 max(1, 2) \u79d2.\n    debug(), "\u4e3b\u51fd\u6570\u4e2d\u5f97\u5230hello1\u7ed3\u679c:", t1.mCoroutine.promise().result();\n    debug(), "\u4e3b\u51fd\u6570\u4e2d\u5f97\u5230hello2\u7ed3\u679c:", t2.mCoroutine.promise().result();\n    return 0;\n}\n'})}),"\n",(0,r.jsx)(e.h3,{id:"146-\u57fa\u4e8e\u7ea2\u9ed1\u6811\u7684\u8ba1\u65f6\u5668\u53ea\u8981\u6700\u5148\u5b8c\u6210\u7684",children:"1.4.6 \u57fa\u4e8e\u7ea2\u9ed1\u6811\u7684\u8ba1\u65f6\u5668(\u53ea\u8981\u6700\u5148\u5b8c\u6210\u7684)"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-C++",children:'#include "rbtree.hpp"\n\ntemplate <class T = void> struct NonVoidHelper {\n    using Type = T;\n};\n\ntemplate <> struct NonVoidHelper<void> {\n    using Type = NonVoidHelper;\n\n    explicit NonVoidHelper() = default;\n};\n\ntemplate <class T> struct Uninitialized {\n    union {\n        T mValue;\n    };\n\n    Uninitialized() noexcept {}\n    Uninitialized(Uninitialized &&) = delete;\n    ~Uninitialized() noexcept {}\n\n    T moveValue() {\n        T ret(std::move(mValue));\n        mValue.~T();\n        return ret;\n    }\n\n    template <class... Ts> void putValue(Ts &&...args) {\n        new (std::addressof(mValue)) T(std::forward<Ts>(args)...);\n    }\n};\n\ntemplate <> struct Uninitialized<void> {\n    auto moveValue() {\n        return NonVoidHelper<>{};\n    }\n\n    void putValue(NonVoidHelper<>) {}\n};\n\ntemplate <class T> struct Uninitialized<T const> : Uninitialized<T> {};\n\ntemplate <class T>\nstruct Uninitialized<T &> : Uninitialized<std::reference_wrapper<T>> {};\n\ntemplate <class T> struct Uninitialized<T &&> : Uninitialized<T> {};\n\ntemplate <class A>\nconcept Awaiter = requires(A a, std::coroutine_handle<> h) {\n    { a.await_ready() };\n    { a.await_suspend(h) };\n    { a.await_resume() };\n};\n\ntemplate <class A>\nconcept Awaitable = Awaiter<A> || requires(A a) {\n    { a.operator co_await() } -> Awaiter;\n};\n\ntemplate <class A> struct AwaitableTraits;\n\ntemplate <Awaiter A> struct AwaitableTraits<A> {\n    using RetType = decltype(std::declval<A>().await_resume());\n    using NonVoidRetType = NonVoidHelper<RetType>::Type;\n};\n\ntemplate <class A>\n    requires(!Awaiter<A> && Awaitable<A>)\nstruct AwaitableTraits<A>\n    : AwaitableTraits<decltype(std::declval<A>().operator co_await())> {};\n\ntemplate <class To, std::derived_from<To> P>\nconstexpr std::coroutine_handle<To> staticHandleCast(std::coroutine_handle<P> coroutine) {\n    return std::coroutine_handle<To>::from_address(coroutine.address());\n}\n\nstruct RepeatAwaiter {\n    bool await_ready() const noexcept {\n        return false;\n    }\n\n    std::coroutine_handle<>\n    await_suspend(std::coroutine_handle<> coroutine) const noexcept {\n        if (coroutine.done())\n            return std::noop_coroutine();\n        else\n            return coroutine;\n    }\n\n    void await_resume() const noexcept {}\n};\n\nstruct PreviousAwaiter {\n    std::coroutine_handle<> mPrevious;\n\n    bool await_ready() const noexcept {\n        return false;\n    }\n\n    std::coroutine_handle<>\n    await_suspend(std::coroutine_handle<> coroutine) const noexcept {\n        if (mPrevious)\n            return mPrevious;\n        else\n            return std::noop_coroutine();\n    }\n\n    void await_resume() const noexcept {}\n};\n\ntemplate <class T> struct Promise {\n    auto initial_suspend() noexcept {\n        return std::suspend_always();\n    }\n\n    auto final_suspend() noexcept {\n        return PreviousAwaiter(mPrevious);\n    }\n\n    void unhandled_exception() noexcept {\n        mException = std::current_exception();\n    }\n\n    void return_value(T &&ret) {\n        mResult.putValue(std::move(ret));\n    }\n\n    void return_value(T const &ret) {\n        mResult.putValue(ret);\n    }\n\n    T result() {\n        if (mException) [[unlikely]] {\n            std::rethrow_exception(mException);\n        }\n        return mResult.moveValue();\n    }\n\n    auto get_return_object() {\n        return std::coroutine_handle<Promise>::from_promise(*this);\n    }\n\n    std::coroutine_handle<> mPrevious{};\n    std::exception_ptr mException{};\n    Uninitialized<T> mResult;\n\n    Promise &operator=(Promise &&) = delete;\n};\n\ntemplate <> struct Promise<void> {\n    auto initial_suspend() noexcept {\n        return std::suspend_always();\n    }\n\n    auto final_suspend() noexcept {\n        return PreviousAwaiter(mPrevious);\n    }\n\n    void unhandled_exception() noexcept {\n        mException = std::current_exception();\n    }\n\n    void return_void() noexcept {}\n\n    void result() {\n        if (mException) [[unlikely]] {\n            std::rethrow_exception(mException);\n        }\n    }\n\n    auto get_return_object() {\n        return std::coroutine_handle<Promise>::from_promise(*this);\n    }\n\n    std::coroutine_handle<> mPrevious{};\n    std::exception_ptr mException{};\n\n    Promise &operator=(Promise &&) = delete;\n};\n\ntemplate <class T = void, class P = Promise<T>> struct Task {\n    using promise_type = P;\n\n    Task(std::coroutine_handle<promise_type> coroutine) noexcept\n        : mCoroutine(coroutine) {}\n\n    Task(Task &&) = delete;\n\n    ~Task() {\n        mCoroutine.destroy();\n    }\n\n    struct Awaiter {\n        bool await_ready() const noexcept {\n            return false;\n        }\n\n        std::coroutine_handle<promise_type>\n        await_suspend(std::coroutine_handle<> coroutine) const noexcept {\n            mCoroutine.promise().mPrevious = coroutine;\n            return mCoroutine;\n        }\n\n        T await_resume() const {\n            return mCoroutine.promise().result();\n        }\n\n        std::coroutine_handle<promise_type> mCoroutine;\n    };\n\n    auto operator co_await() const noexcept {\n        return Awaiter(mCoroutine);\n    }\n\n    operator std::coroutine_handle<>() const noexcept {\n        return mCoroutine;\n    }\n\n    std::coroutine_handle<promise_type> mCoroutine;\n};\n\nstruct SleepUntilPromise : RbTree<SleepUntilPromise>::RbNode, Promise<void> {\n    std::chrono::system_clock::time_point mExpireTime;\n\n    auto get_return_object() {\n        return std::coroutine_handle<SleepUntilPromise>::from_promise(*this);\n    }\n\n    SleepUntilPromise &operator=(SleepUntilPromise &&) = delete;\n\n    friend bool operator<(SleepUntilPromise const &lhs, SleepUntilPromise const &rhs) noexcept {\n        return lhs.mExpireTime < rhs.mExpireTime;\n    }\n};\n\nstruct Loop {\n    RbTree<SleepUntilPromise> mRbTimer{};\n\n    void addTimer(SleepUntilPromise &promise) {\n        mRbTimer.insert(promise);\n    }\n\n    void run(std::coroutine_handle<> coroutine) {\n        while (!coroutine.done()) {\n            coroutine.resume();\n            while (!mRbTimer.empty()) {\n                if (!mRbTimer.empty()) {\n                    auto nowTime = std::chrono::system_clock::now();\n                    auto &promise = mRbTimer.front();\n                    if (promise.mExpireTime < nowTime) {\n                        mRbTimer.erase(promise);\n                        std::coroutine_handle<SleepUntilPromise>::from_promise(promise).resume();\n                    } else {\n                        std::this_thread::sleep_until(promise.mExpireTime);\n                    }\n                }\n            }\n        }\n    }\n\n    Loop &operator=(Loop &&) = delete;\n};\n\nLoop &getLoop() {\n    static Loop loop;\n    return loop;\n}\n\nstruct SleepAwaiter {\n    bool await_ready() const noexcept {\n        return false;\n    }\n\n    void await_suspend(std::coroutine_handle<SleepUntilPromise> coroutine) const {\n        auto &promise = coroutine.promise();\n        promise.mExpireTime = mExpireTime;\n        loop.addTimer(promise);\n    }\n\n    void await_resume() const noexcept {}\n\n    Loop &loop;\n    std::chrono::system_clock::time_point mExpireTime;\n};\n\nTask<void, SleepUntilPromise> sleep_until(std::chrono::system_clock::time_point expireTime) {\n    auto &loop = getLoop();\n    co_await SleepAwaiter(loop, expireTime);\n}\n\nTask<void, SleepUntilPromise> sleep_for(std::chrono::system_clock::duration duration) {\n    auto &loop = getLoop();\n    co_await SleepAwaiter(loop, std::chrono::system_clock::now() + duration);\n}\n\nstruct CurrentCoroutineAwaiter {\n    bool await_ready() const noexcept {\n        return false;\n    }\n\n    std::coroutine_handle<>\n    await_suspend(std::coroutine_handle<> coroutine) noexcept {\n        mCurrent = coroutine;\n        return coroutine;\n    }\n\n    auto await_resume() const noexcept {\n        return mCurrent;\n    }\n\n    std::coroutine_handle<> mCurrent;\n};\n\nstruct ReturnPreviousPromise {\n    auto initial_suspend() noexcept {\n        return std::suspend_always();\n    }\n\n    auto final_suspend() noexcept {\n        return PreviousAwaiter(mPrevious);\n    }\n\n    void unhandled_exception() {\n        throw;\n    }\n\n    void return_value(std::coroutine_handle<> previous) noexcept {\n        mPrevious = previous;\n    }\n\n    auto get_return_object() {\n        return std::coroutine_handle<ReturnPreviousPromise>::from_promise(\n            *this);\n    }\n\n    std::coroutine_handle<> mPrevious{};\n\n    ReturnPreviousPromise &operator=(ReturnPreviousPromise &&) = delete;\n};\n\nstruct ReturnPreviousTask {\n    using promise_type = ReturnPreviousPromise;\n\n    ReturnPreviousTask(std::coroutine_handle<promise_type> coroutine) noexcept\n        : mCoroutine(coroutine) {}\n\n    ReturnPreviousTask(ReturnPreviousTask &&) = delete;\n\n    ~ReturnPreviousTask() {\n        mCoroutine.destroy();\n    }\n\n    std::coroutine_handle<promise_type> mCoroutine;\n};\n\nstruct WhenAllCtlBlock {\n    std::size_t mCount;\n    std::coroutine_handle<> mPrevious{};\n    std::exception_ptr mException{};\n};\n\nstruct WhenAllAwaiter {\n    bool await_ready() const noexcept {\n        return false;\n    }\n\n    std::coroutine_handle<>\n    await_suspend(std::coroutine_handle<> coroutine) const {\n        if (mTasks.empty()) return coroutine;\n        mControl.mPrevious = coroutine;\n        for (auto const &t: mTasks.subspan(0, mTasks.size() - 1))\n            t.mCoroutine.resume();\n        return mTasks.back().mCoroutine;\n    }\n\n    void await_resume() const {\n        if (mControl.mException) [[unlikely]] {\n            std::rethrow_exception(mControl.mException);\n        }\n    }\n\n    WhenAllCtlBlock &mControl;\n    std::span<ReturnPreviousTask const> mTasks;\n};\n\ntemplate <class T>\nReturnPreviousTask whenAllHelper(auto const &t, WhenAllCtlBlock &control,\n                                 Uninitialized<T> &result) {\n    try {\n        result.putValue(co_await t);\n    } catch (...) {\n        control.mException = std::current_exception();\n        co_return control.mPrevious;\n    }\n    --control.mCount;\n    if (control.mCount == 0) {\n        co_return control.mPrevious;\n    }\n    co_return nullptr;\n}\n\ntemplate <std::size_t... Is, class... Ts>\nTask<std::tuple<typename AwaitableTraits<Ts>::NonVoidRetType...>>\nwhenAllImpl(std::index_sequence<Is...>, Ts &&...ts) {\n    WhenAllCtlBlock control{sizeof...(Ts)};\n    std::tuple<Uninitialized<typename AwaitableTraits<Ts>::RetType>...> result;\n    ReturnPreviousTask taskArray[]{whenAllHelper(ts, control, std::get<Is>(result))...};\n    co_await WhenAllAwaiter(control, taskArray);\n    co_return std::tuple<typename AwaitableTraits<Ts>::NonVoidRetType...>(\n        std::get<Is>(result).moveValue()...);\n}\n\ntemplate <Awaitable... Ts>\n    requires(sizeof...(Ts) != 0)\nauto when_all(Ts &&...ts) {\n    return whenAllImpl(std::make_index_sequence<sizeof...(Ts)>{},\n                       std::forward<Ts>(ts)...);\n}\n\nstruct WhenAnyCtlBlock {\n    static constexpr std::size_t kNullIndex = std::size_t(-1);\n\n    std::size_t mIndex{kNullIndex};\n    std::coroutine_handle<> mPrevious{};\n    std::exception_ptr mException{};\n};\n\nstruct WhenAnyAwaiter {\n    bool await_ready() const noexcept {\n        return false;\n    }\n\n    std::coroutine_handle<>\n    await_suspend(std::coroutine_handle<> coroutine) const {\n        if (mTasks.empty()) return coroutine;\n        mControl.mPrevious = coroutine;\n        for (auto const &t: mTasks.subspan(0, mTasks.size() - 1))\n            t.mCoroutine.resume();\n        return mTasks.back().mCoroutine;\n    }\n\n    void await_resume() const {\n        if (mControl.mException) [[unlikely]] {\n            std::rethrow_exception(mControl.mException);\n        }\n    }\n\n    WhenAnyCtlBlock &mControl;\n    std::span<ReturnPreviousTask const> mTasks;\n};\n\ntemplate <class T>\nReturnPreviousTask whenAnyHelper(auto const &t, WhenAnyCtlBlock &control,\n                                 Uninitialized<T> &result, std::size_t index) {\n    try {\n        result.putValue(co_await t);\n    } catch (...) {\n        control.mException = std::current_exception();\n        co_return control.mPrevious;\n    }\n    --control.mIndex = index;\n    co_return control.mPrevious;\n}\n\ntemplate <std::size_t... Is, class... Ts>\nTask<std::variant<typename AwaitableTraits<Ts>::NonVoidRetType...>>\nwhenAnyImpl(std::index_sequence<Is...>, Ts &&...ts) {\n    WhenAnyCtlBlock control{};\n    std::tuple<Uninitialized<typename AwaitableTraits<Ts>::RetType>...> result;\n    ReturnPreviousTask taskArray[]{whenAnyHelper(ts, control, std::get<Is>(result), Is)...};\n    co_await WhenAnyAwaiter(control, taskArray);\n    Uninitialized<std::variant<typename AwaitableTraits<Ts>::NonVoidRetType...>> varResult;\n    ((control.mIndex == Is && (varResult.putValue(\n        std::in_place_index<Is>, std::get<Is>(result).moveValue()), 0)), ...);\n    co_return varResult.moveValue();\n}\n\ntemplate <Awaitable... Ts>\n    requires(sizeof...(Ts) != 0)\nauto when_any(Ts &&...ts) {\n    return whenAnyImpl(std::make_index_sequence<sizeof...(Ts)>{},\n                       std::forward<Ts>(ts)...);\n}\n\nTask<int> hello1() {\n    debug(), "hello1\u5f00\u59cb\u77611\u79d2";\n    co_await sleep_for(1s); // 1s \u7b49\u4ef7\u4e8e std::chrono::seconds(1)\n    debug(), "hello1\u7761\u9192\u4e86";\n    co_return 1;\n}\n\nTask<int> hello2() {\n    debug(), "hello2\u5f00\u59cb\u77612\u79d2";\n    co_await sleep_for(2s); // 2s \u7b49\u4ef7\u4e8e std::chrono::seconds(2)\n    debug(), "hello2\u7761\u9192\u4e86";\n    co_return 2;\n}\n\nTask<int> hello() {\n    debug(), "hello\u5f00\u59cb\u7b491\u548c2";\n    auto v = co_await when_any(hello1(), hello2());\n    /* co_await hello1(); */\n    /* co_await hello2(); */\n    debug(), "hello\u770b\u5230", (int)v.index() + 1, "\u7761\u9192\u4e86";\n    co_return std::get<0>(v);\n}\n\nint main() {\n    auto t = hello();\n    getLoop().run(t);\n    debug(), "\u4e3b\u51fd\u6570\u4e2d\u5f97\u5230hello\u7ed3\u679c:", t.mCoroutine.promise().result();\n    return 0;\n}\n'})}),"\n",(0,r.jsx)(e.p,{children:"\u8f93\u51fa:"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-C++",children:"step7.cpp:509:   hello\u5f00\u59cb\u7b491\u548c2\nstep7.cpp:495:   hello1\u5f00\u59cb\u77611\u79d2\nstep7.cpp:502:   hello2\u5f00\u59cb\u77612\u79d2\nstep7.cpp:497:   hello1\u7761\u9192\u4e86\nstep7.cpp:513:   hello\u770b\u5230 1 \u7761\u9192\u4e86\nstep7.cpp:520:   \u4e3b\u51fd\u6570\u4e2d\u5f97\u5230hello\u7ed3\u679c: 1\n"})}),"\n",(0,r.jsx)(e.h3,{id:"147-\u4fee\u590d-145-\u7684\u6bb5\u9519\u8bef",children:"1.4.7 \u4fee\u590d 1.4.5 \u7684\u6bb5\u9519\u8bef"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-C++",children:'#include <iostream>\n#include <map>\n#include <chrono>\n#include <coroutine>\n#include <queue>\n#include <string>\n#include <thread>\n\n/**\n * @brief \u534f\u7a0b\u6a21\u5f0f: \u4e0d\u6682\u505c\n */\nstruct RepeatAwaiter {\n    bool await_ready() const noexcept { return false; }\n\n    std::coroutine_handle<> await_suspend(std::coroutine_handle<> coroutine) const noexcept {\n        if (coroutine.done())\n            return std::noop_coroutine();\n        else\n            return coroutine;\n    }\n\n    void await_resume() const noexcept {}\n};\n\n/**\n * @brief \u534f\u7a0b\u6a21\u5f0f: \u6682\u505c, \u4f1a\u8fd0\u884c\u4e4b\u524d\u7684\u534f\u7a0b\n */\nstruct PreviousAwaiter {\n    bool await_ready() const noexcept {\n        return false;\n    }\n\n    std::coroutine_handle<> await_suspend(std::coroutine_handle<> coroutine) const noexcept {\n        if (_previous)\n            return _previous;\n        else\n            return std::noop_coroutine();\n    }\n\n    void await_resume() const noexcept {}\n\n    std::coroutine_handle<> _previous; // \u4e4b\u524d\u7684\u534f\u7a0b\n};\n\ntemplate <class T>\nstruct Promise {\n    auto initial_suspend() { \n        return std::suspend_always(); // \u7b2c\u4e00\u6b21\u521b\u5efa, \u76f4\u63a5\u6302\u8d77\n    }\n\n    auto final_suspend() noexcept {\n        return PreviousAwaiter(_previous); // \u8fd9\u91cc\u6267\u884c\u5b8c\u4e86\u540e, \u5c31 \u6bb5\u9519\u8bef..., \u539f\u6765\u662f _res \u6ca1\u6709\u8d4b\u503c\u4e0a..\n    }\n\n    void unhandled_exception() noexcept {}\n\n    void return_value(T res) {\n    /**\n    \u5728\u8fd9\u6bb5\u4ee3\u7801\u4e2d\uff0cnew (&_previous) T(std::move(res)); \n    \u4e0d\u662f\u8bed\u6cd5\u7cd6\uff0c\u800c\u662f\u4f7f\u7528\u4e86\u4e00\u4e2a\u540d\u4e3a"placement new"\u7684\u8bed\u6cd5\u6765\u5728\u5df2\u7ecf\u5206\u914d\u7684\u5185\u5b58\u533a\u57df\u4e0a\u6784\u9020\u5bf9\u8c61\u3002\n    \u8fd9\u91cc\u6709\u51e0\u4e2a\u91cd\u8981\u7684\u6982\u5ff5\u548c\u64cd\u4f5c:\n\n    1.  Placement New: \u901a\u5e38\u60c5\u51b5\u4e0b\uff0cnew \u5173\u952e\u5b57\u5206\u914d\u5185\u5b58\u5e76\u8c03\u7528\u6784\u9020\u51fd\u6570\u3002\n        \u4f46\u5728 "placement new" \u4e2d\uff0cnew \u540e\u9762\u8ddf\u7740\u7684\u5730\u5740\uff08\u5982 & _previous\uff09\uff0c\n        \u8868\u793a\u5728\u8fd9\u4e2a\u7279\u5b9a\u7684\u5730\u5740\u4e0a\u8c03\u7528\u6784\u9020\u51fd\u6570\uff0c\u800c\u4e0d\u4f1a\u5206\u914d\u65b0\u7684\u5185\u5b58\u3002\n        \u8fd9\u4e2a\u64cd\u4f5c\u5141\u8bb8\u5728\u6307\u5b9a\u7684\u5185\u5b58\u5730\u5740\u4e0a\u91cd\u65b0\u6784\u9020\u5bf9\u8c61\u3002\n\n    2.  Move \u6784\u9020\u51fd\u6570: T(std::move(res)) \u8c03\u7528\u4e86\u7c7b\u578b T \u7684\u79fb\u52a8\u6784\u9020\u51fd\u6570\uff0c\n        \u5c06\u4e34\u65f6\u5bf9\u8c61 res \u7684\u6240\u6709\u6743\u8f6c\u79fb\u5230 _previous\u3002\n        std::move \u7528\u6765\u663e\u5f0f\u5730\u8f6c\u6362 res \u4e3a\u53f3\u503c\u5f15\u7528\uff0c\u4f7f\u5f97 T \u7684\u79fb\u52a8\u6784\u9020\u51fd\u6570\u53ef\u4ee5\u88ab\u8c03\u7528\u3002\n\n    3.  _previous: \u8fd9\u662f\u4e00\u4e2a\u5df2\u7ecf\u5206\u914d\u4e86\u5185\u5b58\u7684\u5bf9\u8c61\u6216\u5185\u5b58\u4f4d\u7f6e\uff0c\n        placement new \u4f1a\u5728\u8fd9\u4e2a\u5185\u5b58\u4f4d\u7f6e\u4e0a\u91cd\u65b0\u6784\u9020 T \u7c7b\u578b\u7684\u5bf9\u8c61\u3002\n        \u53ef\u80fd _previous \u662f\u4e00\u4e2a\u8054\u5408\uff08union\uff09\uff0c\n        \u6216\u8005\u662f\u4e00\u4e2a\u5c1a\u672a\u6784\u9020\u7684\u5b58\u50a8\u533a\u57df\uff08\u5982 std::aligned_storage\uff09\u3002\n\n    \u793a\u4f8b\u89e3\u91ca\n        \u5047\u8bbe _previous \u662f\u4e00\u4e2a\u8054\u5408\u4e2d\u7684\u6210\u5458\uff0c\u5e76\u4e14\u4e4b\u524d\u6ca1\u6709\u6784\u9020\u5bf9\u8c61\uff0c\n        \u73b0\u5728\u60f3\u5728\u8fd9\u4e2a\u8054\u5408\u4e2d\u6784\u9020\u4e00\u4e2a\u7c7b\u578b\u4e3a T \u7684\u5bf9\u8c61\u5e76\u8d4b\u503c\u4e3a res\u3002\n        \u90a3\u4e48\uff0c\u4f7f\u7528 new (&_previous) T(std::move(res)); \u8fd9\u6837\u7684\u8bed\u6cd5\u53ef\u4ee5\u8fbe\u5230\u8fd9\u4e2a\u76ee\u7684\u3002\n    \u8fd9\u79cd\u6280\u672f\u901a\u5e38\u5728\u9ad8\u6027\u80fd\u4ee3\u7801\u4e2d\u4f7f\u7528\uff0c\u907f\u514d\u4e86\u4e0d\u5fc5\u8981\u7684\u5185\u5b58\u5206\u914d\u548c\u590d\u5236\u3002\n    **/\n        _res = res;\n        // new (&_previous) T(std::move(res)); // \u8bbe\u7f6e\u534f\u7a0b\u7684\u8fd4\u56de\u503c\n    }\n\n    auto yield_value(T res) {\n        _res = res;\n        // new (&_previous) T(std::move(res)); // \u8bbe\u7f6e\u534f\u7a0b\u7684\u8fd4\u56de\u503c\n        return std::suspend_always();       // \u6302\u8d77\u534f\u7a0b\n    }\n\n    T result() {\n        T res = std::move(_res);\n        _res.~T();\n        return res;\n    }\n\n    std::coroutine_handle<Promise> get_return_object() {\n        return std::coroutine_handle<Promise>::from_promise(*this);\n    }\n\n    Promise &operator=(Promise &&) = delete;\n\n    // \u6ce8: \u4e0d\u5199 \u547d\u540d, \u4e14\u4e0d\u5b9e\u4f8b\u5316\u4e3a\u53d8\u91cf, \u5219\u9ed8\u8ba4\u5df2\u7ecf\u5b9e\u4f8b\u5316, \u5e76\u4e14\u4f5c\u7528\u57df\u662f class \u5185, \u5373\u53ef this->_res\n    union {\n        T _res;\n    };\n    \n    std::coroutine_handle<> _previous {}; // \u4e0a\u4e00\u4e2a\u534f\u7a0b\u53e5\u67c4\n};\n\ntemplate <>\nstruct Promise<void> {\n    auto initial_suspend() { \n        return std::suspend_always();\n    }\n\n    auto final_suspend() noexcept {\n        return PreviousAwaiter(_previous);\n    }\n\n    void unhandled_exception() noexcept {}\n\n    void return_void() noexcept {\n    }\n\n    void result() {\n    }\n\n    std::coroutine_handle<Promise> get_return_object() {\n        return std::coroutine_handle<Promise>::from_promise(*this);\n    }\n\n    Promise &operator=(Promise &&) = delete;\n    \n    std::coroutine_handle<> _previous {}; // \u4e0a\u4e00\u4e2a\u534f\u7a0b\u53e5\u67c4\n};\n\ntemplate <class T = void>\nstruct Task {\n    using promise_type = Promise<T>;\n\n    Task(std::coroutine_handle<promise_type> coroutine) noexcept\n        : _coroutine(coroutine) {}\n\n    Task(Task &&) = delete;\n\n    ~Task() {\n        if (_coroutine)\n            _coroutine.destroy();\n    }\n\n    struct Awaiter {\n        bool await_ready() const noexcept { return false; }\n\n        std::coroutine_handle<promise_type> await_suspend(\n            std::coroutine_handle<> coroutine\n        ) const noexcept {\n            _coroutine.promise()._previous = coroutine;\n            return _coroutine;\n        }\n\n        T await_resume() const {\n            return _coroutine.promise().result();\n        }\n\n        std::coroutine_handle<promise_type> _coroutine;\n    };\n\n    auto operator co_await() const noexcept {\n        return Awaiter(_coroutine);\n    }\n\n    operator std::coroutine_handle<>() const noexcept {\n        return _coroutine;\n    }\n\n    std::coroutine_handle<promise_type> _coroutine; // \u5f53\u524d\u534f\u7a0b\u53e5\u67c4\n};\n\nstruct Loop {\n    void addTask(std::coroutine_handle<> coroutine) {\n        _taskQueue.emplace(coroutine);\n    }\n\n    void addTimer(\n        std::chrono::system_clock::time_point expireTime, \n        std::coroutine_handle<> coroutine\n    ) {\n        _timer.insert({expireTime, coroutine});\n    }\n\n    void runAll() {\n        while (_timer.size() || _taskQueue.size()) {\n            while (_taskQueue.size()) {\n                auto task = std::move(_taskQueue.front());\n                _taskQueue.pop();\n                task.resume();\n            }\n\n            if (_timer.size()) {\n                auto now = std::chrono::system_clock::now();\n                auto it = _timer.begin();\n                if (now >= it->first) {\n                    do {\n                        it->second.resume();\n                        _timer.erase(it);\n                        if (_timer.empty())\n                            break;\n                        it = _timer.begin();\n                    } while (now >= it->first);\n                } else {\n                    std::this_thread::sleep_until(it->first);\n                }\n            }\n        }\n    }\n\n    static Loop& getLoop() {\n        static Loop loop;\n        return loop;\n    }\n\nprivate:\n    explicit Loop() : _timer()\n                    , _taskQueue()\n    {}\n\n    Loop& operator=(Loop&&) = delete;\n\n    /// @brief \u8ba1\u65f6\u5668\u7ea2\u9ed1\u6811\n    std::multimap<std::chrono::system_clock::time_point, std::coroutine_handle<>> _timer;\n\n    /// @brief \u4efb\u52a1\u961f\u5217\n    std::queue<std::coroutine_handle<>> _taskQueue;\n};\n\n/**\n * @brief \u6682\u505c\u8005\n */\nstruct SleepAwaiter { // \u4f7f\u7528 co_await \u5219\u9700\u8981\u5b9a\u4e49\u8fd9 3 \u4e2a\u56fa\u5b9a\u51fd\u6570\n    bool await_ready() const noexcept {\n        return false;\n    }\n\n    void await_suspend(std::coroutine_handle<> coroutine) const {\n        Loop::getLoop().addTimer(_expireTime, coroutine);\n    }\n\n    void await_resume() const noexcept {\n    }\n\n    std::chrono::system_clock::time_point _expireTime; // \u8fc7\u671f\u65f6\u95f4\n};\n\n/**\n * @brief \u6682\u505c\u6307\u5b9a\u65f6\u95f4\u70b9\n * @param expireTime \u65f6\u95f4\u70b9, \u5982 2024-8-4 22:12:23\n */\nTask<void> sleep_until(std::chrono::system_clock::time_point expireTime) {\n    co_await SleepAwaiter(expireTime);\n}\n\n/**\n * @brief \u6682\u505c\u4e00\u6bb5\u65f6\u95f4\n * @param duration \u6bd4\u5982 3s\n */\nTask<void> sleep_for(std::chrono::system_clock::duration  duration) {\n    co_await SleepAwaiter(std::chrono::system_clock::now() + duration);\n}\n\nusing namespace std::chrono;\n\nTask<int> taskFun01() {\n    std::cout << "hello1\u5f00\u59cb\u77611\u79d2\\n";\n    co_await sleep_for(1s); // 1s \u7b49\u4ef7\u4e8e std::chrono::seconds(1);\n    std::cout << "hello1\u7761\u9192\u4e86\\n";\n    std::cout << "hello1\u7ee7\u7eed\u77611\u79d2\\n";\n    co_await sleep_for(1s); // 1s \u7b49\u4ef7\u4e8e std::chrono::seconds(1);\n    std::cout << "hello1\u7761\u9192\u4e86\\n";\n    co_return 1;\n}\n\nTask<double> taskFun02() {\n    std::cout << "hello2\u5f00\u59cb\u77612\u79d2\\n";\n    co_await sleep_for(2s); // 1s \u7b49\u4ef7\u4e8e std::chrono::seconds(1);\n    std::cout << "hello2\u7761\u9192\u4e86\\n";\n    co_return 11.4514;\n}\n\nint main() {\n    /**\n     * @brief \u8ba1\u5212: \u5236\u4f5c\u4e00\u4e2a\u534f\u7a0b\u5b9a\u65f6\u5668\n     *        \u529f\u80fd: \u6bd4\u5982\u6682\u505c 1s \u548c 2s, \u6700\u7ec8\u53ea\u4f1a\u6682\u505c min(1s, 2s)\n     *        \u76ee\u7684: \u6df1\u5165\u7406\u89e3\u534f\u7a0b\n     */\n    auto task_01 = taskFun01();\n    auto task_02 = taskFun02();\n    Loop::getLoop().addTask(task_01);\n    Loop::getLoop().addTask(task_02);\n    Loop::getLoop().runAll();\n    std::cout << "\u770b\u770b01: " << task_01._coroutine.promise().result() << \'\\n\';\n    std::cout << "\u770b\u770b02: " << task_02._coroutine.promise().result() << \'\\n\';\n    return 0;\n}\n'})})]})}function u(n={}){const{wrapper:e}={...(0,s.R)(),...n.components};return e?(0,r.jsx)(e,{...n,children:(0,r.jsx)(c,{...n})}):c(n)}},67024:(n,e,t)=>{t.d(e,{A:()=>o});const o=t.p+"assets/images/Clip_2024-08-02_21-29-39-f67b5b98e5714458933bbc05fb316242.png"},67690:(n,e,t)=>{t.d(e,{A:()=>o});const o=t.p+"assets/images/Clip_2024-08-02_21-33-45-f8984a3b0f812f714abaddc6f7e2d581.png"},73467:(n,e,t)=>{t.d(e,{A:()=>o});const o=t.p+"assets/images/Clip_2024-08-02_21-28-57-0bd4dc26c42b9b5c29a3c7e95b651fd0.png"}}]);