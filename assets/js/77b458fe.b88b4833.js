"use strict";(self.webpackChunkhx_loli=self.webpackChunkhx_loli||[]).push([[19671],{28453:(n,e,t)=>{t.d(e,{R:()=>s,x:()=>o});var r=t(96540);const i={},a=r.createContext(i);function s(n){const e=r.useContext(a);return r.useMemo((function(){return"function"==typeof n?n(e):{...e,...n}}),[e,n])}function o(n){let e;return e=n.disableParentContext?"function"==typeof n.components?n.components(i):n.components||i:s(n.components),r.createElement(a.Provider,{value:e},n.children)}},74224:(n,e,t)=>{t.r(e),t.d(e,{assets:()=>c,contentTitle:()=>o,default:()=>d,frontMatter:()=>s,metadata:()=>r,toc:()=>l});const r=JSON.parse('{"id":"\u7a0b\u5e8f\u8bed\u8a00/Java/Java\u57fa\u7840/\u7f51\u7edc\u7f16\u7a0b/\u7ec3\u4e60/index","title":"\u7ec3\u4e60","description":"\u4f7f\u7528\u7f51\u7edc\u901a\u4fe1\u5b8c\u6210\u6ce8\u518c\u548c\u767b\u5f55\u529f\u80fd\u3002\u8981\u6c42\u6ce8\u518c\u7684\u7528\u6237\u4fe1\u606f\u5fc5\u987b\u8fdb\u884c\u5b58\u6863\uff0c\u767b\u5f55\u65f6\u9700\u8981\u4ece\u5b58\u6863\u7684\u6570\u636e\u68c0\u6d4b\u662f\u5426\u80fd\u591f\u767b\u5f55\u3002","source":"@site/docs/002-\u7a0b\u5e8f\u8bed\u8a00/002-Java/002-Java\u57fa\u7840/014-\u7f51\u7edc\u7f16\u7a0b/004-\u7ec3\u4e60/index.md","sourceDirName":"002-\u7a0b\u5e8f\u8bed\u8a00/002-Java/002-Java\u57fa\u7840/014-\u7f51\u7edc\u7f16\u7a0b/004-\u7ec3\u4e60","slug":"/\u7a0b\u5e8f\u8bed\u8a00/Java/Java\u57fa\u7840/\u7f51\u7edc\u7f16\u7a0b/\u7ec3\u4e60/","permalink":"/HXLoLi/docs/\u7a0b\u5e8f\u8bed\u8a00/Java/Java\u57fa\u7840/\u7f51\u7edc\u7f16\u7a0b/\u7ec3\u4e60/","draft":false,"unlisted":false,"editUrl":"https://github.com/HengXin666/HXLoLi/edit/main/docs/002-\u7a0b\u5e8f\u8bed\u8a00/002-Java/002-Java\u57fa\u7840/014-\u7f51\u7edc\u7f16\u7a0b/004-\u7ec3\u4e60/index.md","tags":[],"version":"current","lastUpdatedBy":"Heng_Xin_666","lastUpdatedAt":1745851959000,"frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"\u6570\u636e\u62a5Datagram","permalink":"/HXLoLi/docs/\u7a0b\u5e8f\u8bed\u8a00/Java/Java\u57fa\u7840/\u7f51\u7edc\u7f16\u7a0b/\u6570\u636e\u62a5Datagram/"},"next":{"title":"\u4ec0\u4e48\u662fXML","permalink":"/HXLoLi/docs/\u7a0b\u5e8f\u8bed\u8a00/Java/Java\u57fa\u7840/XML\u89e3\u6790/\u4ec0\u4e48\u662fXML/"}}');var i=t(74848),a=t(28453);const s={},o="\u7ec3\u4e60",c={},l=[{value:"\u5206\u6790",id:"\u5206\u6790",level:2},{value:"\u4ee3\u7801",id:"\u4ee3\u7801",level:2}];function p(n){const e={a:"a",code:"code",em:"em",h1:"h1",h2:"h2",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",...(0,a.R)(),...n.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(e.header,{children:(0,i.jsx)(e.h1,{id:"\u7ec3\u4e60",children:"\u7ec3\u4e60"})}),"\n",(0,i.jsx)(e.p,{children:"\u4f7f\u7528\u7f51\u7edc\u901a\u4fe1\u5b8c\u6210\u6ce8\u518c\u548c\u767b\u5f55\u529f\u80fd\u3002\u8981\u6c42\u6ce8\u518c\u7684\u7528\u6237\u4fe1\u606f\u5fc5\u987b\u8fdb\u884c\u5b58\u6863\uff0c\u767b\u5f55\u65f6\u9700\u8981\u4ece\u5b58\u6863\u7684\u6570\u636e\u68c0\u6d4b\u662f\u5426\u80fd\u591f\u767b\u5f55\u3002"}),"\n",(0,i.jsx)(e.h2,{id:"\u5206\u6790",children:"\u5206\u6790"}),"\n",(0,i.jsxs)(e.ol,{children:["\n",(0,i.jsx)(e.li,{children:"\u4f7f\u7528TCP\u5b8c\u6210\uff0c\u56e0\u4e3aTCP\u662f\u53ef\u9760\u6027\u6570\u636e\u4f20\u8f93\uff0c\u53ef\u4ee5\u4fdd\u8bc1\u4fe1\u606f\u80fd\u591f\u88ab\u63a5\u6536"}),"\n",(0,i.jsx)(e.li,{children:"\u7528\u6237\u5c5e\u4e8e\u5ba2\u6237\u7aef\u64cd\u4f5c\uff0c\u670d\u52a1\u5668\u7aef\u9700\u8981\u533a\u5206\u7528\u6237\u7684\u884c\u4e3a"}),"\n",(0,i.jsx)(e.li,{children:"\u4e3a\u4e86\u533a\u5206\u5ba2\u6237\u7aef\u7684\u884c\u4e3a\uff0c\u9700\u8981\u8bbe\u8ba1\u4e00\u4e2a\u6d88\u606f\u7c7b\uff0c\u7136\u540e\u4f7f\u7528\u5e8f\u5217\u5316\u7684\u65b9\u5f0f\u6765\u8fdb\u884c\u4f20\u8f93"}),"\n",(0,i.jsx)(e.li,{children:"\u7528\u6237\u6ce8\u518c\u4fe1\u606f\u9700\u8981\u5b58\u6863\uff0c\u56e0\u6b64\u9700\u8981\u8bbe\u8ba1\u4e00\u4e2a\u7528\u6237\u7c7b\uff0c\u4e3a\u4e86\u65b9\u4fbf\u4f7f\u7528\uff0c\u4e5f\u53ef\u4ee5\u76f4\u63a5\u5c06\u4e00\u4e2a\u96c6\u5408\u4f7f\u7528\u5e8f\u5217\u5316\u7684\u65b9\u5f0f\u5b58\u50a8\u5728\u6587\u6863\u4e2d"}),"\n"]}),"\n",(0,i.jsx)(e.h2,{id:"\u4ee3\u7801",children:"\u4ee3\u7801"}),"\n",(0,i.jsx)(e.p,{children:"\u6ca1\u6709\u505a\u4efb\u4f55\u7684\u8f93\u5165\u9650\u5236\u5904\u7406! \u5f88\u5bb9\u6613\u6709\u516b\u560e!"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-java",children:'import java.io.*;\nimport java.net.ServerSocket;\nimport java.net.Socket;\nimport java.util.HashMap;\nimport java.util.Map;\nimport java.util.Scanner;\n\n// \u6570\u636e\u5e93\u7c7b, \u7528\u4e8e\u8bfb\u53d6\u8d26\u53f7\u7ec4\u548c\u5199\u5165\u8d26\u53f7\u7ec4\nclass DemoDB {\n    private static final File dbFile = new File("./dp.txt"); // \u6570\u636e\u5e93\u4f4d\u7f6e\n\n    // init\n    static {\n        // \u5982\u679c\u76ee\u5f55\u4e0d\u5b58\u5728\uff0c\u5219\u521b\u5efa\u76ee\u5f55\n        File parentDir = DemoDB.dbFile.getParentFile();\n        if (!parentDir.exists()) {\n            parentDir.mkdirs();\n        }\n\n        // \u4e0d\u5b58\u5728\u5219\u521b\u5efa\u6587\u4ef6\n        if (!DemoDB.dbFile.exists()) {\n            try {\n                DemoDB.dbFile.createNewFile();\n            } catch (IOException e) {\n                throw new RuntimeException(e);\n            }\n        }\n    }\n\n    // \u8bfb\u53d6\u6570\u636e\u5e93\u5185\u5bb9\n    public static HashMap<String, String> getDBData() {\n        // \u5b58\u653e\u6570\u636e\u683c\u5f0f: \u8d26\u53f7|\u5bc6\u7801\n        HashMap<String, String> map = new HashMap<>();\n        try (BufferedReader br = new BufferedReader(new FileReader(DemoDB.dbFile))) {\n            String str;\n            while ((str = br.readLine()) != null) {\n                String[] tmp = str.split("\\\\|");\n                map.put(tmp[0], tmp[1]);\n            }\n        } catch (IOException e) {\n            throw new RuntimeException(e);\n        }\n\n        return map;\n    }\n\n    // \u66f4\u65b0\u6570\u636e\u5e93\u5185\u5bb9\n    public static void updateDBData(HashMap<String, String> map) {\n        try (BufferedWriter bw = new BufferedWriter(new FileWriter(DemoDB.dbFile, false))) { // \u8986\u76d6\n            for (Map.Entry<String, String> entry : map.entrySet()) {\n                String s1 = entry.getKey();\n                String s2 = entry.getValue();\n                bw.write(s1 + "|" + s2);\n                bw.newLine();\n            }\n        } catch (IOException e) {\n            throw new RuntimeException(e);\n        }\n    }\n}\n\n/**\n * \u7f51\u7edc\u5de5\u5177\u7c7b: \u7528\u4e8e\u6536/\u53d1\u4fe1\u606f\n */\nclass DemoNetUtil {\n    public static String recv(Socket socket) throws IOException {\n        // \u8bfb\u53d6\u4f20\u8f93\u7684\u6d88\u606f\n        InputStream inputStream = socket.getInputStream();\n        InputStreamReader isr = new InputStreamReader(inputStream);\n        BufferedReader buffer = new BufferedReader(isr);\n\n        return buffer.readLine();\n    }\n\n    public static void send(Socket socket, String msg) throws IOException {\n        // \u83b7\u53d6socket\u7684\u8f93\u51fa\u901a\u9053\n        OutputStream outputStream = socket.getOutputStream();\n        OutputStreamWriter osw = new OutputStreamWriter(outputStream);\n        BufferedWriter bw = new BufferedWriter(osw);\n        bw.write(msg);\n        bw.flush(); // \u5f3a\u5236\u5c06\u7f13\u51b2\u533a\u4e2d\u7684\u6570\u636e\u5237\u65b0\u5230\u8f93\u51fa\u6d41\u4e2d, \u5373\u53d1\u9001\u5230\u5ba2\u6237\u7aef\n    }\n}\n\n/**\n * \u670d\u52a1\u7aef\n */\nclass DemoSerNet {\n    private ServerSocket serSocket;\n\n    DemoSerNet(int port) throws IOException {\n        this.serSocket = new ServerSocket(port);\n    }\n\n    /**\n     * \u670d\u52a1\u5668\u542f\u52a8\n     */\n    public void start() {\n        while (true) {\n            HashMap<String, String> dbData = DemoDB.getDBData();\n            try {\n                // \u963b\u585e, \u7b49\u5f85\u5ba2\u6237\u7aef\u8fde\u63a5\n                System.out.println("\u963b\u585e\u7b49\u5f85\u63a5\u6536");\n                Socket cli_socket = this.serSocket.accept();\n                System.out.println("\u6709\u4eba\u8fde\u63a5\u4e86!");\n                boolean tag = true;\n                /**\n                 * \u901a\u8baf\u6697\u53f7: \u7c7b\u578b#\u6b63\u6587\n                 * \u7c7b\u578b\u662f\u5355\u4e2a\u5b57\u7b26: [\u670d\u52a1\u7aef\u63a5\u6536]\n                 *              1 \u6ce8\u518c --\x3e 1#Heng_Xin|loli114514\n                 *              2 \u767b\u5f55 --\x3e 2#\u8d26\u53f7|\u5bc6\u7801\n                 *              3 \u7ec8\u6b62 --\x3e 3#\n                 *\n                 *              [\u5ba2\u6237\u7aef\u63a5\u6536]\n                 *              4 \u767b\u5f55\u6210\u529f --\x3e 4#\u5185\u5bb9\n                 *              5 \u767b\u5f55\u5931\u8d25 --\x3e 5#\u5185\u5bb9\n                 *              6 \u6ce8\u518c\u6210\u529f --\x3e 6#\u5185\u5bb9\n                 *              7 \u6ce8\u518c\u5931\u8d25 --\x3e 7#\u5185\u5bb9\n                 */\n                do {\n                    String recvStr = DemoNetUtil.recv(cli_socket);\n                    String[] data = recvStr.split("#");\n                    switch (data[0].charAt(0)) {\n                        case \'1\': {\n                            // \u6ce8\u518c\n                            String[] user = data[1].split("\\\\|");\n                            System.out.printf("\u6709\u4eba\u6ce8\u518c\u4e86\u8d26\u53f7[ %s ], \u5077\u5077\u544a\u8bc9\u4f60\u5bc6\u7801\u662f: { *%s* }\\n", user[0], user[1]);\n                            if (dbData.containsKey(user[0])) {\n                                // \u5b58\u5728\u91cd\u590d\u7684\u952e, \u7528\u6237\u540d\u5df2\u7ecf\u88ab\u5360\u7528\u4e86!\n                                String error = "[ERROR]: \u8fd9\u4e2a\u8d26\u53f7\u540d\u5df2\u7ecf\u5b58\u5728!";\n                                System.out.println(error);\n                                DemoNetUtil.send(cli_socket, "7#" + error + "\\n");\n                            } else {\n                                dbData.put(user[0], user[1]);\n                                DemoDB.updateDBData(dbData);\n                                String ok = "[INFO]: \u6ce8\u518c\u6210\u529f!";\n                                System.out.println(ok);\n                                DemoNetUtil.send(cli_socket, "6#" + ok + "\\n");\n                            }\n                            break;\n                        }\n                        case \'2\': {\n                            String[] user = data[1].split("\\\\|");\n                            System.out.printf("\u6709\u4eba\u5c1d\u8bd5\u767b\u5f55\u8d26\u53f7[ %s ], \u5077\u5077\u544a\u8bc9\u4f60\u5bc6\u7801\u662f: { *%s* }\\n", user[0], user[1]);\n                            if (dbData.containsKey(user[0]) && dbData.get(user[0]).equals(user[1])) {\n                                String ok = "[INFO]: \u767b\u5f55\u6210\u529f!";\n                                System.out.println(ok);\n                                DemoNetUtil.send(cli_socket, "4#" + ok + "\\n");\n                            } else {\n                                String error = "[ERROR]: \u8d26\u53f7\u6216\u5bc6\u7801\u9519\u8bef!";\n                                System.out.println(error);\n                                DemoNetUtil.send(cli_socket, "5#" + error + "\\n");\n                            }\n                            break;\n                        }\n                        case \'3\': {\n                            System.out.println("[INFO]: \u4e0b\u7ebf\u4e86\u4e00\u4e2a\u8001\u54e5~");\n                            tag = false;\n                            break;\n                        }\n                        default: {\n                            System.err.println("\u63a5\u6536\u5230\u9519\u8bef\u7684\u6697\u53f7!");\n                            break;\n                        }\n                    }\n                } while (tag);\n                cli_socket.close();\n            } catch (IOException e) {\n                throw new RuntimeException(e);\n            }\n        }\n    }\n}\n\nclass DemoCliNet {\n    private Socket socket;\n    private Scanner sc = new Scanner(System.in);\n\n    DemoCliNet(String host, int port) throws IOException {\n        this.socket = new Socket(host, port);\n    }\n\n    private String loing() {\n        String res;\n        System.out.print("\u8bf7\u8f93\u5165\u8d26\u53f7: ");\n        res = sc.next() + "|";\n        System.out.print("\u8bf7\u8f93\u5165\u5bc6\u7801: ");\n        res += sc.next();\n        return res;\n    }\n\n    public void stact() {\n        try {\n            boolean tag = true;\n            boolean state = false; // \u5f53\u524d\u72b6\u6001: \u662f\u5426\u767b\u5f55\n            ALL: do {\n                if (!state)\n                    System.out.println("{\u5f53\u524d\u72b6\u6001: \u672a\u767b\u5f55}\u8bf7\u8f93\u5165\u6570\u5b57: 1[\u6ce8\u518c], 2[\u767b\u5f55], 3[\u9000\u51fa]");\n                else\n                    System.out.println("{\u5f53\u524d\u72b6\u6001: \u5df2\u767b\u5f55}\u8bf7\u8f93\u5165\u6570\u5b57: 3[\u9000\u51fa]");\n                int choice = sc.nextInt();\n                switch (choice) {\n                    case 1: {\n                        // \u6ce8\u518c\n                        System.out.println("=== \u6ce8 \u518c ===");\n                        String data = this.loing();\n                        DemoNetUtil.send(this.socket, "1#" + data + "\\n");\n                        break;\n                    }\n                    case 2: {\n                        // \u767b\u5f55\n                        System.out.println("=== \u767b \u5f55 ===");\n                        String data = this.loing();\n                        DemoNetUtil.send(this.socket, "2#" + data + "\\n");\n                        break;\n                    }\n                    case 3: {\n                        DemoNetUtil.send(this.socket, "3#\u9000\u51fa" + "\\n");\n                        System.out.println("\u6211\u76f4\u63a5\u9000\u51fa!");\n                        break ALL;\n                    }\n                    default: {\n                        System.err.println("\u63a5\u6536\u5230\u9519\u8bef\u7684\u6697\u53f7!");\n                        break;\n                    }\n                }\n\n                String recv = DemoNetUtil.recv(this.socket);\n                String[] data = recv.split("#");\n                if (data.length >= 1)\n                    System.out.println(data[1]);\n                switch (data[0].charAt(0)) {\n                    case \'4\': { // \u767b\u5f55\u6210\u529f\n                        state = true;\n                        break;\n                    }\n                    case \'5\': { // \u767b\u5f55\u5931\u8d25\n                        break;\n                    }\n                    case \'6\': { // \u6ce8\u518c\u6210\u529f\n                        break;\n                    }\n                    case \'7\': { // \u6ce8\u518c\u5931\u8d25\n                        break;\n                    }\n                    default: {\n                        System.out.println("\u5185\u90e8\u9519\u8bef!");\n                        break;\n                    }\n                }\n            } while (tag);\n        } catch (IOException e) {\n            throw new RuntimeException(e);\n        }\n        finally {\n            try {\n                this.socket.close();\n                System.out.println("[info]: \u5ba2\u6237\u7aef\u5df2\u5173\u95ed!");\n            } catch (IOException e) {\n                throw new RuntimeException(e);\n            }\n        }\n    }\n}\n\n// \u5236\u4f5c\u4e00\u4e2a\u7f51\u7edc\u901a\u4fe1\u5b8c\u6210\u6ce8\u518c\u548c\u767b\u5f55\u529f\u80fd\u3002\u8981\u6c42\u6ce8\u518c\u7684\u7528\u6237\u4fe1\u606f\u5fc5\u987b\u8fdb\u884c\u5b58\u6863\uff0c\u767b\u5f55\u65f6\u9700\u8981\u4ece\u5b58\u6863\u7684\u6570\u636e\u68c0\u6d4b\u662f\u5426\u80fd\u591f\u767b\u5f55\u3002\n\npublic class Demo {\n    public static void main(String[] args) {\n        // \u670d\u52a1\u7aef\n        try {\n            DemoSerNet ser = new DemoSerNet(6666);\n            ser.start();\n        } catch (IOException e) {\n            throw new RuntimeException(e);\n        }\n    }\n}\n\nimport java.io.IOException;\n\npublic class DemoCliMain {\n    public static void main(String[] args) {\n        try {\n            DemoCliNet cli = new DemoCliNet("127.0.0.1", 6666);\n            cli.stact();\n        } catch (IOException e) {\n            throw new RuntimeException(e);\n        }\n    }\n}\n'})}),"\n",(0,i.jsxs)(e.p,{children:["\u8fd9\u91cc\u56de\u590d\u4e00\u4e0b[",(0,i.jsx)(e.a,{href:"/HXLoLi/docs/%E7%A8%8B%E5%BA%8F%E8%AF%AD%E8%A8%80/Java/Java%E5%9F%BA%E7%A1%80/%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/%E5%A5%97%E6%8E%A5%E5%AD%97Socket/",children:"\u5957\u63a5\u5b57Socket"}),"]\u4e2d",(0,i.jsx)(e.code,{children:"\u793a\u4f8b1"}),"\u7684\u516b\u560e(",(0,i.jsx)(e.em,{children:"BUG"}),")"]}),"\n",(0,i.jsxs)(e.p,{children:["\u4e3a\u4ec0\u4e48\u4e0d\u80fd\u63a5\u53d7, \u56e0\u4e3a",(0,i.jsx)(e.code,{children:".readLine()"}),"\u662f\u8bfb\u53d6\u4e00\u884c, \u5373\u9700\u8981",(0,i.jsx)(e.code,{children:"\\n"}),"\u6362\u884c\u7b26, \u5176\u6b21\u8fd8\u662f\u6ca1\u6709\u7ed3\u675f\u6807\u5fd7, \u56e0\u4e3a\u6ca1\u6709\u5b8c\u7684\u6982\u5ff5, \u4f46\u662f\u4f20\u8f93\u5b9e\u9645\u4e0a\u53ef\u4ee5\u770b\u6210\u662f\u4f20\u8f93\u4e00\u884c, \u6240\u4ee5\u8bfb\u53d6\u4e00\u6b21\u5373\u53ef, \u5982\u679c\u8fd8\u662f\u4f7f\u7528",(0,i.jsx)(e.code,{children:"while"}),"\u4f1a\u6ca1\u6709\u7ec8\u6b62!"]})]})}function d(n={}){const{wrapper:e}={...(0,a.R)(),...n.components};return e?(0,i.jsx)(e,{...n,children:(0,i.jsx)(p,{...n})}):p(n)}}}]);