"use strict";(self.webpackChunkhx_loli=self.webpackChunkhx_loli||[]).push([[26959],{21626:(n,e,t)=>{t.r(e),t.d(e,{assets:()=>p,contentTitle:()=>l,default:()=>c,frontMatter:()=>s,metadata:()=>i,toc:()=>r});const i=JSON.parse('{"id":"\u8ba1\u4f6c\u5e38\u8b58/\u6570\u636e\u7ed3\u6784\u4e0e\u7b97\u6cd5/\u3010\u6570\u636e\u7ed3\u6784\u3011\u7ebf\u6027\u8868/\u94fe\u5f0f\u5b58\u50a8\u7ed3\u6784\u4e36\u5355\u5411\u94fe\u8868/index","title":"\u94fe\u5f0f\u5b58\u50a8\u7ed3\u6784-\u5355\u5411\u94fe\u8868","description":"\u4ee3\u7801","source":"@site/docs/001-\u8ba1\u4f6c\u5e38\u8b58/001-\u6570\u636e\u7ed3\u6784\u4e0e\u7b97\u6cd5/003-\u3010\u6570\u636e\u7ed3\u6784\u3011\u7ebf\u6027\u8868/004-\u94fe\u5f0f\u5b58\u50a8\u7ed3\u6784\u4e36\u5355\u5411\u94fe\u8868/index.md","sourceDirName":"001-\u8ba1\u4f6c\u5e38\u8b58/001-\u6570\u636e\u7ed3\u6784\u4e0e\u7b97\u6cd5/003-\u3010\u6570\u636e\u7ed3\u6784\u3011\u7ebf\u6027\u8868/004-\u94fe\u5f0f\u5b58\u50a8\u7ed3\u6784\u4e36\u5355\u5411\u94fe\u8868","slug":"/\u8ba1\u4f6c\u5e38\u8b58/\u6570\u636e\u7ed3\u6784\u4e0e\u7b97\u6cd5/\u3010\u6570\u636e\u7ed3\u6784\u3011\u7ebf\u6027\u8868/\u94fe\u5f0f\u5b58\u50a8\u7ed3\u6784\u4e36\u5355\u5411\u94fe\u8868/","permalink":"/HXLoLi/docs/\u8ba1\u4f6c\u5e38\u8b58/\u6570\u636e\u7ed3\u6784\u4e0e\u7b97\u6cd5/\u3010\u6570\u636e\u7ed3\u6784\u3011\u7ebf\u6027\u8868/\u94fe\u5f0f\u5b58\u50a8\u7ed3\u6784\u4e36\u5355\u5411\u94fe\u8868/","draft":false,"unlisted":false,"editUrl":"https://github.com/HengXin666/HXLoLi/edit/main/docs/001-\u8ba1\u4f6c\u5e38\u8b58/001-\u6570\u636e\u7ed3\u6784\u4e0e\u7b97\u6cd5/003-\u3010\u6570\u636e\u7ed3\u6784\u3011\u7ebf\u6027\u8868/004-\u94fe\u5f0f\u5b58\u50a8\u7ed3\u6784\u4e36\u5355\u5411\u94fe\u8868/index.md","tags":[],"version":"current","lastUpdatedBy":"Heng_Xin_666","lastUpdatedAt":1745851959000,"frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"\u987a\u5e8f\u5b58\u50a8\u7ed3\u6784\u4e36\u9759\u6001\u94fe\u8868","permalink":"/HXLoLi/docs/\u8ba1\u4f6c\u5e38\u8b58/\u6570\u636e\u7ed3\u6784\u4e0e\u7b97\u6cd5/\u3010\u6570\u636e\u7ed3\u6784\u3011\u7ebf\u6027\u8868/\u987a\u5e8f\u5b58\u50a8\u7ed3\u6784\u4e36\u9759\u6001\u94fe\u8868/"},"next":{"title":"\u94fe\u5f0f\u5b58\u50a8\u7ed3\u6784\u4e36\u5faa\u73af\u94fe\u8868","permalink":"/HXLoLi/docs/\u8ba1\u4f6c\u5e38\u8b58/\u6570\u636e\u7ed3\u6784\u4e0e\u7b97\u6cd5/\u3010\u6570\u636e\u7ed3\u6784\u3011\u7ebf\u6027\u8868/\u94fe\u5f0f\u5b58\u50a8\u7ed3\u6784\u4e36\u5faa\u73af\u94fe\u8868/"}}');var o=t(74848),L=t(28453);const s={},l="\u94fe\u5f0f\u5b58\u50a8\u7ed3\u6784-\u5355\u5411\u94fe\u8868",p={},r=[{value:"\u4ee3\u7801",id:"\u4ee3\u7801",level:2}];function d(n){const e={code:"code",h1:"h1",h2:"h2",header:"header",p:"p",pre:"pre",...(0,L.R)(),...n.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(e.header,{children:(0,o.jsx)(e.h1,{id:"\u94fe\u5f0f\u5b58\u50a8\u7ed3\u6784-\u5355\u5411\u94fe\u8868",children:"\u94fe\u5f0f\u5b58\u50a8\u7ed3\u6784-\u5355\u5411\u94fe\u8868"})}),"\n",(0,o.jsx)(e.h2,{id:"\u4ee3\u7801",children:"\u4ee3\u7801"}),"\n",(0,o.jsx)(e.p,{children:"// wdf, \u4e4b\u524d\u6211\u8fd9\u4e48\u95f2\u7684\u5417? \u8fd8\u5199\u4e2a\u5185\u5b58\u6c60...(\u867d\u7136\u4e5f\u4e0d\u96be)"}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-C",children:'#include <stdio.h>\n#include <stdlib.h>\n\n#define MAXPOOL 1024\n#define OK 1    // \u7a0b\u5e8f\u6b63\u5e38\u8fd0\u884c\n#define ERROR 0 // \u7a0b\u5e8f\u8fd0\u884c\u62a5\u9519\n#define TRUE 1  //\n#define FALSE 0 //\n\n// --- \u7ebf\u6027\u8868 \u5c01\u88c5 --- <\u94fe\u8868>\ntypedef int ElemType;\ntypedef struct Nobe{\n    ElemType data;\n    struct Nobe* next;\n} Nobe;\ntypedef Nobe* LinkList;\n\n// --- \u5185\u5b58\u6c60 ---\nLinkList pool = NULL;\nint pool_num = 0;\n\nint getElem(LinkList L, int i, int *e);         // \u5c06\u7ebf\u6027\u8868L\u7b2ci\u4e2a\u5143\u7d20\u8fd4\u56de\u7ed9e\nint listEmpty(LinkList L);                      // \u5224\u65ad\u662f\u5426\u4e3a\u7a7a\u8868 1\u662f0\u5426\nvoid clearList(LinkList *L);                    // \u5c06\u7ebf\u6027\u8868\u6e05\u7a7a\nint locateElem(LinkList L, int e);              // \u67e5\u627e\u7ebf\u6027\u8868L\u4e2d\u662f\u5426\u6709\u503c\u4e3ae\u7684\u5143\u7d20, \u6709\u5219\u8fd4\u56de\u5176\u5728\u8868\u4e2d\u7684\u5e8f\u53f7, \u54260\nint listInsert(LinkList *L, int i, int e);      // \u5728\u7ebf\u6027\u8868L\u4e2d\u7b2ci\u4e2a\u4f4d\u7f6e\u63d2\u5165\u65b0\u5143\u7d20e\nint listDelete(LinkList *L, int i, int *e);     // \u5220\u9664\u7ebf\u6027\u8868L\u4e2d\u7b2ci\u4e2a\u4f4d\u7f6e\u7684\u5143\u7d20, \u5e76\u8fd4\u56de\u5176\u503c\u7ed9e\n\nint listHAdd(LinkList *L, int e);               // \u5934\u63d2\u5143\u7d20\nint listAdd(LinkList *L, int e);                // \u5728\u7ebf\u6027\u8868\u5c3e\u90e8\u6dfb\u52a0\u5143\u7d20\nint listPrint(LinkList L);                      // \u6253\u5370\u5355\u94fe\u8868\nint listLength(LinkList L);                     // \u8fd4\u56de\u7ebf\u6027\u8868\u7684\u957f\u5ea6\n\nint getElem(LinkList L, int i, int *e)\n{\n    // \u5c06\u7ebf\u6027\u8868L\u7b2ci\u4e2a\u5143\u7d20\u8fd4\u56de\u7ed9e\n    if (i < 1)\n    {\n        return ERROR;\n    }\n\n    for (int j = 0; j < i; j++)\n    {\n        if (L != NULL)\n        {\n            L = L->next;\n        }\n        else\n        {\n            return ERROR;\n        }\n    }\n\n    *e = L->data;\n    return OK;\n}\n\nint listHAdd(LinkList *L, int e)\n{\n    // \u5934\u63d2\u6cd5\u6dfb\u52a0\u5143\u7d20\n    Nobe *p;\n    if (pool_num == 0)\n    {\n        p = (Nobe *)malloc(sizeof(Nobe));\n        if (p == NULL)\n        {\n            return ERROR;\n        }\n    }\n    else\n    {   \n        p = pool;\n        pool = pool->next;\n        pool_num--;\n    }\n\n    p->data = e;\n\n    p->next = *L;\n    *L = p;\n    return OK;\n}\n\nint listAdd(LinkList *L, int e)\n{   \n    // \u6dfb\u52a0\u4e00\u4e2a\u5143\u7d20(\u5c3e\u63d2\u6cd5) <\u5305\u542b\u521d\u59cb\u5316?>\n    Nobe *p;\n    Nobe *cache = *L;\n\n    if (pool_num == 0)\n    {\n        p = (Nobe *)malloc(sizeof(Nobe));\n        if (p == NULL)\n        {\n            return ERROR;\n        }\n    }\n    else\n    {   \n        p = pool;\n        pool = pool->next;\n        pool_num--;\n    }\n    p->data = e;\n\n    if (*L == NULL)\n    {\n        p->next = *L;\n        *L = p;\n    }\n    else\n    {\n        while (cache->next != NULL)\n        {\n            cache = cache->next;\n        }\n        cache->next = p;\n        p->next = NULL;\n    }\n    return OK;\n}\n\nint listDelete(LinkList *L, int i, int *e)\n{\n    LinkList p = *L;\n    LinkList cache = NULL;\n    if (i < 1)\n    {\n        return ERROR;\n    }\n\n    for (int j = 1; j < i; j++)\n    {\n        cache = p;\n        p = p->next;\n    }\n\n    if (p)\n    {\n        *e = p->data;\n        if (i == 1)\n        {\n            *L = p->next;\n            if (pool_num < MAXPOOL)\n            {\n                if (pool_num == 0)\n                {\n                    p->next = NULL;\n                }\n                else\n                {\n                    p->next = pool->next;\n                }\n                pool = p;\n                pool_num++;\n            }\n            else\n            {\n                free(p);\n            }\n        }\n        else\n        {\n            cache->next = p->next;\n            if (pool_num < MAXPOOL)\n            {   \n                if (pool_num == 0)\n                {\n                    p->next = NULL;\n                }\n                else\n                {\n                    p->next = pool->next;\n                }\n                pool = p;\n                pool_num++;\n            }\n            else\n            {\n                free(p);\n            }\n        }\n        return OK;\n    }\n    return ERROR;\n}\n\nint listPrint(LinkList L)\n{   \n    int i = 1;\n    while (L != NULL)\n    {\n        printf("%d: %d\\n", i++, L->data);\n        L = L->next;\n    }\n    return OK;\n}\n\nint main(void)\n{\n    // \u7ebf\u6027\u8868\u7684\u5355\u94fe\u8868\u7248\u672c --- \u4e0b\u9762\u662f\u6d4b\u8bd5\u4ee3\u7801 ---\n    // \u5934\u6307\u9488 \u4e0e \u5934\u8282\u70b9(\u672c\u9879\u76ee\u65e0\u8bbe\u8ba1\u8fd9\u4e2a) \u4e0e \u7b2c\u4e00\u4e2a\u8282\u70b9 (\u7b14\u8bb0\u89c1)\n    LinkList hp = NULL;\n    int e;\n\n    listAdd(&hp, 1);\n    listAdd(&hp, 2);\n    listAdd(&hp, 3);\n    listDelete(&hp, 1, &e);\n    listHAdd(&hp, 999);\n    printf("\u5220\u9664\u7684p.data == %d\\n", e);\n    listPrint(hp);\n\n    return 0;\n}\n'})})]})}function c(n={}){const{wrapper:e}={...(0,L.R)(),...n.components};return e?(0,o.jsx)(e,{...n,children:(0,o.jsx)(d,{...n})}):d(n)}},28453:(n,e,t)=>{t.d(e,{R:()=>s,x:()=>l});var i=t(96540);const o={},L=i.createContext(o);function s(n){const e=i.useContext(L);return i.useMemo((function(){return"function"==typeof n?n(e):{...e,...n}}),[e,n])}function l(n){let e;return e=n.disableParentContext?"function"==typeof n.components?n.components(o):n.components||o:s(n.components),i.createElement(L.Provider,{value:e},n.children)}}}]);