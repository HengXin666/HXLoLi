"use strict";(self.webpackChunkhx_loli=self.webpackChunkhx_loli||[]).push([[37114],{28453:(e,n,r)=>{r.d(n,{R:()=>d,x:()=>p});var t=r(96540);const o={},i=t.createContext(o);function d(e){const n=t.useContext(i);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function p(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:d(e.components),t.createElement(i.Provider,{value:n},e.children)}},49606:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>s,contentTitle:()=>p,default:()=>k,frontMatter:()=>d,metadata:()=>t,toc:()=>B});const t=JSON.parse('{"id":"\u8ba1\u4f6c\u5e38\u8b58/\u6570\u636e\u7ed3\u6784\u4e0e\u7b97\u6cd5/\u3010\u6570\u636e\u7ed3\u6784\u3011\u9ad8\u9636\u641c\u7d22\u6811/B\u6811/B\u6811\u4ee3\u7801\u5b9e\u73b0/index","title":"B-\u6811\u4ee3\u7801\u5b9e\u73b0","description":"By 01","source":"@site/docs/001-\u8ba1\u4f6c\u5e38\u8b58/001-\u6570\u636e\u7ed3\u6784\u4e0e\u7b97\u6cd5/008-\u3010\u6570\u636e\u7ed3\u6784\u3011\u9ad8\u9636\u641c\u7d22\u6811/003-B\u6811/002-B\u6811\u4ee3\u7801\u5b9e\u73b0/index.md","sourceDirName":"001-\u8ba1\u4f6c\u5e38\u8b58/001-\u6570\u636e\u7ed3\u6784\u4e0e\u7b97\u6cd5/008-\u3010\u6570\u636e\u7ed3\u6784\u3011\u9ad8\u9636\u641c\u7d22\u6811/003-B\u6811/002-B\u6811\u4ee3\u7801\u5b9e\u73b0","slug":"/\u8ba1\u4f6c\u5e38\u8b58/\u6570\u636e\u7ed3\u6784\u4e0e\u7b97\u6cd5/\u3010\u6570\u636e\u7ed3\u6784\u3011\u9ad8\u9636\u641c\u7d22\u6811/B\u6811/B\u6811\u4ee3\u7801\u5b9e\u73b0/","permalink":"/HXLoLi/docs/\u8ba1\u4f6c\u5e38\u8b58/\u6570\u636e\u7ed3\u6784\u4e0e\u7b97\u6cd5/\u3010\u6570\u636e\u7ed3\u6784\u3011\u9ad8\u9636\u641c\u7d22\u6811/B\u6811/B\u6811\u4ee3\u7801\u5b9e\u73b0/","draft":false,"unlisted":false,"editUrl":"https://github.com/HengXin666/HXLoLi/edit/main/docs/001-\u8ba1\u4f6c\u5e38\u8b58/001-\u6570\u636e\u7ed3\u6784\u4e0e\u7b97\u6cd5/008-\u3010\u6570\u636e\u7ed3\u6784\u3011\u9ad8\u9636\u641c\u7d22\u6811/003-B\u6811/002-B\u6811\u4ee3\u7801\u5b9e\u73b0/index.md","tags":[],"version":"current","lastUpdatedBy":"Heng_Xin_666","lastUpdatedAt":1745851959000,"frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"B\u6811\u4e36","permalink":"/HXLoLi/docs/\u8ba1\u4f6c\u5e38\u8b58/\u6570\u636e\u7ed3\u6784\u4e0e\u7b97\u6cd5/\u3010\u6570\u636e\u7ed3\u6784\u3011\u9ad8\u9636\u641c\u7d22\u6811/B\u6811/B\u6811\u4e36/"},"next":{"title":"B+\u6811\u4e36","permalink":"/HXLoLi/docs/\u8ba1\u4f6c\u5e38\u8b58/\u6570\u636e\u7ed3\u6784\u4e0e\u7b97\u6cd5/\u3010\u6570\u636e\u7ed3\u6784\u3011\u9ad8\u9636\u641c\u7d22\u6811/B+\u6811/B+\u6811\u4e36/"}}');var o=r(74848),i=r(28453);const d={},p="B-\u6811\u4ee3\u7801\u5b9e\u73b0",s={},B=[{value:"By 01",id:"by-01",level:2},{value:"\u5934\u6587\u4ef6",id:"\u5934\u6587\u4ef6",level:3},{value:".c",id:"c",level:3},{value:"main.c",id:"mainc",level:3}];function a(e){const n={code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",pre:"pre",...(0,i.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(n.header,{children:(0,o.jsx)(n.h1,{id:"b-\u6811\u4ee3\u7801\u5b9e\u73b0",children:"B-\u6811\u4ee3\u7801\u5b9e\u73b0"})}),"\n",(0,o.jsx)(n.h2,{id:"by-01",children:"By 01"}),"\n",(0,o.jsx)(n.h3,{id:"\u5934\u6587\u4ef6",children:"\u5934\u6587\u4ef6"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-C",children:"#ifndef DISK_BTREE_H\n#define DISK_BTREE_H\n/* B\u6811\u7684\u9636\u662fMaxOrder\uff083\uff09\uff0c\u8bf4\u660e\u6700\u5927\u67093\u68f5\u5b50\u6811\uff0c\u90a3\u4e48\u8282\u70b9\u6700\u5927\u952e\u503c\u4e3aMaxOrder-1\uff082\uff09\n * \u5728\u63d2\u5165\u8282\u70b9\u65f6\uff0c\u5f53\u952e\u503c\u6570\u91cf\u4e3a3\u65f6\uff0c\u8fdb\u884c\u5206\u79bb\uff0c\u7533\u8bf7MaxOrder+1\uff0c\u4ece1\u7d22\u5f15\u5f00\u59cb\u586b\u5165\u952e\u503c\n * \u591a\u7533\u8bf7\u7684k3\uff0c\u8003\u8651\u5230\u8282\u70b9\u8981\u5b58\u653e3\u65f6\uff0c\u89e6\u53d1\u5206\u79bb\u4e8b\u4ef6\n * | k0 | k1 | k2 | k3 |    k0\u65e0\u6548    k3\u9632\u8d8a\u754c\n * | p0 | p1 | p2 | p3 |\n * p0 < k1   k1 < p1 < k2  p2 > k2\uff0cp3\u662f\u4e0d\u4f1a\u8bbf\u95ee\u7684\n * */\n#define MaxOrder 3          // B\u6811\u7684\u9636\ntypedef int KeyType;        // B\u6811\u8282\u70b9\u952e\u503c\u7c7b\u578b\n\n// B\u6811\u7684\u8282\u70b9\u7ed3\u6784\ntypedef struct BTNode {\n    KeyType key[MaxOrder + 1];          // [1 ... MaxOrder-1]\n    struct BTNode *ptr[MaxOrder + 1];   // 0\u5f00\u59cb\u5b58\u5165\u5173\u7cfb\u7d22\u5f15\n    struct BTNode *parent;              // \u6307\u5411\u7236\u8282\u70b9\n    int keyNum;                         // \u8be5\u8282\u70b9\u7684\u952e\u503c\u6570\uff0c\u6700\u591aMaxOrder-1\n}BTNode;\n\n// B\u6811\u7684\u7ed3\u6784\u5c01\u88c5\ntypedef struct {\n    BTNode *root;           // B\u6811\u7684\u6839\u8282\u70b9\n    int count;              // B\u6811\u7684\u8282\u70b9\u6570\u91cf\n} DiskBTree;\n/* B\u6811\u67e5\u627e\u7684\u7ed3\u679c\u96c6\uff0c\u5305\u542b\u67e5\u627e\u6210\u529f\u548c\u5931\u8d25\n * ptr : \u67e5\u627e\u6210\u529f\uff0c\u6807\u8bb0\u4e3a\u952e\u503c\u6240\u5728\u7684\u8282\u70b9\u5730\u5740\n *       \u67e5\u627e\u5931\u8d25\uff0c\u6807\u8bb0\u5f85\u63d2\u5165\u8282\u70b9\u7684\u7236\u8282\u70b9\u5730\u5740\n * pos : \u67e5\u627e\u6210\u529f\uff0c\u6807\u8bb0\u4e3a\u952e\u503c\u6240\u5728\u7684\u8282\u70b9\u7684\u4f4d\u5e8f\u7d22\u5f15\u53f7\n *       \u67e5\u627e\u5931\u8d25\uff0c\u6807\u8bb0\u5f85\u63d2\u5165\u8282\u70b9\u7684\u7236\u8282\u70b9\u7684\u4f4d\u5e8f\u7d22\u5f15\u53f7\n * tag : 1\u8868\u793a\u67e5\u627e\u6210\u529f\uff0c0\u8868\u793a\u67e5\u627e\u5931\u8d25\n * */\ntypedef struct {\n    BTNode *ptr;\n    int pos;\n    int tag;\n} Result;\n\nDiskBTree *initDiskBTree();             // \u521d\u59cb\u5316B\u6811\nvoid releaseDiskBTree(DiskBTree *tree); // \u91ca\u653eB\u6811\n// \u67e5\u627eB\u6811\u4e2dkey\u7684\u4f4d\u7f6e\uff0c\u5206\u67e5\u627e\u6210\u529f\u548c\u5931\u8d25\uff0c\u5206\u522b\u66f4\u65b0res\nvoid searchBTree(DiskBTree *tree, KeyType key, Result *res);\n// \u5c06key\u503c\u63d2\u5165\u5230B\u6811\nvoid insertKey(DiskBTree *tree, KeyType key);\n// \u5c06key\u503c\u4eceB\u6811\u5220\u9664\nvoid deleteKey(DiskBTree *tree, KeyType key);\n// \u6309\u5c42\u6b21\u6253\u5370B\u6811\nvoid PrintBTree(const BTNode *t, int tab);\n// \u6309\u5173\u952e\u5b57\u5927\u5c0f\u5347\u5e8f\u8f93\u51faB-\u6811\u5173\u952e\u5b57\nvoid orderTravelBTree(DiskBTree *tree);\n\n#endif\n"})}),"\n",(0,o.jsx)(n.h3,{id:"c",children:".c"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-C",children:'#include <stdlib.h>\n#include <stdio.h>\n#include <string.h>\n#include "diskBTree.h"\n\nstatic void restoreBTree(DiskBTree *tree, BTNode *node);\n\n/* \u4ece\u8282\u70b9\u4e2d\uff0c\u641c\u7d22\u7b26\u5408\u6761\u4ef6\u7684key\u7684\u4f4d\u5e8f */\nstatic int searchNodePos(BTNode *node, KeyType key) {\n    int i = 1;      // \u4ece1\u53f7\u7d22\u5f15\u5f00\u59cb\u641c\u7d22\n    // keyNum\u63cf\u8ff0\u6811\u9636-1\u7684\u5927\u5c0f\uff0c\u5f53\u8be5\u8282\u70b9\u627e\u4e0d\u5230\u6ee1\u8db3\u8981\u6c42\u7684\uff0ci\u5c31\u662f\u6700\u540e\u7684\u5360\u4f4d\u7d22\u5f15\n    while (i <= node->keyNum && key > node->key[i]) {\n        i++;\n    }\n    return i;\n}\n\n// ******************** B-Tree\u7684\u63d2\u5165\u64cd\u4f5c *************************** //\n/* \u5c06node\u8282\u70b9\u5206\u88c2\u6210\u4e24\u4e2a\u8282\u70b9\uff0c\u524d\u4e00\u534a\u4fdd\u7559\u5728\u539f\u8282\u70b9\uff0c\u540e\u4e00\u534a\u79fb\u52a8\u5230other\u8282\u70b9\n * 1. \u7533\u8bf7\u65b0\u8282\u70b9\uff0c\u5c06\u540e\u534a\u90e8\u5206\u4fe1\u606f\u62f7\u8d1d\u5230\u65b0\u8282\u70b9\n *      1.1 \u4e2d\u70b9\u540e\u4e00\u4e2a\u5143\u7d20\u5f00\u59cb\u62f7\u8d1d\u5230\u65b0\u8282\u70b9\uff0c\u4e2d\u70b9\u662f\u4e3a\u4e86\u4e0a\u79fb\u4f7f\u7528\n *      1.2 \u4e2d\u70b9\u7684p\u662f\u65b0\u5143\u7d20\u76840\u4f4d\u7f6e\uff0c\u4ece\u4e2d\u70b9\u540e\u4e00\u4e2a\u5143\u7d20\uff0c\u9010\u4e2a\u66f4\u65b0px\n *      1.3 \u66f4\u65b0\u65b0\u8282\u70b9\u7684\u5143\u7d20\u4e2a\u6570\uff0c\u5176\u5b9e\u662f\u56fa\u5b9a\u6570\u5b57\uff0c\u9636\u6570 - \u4e2d\u70b9\u7d22\u5f15\u503c\n *      1.4 \u66f4\u65b0\u65b0\u8282\u70b9\u7684\u7236\u4fe1\u606f\uff0c\u662f\u539fnode\u8282\u70b9\u7684\u7236\u4eb2\n * 2. \u65b0\u7533\u8bf7\u8282\u70b9\u7684\u5b50\u8282\u70b9\u7684\u7236\u4fe1\u606f\u4e5f\u8981\u66f4\u65b0\n *      2.1 \u4ecep0\u5f00\u59cb\uff0c\u66f4\u65b0\u5230\u5143\u7d20\u4e2a\u6570\n * \u6b64\u65f6\u8282\u70b9\u7684keyNum\u6b63\u597d\u662fmaxOrder\uff0c\u800c\u4f20\u5165\u7684\u4e2d\u95f4\u7d22\u5f15\u503c\u4e5f\u662f\u81ea\u7136\u5e8f\n * \u90a3\u4e48 n - s \u8868\u793a\u7684\u5c31\u662f\u4eces+1\u5230\u6700\u540e\u7684\u5143\u7d20\u4e2a\u6570\n * */\nstatic void split(BTNode **node, int s, BTNode **other) {\n    int i = s + 1;      // \u8001\u8282\u70b9\u642c\u79fb\u4f4d\u7f6e\n    int j = 1;          // \u65b0\u8282\u70b9\u5f85\u653e\u5165\u4f4d\u7f6e\n    int n = (*node)->keyNum;\n    BTNode *splitNode = (BTNode *) malloc(sizeof(BTNode));\n    memset(splitNode, 0, sizeof(BTNode));\n    *other = splitNode;\n    splitNode->ptr[0] = (*node)->ptr[s];\n    for (; i <= n; ++i, ++j) {\n        splitNode->key[j] = (*node)->key[i];\n        splitNode->ptr[j] = (*node)->ptr[i];\n        (*node)->key[i] = 0;\n        (*node)->ptr[i] = 0;\n    }\n    // splitNode->keyNum = n - s;          // n\u80af\u5b9a\u662f\u6700\u5927\u9636\u6570\uff0c\u4e0d\u7136\u4e0d\u4f1asplit\n    splitNode->keyNum = MaxOrder - s;\n    splitNode->parent = (*node)->parent;\n    for (i = 0; i <= n - s; ++i) {         // n-s\u7684\u7d22\u5f15\u662f\u6700\u540e\u4e00\u4e2a\u6709\u6548\u5143\u7d20\u7684\u7d22\u5f15\n        if (splitNode->ptr[i]) {\n            splitNode->ptr[i]->parent = splitNode;\n        }\n    }\n    (*node)->keyNum = s - 1;\n}\n\n/* \u521b\u5efa\u4e00\u4e2a\u6839\u8282\u70b9\uff0ckey\u8868\u793ak1\uff0c\u66f4\u65b02\u4e2a\u5b50\u8282\u70b9\u4fe1\u606f\uff0c\u540c\u65f6\u66f4\u65b0p0,p1\u7684\u7236\u8282\u70b9 */\nstatic BTNode *createRootNode(KeyType key, BTNode *p0, BTNode *p1) {\n    BTNode *node = (BTNode *) malloc(sizeof(BTNode));\n    memset(node, 0, sizeof(BTNode));\n    node->keyNum = 1;\n    node->key[1] = key;\n    node->ptr[0] = p0;\n    node->ptr[1] = p1;\n    if (p0) {\n        p0->parent = node;\n    }\n    if (p1) {\n        p1->parent = node;\n    }\n    node->parent = NULL;\n    return node;\n}\n\n/* \u4ece\u8282\u70b9node\u7684pos\u4f4d\u5e8f\u5904\uff0c\u63d2\u5165\u5173\u952e\u5b57key\uff0c\n * \u82e5\u662f\u4e0a\u79fb\u952e\uff0c\u66f4\u65b0\u6bd4key\u5927\u7684child\u5b50\u8282\u70b9\u7d22\u5f15\uff0c\u5373ptr[pos]\u5904\u66f4\u65b0\n * \u5728\u53f6\u5b50\u8282\u70b9\u63d2\u5165\uff0cchild\u76f4\u63a5\u4e3anull\n * */\nstatic void insertNode(BTNode *node, int pos, KeyType key, BTNode *child) {\n    // 1. \u4ecekey\u8868\u4e2d\u79fb\u52a8pos\u53capos\u540e\u7684\u5143\u7d20\uff0c\u66f4\u65b0pos\u4f4d\u7f6e\u7684\u503c\n    int i;\n    int n = node->keyNum;\n    for (i = n; i >= pos; --i) {\n        node->key[i + 1] = node->key[i];\n        node->ptr[i + 1] = node->ptr[i];\n    }\n    node->key[pos] = key;\n    node->ptr[pos] = child;\n    if (child) {\n        child->parent = node;\n    }\n    node->keyNum++;\n}\n\n/* \u5c06key\u63d2\u5165\u5230B\u6811\u4e2d\u7684node\u8282\u70b9\u7684pos\u4f4d\u5e8f\u5904\uff0c\u6839\u636eB\u6811\u89c4\u5219\u51b3\u5b9a\u662f\u5426\u5206\u79bb */\nstatic void insertBTree(DiskBTree *tree, KeyType key, BTNode *node, int pos) {\n    // \u5728\u63d2\u5165\u952e\u503c\u540e\uff0c\u53ef\u80fd\u6ee1\u8db3\u8981\u6c42\u53ef\u80fd\u4e0d\u6ee1\u8db3\u8981\u6c42\uff0c\u4e5f\u53ef\u80fd\u9700\u8981\u66f4\u65b0\u6839\u8282\u70b9\n    int finish = 0;\n    int needNewRoot = 0;\n    BTNode *child = NULL;\n    int mid;\n    KeyType x = key;\n\n    if (node) { // \u6709\u7236\u8282\u70b9\uff0c\u8981\u4e48\u76f4\u63a5\u63d2\u5165\u5728\u7236\u8282\u70b9\uff0c\u8981\u4e48\u8fdb\u884c\u5206\u79bb\n        while (!finish && !needNewRoot) {\n            insertNode(node, pos, x, child);\n            if (node->keyNum < MaxOrder) {\n                finish = 1;\n            } else {        // \u5df2\u7ecf\u8d85\u8fc7\u6700\u5927\u6709\u6548\u4f4d\u7f6e\n                mid = (MaxOrder + 1) / 2;\n                split(&node, mid, &child);\n                x = node->key[mid];\n                if (node->parent) {\n                    node = node->parent;\n                    pos = searchNodePos(node, x);\n                } else {\n                    needNewRoot = 1;\n                }\n            }\n        }\n    } else {    // \u5f85\u63d2\u5165\u8282\u70b9\u7684\u7236\u8282\u70b9\u662f\u7a7a\uff0c\u8bf4\u660e\u4ea7\u751f\u4e00\u4e2a\u6839\u8282\u70b9\n        tree->root = createRootNode(key, NULL, NULL);\n        tree->count = 1;\n    }\n    if (needNewRoot) {\n        tree->root = createRootNode(x, node, child);\n    }\n}\n\nvoid insertKey(DiskBTree *tree, KeyType key) {\n    Result res;\n    // 1. \u67e5\u627ekey\u5728B\u6811\u7684\u5f85\u63d2\u5165\u4f4d\u7f6e\n    searchBTree(tree, key, &res);\n    if (res.tag == 1) {\n        printf("\u952e\u503c %d \u5df2\u7ecf\u5b58\u5728\u4e86!\\n", key);\n    } else {\n        insertBTree(tree, key, res.ptr, res.pos);\n        tree->count++;\n    }\n}\n\n// ******************** B-Tree\u7684\u5220\u9664\u64cd\u4f5c *************************** //\n/* \u5411\u5144\u5f1f\u501f\u5173\u952e\u5b57 */\nstatic void borrowFromBrother(BTNode *node, BTNode *leftBrother, BTNode *rightBrother, BTNode *parent, int pos) {\n    if (leftBrother && leftBrother->keyNum >= ((MaxOrder + 1) / 2)) {\n        // \u5de6\u5144\u5f1f\u6709\u5bcc\u4f59\u5173\u952e\u5b57\uff0c\u5411\u5de6\u5144\u5f1f\u501f\n        for (int j = node->keyNum + 1; j > 0; --j) {\n            // \u5173\u952e\u5b57\u4e0e\u6307\u9488\u540e\u79fb\uff0c\u817e\u51fa\u7b2c\u4e00\u4e2a\u4f4d\u7f6e\n            if (j > 1) {\n                node->key[j] = node->key[j - 1];\n            }\n            node->ptr[j] = node->ptr[j - 1];\n        }\n        node->ptr[0] = leftBrother->ptr[leftBrother->keyNum];\n        if (node->ptr[0]) {\n            node->ptr[0]->parent = node;\n        }\n        leftBrother->ptr[leftBrother->keyNum] = NULL;\n        node->key[1] = parent->key[pos];     // \u88ab\u5220\u8282\u70b9\u5b58\u7236\u8282\u70b9\u5173\u952e\u5b57\n        parent->key[pos] = leftBrother->key[leftBrother->keyNum];   // \u7236\u8282\u70b9\u7684key\u53d8\u4e3a\u88ab\u5220\u9664\u8282\u70b9\u5de6\u5144\u5f1f\u7684\u6700\u5927\u503c\n        leftBrother->keyNum--;\n        node->keyNum++;\n    } else if (rightBrother && rightBrother->keyNum >= ((MaxOrder + 1) / 2)) {\n        // \u53f3\u5144\u5f1f\u6709\u5bcc\u4f59\u5173\u952e\u5b57\n        node->key[node->keyNum + 1] = parent->key[pos + 1];\n        node->ptr[node->keyNum + 1] = rightBrother->ptr[0];\n        if (node->ptr[node->keyNum + 1]) {\n            node->ptr[node->keyNum + 1]->parent = node;\n        }\n        node->keyNum++;\n        parent->key[pos + 1] = rightBrother->key[1];\n        for (int j = 0; j < rightBrother->keyNum; ++j) {\n            if (j > 0) {\n                rightBrother->key[j] = rightBrother->key[j + 1];\n            }\n            rightBrother->ptr[j] = rightBrother->ptr[j + 1];\n\n        }\n        rightBrother->ptr[rightBrother->keyNum] = NULL;\n        rightBrother->keyNum--;\n    }\n}\n\n/* \u4e0e\u5de6\u5144\u5f1f\u5408\u5e76 */\nstatic void mergerWithLeftBrother(BTNode *leftBrother, BTNode *parent, BTNode *node, DiskBTree *tree, int pos) {\n    // \u4e0e\u5de6\u5144\u5f1f\u5408\u5e76\n    leftBrother->key[leftBrother->keyNum + 1] = parent->key[pos];   // \u4ece\u7236\u8282\u70b9\u62ff\u4e0b\u5206\u5272\u672c\u8282\u70b9\u4e0e\u5de6\u5144\u5f1f\u7684\u5173\u952e\u5b57\n    leftBrother->ptr[leftBrother->keyNum + 1] = node->ptr[0];\n    if (leftBrother->ptr[leftBrother->keyNum + 1]) {\n        // \u7ed9\u5de6\u5144\u5f1f\u7684\u8282\u70b9\uff0c\u5f53\u6b64\u7ed3\u70b9\u5b58\u5728\u65f6\u9700\u8981\u628a\u5176\u7236\u4eb2\u6307\u5411\u5de6\u8282\u70b9\n        leftBrother->ptr[leftBrother->keyNum + 1]->parent = leftBrother;\n    }\n    leftBrother->keyNum++;      // \u5de6\u5144\u5f1f\u5173\u952e\u5b57\u52a01\n    for (int i = 1; i <= node->keyNum; ++i) {\n        // \u628a\u672c\u8282\u70b9\u7684\u5173\u952e\u5b57\u548c\u5b50\u6811\u6307\u9488\u8d4b\u7ed9\u5de6\u5144\u5f1f\n        leftBrother->key[leftBrother->keyNum + i] = node->key[i];\n        leftBrother->ptr[leftBrother->keyNum + i] = node->ptr[i];\n        if (leftBrother->ptr[leftBrother->keyNum + i]) {\n            leftBrother->ptr[leftBrother->keyNum + i]->parent = leftBrother;\n        }\n    }\n    leftBrother->keyNum += node->keyNum;\n    parent->ptr[pos] = NULL;\n    free(node);\n    for (int j = pos; j < parent->keyNum; ++j) {    // \u5de6\u79fb\n        parent->key[j] = parent->key[j + 1];\n        parent->ptr[j] = parent->ptr[j + 1];\n    }\n    parent->ptr[parent->keyNum] = NULL;\n    parent->keyNum--;       // \u7236\u8282\u70b9\u5173\u952e\u5b57\u4e2a\u6570\u51cf1\n    if (tree->root == parent) {\n        // \u5982\u679c\u6b64\u65f6\u7236\u8282\u70b9\u4e3a\u6839\uff0c\u5219\u5f53\u7236\u8282\u70b9\u6ca1\u6709\u5173\u952e\u5b57\u65f6\u624d\u8c03\u6574\n        if (parent->keyNum == 0) {\n            for (int i = 0; i <= parent->keyNum + 1; ++i) {\n                if (parent->ptr[i]) {\n                    tree->root = parent->ptr[i];\n                    break;\n                }\n                tree->root->parent = NULL;\n            }\n        }\n    } else {\n        // \u5982\u679c\u7236\u8282\u70b9\u4e0d\u4e3a\u6839\uff0c\u5219\u9700\u8981\u5224\u65ad\u662f\u5426\u9700\u8981\u91cd\u65b0\u8c03\u6574\n        if (parent->keyNum < ((MaxOrder - 1) / 2)) {\n            restoreBTree(tree, parent);\n        }\n    }\n}\n\n/* \u4e0e\u53f3\u5144\u5f1f\u5408\u5e76 */\nstatic void mergerWithRightBrother(BTNode *rightBrother, BTNode *parent, BTNode *node, DiskBTree *tree, int pos) {\n    for (int i = rightBrother->keyNum; i > 0; --i) {\n        if (i > 0) {\n            rightBrother->key[i + 1 + node->keyNum] = rightBrother->key[i];\n        }\n        rightBrother->ptr[i + 1 + node->keyNum] = rightBrother->ptr[i];\n    }\n    rightBrother->key[node->keyNum + 1] = parent->key[pos + 1];     // \u628a\u7236\u8282\u70b9\u5206\u5272\u4e24\u4e2a\u672c\u5144\u5f1f\u548c\u53f3\u5144\u5f1f\u7684\u5173\u952e\u5b57\u62ff\u4e0b\u6765\u4f7f\u7528\n    for (int i = 0; i <= node->keyNum; ++i) {\n        // \u628a\u672c\u7ed3\u70b9\u7684\u5173\u952e\u5b57\u53ca\u5b50\u6811\u6307\u9488\u79fb\u52a8\u5230\u53f3\u5144\u5f1f\u4e2d\u53bb\n        if (i > 0) {\n            rightBrother->key[i] = node->key[i];\n        }\n        rightBrother->ptr[i] = node->ptr[i];\n        if (rightBrother->ptr[i]) {\n            rightBrother->ptr[i]->parent = rightBrother;        // \u7ed9\u53f3\u5144\u5f1f\u7684\u8282\u70b9\u9700\u8981\u628a\u5176\u7236\u8282\u70b9\u6307\u5411\u53f3\u5144\u5f1f\n        }\n    }\n    rightBrother->keyNum += (node->keyNum + 1);\n    parent->ptr[pos] = NULL;\n    free(node);\n    for (int i = pos; i < parent->keyNum; ++i) {\n        if (i > pos) {\n            parent->key[i] = parent->key[i + 1];\n        }\n        parent->ptr[i] = parent->ptr[i + 1];\n    }\n    if (parent->keyNum == 1) {\n        // \u5982\u679c\u7236\u7ed3\u70b9\u5728\u5173\u952e\u5b57\u51cf\u5c11\u4e4b\u524d\u53ea\u6709\u4e00\u4e2a\u7ed3\u70b9\uff0c\u90a3\u4e48\u9700\u8981\u628a\u7236\u7ed3\u70b9\u7684\u53f3\u5b69\u5b50\u8d4b\u503c\u7ed9\u5de6\u5b69\u5b50\n        parent->ptr[0] = parent->ptr[1];\n    }\n    parent->ptr[parent->keyNum] = NULL;\n    parent->keyNum--;           // \u7236\u8282\u70b9\u5173\u952e\u5b57\u6570\u51cf1\n    if (tree->root == parent) {\n        //\u5982\u679c\u6b64\u65f6\u7236\u7ed3\u70b9\u4e3a\u6839\uff0c\u5219\u5f53\u7236\u7ed3\u70b9\u6ca1\u6709\u5173\u952e\u5b57\u65f6\u624d\u8c03\u6574\n        if (parent->keyNum == 0) {\n            for (int i = 0; i <= parent->keyNum; ++i) {\n                if (parent->ptr[i]) {\n                    tree->root = parent->ptr[i];\n                    break;\n                }\n            }\n            tree->root->parent = NULL;\n        }\n    } else {\n        // \u5982\u679c\u7236\u7ed3\u70b9\u4e0d\u4e3a\u6839\uff0c\u5219\u9700\u8981\u5224\u65ad\u662f\u5426\u9700\u8981\u91cd\u65b0\u8c03\u6574\n        if (parent->keyNum < ((MaxOrder - 1) / 2)) {\n            restoreBTree(tree, parent);\n        }\n    }\n}\n\n/* \u8c03\u6574B\u6811\uff0cnode\u4e3a\u9700\u8c03\u6574\u7684\u8282\u70b9 */\nstatic void restoreBTree(DiskBTree *tree, BTNode *node) {\n    // \u5f85\u8c03\u6574\u8282\u70b9\u7684\u7236\u8282\u70b9\u3001\u5de6\u53f3\u5144\u5f1f\u8282\u70b9\n    BTNode *parent, *leftBrother, *rightBrother;\n    parent = node->parent;\n    if (parent) {\n        // \u5bfb\u627e\u5de6\u53f3\u5144\u5f1f\n        int i;\n        for (i = 0; i <= parent->keyNum; ++i) {\n            if (parent->ptr[i] == node) {\n                break;\n            }\n        }\n        if (i > 0) {\n            leftBrother = parent->ptr[i - 1];\n        } else {\n            leftBrother = NULL;\n        }\n        if (i < parent->keyNum) {\n            rightBrother = parent->ptr[i + 1];\n        } else {\n            rightBrother = NULL;\n        }\n        // \u5de6\u5144\u5f1f\u6216\u53f3\u5144\u5f1f\u6709\u5bcc\u4f59\u7684\u5173\u952e\u5b57\n        if ((leftBrother && leftBrother->keyNum >= (MaxOrder + 1) / 2) ||\n            (rightBrother && rightBrother->keyNum >= (MaxOrder + 1) / 2)) {\n            borrowFromBrother(node, leftBrother, rightBrother, parent, i);\n        } else {\n            // \u5de6\u53f3\u5144\u5f1f\u90fd\u6ca1\u6709\u5bcc\u4f59\u7684\u5173\u952e\u5b57\uff0c\u9700\u8981\u5408\u5e76\n            if (leftBrother) {\n                // \u4e0e\u5de6\u5144\u5f1f\u5408\u5e76\n                mergerWithLeftBrother(leftBrother, parent, node, tree, i);\n            } else if (rightBrother) {\n                mergerWithRightBrother(rightBrother, parent, node, tree, i);\n            } else {\n                // \u5f53\u5de6\u53f3\u5b50\u6811\u4e0d\u5b58\u5728\u65f6\uff0c\u6539\u53d8\u6839\u8282\u70b9\n                for (int j = 0; j < node->keyNum; ++j) {\n                    if (node->ptr[j]) {\n                        tree->root = node->ptr[j];\n                        break;\n                    }\n                }\n                tree->root->parent = NULL;\n            }\n        }\n    } else {\n        // \u6839\u8282\u70b9\uff0c\u53bb\u6389\u6839\u8282\u70b9\uff0c\u4f7f\u6811\u51cf\u4e00\u5c42\n        BTNode *a;\n        for (int j = 0; j <= node->keyNum; ++j) {\n            if (node->ptr[j]) {\n                a = node;\n                node = node->ptr[j];\n                a->ptr[j] = NULL;\n                free(a);\n                break;\n            }\n        }\n        tree->root = node;\n        tree->root->parent = NULL;\n    }\n}\n\n/* \u627e\u5230node\u540e\u7ee7\u8282\u70b9\u6700\u5c0f\u5173\u952e\u5b57\uff0c\u4ea4\u6362\u503c\u5e76\u66f4\u65b0\u5f85\u5220\u9664\u7684key\u4fe1\u606f */\nstatic void successor(BTNode **node, int pos) {\n    BTNode *leaf = *node;\n    if (leaf == NULL) {\n        return;\n    }\n    leaf = leaf->ptr[pos];\n    while (leaf->ptr[0]) {\n        leaf = leaf->ptr[0];\n    }\n    (*node)->key[pos] = leaf->key[1];\n    (*node) = leaf;\n}\n\n/* \u4ece\u8282\u70b9node\u7684pos\u4f4d\u5e8f\u4e2d\u79fb\u9664\u5173\u952e\u5b57key */\nstatic void removeNode(BTNode *node, int pos) {\n    for (int i = pos; i < node->keyNum; ++i) {\n        node->key[i] = node->key[i + 1];\n        node->ptr[i] = node->ptr[i + 1];\n    }\n    node->keyNum--;\n}\n\n/* \u4ecetree\u4e2d\u5220\u9664\u76ee\u6807\u5173\u952e\u5b57\u6240\u5728node\u8282\u70b9\u7684pos\u4f4d\u5e8f\u4e0a */\nstatic void deleteBTree(DiskBTree *tree, BTNode *node, int pos) {\n    if (node->ptr[pos]) {   // \u5185\u90e8\u8282\u70b9\uff0c\u975e\u7ec8\u7aef\u8282\u70b9\n        successor(&node, pos);          // \u627e\u5230\u540e\u7ee7\u8282\u70b9\u4e2d\u6700\u5c0f\u7684\u5173\u952e\u5b57\u66ff\u4ee3\n        deleteBTree(tree, node, 1);     // \u5220\u9664\u6700\u4e0b\u5c42\u975e\u7ec8\u7aef\u8282\u70b9\u4e2d\u7684\u6700\u5c0f\u5173\u952e\u5b57\n    } else {                // \u4ecenode\u8282\u70b9\u4e2d\u5220\u9664pos\n        removeNode(node, pos);\n        if (node->keyNum < ((MaxOrder - 1) / 2)) {\n            restoreBTree(tree, node);       // \u8c03\u6574B\u6811\n        }\n    }\n}\n\n/* \u4eceB-tree\u6811\u4e0a\u5220\u9664key\u503c */\nvoid deleteKey(DiskBTree *tree, KeyType key) {\n    Result res;\n    searchBTree(tree, key, &res);\n    if (res.tag) {\n        deleteBTree(tree, res.ptr, res.pos);\n        tree->count--;\n    } else {\n        printf("\u5173\u952e\u5b57key\u4e0d\u5728B\u6811\u4e0a!\\n");\n    }\n}\n\n// ******************** B-Tree\u7684\u521d\u59cb\u5316\u64cd\u4f5c *************************** //\nDiskBTree *initDiskBTree() {\n    DiskBTree *bTree = (DiskBTree *) malloc(sizeof(DiskBTree));\n    bTree->root = NULL;\n    bTree->count = 0;\n    return bTree;\n}\n\nstatic void destroyBTNode(DiskBTree *tree, BTNode *node) {\n    if (node) {\n        for (int i = 0; i <= node->keyNum; ++i) {\n            if (node->ptr[i]) {\n                destroyBTNode(tree, node->ptr[i]);\n            }\n        }\n        free(node);\n    }\n}\n\nvoid releaseDiskBTree(DiskBTree *tree) {\n    if (tree) {\n        destroyBTNode(tree, tree->root);\n        free(tree);\n    }\n}\n\n// ******************** B-Tree\u7684\u67e5\u627e\u64cd\u4f5c *************************** //\nvoid searchBTree(DiskBTree *tree, KeyType key, Result *res) {\n    BTNode *cur = tree->root;       // \u5b9a\u4e49\u5f53\u524d\u8282\u70b9\u7d22\u5f15\n    BTNode *pre = NULL;             // \u5b9a\u4e49\u6307\u5411\u7236\u8282\u70b9\u7d22\u5f15\n    int tag = 0;                    // \u6807\u8bb0\u6210\u529f\u6216\u5931\u8d25\u72b6\u6001\uff0c\u9ed8\u8ba4\u672a\u627e\u5230\n    int pos;                        // \u8282\u70b9\u4e2d\u7684\u4f4d\u5e8f\n    while (cur && !tag) {\n        pos = searchNodePos(cur, key);\n        if (pos <= cur->keyNum && cur->key[pos] == key) {\n            tag = 1;\n        } else {\n            pre = cur;\n            cur = pre->ptr[pos - 1];  // \u627e\u4e0d\u5230pos\u5c31\u8d8a\u754c\uff0c\u8c03\u6574\u5230\u6700\u540e\u4e00\u4e2a\u7d22\u5f15\u4f4d\u7f6e\n        }\n    }\n    if (tag) {      // \u67e5\u627e\u6210\u529f\uff0c\u5c31\u66f4\u65b0\u627e\u5230\u7684\u8282\u70b9\u4fe1\u606f\n        res->tag = 1;\n        res->ptr = cur;\n        res->pos = pos;\n    } else {        // \u67e5\u627e\u5931\u8d25\uff0c\u5c31\u628a\u5f85\u63d2\u5165\u8282\u70b9\u7684\u7236\u8282\u70b9\u4fe1\u606f\u66f4\u65b0\n        res->tag = 0;\n        res->ptr = pre;\n        res->pos = pos;\n    }\n}\n\nvoid PrintBTree(const BTNode *node, int tab) {\n    if (!node) {\n        return;\n    }\n    int i;\n    for (i = 0; i <= tab; ++i) {\n        printf("    ");\n    }\n    for (i = 1; i <= node->keyNum; i++) {\n        printf("%d", node->key[i]);\n        if (i != node->keyNum) {\n            printf(", ");\n        }\n    }\n    printf("\\n");\n    for (i = 0; i <= node->keyNum; i++) {\n        PrintBTree(node->ptr[i], tab + 1);\n    }\n}\n\nstatic void inOrderBTNode(BTNode *node) {\n    if (node) {\n        for (int i = 0; i <= node->keyNum; ++i) {\n            if (i > 0) {\n                printf("%d ", node->key[i]);\n            }\n            if (node->ptr[i]) {\n                inOrderBTNode(node->ptr[i]);\n            }\n        }\n    }\n}\n\nvoid orderTravelBTree(DiskBTree *tree) {\n    if (tree) {\n        printf("BTree order: ");\n        inOrderBTNode(tree->root);\n        printf("\\n");\n    }\n}\n'})}),"\n",(0,o.jsx)(n.h3,{id:"mainc",children:"main.c"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-C",children:'#include <stdio.h>\n#include "diskBTree.h"\n\nint main() {\n    DiskBTree *bTree = initDiskBTree();\n\n    insertKey(bTree, 8);\n    insertKey(bTree, 9);\n    insertKey(bTree, 10);\n    insertKey(bTree, 11);\n    insertKey(bTree, 15);\n    insertKey(bTree, 16);\n    insertKey(bTree, 17);\n    insertKey(bTree, 18);\n    insertKey(bTree, 20);\n    insertKey(bTree, 23);\n    PrintBTree(bTree->root,1);\n\n    printf("====================\\n");\n    deleteKey(bTree, 15);\n    PrintBTree(bTree->root,1);\n    orderTravelBTree(bTree);\n\n    Result res;\n    searchBTree(bTree, 15, &res);\n    if (res.tag) {\n        printf("find: %d\\n", res.ptr->key[res.pos]);\n    } else {\n        printf("Not find!\\n");\n    }\n    releaseDiskBTree(bTree);\n    return 0;\n}\n'})})]})}function k(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(a,{...e})}):a(e)}}}]);