"use strict";(self.webpackChunkhx_loli=self.webpackChunkhx_loli||[]).push([[68392],{27905:(n,e,i)=>{i.r(e),i.d(e,{assets:()=>c,contentTitle:()=>o,default:()=>a,frontMatter:()=>d,metadata:()=>t,toc:()=>l});const t=JSON.parse('{"id":"\u5237\u9898\u65e5\u5fd7/\u529b\u6263/\u529b\u6263\u5468\u8d5b\u970a\u89e3/\u5468\u8d5b/\u7b2c404\u573a\u5468\u8d5b/Q4\u4e363203\u5408\u5e76\u4e24\u68f5\u6811\u540e\u7684\u6700\u5c0f\u76f4\u5f84/index","title":"3203. \u5408\u5e76\u4e24\u68f5\u6811\u540e\u7684\u6700\u5c0f\u76f4\u5f84","description":"\u94fe\u63a5: 3203. \u5408\u5e76\u4e24\u68f5\u6811\u540e\u7684\u6700\u5c0f\u76f4\u5f84","source":"@site/docs/007-\u5237\u9898\u65e5\u5fd7/002-\u529b\u6263/002-\u529b\u6263\u5468\u8d5b\u970a\u89e3/001-\u5468\u8d5b/009-\u7b2c404\u573a\u5468\u8d5b/004-Q4\u4e363203\u5408\u5e76\u4e24\u68f5\u6811\u540e\u7684\u6700\u5c0f\u76f4\u5f84/index.md","sourceDirName":"007-\u5237\u9898\u65e5\u5fd7/002-\u529b\u6263/002-\u529b\u6263\u5468\u8d5b\u970a\u89e3/001-\u5468\u8d5b/009-\u7b2c404\u573a\u5468\u8d5b/004-Q4\u4e363203\u5408\u5e76\u4e24\u68f5\u6811\u540e\u7684\u6700\u5c0f\u76f4\u5f84","slug":"/\u5237\u9898\u65e5\u5fd7/\u529b\u6263/\u529b\u6263\u5468\u8d5b\u970a\u89e3/\u5468\u8d5b/\u7b2c404\u573a\u5468\u8d5b/Q4\u4e363203\u5408\u5e76\u4e24\u68f5\u6811\u540e\u7684\u6700\u5c0f\u76f4\u5f84/","permalink":"/HXLoLi/docs/\u5237\u9898\u65e5\u5fd7/\u529b\u6263/\u529b\u6263\u5468\u8d5b\u970a\u89e3/\u5468\u8d5b/\u7b2c404\u573a\u5468\u8d5b/Q4\u4e363203\u5408\u5e76\u4e24\u68f5\u6811\u540e\u7684\u6700\u5c0f\u76f4\u5f84/","draft":false,"unlisted":false,"editUrl":"https://github.com/HengXin666/HXLoLi/edit/main/docs/007-\u5237\u9898\u65e5\u5fd7/002-\u529b\u6263/002-\u529b\u6263\u5468\u8d5b\u970a\u89e3/001-\u5468\u8d5b/009-\u7b2c404\u573a\u5468\u8d5b/004-Q4\u4e363203\u5408\u5e76\u4e24\u68f5\u6811\u540e\u7684\u6700\u5c0f\u76f4\u5f84/index.md","tags":[],"version":"current","lastUpdatedBy":"Heng_Xin_666","lastUpdatedAt":1746519997000,"frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"Q3\u4e363202\u627e\u51fa\u6709\u6548\u5b50\u5e8f\u5217\u7684\u6700\u5927\u957f\u5ea6II","permalink":"/HXLoLi/docs/\u5237\u9898\u65e5\u5fd7/\u529b\u6263/\u529b\u6263\u5468\u8d5b\u970a\u89e3/\u5468\u8d5b/\u7b2c404\u573a\u5468\u8d5b/Q3\u4e363202\u627e\u51fa\u6709\u6548\u5b50\u5e8f\u5217\u7684\u6700\u5927\u957f\u5ea6II/"},"next":{"title":"Q2\u4e363233\u7edf\u8ba1\u4e0d\u662f\u7279\u6b8a\u6570\u5b57\u7684\u6570\u5b57\u6570\u91cf","permalink":"/HXLoLi/docs/\u5237\u9898\u65e5\u5fd7/\u529b\u6263/\u529b\u6263\u5468\u8d5b\u970a\u89e3/\u5468\u8d5b/\u7b2c408\u573a\u5468\u8d5b/Q2\u4e363233\u7edf\u8ba1\u4e0d\u662f\u7279\u6b8a\u6570\u5b57\u7684\u6570\u5b57\u6570\u91cf/"}}');var r=i(74848),s=i(28453);const d={},o="3203. \u5408\u5e76\u4e24\u68f5\u6811\u540e\u7684\u6700\u5c0f\u76f4\u5f84",c={},l=[{value:"\u5265\u6d0b\u8471\u5927\u6cd5: \u627e\u6811\u5fc3",id:"\u5265\u6d0b\u8471\u5927\u6cd5-\u627e\u6811\u5fc3",level:2},{value:"\u6811\u5f62DP",id:"\u6811\u5f62dp",level:2}];function u(n){const e={a:"a",code:"code",h1:"h1",h2:"h2",header:"header",p:"p",pre:"pre",...(0,s.R)(),...n.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(e.header,{children:(0,r.jsx)(e.h1,{id:"3203-\u5408\u5e76\u4e24\u68f5\u6811\u540e\u7684\u6700\u5c0f\u76f4\u5f84",children:"3203. \u5408\u5e76\u4e24\u68f5\u6811\u540e\u7684\u6700\u5c0f\u76f4\u5f84"})}),"\n",(0,r.jsxs)(e.p,{children:["\u94fe\u63a5: ",(0,r.jsx)(e.a,{href:"https://leetcode.cn/problems/find-minimum-diameter-after-merging-two-trees/",children:"3203. \u5408\u5e76\u4e24\u68f5\u6811\u540e\u7684\u6700\u5c0f\u76f4\u5f84"})]}),"\n",(0,r.jsx)(e.p,{children:"\u7ed9\u4f60\u4e24\u68f5 \u65e0\u5411 \u6811\uff0c\u5206\u522b\u6709 n \u548c m \u4e2a\u8282\u70b9\uff0c\u8282\u70b9\u7f16\u53f7\u5206\u522b\u4e3a 0 \u5230 n - 1 \u548c 0 \u5230 m - 1 \u3002\u7ed9\u4f60\u4e24\u4e2a\u4e8c\u7ef4\u6574\u6570\u6570\u7ec4 edges1 \u548c edges2 \uff0c\u957f\u5ea6\u5206\u522b\u4e3a n - 1 \u548c m - 1 \uff0c\u5176\u4e2d edges1[i] = [ai, bi] \u8868\u793a\u5728\u7b2c\u4e00\u68f5\u6811\u4e2d\u8282\u70b9 ai \u548c bi \u4e4b\u95f4\u6709\u4e00\u6761\u8fb9\uff0cedges2[i] = [ui, vi] \u8868\u793a\u5728\u7b2c\u4e8c\u68f5\u6811\u4e2d\u8282\u70b9 ui \u548c vi \u4e4b\u95f4\u6709\u4e00\u6761\u8fb9\u3002"}),"\n",(0,r.jsx)(e.p,{children:"\u4f60\u5fc5\u987b\u5728\u7b2c\u4e00\u68f5\u6811\u548c\u7b2c\u4e8c\u68f5\u6811\u4e2d\u5206\u522b\u9009\u4e00\u4e2a\u8282\u70b9\uff0c\u5e76\u7528\u4e00\u6761\u8fb9\u8fde\u63a5\u5b83\u4eec\u3002"}),"\n",(0,r.jsx)(e.p,{children:"\u8bf7\u4f60\u8fd4\u56de\u6dfb\u52a0\u8fb9\u540e\u5f97\u5230\u7684\u6811\u4e2d\uff0c\u6700\u5c0f\u76f4\u5f84 \u4e3a\u591a\u5c11\u3002"}),"\n",(0,r.jsx)(e.p,{children:"\u4e00\u68f5\u6811\u7684 \u76f4\u5f84 \u6307\u7684\u662f\u6811\u4e2d\u4efb\u610f\u4e24\u4e2a\u8282\u70b9\u4e4b\u95f4\u7684\u6700\u957f\u8def\u5f84\u957f\u5ea6\u3002"}),"\n",(0,r.jsx)(e.h1,{id:"\u9898\u89e3",children:"\u9898\u89e3"}),"\n",(0,r.jsx)(e.h2,{id:"\u5265\u6d0b\u8471\u5927\u6cd5-\u627e\u6811\u5fc3",children:"\u5265\u6d0b\u8471\u5927\u6cd5: \u627e\u6811\u5fc3"}),"\n",(0,r.jsx)(e.p,{children:"\u5b9e\u9645\u5c31\u662f\u5265\u6d0b\u8471\uff0c\u5bf9\u4e8e\u662f\u65e0\u5411\u56fe\u964d\u8fb9\u540e\u7684\u6811\uff0c\u53ea\u8981\u662f\u65e0\u65b9\u5411\u7684\u641c\u7d22\u90fd\u5efa\u8bae\u7528\u8fd9\u4e2a\u601d\u8def\uff0c\u53c8\u5feb\u53c8\u7b80\u5355\u3002"}),"\n",(0,r.jsx)(e.p,{children:"\u5177\u4f53\u539f\u7406\u5c31\u662f\u627e\u5230\u8fd9\u4e2a\u6811\u6700\u5916\u5c42\u7684\u8282\u70b9\uff0c\u4e5f\u5c31\u662f\u51fa\u5165\u5ea6\u53ea\u6709 1 \u7684\u8282\u70b9\uff0c\u7136\u540e\u5168\u90e8\u5220\u6389\uff0c\u518d\u91cd\u65b0\u641c\u7d22\u5916\u5c42\u5faa\u73af\u6b65\u9aa4\uff0c\u90a3\u4e48\u6700\u540e\u80af\u5b9a\u53ea\u6709\u4e24\u4e2a\u60c5\u51b5\uff1a\u5269\u4e00\u4e2a\u8282\u70b9\uff0c\u5269\u4e24\u4e2a\u8282\u70b9\u3002\u524d\u8005\u5c31\u662f\u6574\u4e2a\u6811\u7684\u6700\u4e2d\u5fc3\u7684\u8282\u70b9\uff0c\u540e\u8005\u5c31\u662f\u6570\u4e2d\u5fc3\u6709\u4e24\u4e2a\u8282\u70b9\u3002"}),"\n",(0,r.jsxs)(e.p,{children:["\u672c\u6765\u4e0d\u9700\u8981\u7406\u4f1a\u8fd9\u4e2a\u7ed3\u679c\uff0c\u56e0\u4e3a\u6b63\u5e38\u90fd\u662f\u7528\u4f5c\u679a\u4e3e\uff0c\u4f46\u8fd9\u9898\u9700\u8981\u627e\u51fa\u6811\u7684\u76f4\u5f84\uff0c\u90a3\u4e48\u5265\u4e86\u591a\u5c11\u5c42\u7b49\u4e8e\u534a\u5f84\uff0c\u5982\u679c\u6570\u5fc3\u53ea\u6709\u4e00\u4e2a\u8282\u70b9\uff0c\u90a3\u4e48",(0,r.jsx)(e.code,{children:"\u76f4\u5f84 == \u534a\u5f84 * 2"}),"\uff0c\u5982\u679c\u6811\u5fc3\u662f\u4e24\u4e2a\u8282\u70b9\uff0c\u7b49\u4e8e\u4e2d\u95f4\u4e0d\u662f\u8282\u70b9\u662f\u4e00\u6761\u8fb9\uff0c\u90a3\u4e48",(0,r.jsx)(e.code,{children:"\u76f4\u5f84 = \u534a\u5f84 * 2 - 1"}),"\u3002"]}),"\n",(0,r.jsx)(e.p,{children:"\u90a3\u4e48\u76f4\u63a5\u5199\u5c31\u53ef\u4ee5\u5199\u51fd\u6570\u8f93\u51fa\u9700\u8981\u6709\u4e24\u4e2a\u53c2\u6570\u534a\u5f84\u4e0e\u6811\u5fc3\u6570\uff0c\u4f46\u7531\u4e8e * 2 \u5fc5\u7136\u662f\u5076\u6570\u518d-1 \u5fc5\u7136\u5947\u6570\uff0c\u6240\u4ee5\u5b9e\u9645\u53ef\u4ee5\u5355\u8f93\u51fa\u5f53\u524d\u6811\u7684\u76f4\u5f84\u5373\u53ef\uff0c\u53cd\u8fc7\u6765\u901a\u8fc7\u5947\u5076\u5224\u65ad\u6570\u5fc3\u6811\u6062\u590d\u534a\u5f84\uff1b"}),"\n",(0,r.jsxs)(e.p,{children:["(\u6bd4\u8d5b\u7684\u65f6\u5019\u601d\u8def\u7c7b\u4f3c, \u4f46\u662f\u6b7b\u6d3b\u8c03\u4e0d\u51fa\u6765, \u672c\u7bc7\u601d\u8def: ",(0,r.jsx)(e.a,{href:"https://leetcode.cn/problems/find-minimum-diameter-after-merging-two-trees/solutions/2827577/xiang-jie-bo-yang-cong-da-fa-hao-by-l00-yp6l",children:"\u3010\u8be6\u89e3\u3011\u5265\u6d0b\u8471\u5927\u6cd5\u597d"}),")"]}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-C++",children:"class Solution {\n        int fk(vector<vector<int>>& edges) { // \u62d3\u6251\u6392\u5e8f\u6d0b\u8471\n            if (!edges.size()) // \u53ef\u4ee5\u4e0d\u5199\n                return 0;\n            int n = edges.size() + 1;\n            vector<vector<int>> G(n);\n            vector<int> du(n);\n            for (auto& it : edges) {\n                G[it[0]].push_back(it[1]);\n                G[it[1]].push_back(it[0]);\n                ++du[it[0]], ++du[it[1]];\n            }\n\n            // \u62d3\u6251\u6392\u5e8f\n            queue<int> Q; // \u5ea6\u4e3a 1 \u5219\u5165 \n            for (int i = 0; i < n; ++i)\n                if (du[i] == 1)\n                    Q.push(i);\n\n            int res = 0, tmp = 0;\n            while (Q.size() > 1) { // \u5269\u4e0b\u5fc3\n                ++res;\n                int now_n = tmp = Q.size(); // \u5f53\u524d\u5c42\u6709\u591a\u5c11\u7ed3\u70b9\n                for (int i = 0; i < now_n; ++i) {\n                    int x = Q.front();\n                    Q.pop();\n                    // \u51fa\u5ea6\u6e05\u9664\n                    for (auto& it : G[x])\n                        if (--du[it] == 1)\n                            Q.push(it);\n                }\n            }\n            return res * 2 - (Q.size() ^ 1);\n        }\npublic:\n    int minimumDiameterAfterMerge(\n        vector<vector<int>>& edges1, vector<vector<int>>& edges2) {\n        int res1 = fk(edges1), res2 = fk(edges2);\n        return max({res1, res2, (res1 + 1) / 2 + (res2 + 1) / 2 + 1});\n    }\n};\n"})}),"\n",(0,r.jsxs)(e.p,{children:["\u6211\u7684\u516b\u560e\u4ee3\u7801: wa\u4e8e: ",(0,r.jsx)(e.code,{children:"[[0,1],[2,0],[3,2],[3,6],[8,7],[4,8],[5,4],[3,5],[3,9]]"})," | ",(0,r.jsx)(e.code,{children:"[[0,1],[0,2],[0,3]]"})," | \u8f93\u51fa: ",(0,r.jsx)(e.code,{children:"6"})," | \u7b54\u6848: ",(0,r.jsx)(e.code,{children:"7"})]}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-C++",children:"class Solution {\n        int fk(vector<vector<int>>& edges) {\n            if (edges.size() == 0)\n                return 1;\n            int n = edges.size() + 1;\n            vector<vector<int>> G(n);\n            vector<int> du(n);\n            for (auto& it : edges) {\n                G[it[0]].push_back(it[1]);\n                G[it[1]].push_back(it[0]);\n                ++du[it[0]], ++du[it[1]];\n            }\n\n            // \u62d3\u6251\u6392\u5e8f\n            queue<int> Q; // \u5ea6\u4e3a 1 \u5219\u5165 \n            \n            for (int i = 0; i < n; ++i) {\n                if (du[i] == 1) {\n                    Q.push(i);\n                }\n            }\n\n            int res = 0, tmp = 0;\n            while (Q.size()) {\n                ++res;\n                int now_n = tmp = Q.size(); // \u5f53\u524d\u5c42\u6709\u591a\u5c11\u7ed3\u70b9\n\n                for (int i = 0; i < now_n; ++i) {\n                    int x = Q.front();\n                    Q.pop();\n\n                    // \u51fa\u5ea6\u6e05\u9664\n                    // \u4e3a\u4ec0\u4e48\u4e0d\u7528\u6e05\u9664\u5165\u5ea6\u5462? \u56e0\u4e3a\u4e4b\u524d\u5df2\u7ecf\u8bbf\u95ee\u4e86, \u4ee5\u540e\u90fd\u8bbf\u95ee\u4e0d\u5230\u4e86\n                    for (auto& it : G[x]) {\n                        --du[it];\n                        if (du[it] == 1)\n                            Q.push(it);\n                    }\n                }\n            }\n            cout << res << '|' << tmp << '\\n';\n            return res + tmp - 1;\n        }\npublic:\n    int minimumDiameterAfterMerge(\n        vector<vector<int>>& edges1, \n        vector<vector<int>>& edges2) {\n        if (edges1.size() == 0 && edges2.size() == 0)\n            return 1;\n        int res1 = fk(edges1), res2 = fk(edges2);\n        return res1 + res2 - 1;\n    }\n};\n"})}),"\n",(0,r.jsx)(e.h2,{id:"\u6811\u5f62dp",children:"\u6811\u5f62DP"}),"\n",(0,r.jsx)(e.p,{children:"\u4e0d\u4f1a"})]})}function a(n={}){const{wrapper:e}={...(0,s.R)(),...n.components};return e?(0,r.jsx)(e,{...n,children:(0,r.jsx)(u,{...n})}):u(n)}},28453:(n,e,i)=>{i.d(e,{R:()=>d,x:()=>o});var t=i(96540);const r={},s=t.createContext(r);function d(n){const e=t.useContext(s);return t.useMemo((function(){return"function"==typeof n?n(e):{...e,...n}}),[e,n])}function o(n){let e;return e=n.disableParentContext?"function"==typeof n.components?n.components(r):n.components||r:d(n.components),t.createElement(s.Provider,{value:e},n.children)}}}]);