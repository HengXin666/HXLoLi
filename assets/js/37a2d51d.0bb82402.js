"use strict";(self.webpackChunkhx_loli=self.webpackChunkhx_loli||[]).push([[57010],{14701:(n,e,t)=>{t.r(e),t.d(e,{assets:()=>d,contentTitle:()=>o,default:()=>l,frontMatter:()=>r,metadata:()=>a,toc:()=>c});const a=JSON.parse('{"id":"\u7a0b\u5e8f\u8bed\u8a00/C++/tmp\u4e36C++\u4e36memo/C++\u7f51\u7edc\u7f16\u7a0b/Windows\u7f51\u7edc\u7f16\u7a0b/\u793a\u4f8b\u4ee3\u7801/index","title":"index","description":"","source":"@site/docs/002-\u7a0b\u5e8f\u8bed\u8a00/001-C++/002-tmp\u4e36C++\u4e36memo/004-C++\u7f51\u7edc\u7f16\u7a0b/002-Windows\u7f51\u7edc\u7f16\u7a0b/003-\u793a\u4f8b\u4ee3\u7801/index.md","sourceDirName":"002-\u7a0b\u5e8f\u8bed\u8a00/001-C++/002-tmp\u4e36C++\u4e36memo/004-C++\u7f51\u7edc\u7f16\u7a0b/002-Windows\u7f51\u7edc\u7f16\u7a0b/003-\u793a\u4f8b\u4ee3\u7801","slug":"/\u7a0b\u5e8f\u8bed\u8a00/C++/tmp\u4e36C++\u4e36memo/C++\u7f51\u7edc\u7f16\u7a0b/Windows\u7f51\u7edc\u7f16\u7a0b/\u793a\u4f8b\u4ee3\u7801/","permalink":"/HXLoLi/docs/\u7a0b\u5e8f\u8bed\u8a00/C++/tmp\u4e36C++\u4e36memo/C++\u7f51\u7edc\u7f16\u7a0b/Windows\u7f51\u7edc\u7f16\u7a0b/\u793a\u4f8b\u4ee3\u7801/","draft":false,"unlisted":false,"editUrl":"https://github.com/HengXin666/HXLoLi/edit/main/docs/002-\u7a0b\u5e8f\u8bed\u8a00/001-C++/002-tmp\u4e36C++\u4e36memo/004-C++\u7f51\u7edc\u7f16\u7a0b/002-Windows\u7f51\u7edc\u7f16\u7a0b/003-\u793a\u4f8b\u4ee3\u7801/index.md","tags":[],"version":"current","lastUpdatedBy":"Heng_Xin_666","lastUpdatedAt":1745851959000,"frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"IOCP","permalink":"/HXLoLi/docs/\u7a0b\u5e8f\u8bed\u8a00/C++/tmp\u4e36C++\u4e36memo/C++\u7f51\u7edc\u7f16\u7a0b/Windows\u7f51\u7edc\u7f16\u7a0b/IOCP/"},"next":{"title":"\u57fa\u4e8eUDP\u53ef\u9760\u6027\u4f20\u8f93KCP","permalink":"/HXLoLi/docs/\u7a0b\u5e8f\u8bed\u8a00/C++/tmp\u4e36C++\u4e36memo/C++\u7f51\u7edc\u7f16\u7a0b/\u57fa\u4e8eUDP\u53ef\u9760\u6027\u4f20\u8f93KCP/"}}');var s=t(74848),i=t(28453);const r={},o=void 0,d={},c=[];function p(n){const e={code:"code",pre:"pre",...(0,i.R)(),...n.components};return(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-C++",children:'#include <iostream>\n#include <WinSock2.h>\n#include <MSWSock.h>\n\n#define WIN32_LEAN_AND_MEAN\n#include <Windows.h>\n\n\n#pragma comment(lib, "Ws2_32.lib")\n#pragma comment(lib, "Mswsock.lib")\n\n#include "HXnet.h"\n#include <string>\n#include <map>\n\n#define STR_MAX_SIZE 1024\n\n\n// IOCP \u4e8b\u4ef6\u7c7b\u578b\nenum IocpEventType {\n    ACCEPT, // \u7b49\u5f85\u8fde\u63a5\n    RECV,   // \u63a5\u6536\n    SEND    // \u53d1\u9001\n};\n\ntypedef struct HXData\n{\n    OVERLAPPED Overlapped;            // \u91cd\u53e0\u7ed3\u6784\u4f53\u5fc5\u9700\u8981\u653e\u5230\u7b2c\u4e00\u4e2a\u4f4d\u7f6e\n    SOCKET cli_socket;                // \u5ba2\u6237\u7aef\u5957\u63a5\u5b57\n    CHAR str_data[STR_MAX_SIZE];    // \u6536/\u53d1 \u7684\u6570\u636e\n    WSABUF buf_data;                // \u7528\u4e8e\u63cf\u8ff0\u6570\u636e\u7f13\u51b2\u533a\n    IocpEventType eventType;        // \u4e8b\u4ef6\u7c7b\u578b\n    DWORD bufferCount;                // \u63a5\u6536\u7684\u5b57\u8282\u6570\n    DWORD lFlags;                    // \u4f5c\u7528\u672a\u77e5\n\npublic:\n    // \u6784\u9020\u51fd\u6570\n    HXData(SOCKET cli_socket, IocpEventType eventType) {\n        memset(this, 0, sizeof(HXData));\n        this->cli_socket = cli_socket;\n        this->buf_data.buf = this->str_data;\n        this->buf_data.len = sizeof(this->str_data);\n        this->bufferCount = 0;\n        this->lFlags = 0;\n        this->eventType = eventType;\n    }\n} HXData;\n\n\ntypedef struct _send_cli_package\n{\n    std::map<SOCKET, std::string> cli_map;\n    CHAR send_data[STR_MAX_SIZE];\npublic:\n    _send_cli_package() : cli_map(), send_data() {}\n} SendCliPackage;\n\n\nvoid accepHX(SOCKET ser_socket, HANDLE sev_iocp);\nvoid recvHX(HXData* data);\n\n// \u7b49\u5f85\u8fde\u63a5\nvoid accepHX(SOCKET ser_socket, HANDLE sev_iocp)\n{\n    // \u51c6\u5907\u4e00\u4e2a\u672a\u5173\u8054\u7684, \u7528\u4e8e\u8fde\u63a5\u5ba2\u6237\u7aef\u7684\u5957\u63a5\u5b57\n    SOCKET cli_socket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);\n\n    // \u5173\u8054\u5b8c\u6210\u7aef\u53e3\n    if (!CreateIoCompletionPort((HWND)cli_socket, sev_iocp, NULL, 0)) {\n        HX::tools::HXprint::getHXprint()->ptr_pError("\u65b0\u5efa\u5ba2\u6237\u7aef\u5957\u63a5\u5b57, \u5173\u8054\u5b8c\u6210\u7aef\u53e3\u65f6\u51fa\u9519!");\n        return;\n    }\n\n    HXData* data = new HXData(cli_socket, ACCEPT);\n\n    char szBuff[STR_MAX_SIZE] = { 0 }; // \u5355\u7eaf\u53ea\u662f\u7f13\u51b2\u533a (void *)\n    DWORD dwRecved = 0;\n\n    AcceptEx(\n        ser_socket,\n        cli_socket,\n        szBuff,\n        0,\n        sizeof(sockaddr) + 16,\n        sizeof(sockaddr) + 16,\n        &dwRecved,\n        (LPOVERLAPPED)data\n    );\n}\n\nvoid recvHX(HXData *data)\n{\n    if (WSARecv(data->cli_socket, &data->buf_data, 1, &data->bufferCount, &data->lFlags, (LPOVERLAPPED)data, NULL)) {\n        if (WSAGetLastError() != WSA_IO_PENDING)\n            HX::tools::HXprint::getHXprint()->ptr_pError("\u521b\u5efa\u63a5\u6536\u4efb\u52a1\u65f6\u51fa\u73b0\u9519\u8bef");\n    }\n}\n\nvoid sendHX(SOCKET notSendCli, SendCliPackage* p)\n{\n    int len = strlen(p->send_data);\n    for (auto it : p->cli_map)\n    {\n        if (it.first != notSendCli)\n            send(it.first, p->send_data, len, 0);\n    }\n}\n\nint main()\n{\n    HX::net::HXServer server("127.0.0.1", 11451, 6);\n\n    // \u521b\u5efa\u5b8c\u6210\u7aef\u53e3\n    HANDLE sev_iocp = CreateIoCompletionPort(INVALID_HANDLE_VALUE, NULL, NULL, 0);\n\n    auto print = HX::tools::HXprint::getHXprint();\n\n    // \u5173\u8054\u5b8c\u6210\u7aef\u53e3\n    if (!CreateIoCompletionPort((HANDLE)server.getSerSocket(), sev_iocp, NULL, 0)) {\n        print->ptr_pError("\u5173\u8054\u5b8c\u6210\u7aef\u53e3\u65f6\u51fa\u9519!");\n    }\n\n    // \u6295\u9012\u4e00\u4e2a\u7b49\u5f85\u8fde\u63a5\u7684\u4efb\u52a1\n    accepHX(server.getSerSocket(), sev_iocp);\n\n    SendCliPackage sendCliarr;\n\n    // \u5904\u7406 \u4e3b\u5faa\u73af\n    while (true)\n    {\n        DWORD dwBytesTranfered = 0;\n        ULONG_PTR uKey;\n        LPOVERLAPPED data_mae = NULL;\n        GetQueuedCompletionStatus(sev_iocp, &dwBytesTranfered, &uKey, &data_mae, INFINITE);\n\n        HXData* data = (HXData*)data_mae;\n        switch (data->eventType)\n        {\n        case ACCEPT:\n        {\n            // \u6dfb\u52a0\u5230\u63a5\u6536\u6570\u636e\u4efb\u52a1\n            data->eventType = RECV;\n            recvHX(data);\n            sendCliarr.cli_map.insert(std::make_pair(data->cli_socket, std::string("")));\n            print->ptr_pInfo("\u5ba2\u6237\u7aef\u5df2\u8fde\u63a5!");\n            // \u518d\u521b\u5efa\u4e00\u4e2a\u7b49\u5f85\u8fde\u63a5\u7684\u4efb\u52a1\n            accepHX(server.getSerSocket(), sev_iocp);\n            break;\n        }\n        case RECV:\n        {\n            if (dwBytesTranfered == 0)\n            {\n                print->ptr_pInfo("\u5ba2\u6237\u7aef\u5df2\u65ad\u5f00\u8fde\u63a5!");\n                sendCliarr.cli_map.erase(sendCliarr.cli_map.find(data->cli_socket));\n\n                // \u53d6\u6d88\u5bf9\u5b8c\u6210\u7aef\u53e3\u7684\u5173\u8054\n                CreateIoCompletionPort((HANDLE)data->cli_socket, NULL, 0, 0);\n\n                closesocket(data->cli_socket);\n                delete data;\n                continue;\n            }\n\n            strcpy(sendCliarr.send_data, data->str_data);\n            auto p = sendCliarr.cli_map.find(data->cli_socket);\n            if (p->second.size() == 0) {\n                p->second = std::string(sendCliarr.send_data);\n                sprintf(sendCliarr.send_data, "[%s] \u52a0\u5165\u4e86\u623f\u95f4!", p->second.c_str());\n            }\n            else {\n                sprintf(sendCliarr.send_data, "[%s]: %s", p->second.c_str(), data->str_data);\n            }\n            sendHX(data->cli_socket, &sendCliarr);\n\n            print->ptr_pInfo("\u6536\u5230\u6d88\u606f: %s", data->str_data);\n            recvHX(data);\n            break;\n        }\n        default:\n            break;\n        }\n    }\n\n    return 0;\n}\n'})})}function l(n={}){const{wrapper:e}={...(0,i.R)(),...n.components};return e?(0,s.jsx)(e,{...n,children:(0,s.jsx)(p,{...n})}):p(n)}},28453:(n,e,t)=>{t.d(e,{R:()=>r,x:()=>o});var a=t(96540);const s={},i=a.createContext(s);function r(n){const e=a.useContext(i);return a.useMemo((function(){return"function"==typeof n?n(e):{...e,...n}}),[e,n])}function o(n){let e;return e=n.disableParentContext?"function"==typeof n.components?n.components(s):n.components||s:r(n.components),a.createElement(i.Provider,{value:e},n.children)}}}]);