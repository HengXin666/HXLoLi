"use strict";(self.webpackChunkhx_loli=self.webpackChunkhx_loli||[]).push([[63246],{79098:n=>{n.exports=JSON.parse('{"archive":{"blogPosts":[{"id":"/2025/09/07/01-MSVC\u7684requires\u7f3a\u9677","metadata":{"permalink":"/HXLoLi/blog/2025/09/07/01-MSVC\u7684requires\u7f3a\u9677","editUrl":"https://github.com/HengXin666/HXLoLi/edit/main/blog/2025/09/07/01-MSVC\u7684requires\u7f3a\u9677.md","source":"@site/blog/2025/09/07/01-MSVC\u7684requires\u7f3a\u9677.md","title":"MSVC\u7684requires\u7f3a\u9677","description":"MSVC\u4f60\u771f\u7684\u725b\u903c\u5927\u4e86!, \u8fd9\u79cd\u7b80\u5355\u6d3b\u90fd\u5e72\u4e0d\u597d? win\u90fd\ud83d\udca9\u4f60\u65e0\u654c\u4e86 (\\\\\ud83d\udca9/ \\\\\ud83d\udca9/ \\\\\ud83d\udca9/)","date":"2025-09-07T16:43:37.000Z","tags":[{"inline":false,"label":"C++","permalink":"/HXLoLi/blog/tags/C++","description":"C++\u5c0f\u77e5\u8bc6"}],"readingTime":3.055,"hasTruncateMarker":true,"authors":[{"name":"Heng_Xin","title":"\u3053\u3053\u304b\u3089\u5148\u306f\u4e00\u65b9\u901a\u884c\u3060!","url":"https://github.com/HengXin666","email":"282000500@qq.com","socials":{"github":"https://github.com/HengXin666","bilibili":"https://space.bilibili.com/478917126"},"imageURL":"https://avatars.githubusercontent.com/u/103022267","key":"Heng_Xin","page":null}],"frontMatter":{"authors":"Heng_Xin","title":"MSVC\u7684requires\u7f3a\u9677","date":"2025-09-07T16:43:37.000Z","tags":["C++"]},"unlisted":false,"lastUpdatedAt":1757235170000,"lastUpdatedBy":"Heng_Xin_666","nextItem":{"title":"QML \u652f\u6301 Wayland \u6bd4 QWidget \u597d!","permalink":"/HXLoLi/blog/2025/08/13/01-QML\u4e07\u5c81"}},"content":"MSVC\u4f60\u771f\u7684\u725b\u903c\u5927\u4e86!, \u8fd9\u79cd\u7b80\u5355\u6d3b\u90fd\u5e72\u4e0d\u597d? win\u90fd\ud83d\udca9\u4f60\u65e0\u654c\u4e86 (\\\\\ud83d\udca9/ \\\\\ud83d\udca9/ \\\\\ud83d\udca9/)\\n\\n\x3c!-- truncate --\x3e\\n\\n> [!TIP]\\n> \u672c\u6587\u53ea\u6709\u6076\u610f. win\u90fd\ud83d\udca9! MS\ud83d\udca9VC! \\n> \\n> \\\\\ud83d\udca9/ \\\\\ud83d\udca9/ \\\\\ud83d\udca9/ \\\\\ud83d\udca9/ \\\\\ud83d\udca9/\\n\\n## msvc\u7b7e\u540d\u4e0d\u5b8c\u5168\u5339\u914d: requires \u7f3a\u9677\\n\\n\u4eca\u5929\u4e0awin, \u987a\u4fbf\u628a\u4e4b\u524d\u7684msvc bug \u4fee\u590d. \u7ed3\u679c\u53d1\u73b0: ([#13](https://github.com/HengXin666/HXLibs/issues/13))\\n\\n```cpp\\nD:\\\\command\\\\Github\\\\HXLibs\\\\tests\\\\client\\\\02_ws_client.cpp\\n[build] D:\\\\command\\\\Github\\\\HXLibs\\\\include\\\\HXLibs/container/ThreadPool.hpp(338): error C2244: \u201cHX::container::FutureResult<T>::thenTry\u201d: \u65e0\u6cd5\u5c06\u51fd\u6570\u5b9a\u4e49\u4e0e\u73b0\u6709\u7684\u58f0\u660e\u5339\u914d\\n[build] D:\\\\command\\\\Github\\\\HXLibs\\\\include\\\\HXLibs/container/ThreadPool.hpp(338): note: \u53c2\u89c1\u201cHX::container::FutureResult<T>::thenTry\u201d\u7684\u58f0\u660e\\n[build] D:\\\\command\\\\Github\\\\HXLibs\\\\include\\\\HXLibs/container/ThreadPool.hpp(338): note: \u5b9a\u4e49\\n[build] D:\\\\command\\\\Github\\\\HXLibs\\\\include\\\\HXLibs/container/ThreadPool.hpp(338): note: \'HX::container::FutureResult<internal::RemoveTryWarpImpl<Res>::Type> HX::container::FutureResult<T>::thenTry(Func &&) noexcept &&\'\\n[build] D:\\\\command\\\\Github\\\\HXLibs\\\\include\\\\HXLibs/container/ThreadPool.hpp(338): note: \u73b0\u6709\u58f0\u660e\\n[build] D:\\\\command\\\\Github\\\\HXLibs\\\\include\\\\HXLibs/container/FutureResult.hpp(127): note: \'HX::container::FutureResult<internal::RemoveTryWarpImpl<Res>::Type> HX::container::FutureResult<T>::thenTry(Func &&) noexcept &&\'\\n[build] ninja: build stopped: subcommand failed.\\n```\\n\\n\u7ecf\u8fc7\u6392\u67e5, \u53d1\u73b0\u662f msvc \u7684\u7f3a\u9677. \u8981\u6c42 requires \u5728\u51fd\u6570\u7b7e\u540d\u4e2d\u5e94\u8be5\u5b8c\u5168\u4e00\u6837, \u624d\u4f1a\u89c6\u4f5c\u51fd\u6570\u7b7e\u540d\u4e00\u6837.\\n\\n\u4ee5\u4e0b\u662f\u590d\u73b0\u6848\u4f8b: https://godbolt.org/z/EWhrdsoK6\\n\\n```cpp\\n#include <utility>\\n#include <type_traits>\\n\\ntemplate <typename T = void>\\nstruct Try {\\n    using TryType = T;\\n};\\n\\nnamespace internal {\\n\\ntemplate <typename T>\\nstruct RemoveTryWarpImpl {\\n    using Type = T;\\n};\\n\\ntemplate <typename T>\\nstruct RemoveTryWarpImpl<Try<T>> {\\n    using Type = T;\\n};\\n\\n} // namespace internal\\n\\ntemplate <typename T>\\nusing RemoveTryWarpType = internal::RemoveTryWarpImpl<T>::Type;\\n\\ntemplate <typename T = void>\\nclass FutureResult {\\npublic:\\n    using TryType = Try<RemoveTryWarpType<T>>;\\n\\n    template <typename Func, typename Res = std::invoke_result_t<Func, TryType>>\\n    requires (requires (Func func, TryType t) { // \u5e94\u8be5\u5199\u4e3a FutureResult<T>::TryType\\n        func(std::move(t));                     // MSVC\u7684\u9519\u8bef\u662f\u7b7e\u540d\u4e0d\u5b8c\u5168\u5339\u914d,\\n                                                // \u539f\u56e0\u662frequires\u8868\u8fbe\u5f0f\u5199\u5728\u4e86\u7c7b\u6a21\u677f\u58f0\u660e\u548c\u5b9a\u4e49\u4e0a,\\n                                                // \u4f46\u662fMSVC\u5bf9\u8fd9\u7c7b\u60c5\u51b5\u7684\u89e3\u6790\u6709bug,\\n                                                // \u5177\u4f53\u662f [requires\u5fc5\u987b\u4e00\u6a21\u4e00\u6837, \u5426\u5219\u89c6\u4e3a\u4e0d\u540c\u51fd\u6570]\u3002\\n                                                // requires\u8868\u8fbe\u5f0f\u91cc\u7c7b\u578b\u5199\u6cd5\u4e0d\u4e00\u81f4, \u5bfc\u81f4MSVC\u65e0\u6cd5\u5339\u914d\u3002\\n    })\\n    FutureResult<RemoveTryWarpType<Res>> thenTry(Func&& func) && noexcept;\\n};\\n\\ntemplate <typename T>\\ntemplate <typename Func, typename Res>\\n    requires (requires (Func func, FutureResult<T>::TryType t) {\\n            func(std::move(t));\\n        })\\nFutureResult<RemoveTryWarpType<Res>> FutureResult<T>::thenTry(\\n    Func&& func\\n) && noexcept { return {}; }\\n\\nint main() {\\n    FutureResult<int> f;\\n    auto res = std::move(f).thenTry([](Try<int> x) { \\n        return x; \\n    });\\n}\\n```\\n\\n\u66f4\u52a0\u7b80\u5355\u7684, \u6700\u5c0f\u590d\u73b0\u6848\u4f8b: https://godbolt.org/z/xG1cjjbca\\n\\n```cpp\\n#include <utility>\\n#include <type_traits>\\n\\ntemplate <typename T = void>\\nstruct Try { using TryType = T; };\\n\\ntemplate <typename T = void>\\nclass FutureResult {\\npublic:\\n    using TryType = Try<T>;\\n\\n    template <typename Func>\\n    requires requires(Func func, TryType t) { func(std::move(t)); }\\n    FutureResult thenTry(Func&& func) && noexcept;\\n};\\n\\ntemplate <typename T>\\ntemplate <typename Func>\\nrequires requires(Func func, typename FutureResult<T>::TryType t) { func(std::move(t)); }\\nFutureResult<T> FutureResult<T>::thenTry(Func&& func) && noexcept {\\n    return {};\\n}\\n\\nint main() {\\n    FutureResult<int> f;\\n    std::move(f).thenTry([](Try<int> x) { return x; });\\n}\\n```\\n\\n\u5df2\u7ecf\u53d1\u9001\u7ed9 msvc \u4e86 (https://developercommunity.visualstudio.com/t/MSVC-rejects-definitions-when-requires-c/10961820) (\u6211\u624d\u4e0d\u7ba1\u662f\u5426\u6709\u91cd\u590d\u63d0\u6848\u5462..tm\u7684\u8fd9\u4e48\u4e45\u4e86\u90fd\u8fd8\u6709\u8fd9\u4e2abug...)\\n\\n\u4e4b\u524d\u6211\u63d0\u7684 ice \u90fd\u4e0d\u9e1f\u6211. \u7f8e\u540d\u5176\u66f0 `\u6211\u4eec\u7684\u56e2\u961f\u4f18\u5148\u8003\u8651\u5bf9\u5177\u6709\u5e7f\u6cdb\u5ba2\u6237\u5f71\u54cd\u7684\u4ea7\u54c1\u95ee\u9898\u91c7\u53d6\u884c\u52a8\u3002`. \u8fd8\u662f\u673a\u5668\u4eba\u56de\u590d. \u4f60\u4eec\u5f00\u6e90\u8282\u6d41\u8fd8\u6709\u771f\u4eba\u5417? \u4eba\u673a!\\n\\n\u5475\u5475, MSVC \u548c win\u90fd\ud83d\udca9"},{"id":"/2025/08/13/01-QML\u4e07\u5c81","metadata":{"permalink":"/HXLoLi/blog/2025/08/13/01-QML\u4e07\u5c81","editUrl":"https://github.com/HengXin666/HXLoLi/edit/main/blog/2025/08/13/01-QML\u4e07\u5c81.md","source":"@site/blog/2025/08/13/01-QML\u4e07\u5c81.md","title":"QML \u652f\u6301 Wayland \u6bd4 QWidget \u597d!","description":"\u672c\u4eba\u6b63\u5f0f\u52a0\u5165 QML \u5723\u6559!!!","date":"2025-08-13T21:34:56.000Z","tags":[{"inline":false,"label":"C++","permalink":"/HXLoLi/blog/tags/C++","description":"C++\u5c0f\u77e5\u8bc6"}],"readingTime":6.97,"hasTruncateMarker":true,"authors":[{"name":"Heng_Xin","title":"\u3053\u3053\u304b\u3089\u5148\u306f\u4e00\u65b9\u901a\u884c\u3060!","url":"https://github.com/HengXin666","email":"282000500@qq.com","socials":{"github":"https://github.com/HengXin666","bilibili":"https://space.bilibili.com/478917126"},"imageURL":"https://avatars.githubusercontent.com/u/103022267","key":"Heng_Xin","page":null}],"frontMatter":{"authors":"Heng_Xin","title":"QML \u652f\u6301 Wayland \u6bd4 QWidget \u597d!","date":"2025-08-13T21:34:56.000Z","tags":["C++"]},"unlisted":false,"lastUpdatedAt":1755095022000,"lastUpdatedBy":"Heng_Xin_666","prevItem":{"title":"MSVC\u7684requires\u7f3a\u9677","permalink":"/HXLoLi/blog/2025/09/07/01-MSVC\u7684requires\u7f3a\u9677"},"nextItem":{"title":"MSVC\u9519\u8bef \u7f16\u8bd1\u671f\u7f13\u5b58\u9519\u8bef\u548cICE","permalink":"/HXLoLi/blog/2025/07/30/01-MSVC\u9519\u8bef"}},"content":"## \u672c\u4eba\u6b63\u5f0f\u52a0\u5165 QML \u5723\u6559!!!\\n\\n\u6700\u8fd1\u91cd\u62fe\u4e4b\u524d\u5199\u7684\u97f3\u4e50\u64ad\u653e\u5668\u9879\u76ee. \u56e0\u4e3a\u4e00\u5f00\u59cb\u662f\u4f7f\u7528 QWidget \u5f00\u53d1\u7684. \u53ef\u662f\u6211\u5c0a\u8d35\u7684 Arch Linux \u4f7f\u7528\u7684\u662f KDE (Wayland) \u684c\u9762\u7cfb\u7edf...\\n\\n\x3c!-- truncate --\x3e\\n\\n\u7ed3\u679c\u5c31\u662f \u7a97\u53e3\u7684 move \u4e0d\u884c, \u9876\u7f6e\u4e0d\u884c, \u53ef\u7a7f\u900f\u7a97\u53e3 / \u900f\u660e\u7a97\u53e3 / \u65e0\u8fb9\u7a97\u53e3, \u90fd\u96be\u641e...\\n\\n\u7f51\u4e0a\u5168\u662f CSDN \u7684\u8d64\ud83d\udca9\u6559\u7a0b, \u6839\u672c\u5c31\u4e0d\u884c. \u5916\u7f51\u4e5f\u53ea\u770b\u5230\u4e86\u5916\u56fd\u8001\u54e5\u5728\u65e0\u5948...\\n\\nGPT / DS \u76f4\u63a5\u4e0a\u5927\u70ae, \u5199\u5f97\u663e\u7136\u4e0d\u8de8\u5e73\u53f0\u8fd8\u8d85\u590d\u6742...\\n\\nQWidget \u65e0\u8fb9\u7a97\u53e3\u88ab\u653e\u5f03\u4e86...\\n\\n---\\n\\n> [!TIP]\\n> ## \u672c\u4eba\u6b63\u5f0f\u52a0\u5165 QML \u5723\u6559!!!\\n>\\n> \u8981\u662f QML \u6539\u53eb **QTML** \u5c31\u66f4\u597d\u4e86 (\u7c7b\u4f3c\u4e8e js -> ts, \u6b64\u6b21\u7684 T \u662f `type`)\\n\\n\u6700\u8fd1\u770b\u756a, \u6b4c\u597d\u542c... Linux \u6ca1\u6709\u9177\u72d7... \u4e0d\u4e60\u60ef\u5176\u4ed6\u97f3\u4e50\u7a0b\u5e8f... \u6b63\u597d\u53ef\u4ee5\u91cd\u6784\u6211\u7684 ASS Music \u64ad\u653e\u5668~\\n\\n\u5e76\u4e14\u5b66\u4e86 QML \u4e5f\u8981\u627e\u4e2a\u4e1c\u897f\u7ec3\u624b.\\n\\n\u8c01\u77e5\u9053, \u8ba9\u6211\u53d1\u73b0\u4e86!! QML \u5c45\u7136\u9ed8\u8ba4\u6709\u8de8\u5e73\u53f0\u7684 \u79fb\u52a8\u3001\u7f29\u653e, \u8fd9\u8ba9\u65e0\u8fb9\u7a97\u53e3\u975e\u5e38\u7b80\u5355. \u5e76\u4e14\u9f20\u6807\u7a7f\u900f\u7a97\u53e3\u4e5f\u975e\u5e38\u7b80\u5355!\\n\\n### 1. \u901a\u7528\u65e0\u8fb9\u7a97\u53e3\\n\\n```qml [c01-\u901a\u7528\u65e0\u8fb9\u7a97\u53e3]\\n// https://github.com/HengXin666/HX-Music/blob/main/resources/qml/window/BorderlessWindow.qml\\npragma ComponentBehavior: Bound\\nimport QtQuick\\nimport QtQuick.Controls\\nimport QtQuick.Layouts\\nimport QtQuick.Window\\n\\nWindow {\\n    id: root\\n    flags: Qt.FramelessWindowHint\\n    color: \\"transparent\\"\\n\\n    property int bw: 3                  // \u8fb9\u6846\u539a\u5ea6\\n    property bool allowInnerMove: true  // \u4e2d\u95f4\u533a\u57df\u662f\u5426\u5141\u8bb8\u62d6\u52a8\\n    property bool showBorder: true      // \u662f\u5426\u663e\u793a\u8fb9\u6846 (\u4e0d\u5f71\u54cdresize\u4ea4\u4e92)\\n    property color borderColor: \\"red\\"   // \u8fb9\u6846\u989c\u8272\\n    property Component delegate: Item { // \u6b63\u6587\u5185\u5bb9\\n        Text {\\n            text: \\"\u8bf7\u52a1\u5fc5\u5b9e\u73b0 delegate \u81ea\u7ed8\u5185\u90e8\u5185\u5bb9\\"\\n        }\\n    }\\n    property Component titleBar: Rectangle { // \u81ea\u7ed8\u6807\u9898\u680f, \u53ef\u4e3anull, \u5185\u90e8\u9700\u8981\u81ea\u5b9a\u4e49 height\\n        height: 30\\n        color: \\"#3f3f3f\\"\\n        MouseArea {\\n            anchors.fill: parent\\n            onDoubleClicked: root.toggleMaximized()\\n            acceptedButtons: Qt.LeftButton\\n            // \u4e0d\u8981\u62d6\u52a8, \u79fb\u52a8\u903b\u8f91\u4ea4\u7ed9\u5916\u9762\u7684 DragHandler\\n        }\\n        RowLayout {\\n            anchors.fill: parent\\n            Label {\\n                text: root.title\\n                elide: Label.ElideRight\\n                horizontalAlignment: Qt.AlignHCenter\\n                verticalAlignment: Qt.AlignVCenter\\n                Layout.fillWidth: true\\n            }\\n            // \u6700\u5c0f\u5316\u6309\u94ae\\n            Item {\\n                Layout.preferredWidth: 30\\n                Layout.preferredHeight: 30\\n                Image {\\n                    anchors.centerIn: parent\\n                    width: 16\\n                    height: 16\\n                    source: \\"qrc:/icons/dropdown.svg\\"\\n                }\\n                MouseArea {\\n                    anchors.fill: parent\\n                    onClicked: root.showMinimized()\\n                }\\n            }\\n\\n            // \u6700\u5927\u5316/\u8fd8\u539f\u6309\u94ae\\n            Item {\\n                Layout.preferredWidth: 30\\n                Layout.preferredHeight: 30\\n                Image {\\n                    anchors.centerIn: parent\\n                    width: 16\\n                    height: 16\\n                    source: root.visibility === Window.Maximized\\n                            ? \\"qrc:/icons/restore.svg\\"   // \u8fd8\u539f\u56fe\u6807\\n                            : \\"qrc:/icons/up.svg\\"  // \u6700\u5927\u5316\u56fe\u6807\\n                }\\n                MouseArea {\\n                    anchors.fill: parent\\n                    onClicked: {\\n                        if (root.visibility === Window.Maximized)\\n                            root.showNormal();\\n                        else\\n                            root.showMaximized();\\n                    }\\n                }\\n            }\\n\\n            // \u5173\u95ed\u6309\u94ae\\n            Item {\\n                Layout.preferredWidth: 30\\n                Layout.preferredHeight: 30\\n                Image {\\n                    anchors.centerIn: parent\\n                    width: 16\\n                    height: 16\\n                    source: \\"qrc:/icons/close.svg\\"\\n                }\\n                MouseArea {\\n                    anchors.fill: parent\\n                    onClicked: root.close()\\n                }\\n            }\\n        }\\n    }\\n\\n    // \u66b4\u9732\u7684\u5f15\u7528\\n    property alias delegateRef: mainUI.item\\n    property alias titleBarRef: titleBarLoader.item\\n\\n    function toggleMaximized() {\\n        if ((root.visibility & Window.Maximized) === Window.Maximized) {\\n            root.showNormal();\\n        } else {\\n            root.showMaximized();\\n        }\\n    }\\n\\n    // \u5185\u90e8\u72b6\u6001\u6570\u636e\\n    QtObject {\\n        id: self\\n        property int bw: 0 // \u8fb9\u6846\u539a\u5ea6 [const]\\n\\n        Component.onCompleted: {\\n            if (root.showBorder) {\\n                // \u5982\u679c\u663e\u793a\u8fb9\u6846, \u90a3\u4e48\u5168\u5c4f\u65f6\u5019\u4e5f\u9700\u8981\u663e\u793a\u8fb9\u6846, \u56e0\u6b64\u4e0d\u5e94\u8be5\u5c4f\u853d\u8fb9\u6846\\n                return;\\n            }\\n            bw = root.bw;\\n        }\\n    }\\n\\n    // \u5168\u5c4f\u65f6\u5019\u662f\u5426\u9700\u8981\u8fb9\u8ddd\\n    onVisibilityChanged: (val) => {\\n        if (self.bw === 0) {\\n            return;\\n        }\\n        root.bw = (val & Window.Maximized) === Window.Maximized \\n            ? 0 \\n            : self.bw;\\n    }\\n\\n    // \u9f20\u6807\u533a\u57df\u4ec5\u7528\u4e8e\u8bbe\u7f6e\u6b63\u786e\u7684\u5149\u6807\u5f62\u72b6\\n    MouseArea {\\n        anchors.fill: parent\\n        hoverEnabled: true\\n        cursorShape: {\\n            const mousePoint = Qt.point(mouseX, mouseY);\\n            const b = root.bw + 10; // \u89d2\u5c3a\u5bf8\\n            if (mousePoint.x < b && mousePoint.y < root.bw)              // \u5de6\u4e0a\\n                return Qt.SizeFDiagCursor;\\n            if (mousePoint.x >= width - b && mousePoint.y >= height - b) // \u53f3\u4e0b\\n                return Qt.SizeFDiagCursor;\\n            if (mousePoint.x >= width - b && mousePoint.y < root.bw)     // \u53f3\u4e0a\\n                return Qt.SizeBDiagCursor;\\n            if (mousePoint.x < b && mousePoint.y >= height - b)          // \u5de6\u4e0b\\n                return Qt.SizeBDiagCursor;\\n            if (mousePoint.x < b || mousePoint.x >= width - b)           // \u6c34\u5e73\\n                return Qt.SizeHorCursor;\\n            if (mousePoint.y < root.bw || mousePoint.y >= height - b)    // \u7ad6\u76f4\\n                return Qt.SizeVerCursor;\\n        }\\n        acceptedButtons: Qt.NoButton // \u4e0d\u5904\u7406\u5b9e\u9645\u4e8b\u4ef6\\n    }\\n\\n    // \u7f29\u653e\\n    DragHandler {\\n        id: resizeHandler\\n        target: null\\n        // \u8986\u76d6\u6574\u4e2a\u7a97\u53e3\\n        onActiveChanged: if (active) {\\n            const p = resizeHandler.centroid.position;\\n            const b = root.bw + 10; // \u89d2\u5c3a\u5bf8\\n            let e = 0;\\n            const leftEdge = p.x < b;\\n            const rightEdge = p.x >= root.width - b;\\n            const topEdge = p.y < root.bw;\\n            const bottomEdge = p.y >= root.height - b;\\n\\n            if (leftEdge) {\\n                e |= Qt.LeftEdge;\\n            }\\n            if (rightEdge) {\\n                e |= Qt.RightEdge;\\n            }\\n            if (topEdge) {\\n                e |= Qt.TopEdge;\\n            }\\n            if (bottomEdge) {\\n                e |= Qt.BottomEdge;\\n            }\\n\\n            if (e !== 0) {\\n                root.startSystemResize(e);\\n            } else if (root.allowInnerMove) {\\n                root.startSystemMove();\\n            }\\n        }\\n    }\\n\\n    // \u7ed8\u5236\u8fb9\u6846 (\u4ec5\u89c6\u89c9)\\n    Rectangle {\\n        anchors.fill: parent\\n        color: \\"transparent\\"\\n        border.color: root.showBorder ? root.borderColor : \\"transparent\\"\\n        border.width: root.showBorder ? root.bw : 0\\n    }\\n\\n    // \u6807\u9898\u680f (\u5982\u679c\u6709\u7684\u8bdd)\\n    Loader {\\n        id: titleBarLoader\\n        width: parent.width - 2 * root.bw\\n        x: root.bw\\n        y: root.bw\\n        sourceComponent: root.titleBar\\n    }\\n\\n    // \u5185\u5bb9\u533a\\n    Loader {\\n        id: mainUI\\n        x: root.bw\\n        y: titleBarLoader.item ? titleBarLoader.y + titleBarLoader.height : root.bw\\n        width: root.width - 2 * root.bw\\n        height: root.height - (titleBarLoader.item ? titleBarLoader.y + titleBarLoader.height + root.bw : 2 * root.bw)\\n        sourceComponent: root.delegate\\n    }\\n}\\n```\\n\\n\u7b80\u76f4\u7b80\u5355\u5230\u7206\u70b8!\\n\\n- `root.startSystemMove();` \u5c31\u53ef\u4ee5\u62d6\u52a8\\n\\n- `root.startSystemResize(e);` \u5c31\u53ef\u4ee5\u8c03\u6574\u5927\u5c0f (\u542c\u8bf4 macOS \u4e0d\u652f\u6301(?))\\n\\n\u4ed6\u4eec\u90fd\u662f\u8de8\u5e73\u53f0\u7684! \u4e0d\u8bba win / linux, x11 / Wayland \u90fd\u53ef\u4ee5.\\n\\n\u76f4\u63a5\u723d\u98de\u4e86! \u4e2a\u4eba\u6b63\u5f0f\u52a0\u5165 QML \u5723\u6559! QWidget \u4f60\u7b97\u8001\u51e0\u554a!\\n\\n### 2. \u9f20\u6807\u7a7f\u900f\\n\\n```qml [c2-\u9f20\u6807\u7a7f\u900f(\u6574\u4e2a\u7a97\u53e3)]\\nWindow {\\n    property bool locked: false // \u662f\u5426\u5f00\u542f\u6574\u4e2a\u7a97\u53e3\u7684\u9f20\u6807\u7a7f\u900f\\n\\n    flags: Qt.FramelessWindowHint\\n         | Qt.WindowStaysOnTopHint\\n         | Qt.Tool\\n         | (locked ? Qt.WindowDoesNotAcceptFocus | Qt.WindowTransparentForInput : Qt.NoItemFlags)\\n}\\n```\\n\\n```qml [c2-\u9f20\u6807\u7a7f\u900f(\u90e8\u5206\u7a97\u53e3)-QML]\\n// QML \u90e8\u5206\\nWindow {\\n    property bool locked: false // \u662f\u5426\u5f00\u542f\u90e8\u5206\u7a97\u53e3\u7684\u9f20\u6807\u7a7f\u900f\\n\\n    flags: Qt.FramelessWindowHint\\n         | Qt.WindowStaysOnTopHint\\n\\n    function lock() {\\n        locked = true;\\n        Qt.callLater(() => {\\n            // \u8ba1\u7b97\u4e0d\u9700\u8981\u7a7f\u900f\u7684\u4f4d\u7f6e\\n            const posInRoot = delegateRef.lockButtonRef.mapToItem(delegateRef.delegateRoot, 0, 0);\\n            WindowMaskUtil.addControlRect(\\n                posInRoot.x, posInRoot.y,\\n                delegateRef.lockButtonRef.width,\\n                delegateRef.lockButtonRef.height\\n            );\\n            WindowMaskUtil.setMask(root);\\n        });\\n    }\\n    function unlock() {\\n        locked = false;\\n        Qt.callLater(() => {\\n            WindowMaskUtil.clear(root);\\n        });\\n    }\\n}\\n```\\n\\n```cpp [c2-\u9f20\u6807\u7a7f\u900f(\u90e8\u5206\u7a97\u53e3)-C++]\\n// C++ \u4fa7\\n#include <QObject>\\n#include <QWindow>\\n#include <QPolygon>\\n#include <QRegion>\\n\\n#include <QDebug>\\n\\nnamespace HX {\\n\\nclass WindowMaskUtil : public QObject {\\n    Q_OBJECT\\npublic:\\n    explicit WindowMaskUtil(QObject* parent = nullptr)\\n        : QObject(parent)\\n    {}\\n\\n    Q_INVOKABLE void clear(QWindow* window) {\\n        _regions = {};\\n        if (window) {\\n            window->setMask(_regions);\\n        }\\n    }\\n\\n    Q_INVOKABLE void addControlRect(int x, int y, int width, int height) {\\n        _regions = QRegion(\\n            QRect(x, y, width, height)\\n        );\\n    }\\n\\n    Q_INVOKABLE void setMask(QWindow* window) {\\n        if (!window || _regions.isEmpty()) {\\n            return;\\n        }\\n        // \u8bbe\u7f6e\u7a97\u53e3\u63a9\u7801, \u652f\u6301\u4e0d\u89c4\u5219\u7684\\n        window->setMask(_regions);\\n    }\\nprivate:\\n    QRegion _regions;\\n};\\n\\n} // namespace HX\\n```\\n\\n\u4e0d\u8fc7\u6211\u671f\u671b\u4e00\u4e2a\u9f20\u6807\u53ef\u4ee5\u7a7f\u900f, \u4f46\u662f\u4ecd\u7136\u53ef\u4ee5\u63a5\u53d7\u5230\u9f20\u6807\u4e8b\u4ef6\u7684api... \u4f3c\u4e4e\u4e0d\u884c, \u5f88\u96be\u641e. (Wayland)"},{"id":"/2025/07/30/01-MSVC\u9519\u8bef","metadata":{"permalink":"/HXLoLi/blog/2025/07/30/01-MSVC\u9519\u8bef","editUrl":"https://github.com/HengXin666/HXLoLi/edit/main/blog/2025/07/30/01-MSVC\u9519\u8bef.md","source":"@site/blog/2025/07/30/01-MSVC\u9519\u8bef.md","title":"MSVC\u9519\u8bef \u7f16\u8bd1\u671f\u7f13\u5b58\u9519\u8bef\u548cICE","description":"\u4e4b\u524d\u5728\u5199\u53cd\u5c04\u7684\u65f6\u5019, \u9047\u5230\u7684\u8fd9\u4e2a\u95ee\u9898; \u4e00\u5f00\u59cb\u4ee5\u4e3a\u662f\u6211\u81ea\u5df1\u5199\u9519\u4e86, \u6392\u67e5\u4e86\u534a\u5929, \u4ece VsCode \u6362\u5230 MSVC...","date":"2025-07-30T13:47:35.000Z","tags":[{"inline":false,"label":"C++","permalink":"/HXLoLi/blog/tags/C++","description":"C++\u5c0f\u77e5\u8bc6"}],"readingTime":4.485,"hasTruncateMarker":true,"authors":[{"name":"Heng_Xin","title":"\u3053\u3053\u304b\u3089\u5148\u306f\u4e00\u65b9\u901a\u884c\u3060!","url":"https://github.com/HengXin666","email":"282000500@qq.com","socials":{"github":"https://github.com/HengXin666","bilibili":"https://space.bilibili.com/478917126"},"imageURL":"https://avatars.githubusercontent.com/u/103022267","key":"Heng_Xin","page":null}],"frontMatter":{"authors":"Heng_Xin","title":"MSVC\u9519\u8bef \u7f16\u8bd1\u671f\u7f13\u5b58\u9519\u8bef\u548cICE","date":"2025-07-30T13:47:35.000Z","tags":["C++"]},"unlisted":false,"lastUpdatedAt":1753857188000,"lastUpdatedBy":"Heng_Xin_666","prevItem":{"title":"QML \u652f\u6301 Wayland \u6bd4 QWidget \u597d!","permalink":"/HXLoLi/blog/2025/08/13/01-QML\u4e07\u5c81"},"nextItem":{"title":"gcc \u5185\u90e8\u7f16\u8bd1\u5668 \u6bb5\u9519\u8bef","permalink":"/HXLoLi/blog/2025/07/28/01_gcc\u7f16\u8bd1\u5668bug"}},"content":"\u4e4b\u524d\u5728\u5199\u53cd\u5c04\u7684\u65f6\u5019, \u9047\u5230\u7684\u8fd9\u4e2a\u95ee\u9898; \u4e00\u5f00\u59cb\u4ee5\u4e3a\u662f\u6211\u81ea\u5df1\u5199\u9519\u4e86, \u6392\u67e5\u4e86\u534a\u5929, \u4ece VsCode \u6362\u5230 MSVC...\\n\\n\u6700\u540e\u5199\u4e86\u6700\u5c0f\u590d\u73b0\u6848\u4f8b, \u7136\u540e\u624d\u53d1\u73b0\u5c31\u662f MSVC sabi!\\n\\n\x3c!-- truncate --\x3e\\n\\n## \u63cf\u8ff0\\n\\n\u8bf7\u89c1 https://github.com/HengXin666/HXLibs/issues/7\\n\\n```cpp\\n#define DOCTEST_CONFIG_IMPLEMENT_WITH_MAIN\\n#include <doctest.h>\\n\\n#include <HXLibs/reflection/MemberName.hpp>\\n#include <HXLibs/reflection/ReflectionMacro.hpp>\\n#include <HXLibs/log/Log.hpp>\\n\\nusing namespace HX;\\n\\nTEST_CASE(\\"\u5bf9\u7167\u7ec4: \u65e0\u5b8f\u53cd\u5c04\\") {\\n    struct Case01 {\\n        int a;\\n        std::string b;\\n        std::vector<Case01> c;\\n    };\\n\\n    struct Case02 {\\n        int num;\\n        std::string str;\\n        std::vector<Case02> arr;\\n    };\\n\\n    constexpr auto N = reflection::membersCountVal<Case01>;\\n    constexpr auto name = reflection::getMembersNames<Case01>();\\n\\n    CHECK(N == 3);\\n    CHECK(name[0] == \\"a\\");\\n    CHECK(name[1] == \\"b\\");\\n    CHECK(name[2] == \\"c\\");\\n\\n    constexpr auto N2 = reflection::membersCountVal<Case02>;\\n    constexpr auto name2 = reflection::getMembersNames<Case02>();\\n\\n    CHECK(N2 == 3);\\n    CHECK(name2[0] == \\"num\\");\\n    CHECK(name2[1] == \\"str\\");\\n    CHECK(name2[2] == \\"arr\\");\\n}\\n```\\n\\n\u5728\u7ebf\u5b9e\u9a8c: https://godbolt.org/z/zzaWsP5j7\\n\\n```cpp\\n#include <variant>\\n#include <optional>\\n#include <memory>\\n#include <type_traits>\\n\\nnamespace HX::meta {\\n\\n/**\\n * @brief \u5220\u9664 T \u7c7b\u578b\u7684 const\u3001\u5f15\u7528\u3001v \u4fee\u9970\\n * @tparam T \\n */\\ntemplate <typename T>\\nusing remove_cvref_t = std::remove_cv_t<std::remove_reference_t<T>>;\\n\\n} // !namespace\\n\\nusing namespace HX;\\n\\n/**\\n * @brief \u5bf9\u4e8e\u7c7b\u578b T, \u63d0\u4f9b\u7c7b\u9759\u6001\u6210\u5458\\n * @tparam T \\n */\\ntemplate <typename T>\\nstruct StaticObj {\\n    inline static meta::remove_cvref_t<T> obj;\\n};\\n\\n/**\\n * @brief \u83b7\u53d6\u7c7b\u9759\u6001\u6210\u5458T\\n * @tparam T \\n * @return constexpr utils::remove_cvref_t<T>& \\n */\\ntemplate <typename T>\\ninline constexpr meta::remove_cvref_t<T>& getStaticObj() {\\n    return StaticObj<T>::obj;\\n}\\n\\n/**\\n * @brief \u8bbf\u95ee\u8005\u7c7b \u4e3b\u6a21\u7248 (\u4e0d\u53ef\u4f7f\u7528)\\n * @tparam T `\u805a\u5408\u7c7b`\u7c7b\u578b\\n * @tparam N \u6210\u5458\u4e2a\u6570\\n * @warning \u5982\u679c\u5339\u914d\u5230\u6b64\u6a21\u7248, \u90a3\u4e48\u6709\u4e24\u79cd\u53ef\u80fd:\\n * @warning 1) \u4f60\u7684\u7c7b\u6709255+\u4e2a\u6210\u5458\\n * @warning 2) \u4f60\u7684\u7c7b\u4e0d\u662f\u805a\u5408\u7c7b\\n */\\ntemplate <typename T, std::size_t N>\\nstruct ReflectionVisitor {\\n    static constexpr auto visit() {\\n        static_assert(!sizeof(T), \\"\\");\\n    }\\n};\\n\\n/**\\n * @brief \u504f\u7279\u5316\u6a21\u7248\u751f\u6210 \u5de5\u5177\u5b8f\\n */\\n#define _HX_GENERATE_TEMPLATES_WITH_SPECIALIZATION_(N, ...) \\\\\\ntemplate <typename T>                                       \\\\\\nstruct ReflectionVisitor<T, N> {                            \\\\\\n    static constexpr auto visit() {                         \\\\\\n        auto& [__VA_ARGS__] = getStaticObj<T>();            \\\\\\n        auto t = std::tie(__VA_ARGS__);                     \\\\\\n        constexpr auto f = [](auto&... fs) {                \\\\\\n            return std::make_tuple((&fs)...);               \\\\\\n        };                                                  \\\\\\n        return std::apply(f, t);                            \\\\\\n    }                                                       \\\\\\n};\\n\\n_HX_GENERATE_TEMPLATES_WITH_SPECIALIZATION_(1, f0);\\n_HX_GENERATE_TEMPLATES_WITH_SPECIALIZATION_(2, f0, f1);\\n_HX_GENERATE_TEMPLATES_WITH_SPECIALIZATION_(3, f0, f1, f2);\\n_HX_GENERATE_TEMPLATES_WITH_SPECIALIZATION_(4, f0, f1, f2, f3);\\n\\ntemplate <std::size_t N, typename T>\\ninline constexpr auto getStaticObjPtrTuple() {\\n return ReflectionVisitor<meta::remove_cvref_t<T>, N>::visit();\\n}\\n\\n#include <string>\\n#include <vector>\\n#include <iostream>\\n\\ntemplate <auto ptr>\\ninline constexpr std::string_view getMemberName() {\\n#if defined(_MSC_VER)\\n    constexpr std::string_view funcName = __FUNCSIG__;\\n#else\\n    constexpr std::string_view funcName = __PRETTY_FUNCTION__;\\n#endif\\n    return funcName;\\n}\\n\\ntemplate <class T>\\nstruct Wrapper {\\n  using Type = T;\\n  T v;\\n};\\n\\ntemplate <class T>\\nWrapper(T) -> Wrapper<T>;\\n\\n// This workaround is necessary for clang. or msvc\\ntemplate <class T>\\ninline constexpr auto wrap(const T& arg) noexcept {\\n  return Wrapper{arg};\\n}\\n\\nint main() {\\n    struct Case01 {\\n        int a;\\n        std::string b;\\n        std::vector<Case01> c;\\n    };\\n\\n    struct Case02 {\\n        int num;\\n        std::string str;\\n        std::vector<Case02> arr;\\n    };\\n\\n    constexpr auto tp1 = getStaticObjPtrTuple<3, Case01>();\\n    constexpr auto tp2 = getStaticObjPtrTuple<3, Case02>();\\n    // clang 17 <=, \u5c31\u4f1a\u62a5\u9519\\n    // msvc \u5f97\u5230\u7684\u662f a \u548c a, \u800c\u4e0d\u662f a \u548c num\\n    std::cout << getMemberName<get<0>(tp1)>() << \'\\\\n\';\\n    std::cout << getMemberName<get<0>(tp2)>() << \'\\\\n\';\\n\\n    // \u9700\u8981\u5957\u4e00\u5c42\\n    std::cout << getMemberName<wrap(get<0>(tp1))>() << \'\\\\n\';\\n    std::cout << getMemberName<wrap(get<0>(tp2))>() << \'\\\\n\';\\n    return 0;\\n}\\n```\\n\\n\u53d1\u73b0\u5957\u4e00\u5c42\u5c31\u597d\u4e86~\\n\\n## \u8fd8\u6709\u9ad8\u624b\\n\\n\u5f53\u6211\u51c6\u5907\u6574\u4e2a\u6700\u5c0f\u53ef\u590d\u73b0\u6848\u4f8b\u7684\u65f6\u5019:\\n\\n```cpp [c1-\u6848\u4f8b]\\n#include <string>\\n#include <iostream>\\n\\ntemplate <auto ptr>\\ninline constexpr std::string_view getMemberName() {\\n#if defined(_MSC_VER)\\n    constexpr std::string_view funcName = __FUNCSIG__;\\n#else\\n    constexpr std::string_view funcName = __PRETTY_FUNCTION__;\\n#endif\\n    return funcName;\\n}\\n\\ntemplate <class T>\\nstruct Wrapper {\\n  using Type = T;\\n  T v;\\n};\\n\\ntemplate <class T>\\nWrapper(T) -> Wrapper<T>;\\n\\ntemplate <class T>\\ninline constexpr auto wrap(const T& arg) noexcept {\\n  return Wrapper{arg};\\n}\\n\\nint main() {\\n    struct Case01 {\\n        int a;\\n    };\\n\\n    struct Case02 {\\n        int num;\\n    };\\n\\n    static Case01 c01;\\n    static Case02 c02;\\n\\n    constexpr auto ptr1 = &c01.a;\\n    constexpr auto ptr2 = &c02.num;\\n\\n    // MSVC obtains a and a, not a and num\\n    // std::cout << getMemberName<ptr1>() << \'\\\\n\';\\n    // std::cout << getMemberName<ptr2>() << \'\\\\n\';\\n\\n    // (50): fatal error C1001: Internal compiler error.\\n    std::cout << getMemberName<wrap(ptr1)>() << \'\\\\n\';\\n    std::cout << getMemberName<wrap(ptr2)>() << \'\\\\n\';\\n    return 0;\\n}\\n```\\n\\n```cpp [c1-MSVC\u7f16\u8bd1\u8f93\u51fa]\\nexample.cpp\\n<source>(50): fatal error C1001: Internal compiler error.\\n(compiler file \'msc1.cpp\', line 1533)\\n To work around this problem, try simplifying or changing the program near the locations listed above.\\nIf possible please provide a repro here: https://developercommunity.visualstudio.com \\nPlease choose the Technical Support command on the Visual C++ \\n Help menu, or open the Technical Support help file for more information\\n<source>(50): note: the template instantiation context (the oldest one first) is\\n<source>(50): note: see reference to function template instantiation \'std::string_view getMemberName(void)\' being compiled\\nINTERNAL COMPILER ERROR in \'Z:\\\\compilers\\\\msvc\\\\14.43.34808-14.43.34810.0\\\\bin\\\\Hostx64\\\\x64\\\\cl.exe\'\\n    Please choose the Technical Support command on the Visual C++\\n    Help menu, or open the Technical Support help file for more information\\n```\\n\\n\u6211\u9760, \u76f4\u63a5 `Internal compiler error (ICE)` \u4e86...\\n\\n\u7136\u540e\u6211\u53ea\u597d\u53cd\u9988\u7ed9 MSVC \u4e86: https://developercommunity.visualstudio.com/t/MSVC-ICE-when-using-templated-auto-param/10944095"},{"id":"/2025/07/28/01_gcc\u7f16\u8bd1\u5668bug","metadata":{"permalink":"/HXLoLi/blog/2025/07/28/01_gcc\u7f16\u8bd1\u5668bug","editUrl":"https://github.com/HengXin666/HXLoLi/edit/main/blog/2025/07/28/01_gcc\u7f16\u8bd1\u5668bug.md","source":"@site/blog/2025/07/28/01_gcc\u7f16\u8bd1\u5668bug.md","title":"gcc \u5185\u90e8\u7f16\u8bd1\u5668 \u6bb5\u9519\u8bef","description":"\u4e4b\u524d\u5199\u9879\u76ee\u7684\u65f6\u5019\u53d1\u73b0\u4e00\u4e2agcc\u7f16\u8bd1\u5668bug. \u5c1d\u8bd5\u7ed9\u4ed6\u4eec\u63d0 issues \u4e86~...","date":"2025-07-28T09:56:36.000Z","tags":[{"inline":false,"label":"C++","permalink":"/HXLoLi/blog/tags/C++","description":"C++\u5c0f\u77e5\u8bc6"}],"readingTime":5.49,"hasTruncateMarker":true,"authors":[{"name":"Heng_Xin","title":"\u3053\u3053\u304b\u3089\u5148\u306f\u4e00\u65b9\u901a\u884c\u3060!","url":"https://github.com/HengXin666","email":"282000500@qq.com","socials":{"github":"https://github.com/HengXin666","bilibili":"https://space.bilibili.com/478917126"},"imageURL":"https://avatars.githubusercontent.com/u/103022267","key":"Heng_Xin","page":null}],"frontMatter":{"authors":"Heng_Xin","title":"gcc \u5185\u90e8\u7f16\u8bd1\u5668 \u6bb5\u9519\u8bef","date":"2025-07-28T09:56:36.000Z","tags":["C++"]},"unlisted":false,"lastUpdatedAt":1753857188000,"lastUpdatedBy":"Heng_Xin_666","prevItem":{"title":"MSVC\u9519\u8bef \u7f16\u8bd1\u671f\u7f13\u5b58\u9519\u8bef\u548cICE","permalink":"/HXLoLi/blog/2025/07/30/01-MSVC\u9519\u8bef"},"nextItem":{"title":"\u8c03\u6559VSCode, \u4ee5\u4ee3\u7801\u63d0\u793aC++","permalink":"/HXLoLi/blog/2025/06/30/01-\u8c03\u6559VSCode"}},"content":"\u4e4b\u524d\u5199\u9879\u76ee\u7684\u65f6\u5019\u53d1\u73b0\u4e00\u4e2agcc\u7f16\u8bd1\u5668bug. \u5c1d\u8bd5\u7ed9\u4ed6\u4eec\u63d0 `issues` \u4e86~...\\n\\n\x3c!-- truncate --\x3e\\n\\n## 1. \u5b9e\u9645\u4ee3\u7801\\n\\n\u5b9e\u9645\u4ee3\u7801\u5982\u4e0b:\\n\\n```cpp [c1-\u9879\u76ee\u6e90\u7801]\\n// \u8282\u9009: https://github.com/HengXin666/HXLibs/blob/main/include/HXLibs/reflection/json/JsonRead.hpp\\n\\ntemplate <std::size_t _I>\\nstruct SetObjIdx {\\n    inline static constexpr std::size_t Idx = _I;\\n    constexpr SetObjIdx() = default;\\n};\\n\\ntemplate <std::size_t... Idx>\\nconstexpr auto makeVariantSetObjIdxs(std::index_sequence<Idx...>) {\\n    /** \\n     * GCC Hock, \u5728 gcc/x86_64-pc-linux-gnu/15.1.1/lto-wrapper\\n     * gcc \u7248\u672c 15.1.1 20250425 (GCC) \u4e2d, \u4e0d\u80fd\u4f7f\u7528:\\n     * using CHashMapValType = decltype([] <std::size_t... Idx> (std::index_sequence<Idx...>) {\\n     *     return std::variant<SetObjIdx<Idx>...>{};\\n     * }(std::make_index_sequence<N>{}));\\n     * \u5426\u5219\u7f16\u8bd1\u5668\u4f1a\u5d29\u6e83...\\n     */\\n    return std::variant<SetObjIdx<Idx>...>{};\\n}\\n\\ntemplate <typename T>\\nconstexpr auto makeNameToIdxVariantHashMap() {\\n    constexpr auto N = membersCountVal<T>;\\n    constexpr auto nameArr = getMembersNames<T>();\\n    using CHashMapValType = decltype([] <std::size_t... Idx> (std::index_sequence<Idx...>) {\\n         return std::variant<SetObjIdx<Idx>...>{};\\n    }(std::make_index_sequence<N>{}));\\n    return container::CHashMap<std::string_view, CHashMapValType, N>{\\n        [&] <std::size_t... Idx> (std::index_sequence<Idx...>) {\\n            return std::array<std::pair<std::string_view, CHashMapValType>, N>{{\\n                {nameArr[Idx], CHashMapValType{SetObjIdx<Idx>{}}}... \\n            }};\\n        }(std::make_index_sequence<N>{})\\n    };\\n}\\n```\\n\\n```cpp [c1-\u62a5\u9519]\\n[build] /home/loli/Loli/code/HXLibs/include/HXLibs/reflection/json/JsonRead.hpp: In instantiation of \u2018HX::reflection::internal::makeNameToIdxVariantHashMap<HXTest>()::<lambda(std::index_sequence<_Inds ...>)> [with long unsigned int ...Idx = {0, 1}; std::index_sequence<_Inds ...> = std::integer_sequence<long unsigned int, 0, 1>]\u2019:\\n[build] /home/loli/Loli/code/HXLibs/include/HXLibs/reflection/json/JsonRead.hpp:120:10:   required from \u2018constexpr auto HX::reflection::internal::makeNameToIdxVariantHashMap() [with T = HXTest]\u2019\\n[build]   116 |         [&] <std::size_t... Idx> (std::index_sequence<Idx...>) {\\n[build]       |         ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\\n[build]   117 |             return std::array<std::pair<std::string_view, CHashMapValType>, N>{{\\n[build]       |             ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\\n[build]   118 |                 {nameArr[Idx], CHashMapValType{SetObjIdx<Idx>{}}}...\\n[build]       |                 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\\n[build]   119 |             }};\\n[build]       |             ~~~\\n[build]   120 |         }(std::make_index_sequence<N>{})\\n[build]       |         ~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\\n[build] /home/loli/Loli/code/HXLibs/include/HXLibs/reflection/json/JsonRead.hpp:485:76:   required from \u2018static void HX::reflection::internal::FromJson::fromJson(T&, It&&, It&&) [with T = HXTest; It = const char*]\u2019\\n[build]   485 |             static constexpr auto nameHash = makeNameToIdxVariantHashMap<T>();\\n[build]       |                                              ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~\\n[build] /home/loli/Loli/code/HXLibs/include/HXLibs/reflection/json/JsonRead.hpp:528:33:   required from \u2018void HX::reflection::fromJson(T&, std::string_view) [with T = HXTest; std::string_view = std::basic_string_view<char>]\u2019\\n[build]   528 |     internal::FromJson::fromJson(t, json.begin(), json.end());\\n[build]       |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~\\n[build] /home/loli/Loli/code/HXLibs/tests/reflection/01_reflection.cpp:305:25:   required from here\\n[build]   305 |     reflection::fromJson(newT, s);\\n[build]       |     ~~~~~~~~~~~~~~~~~~~~^~~~~~~~~\\n[build] /home/loli/Loli/code/HXLibs/include/HXLibs/reflection/json/JsonRead.hpp:112:38: \u7f16\u8bd1\u5668\u5185\u90e8\u9519\u8bef\uff1a\u6bb5\u9519\u8bef\\n[build]   112 |     using CHashMapValType = decltype([] <std::size_t... Idx> (std::index_sequence<Idx...>) {\\n[build]       |                                      ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\\n[build]   113 |          return std::variant<SetObjIdx<Idx>...>{};\\n[build]       |          ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\\n[build]   114 |     }(std::make_index_sequence<N>{}));\\n[build]       |     ~                                 \\n[build] 0x26d6c51 diagnostic_context::diagnostic_impl(rich_location*, diagnostic_metadata const*, diagnostic_option_id, char const*, __va_list_tag (*) [1], diagnostic_t)\\n[build] \\t???:0\\n[build] 0x2730d98 internal_error(char const*, ...)\\n[build] \\t???:0\\n[build] 0x908d48 template_parms_to_args(tree_node*)\\n[build] \\t???:0\\n[build] 0x9224dd tsubst_lambda_expr(tree_node*, tree_node*, int, tree_node*)\\n[build] \\t???:0\\n[build] 0x911d5b tsubst(tree_node*, tree_node*, int, tree_node*)\\n[build] \\t???:0\\n[build] 0x91be37 tsubst_template_args(tree_node*, tree_node*, int, tree_node*)\\n[build] \\t???:0\\n[build] 0x91237b tsubst(tree_node*, tree_node*, int, tree_node*)\\n[build] \\t???:0\\n[build] 0x91be37 tsubst_template_args(tree_node*, tree_node*, int, tree_node*)\\n[build] \\t???:0\\n[build] 0x91237b tsubst(tree_node*, tree_node*, int, tree_node*)\\n[build] \\t???:0\\n[build] 0x92541d instantiate_decl(tree_node*, bool, bool)\\n[build] \\t???:0\\n[build] 0x7b7012 maybe_instantiate_decl(tree_node*)\\n[build] \\t???:0\\n[build] 0x7c8ad7 mark_used(tree_node*, int)\\n[build] \\t???:0\\n[build] 0x75491c build_op_call(tree_node*, vec<tree_node*, va_gc, vl_embed>**, int)\\n[build] \\t???:0\\n[build] 0x942ee2 finish_call_expr(tree_node*, vec<tree_node*, va_gc, vl_embed>**, bool, bool, int)\\n[build] \\t???:0\\n[build] 0x92541d instantiate_decl(tree_node*, bool, bool)\\n[build] \\t???:0\\n[build] 0x7b7012 maybe_instantiate_decl(tree_node*)\\n[build] \\t???:0\\n[build] 0x7c8ad7 mark_used(tree_node*, int)\\n[build] \\t???:0\\n[build] 0x753e1c build_new_function_call(tree_node*, vec<tree_node*, va_gc, vl_embed>**, int)\\n[build] \\t???:0\\n[build] 0x942eac finish_call_expr(tree_node*, vec<tree_node*, va_gc, vl_embed>**, bool, bool, int)\\n[build] \\t???:0\\n[build] 0x92541d instantiate_decl(tree_node*, bool, bool)\\n[build] \\t???:0\\n[build] Please submit a full bug report, with preprocessed source (by using -freport-bug).\\n[build] Please include the complete backtrace with any bug report.\\n[build] \u53c2\u9605 <https://gitlab.archlinux.org/archlinux/packaging/packages/gcc/-/issues> \u4ee5\u83b7\u53d6\u6307\u793a\u3002\\n[build] make[3]: *** [CMakeFiles/01_reflection.dir/build.make:79\uff1aCMakeFiles/01_reflection.dir/tests/reflection/01_reflection.cpp.o] \u9519\u8bef 1\\n```\\n\\n## 2. \u6700\u5c0f\u53ef\u590d\u73b0\\n\\n\u5c1d\u8bd5\u6700\u5c0f\u53ef\u590d\u73b0\u6848\u4f8b: (https://godbolt.org/z/9EfjWEvTP) & (https://godbolt.org/z/fM84Ex34j)\\n\\n```cpp [c2-\u6700\u5c0f\u590d\u73b0_1]\\n#include <variant>\\n#include <array>\\n\\ntemplate <std::size_t I>\\nstruct SetObjIdx {};\\n\\n// \u5fc5\u987b\u5f97\u662f\u6a21\u677f\\ntemplate <typename T = void>\\nconstexpr auto makeNameToIdxVariantHashMap() {\\n    constexpr auto N = 3U; // N \u53ef\u4ee5\u662f\u4efb\u610f\u5e38\u91cf\\n\\n    // 1. \u662f decltype \u914d\u5408 []<>(){}() + \u6a21\u677f\\n    using Res = decltype([] <std::size_t... Idx> (std::index_sequence<Idx...>) {\\n        return std::variant<SetObjIdx<Idx>...>{};\\n    } (std::make_index_sequence<N>{}));\\n\\n    // 2. \u5fc5\u987b\u662f <std::size_t... Idx> \u6a21\u677f\\n    return [&] <std::size_t... Idx> (std::index_sequence<Idx...>) {\\n        return std::array<Res, N>{\\n            SetObjIdx<Idx>{}... \\n        };\\n    }(std::make_index_sequence<N>{});\\n}\\n\\nint main() {\\n    constexpr auto res = makeNameToIdxVariantHashMap();\\n    (void)res;\\n    return 0;\\n}\\n```\\n\\n```cpp [c2-\u6700\u5c0f\u590d\u73b0_2]\\n#include <variant>\\n#include <array>\\n\\ntemplate <std::size_t I>\\nstruct SetObjIdx { std::size_t _idx; };\\n\\n// Must be a template\\ntemplate <typename T = void>\\nconstexpr auto makeNameToIdxVariantHashMap() {\\n    constexpr auto N = 3U; // N arbitrary\\n\\n    // 1. decltype \u914d\u5408 []<>(){}() + \u6a21\u677f\\n    using Res = decltype([] <std::size_t Idx> (std::index_sequence<Idx>) {\\n        return SetObjIdx<Idx>{Idx};\\n    }(std::index_sequence<N>{}));\\n\\n    // 2. \u5fc5\u987b\u662f <std::size_t... Idx> \u6a21\u677f\\n    return [&] <std::size_t... Idx> (std::index_sequence<Idx...>) {\\n        return std::array<Res, N>{\\n            SetObjIdx<N>{Idx}... \\n        };\\n    }(std::make_index_sequence<N>{});\\n}\\n\\nint main() {\\n    constexpr auto res = makeNameToIdxVariantHashMap();\\n    return 0;\\n}\\n```\\n\\n```cpp [c2-\u6700\u5c0f\u590d\u73b0_1 \u7f16\u8bd1\u8f93\u51fa]\\n<source>: In instantiation of \'makeNameToIdxVariantHashMap<>()::<lambda(std::index_sequence<__var_indices ...>)> [with long unsigned int ...Idx = {0, 1, 2}; std::index_sequence<__var_indices ...> = std::integer_sequence<long unsigned int, 0, 1, 2>]\':\\n<source>:22:6:   required from \'constexpr auto makeNameToIdxVariantHashMap() [with T = void]\'\\n   18 |     return [&] <std::size_t... Idx> (std::index_sequence<Idx...>) {\\n      |            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\\n   19 |         return std::array<Res, N>{\\n      |         ~~~~~~~~~~~~~~~~~~~~~~~~~~\\n   20 |             SetObjIdx<Idx>{}...\\n      |             ~~~~~~~~~~~~~~~~~~~\\n   21 |         };\\n      |         ~~\\n   22 |     }(std::make_index_sequence<N>{});\\n      |     ~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\\n<source>:26:53:   required from here\\n   26 |     constexpr auto res = makeNameToIdxVariantHashMap();\\n      |                          ~~~~~~~~~~~~~~~~~~~~~~~~~~~^~\\n<source>:13:26: internal compiler error: Segmentation fault\\n   13 |     using Res = decltype([] <std::size_t... Idx> (std::index_sequence<Idx...>) {\\n      |                          ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\\n   14 |         return std::variant<SetObjIdx<Idx>...>{};\\n      |         ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\\n   15 |     } (std::make_index_sequence<N>{}));\\n      |     ~                     \\n0x2287785 diagnostic_context::diagnostic_impl(rich_location*, diagnostic_metadata const*, diagnostic_option_id, char const*, __va_list_tag (*) [1], diagnostic_t)\\n\\t???:0\\n0x2298cd6 internal_error(char const*, ...)\\n\\t???:0\\n0x989f38 template_parms_to_args(tree_node*)\\n\\t???:0\\n0x9b8692 tsubst_lambda_expr(tree_node*, tree_node*, int, tree_node*)\\n\\t???:0\\n0x9ab9bc tsubst(tree_node*, tree_node*, int, tree_node*)\\n\\t???:0\\n0x9b2467 tsubst_template_args(tree_node*, tree_node*, int, tree_node*)\\n\\t???:0\\n0x9ab435 tsubst(tree_node*, tree_node*, int, tree_node*)\\n\\t???:0\\n0x99f62f instantiate_decl(tree_node*, bool, bool)\\n\\t???:0\\n0x894821 maybe_instantiate_decl(tree_node*)\\n\\t???:0\\n0x895b67 mark_used(tree_node*, int)\\n\\t???:0\\n0x806f93 build_op_call(tree_node*, vec<tree_node*, va_gc, vl_embed>**, int)\\n\\t???:0\\n0x9d8b67 finish_call_expr(tree_node*, vec<tree_node*, va_gc, vl_embed>**, bool, bool, int)\\n\\t???:0\\n0x99f62f instantiate_decl(tree_node*, bool, bool)\\n\\t???:0\\n0x894821 maybe_instantiate_decl(tree_node*)\\n\\t???:0\\n0x895b67 mark_used(tree_node*, int)\\n\\t???:0\\n0x80330e build_new_function_call(tree_node*, vec<tree_node*, va_gc, vl_embed>**, int)\\n\\t???:0\\n0x9d8b3e finish_call_expr(tree_node*, vec<tree_node*, va_gc, vl_embed>**, bool, bool, int)\\n\\t???:0\\n0x981ebd c_parse_file()\\n\\t???:0\\n0xa8b739 c_common_parse_file()\\n\\t???:0\\nPlease submit a full bug report, with preprocessed source (by using -freport-bug).\\nPlease include the complete backtrace with any bug report.\\nSee <https://gcc.gnu.org/bugs/> for instructions.\\n```\\n\\n\u76ee\u524d\u89e3\u51b3\u65b9\u6848\u662f:\\n\\n1. \u53bb\u6389\u6a21\u677f `template <typename T = void>`\\n2. \u628a `decltype([] ...)` \u63d0\u51fa\u5230\u5916\u90e8\u6a21\u677f\u51fd\u6570, \u7136\u540e `decltype(func(...))` \u4e5f\u662f OK \u7684.\\n\\n> \u5df2\u7ecf\u62a5\u544a\u5230 https://gcc.gnu.org/bugzilla/show_bug.cgi?id=121287 \u4e2d,\\n>\\n> \u633a\u597d\u7684, \u4e0d\u5230\u4e00\u5929, \u5df2\u7ecf\u88ab\u5217\u5165 [Bug 107430 (c++-lambda-decltype) - [meta-bug] lambda in decltype](https://gcc.gnu.org/bugzilla/show_bug.cgi?id=107430) \u4e2d\u4e86\\n>\\n> \u8fd8\u88ab\u4e00\u4f4d\u8001\u54e5\u6dfb\u52a0\u5230\u8d85\u9001\u4e86, \u52a0\u6cb9, \u5feb\u70b9\u4fee Bug."},{"id":"/2025/06/30/01-\u8c03\u6559VSCode","metadata":{"permalink":"/HXLoLi/blog/2025/06/30/01-\u8c03\u6559VSCode","editUrl":"https://github.com/HengXin666/HXLoLi/edit/main/blog/2025/06/30/01-\u8c03\u6559VSCode.md","source":"@site/blog/2025/06/30/01-\u8c03\u6559VSCode.md","title":"\u8c03\u6559VSCode, \u4ee5\u4ee3\u7801\u63d0\u793aC++","description":"\u5b9e\u4e60\u73af\u5883\u4f7f\u7528vscode, \u7136\u540e\u6211\u767b\u5f55\u6211\u7684\u8d26\u53f7, \u628a\u6211\u7684\u63d2\u4ef6\u548c\u914d\u7f6e\u5168\u91cf\u540c\u6b65, \u7136\u540e\u53d1\u73b0cpp\u6ca1\u6709\u4ee3\u7801\u63d0\u793a\u4e86, \u9042\u72e0\u72e0\u6ef4\u8c03\u6559VsCode...","date":"2025-06-30T21:36:28.000Z","tags":[{"inline":false,"label":"VsCode","permalink":"/HXLoLi/blog/tags/vscode","description":"\u4e0e VsCode \u914d\u7f6e\u76f8\u5173\u7684\u535a\u5ba2\u6587\u7ae0"}],"readingTime":1.365,"hasTruncateMarker":true,"authors":[{"name":"Heng_Xin","title":"\u3053\u3053\u304b\u3089\u5148\u306f\u4e00\u65b9\u901a\u884c\u3060!","url":"https://github.com/HengXin666","email":"282000500@qq.com","socials":{"github":"https://github.com/HengXin666","bilibili":"https://space.bilibili.com/478917126"},"imageURL":"https://avatars.githubusercontent.com/u/103022267","key":"Heng_Xin","page":null}],"frontMatter":{"authors":"Heng_Xin","title":"\u8c03\u6559VSCode, \u4ee5\u4ee3\u7801\u63d0\u793aC++","date":"2025-06-30T21:36:28.000Z","tags":["vscode"]},"unlisted":false,"lastUpdatedAt":1751294578000,"lastUpdatedBy":"Heng_Xin_666","prevItem":{"title":"gcc \u5185\u90e8\u7f16\u8bd1\u5668 \u6bb5\u9519\u8bef","permalink":"/HXLoLi/blog/2025/07/28/01_gcc\u7f16\u8bd1\u5668bug"},"nextItem":{"title":"\u3010C++\u3011\u534f\u7a0b\u4e0eLambda\u5c0f\u7ec6\u8282","permalink":"/HXLoLi/blog/2025/06/29/01-\u534f\u7a0b\u5c0f\u7ec6\u8282"}},"content":"\u5b9e\u4e60\u73af\u5883\u4f7f\u7528vscode, \u7136\u540e\u6211\u767b\u5f55\u6211\u7684\u8d26\u53f7, \u628a\u6211\u7684\u63d2\u4ef6\u548c\u914d\u7f6e\u5168\u91cf\u540c\u6b65, \u7136\u540e\u53d1\u73b0cpp\u6ca1\u6709\u4ee3\u7801\u63d0\u793a\u4e86, \u9042\u72e0\u72e0\u6ef4\u8c03\u6559VsCode...\\n\\n\x3c!-- truncate --\x3e\\n\\n\u4e0d\u77e5\u9053\u4e3a\u4ec0\u4e48, clangd \u5728\u5b9e\u4e60\u73af\u5883\u9002\u914d\u4e0d\u597d... (ubt\u7cfb\u5217linux\u53d1\u884c\u7248\u7684\u9505, \u6bd4\u5982\u9e92\u9e9fos) \u5305\u7ba1\u7406\u80fd\u4e0b\u8f7d\u7684\u4e1c\u897f\u592atm\u53e4\u8001\u4e86!!!\\n\\n\u5e76\u4e14 clangd \u5b9e\u9645\u4e0a\u662f\u4f9d\u8d56 cmake \u7684(`compile_commands.json`), \u4f46\u662f\u516c\u53f8\u9879\u76ee\u662f cmake \u7f16\u8bd1\u6d4b\u8bd5\u9879\u76ee, \u53d1\u884c\u7248\u5374\u662f\u901a\u8fc7 makefile \u76f4\u63a5\u7f16\u8bd1\u7684 ...\\n\\n\u5bfc\u81f4 clangd \u6839\u672c\u4e0d\u80fd\u7528\u4e86 (\u6211\u5220\u9664\u4e86 =-=)\\n\\n\u7136\u540e\u8fd8\u662f\u4e0d\u884c, \u6211\u767e\u601d\u4e0d\u5f97\u5176\u89e3...\\n\\n\u4f46\u662f\u540e\u9762\u7834\u6848\u4e86, \u6211\u628a\u9ed8\u8ba4\u7684 vsc\u7684c/c++\u63d2\u4ef6\u7981\u7528\u4e86, \u602a\u4e0d\u5f97\u6ca1\u6709\u63d0\u793a qwq...\\n\\n\u7136\u540e\u5199 `.vscode/c_cpp_properties.json`:\\n\\n```json\\n{\\n  \\"configurations\\": [\\n    {\\n      \\"name\\": \\"default\\",\\n      \\"includePath\\": [\\n        \\"${workspaceFolder}/**\\"\\n      ],\\n      \\"defines\\": [],\\n      \\"compilerPath\\": \\"/usr/bin/g++\\",\\n      \\"cStandard\\": \\"c17\\",\\n      \\"cppStandard\\": \\"c++20\\",\\n      \\"intelliSenseMode\\": \\"linux-gcc-x64\\"\\n    }\\n  ],\\n  \\"version\\": 4\\n}\\n```\\n\\n> [!TIP]\\n> `${workspaceFolder}/**`, \u8fd9\u8868\u793a\u628a\u5f53\u524d\u9879\u76ee\u6240\u6709\u5b50\u76ee\u5f55\u90fd\u52a0\u5165\u5934\u6587\u4ef6\u641c\u7d22\u8def\u5f84, \u9002\u5408\u5c0f\u578b\u9879\u76ee\u6216\u4e0d\u4f9d\u8d56\u592a\u591a\u4e09\u65b9\u5e93\u7684\u9879\u76ee!\\n\\n\u5982\u4e0a\u914d\u7f6e, \u57fa\u672c\u4e0aOK\u4e86\u5427..."},{"id":"/2025/06/29/01-\u534f\u7a0b\u5c0f\u7ec6\u8282","metadata":{"permalink":"/HXLoLi/blog/2025/06/29/01-\u534f\u7a0b\u5c0f\u7ec6\u8282","editUrl":"https://github.com/HengXin666/HXLoLi/edit/main/blog/2025/06/29/01-\u534f\u7a0b\u5c0f\u7ec6\u8282.md","source":"@site/blog/2025/06/29/01-\u534f\u7a0b\u5c0f\u7ec6\u8282.md","title":"\u3010C++\u3011\u534f\u7a0b\u4e0eLambda\u5c0f\u7ec6\u8282","description":"\u4eca\u5929\u5728\u5b8c\u5584 iocp \u4e0e io_uring \u534f\u7a0bapi\u7684\u7edf\u4e00, \u4e3b\u8981\u662f\u8d85\u65f6\u53d6\u6d88\u8fd9\u5757.","date":"2025-06-29T21:19:39.000Z","tags":[{"inline":false,"label":"C++","permalink":"/HXLoLi/blog/tags/C++","description":"C++\u5c0f\u77e5\u8bc6"}],"readingTime":10.49,"hasTruncateMarker":true,"authors":[{"name":"Heng_Xin","title":"\u3053\u3053\u304b\u3089\u5148\u306f\u4e00\u65b9\u901a\u884c\u3060!","url":"https://github.com/HengXin666","email":"282000500@qq.com","socials":{"github":"https://github.com/HengXin666","bilibili":"https://space.bilibili.com/478917126"},"imageURL":"https://avatars.githubusercontent.com/u/103022267","key":"Heng_Xin","page":null}],"frontMatter":{"authors":"Heng_Xin","title":"\u3010C++\u3011\u534f\u7a0b\u4e0eLambda\u5c0f\u7ec6\u8282","date":"2025-06-29T21:19:39.000Z","tags":["C++"]},"unlisted":false,"lastUpdatedAt":1751811160000,"lastUpdatedBy":"Heng_Xin_666","prevItem":{"title":"\u8c03\u6559VSCode, \u4ee5\u4ee3\u7801\u63d0\u793aC++","permalink":"/HXLoLi/blog/2025/06/30/01-\u8c03\u6559VSCode"},"nextItem":{"title":"Linux\u5e38\u89c1Hook\u65b9\u6cd5","permalink":"/HXLoLi/blog/2025/06/24/01-Linux\u5e38\u89c1Hook\u65b9\u6cd5"}},"content":"\u4eca\u5929\u5728\u5b8c\u5584 iocp \u4e0e io_uring \u534f\u7a0bapi\u7684\u7edf\u4e00, \u4e3b\u8981\u662f\u8d85\u65f6\u53d6\u6d88\u8fd9\u5757.\\n\\n> [!TIP]\\n> win \u4f60\u662f\u771f\u7684np, \u8bbe\u8ba1\u7684\u4ec0\u4e48\u7834api\u8fd9\u4e48\u96be\u7528... \u771f\u96be\u5bf9\u63a5...\\n\\n\x3c!-- truncate --\x3e\\n\\n\u8fd9\u6211\u9700\u8981\u4ece\u76d8\u53e4\u5f00\u5929\u8f9f\u5730\u65f6\u5019\u8bf4\u8d77...\\n\\n> [!TIP]\\n> 2025\u5e747\u67086\u65e522:11:07\u6ce8: \u672c\u6587\u5185\u5bb9\u6709\u8bef: iocp\u4e0d\u80fd\u901a\u8fc7\u672c\u6587\u7684\u65b9\u6cd5\u53d6\u6d88; (\u539f\u56e0\u89c1: [iocp\u4e0d\u5e94\u8be5\u4f7f\u7528PostQueuedCompletionStatus\u6765\u53d6\u6d88](https://github.com/HengXin666/HXTest/issues/4))\\n>\\n> \u4f46\u662f\u534f\u7a0b\u5c0f\u7ec6\u8282\u662f\u771f\u7684!\\n\\n## 1. io_uring API\\n\\n\u54b1\u4eec\u76f4\u63a5\u770b io_uring \u7684\u63a5\u53e3\u8bbe\u8ba1: ([\u5b8c\u6574\u4ee3\u7801](https://github.com/HengXin666/HXTest/blob/main/src/09-os/demo/01-io_uring/02_io_uring_co.cpp))\\n\\n```cpp\\nauto res = co_await AioTask::linkTimeout(\\n    ioUring.makeAioTask().prepRead(STDIN_FILENO, buf, 0),\\n    ioUring.makeAioTask().prepLinkTimeout(&kt, 0)\\n);\\n\\nif (res.index() == 1) {\\n    print::println(\\"\u65f6\u95f4\u5230\u4e86\u54e6~\\");\\n    break;\\n}\\n```\\n\\n\u80a5\u80a0\u7b80\u5355, \u5c31\u662f\u5c1d\u8bd5\u8bfb\u53d6 `STDIN_FILENO` (\u6807\u51c6\u63a7\u5236\u53f0\u8f93\u5165\u6d41), \u7136\u540e\u5b9a\u65f6 `kt` \u65f6\u95f4.\\n\\n\u63a5\u53e3\u8bbe\u8ba1\u4e00\u76ee\u4e86\u7136:\\n\\n```cpp\\nstruct AioTask {\\n    // ...\\n\\n    /**\\n     * @brief \u5f02\u6b65\u8bfb\u53d6\u6587\u4ef6\\n     * @param fd \u6587\u4ef6\u63cf\u8ff0\u7b26\\n     * @param buf [out] \u8bfb\u53d6\u5230\u7684\u6570\u636e\\n     * @param offset \u6587\u4ef6\u504f\u79fb\u91cf\\n     * @return AioTask&& \\n     */\\n    [[nodiscard]] AioTask&& prepRead(\\n        int fd,\\n        std::span<char> buf,\\n        std::uint64_t offset\\n    ) && {\\n        ::io_uring_prep_read(_sqe, fd, buf.data(), static_cast<unsigned int>(buf.size()), offset);\\n        return std::move(*this);\\n    }\\n\\n    /**\\n     * @brief \u521b\u5efa\u672a\u94fe\u63a5\u7684\u8d85\u65f6\u64cd\u4f5c\\n     * @param ts \u8d85\u65f6\u65f6\u95f4\\n     * @param flags \\n     * @return AioTask&& \\n     */\\n    [[nodiscard]] AioTask&& prepLinkTimeout(\\n        struct __kernel_timespec *ts,\\n        unsigned int flags\\n    ) && {\\n        ::io_uring_prep_link_timeout(_sqe, ts, flags);\\n        return std::move(*this);\\n    }\\n\\n    [[nodiscard]] inline static auto linkTimeout(AioTask&& lhs, AioTask&& rhs) {\\n        lhs._sqe->flags |= IOSQE_IO_LINK;\\n        return whenAny(std::move(lhs), std::move(rhs));\\n    }\\n};\\n```\\n\\n\u786c\u8981\u8bf4\u4e0dok\u7684, \u5b9e\u9645\u4e0a\u5c31\u662f `linkTimeout` \u7684\u547d\u540d\u5427? `lhs` \u548c `rhs` \u662f\u4e0d\u540c\u7684\u4e1c\u897f...\\n\\n\u4f46\u662f windousu...\\n\\n## 2. iocp API\\n\\n\u5b83\u7684 API, \u9996\u5148\u662f\u540c\u6b65\u7684! \u6216\u8005\u8bf4, \u5e76\u6ca1\u6709\u6240\u8c13\u7684\u6682\u505c/\u7b49\u5f85x\u65f6\u95f4\u540e\u53d6\u6d88\u7684api, \u800c\u662f\u4ec5\u63d0\u4f9b\u4e86\u4e00\u4e2a `PostQueuedCompletionStatus` \u7834\u70c2!\\n\\n\u5b83\u7684\u4f5c\u7528\u5b9e\u9645\u4e0a\u662f\u5411\u76ee\u6807\u5b8c\u6210\u7aef\u53e3\u53d1\u9001\u4e00\u4e2a\u6570\u636e, \u5bfc\u81f4\u5b83\u53ef\u4ee5\u8fd4\u56de\u88ab `GetQueuedCompletionStatusEx`, \u5e76\u4e0d\u662f\u4e25\u683c\u610f\u4e49\u4e0a\u7684\u53d6\u6d88!\\n\\n```cpp\\n/*\\nBOOL PostQueuedCompletionStatus(\\n    HANDLE       CompletionPort,                // \u76ee\u6807\u5b8c\u6210\u7aef\u53e3\u7684\u53e5\u67c4\\n    DWORD        dwNumberOfBytesTransferred,    // \u81ea\u5b9a\u4e49\u7684\u5b57\u8282\u6570, \u53ef\u7528\u4e8e\u4f20\u9012\u4fe1\u606f\\n    ULONG_PTR    dwCompletionKey,               // \u81ea\u5b9a\u4e49\u7684\u5b8c\u6210\u952e, \u53ef\u7528\u4e8e\u533a\u5206\u4e0d\u540c\u7684\u64cd\u4f5c\u6216I/O\u6e90\\n    LPOVERLAPPED lpOverlapped                   // OVERLAPPED\u7ed3\u6784\u7684\u6307\u9488\\n    // \u6ce8: GetQueuedCompletionStatusEx \u62ff\u5230\u7684\u662f \u6b64\u5904\u7684 OVERLAPPED\\n    // \u4f46\u662f\u4e4b\u524d\u7684 OVERLAPPED \u4e5f\u4f1a\u88ab iocp \u53d6\u51fa! \u56e0\u6b64\u6211\u4eec\u9700\u8981\u81ea\u5df1\u6807\u8bb0\u4e00\u4e0b ... \u5199\u4e2a\u72b6\u6001\u673a ...\\n);\\n*/\\nbool ok = ::PostQueuedCompletionStatus(\\n    _self->_iocpHandle,\\n    0,\\n    static_cast<ULONG_PTR>(State::Cancel),\\n    static_cast<::OVERLAPPED*>(_self.get())\\n);\\nif (!ok) [[unlikely]] {\\n    throw std::runtime_error{\\"PostQueuedCompletionStatus ERROR: \\" \\n        + std::to_string(::GetLastError())};\\n}\\n```\\n\\n\u5b8c\u5168\u4e0d\u50cf io_uring \u4e00\u6837, \u901a\u8fc7\u94fe\u63a5\u8fdb\u884c\u5b9a\u65f6\u5173\u8054, \u7136\u540e\u5185\u6838\u5e2e\u4f60\u641e\u5b9a\u5185\u90e8\u72b6\u6001 (\u5982\u679c\u5b9a\u65f6\u5230\u4e86, \u90a3\u4e48\u5b9a\u65f6\u4efb\u52a1\u548c\u5173\u8054\u4efb\u52a1\u90fd\u4f1a\u88ab\u63a5\u6536\u5230, **\u4f46\u662f\u5173\u8054\u4efb\u52a1\u4f1a\u88ab\u8bbe\u7f6e\u4e3a** `\u5df2\u53d6\u6d88`); \u800c\u4e14 win \u9700\u8981\u6211\u4eec\u7528\u6237\u81ea\u5df1\u533a\u5206 (\u751a\u81f3\u8fd9\u90fd\u4e0d\u4e00\u5b9a\u662f`PostQueuedCompletionStatus`\u7684\u539f\u610f\u671f\u671b\u7528\u6cd5, win\u67b6\u6784\u5e08\u77e5\u9053\u8fd9\u4e9b\u600e\u4e48\u7528\u5417?? \u77e5\u9053\u600e\u4e48\u8fd8\u4e0d\u6539?? \u8fd9\u4e48\u96be\u7528...)\\n\\n\u603b\u800c\u8a00\u4e4b, \u6211\u9700\u8981\u91cd\u6784, \u4ee5\u4fbf\u8de8\u5e73\u53f0, \u4ee5\u5c3d\u53ef\u80fd\u7684\u4fdd\u8bc1 API \u4e00\u81f4\u6027.\\n\\n\u6700\u7ec8, \u4ec5\u9700\u8981\u8fd9\u6837\u8c03\u7528:\\n\\n```cpp [g1-IOCP]\\nauto res = co_await AioTask::linkTimeout(\\n    _iocp.makeAioTask().prepRead(hStdin, buf, 0),\\n    _iocp.makeAioTask().prepLinkTimeout(makeTimer().sleepFor(5s))\\n);\\nif (res.index() == 1) {\\n    print::print(\\"\u8d85\u65f6\u4e86~\\");\\n    co_await _iocp.makeAioTask().prepClose(hStdin); // win \u9700\u8981\u5173\u95ed\u662f\u56e0\u4e3a\u5b83\u7684\u6d41\u4e5f\u5f88\u62bd\u8c61,\\n                                                    // \u5bfc\u81f4\u6211\u4eec\u9700\u8981\u6253\u5f00, \u6240\u4ee5\u624d\u9700\u8981\u5173\u95ed\\n    co_return;\\n}\\n```\\n\\n```cpp [g1-io_uring]\\n// \u7ed9\u51fa\u4ee3\u7801, \u65b9\u4fbf\u5bf9\u6bd4\\nauto res = co_await AioTask::linkTimeout(\\n    ioUring.makeAioTask().prepRead(STDIN_FILENO, buf, 0),\\n    ioUring.makeAioTask().prepLinkTimeout(&kt, 0)\\n);\\n\\nif (res.index() == 1) {\\n    print::println(\\"\u65f6\u95f4\u5230\u4e86\u54e6~\\");\\n    co_return;\\n}\\n```\\n\\n\u56e0\u4e3a iocp \u6ca1\u6709\u5185\u6838\u63d0\u4f9b\u5b9a\u65f6, \u6240\u4ee5\u6211\u9700\u8981\u624b\u6495\u4e00\u4e2a \u7ea2\u9ed1\u6811\u534f\u7a0b\u5b9a\u65f6\u5668 ...\\n\\n\u7136\u800c\u56e0\u4e3a iocp api \u8fd8\u9700\u8981\u5bf9\u5e94\u7684 iocp \u53e5\u67c4\u624d\u53ef\u4ee5\u77e5\u9053\u662f\u53d6\u6d88\u8ab0, \u56e0\u6b64\u6211\u4eec\u8fd8\u9700\u8981\u83b7\u53d6\u5230\u5bf9\u5e94\u7684\u534f\u7a0b\u53e5\u67c4, \u4f46\u662f\u4e0d\u80fd\u662f\u4f20\u53c2, \u53ea\u80fd\u662f\u65b9\u6cd5\u5185\u90e8\u79fb\u5f62\u6362\u5f71, \u52a0\u4e0a\u6211\u81ea\u4ee5\u4e3a\u662f\u5199\u7684\u4e00\u4e9b && & \u7684\u4e1c\u897f, \u4ee5\u53ca\u751f\u547d\u5468\u671f\u7684\u8003\u8651, \u5c31\u76f8\u5bf9\u5199\u5f97\u6bd4\u8f83\u590d\u6742:\\n\\n```cpp\\nstruct AioTask : public ::OVERLAPPED {\\n    struct _AioTimeoutTask {\\n        _AioTimeoutTask(AioTask&& self, TimerLoop::TimerAwaiter&& timerTask)\\n            : _self{std::make_unique<AioTask>(std::move(self))}\\n            , _timerTask{std::move(timerTask)}\\n        {}\\n\\n        _AioTimeoutTask(_AioTimeoutTask&&) = default;\\n        _AioTimeoutTask& operator=(_AioTimeoutTask&&) noexcept = default;\\n\\n        Task<> co() {\\n            co_await _timerTask;\\n            /*\\nBOOL PostQueuedCompletionStatus(\\n    HANDLE       CompletionPort,                // \u76ee\u6807\u5b8c\u6210\u7aef\u53e3\u7684\u53e5\u67c4\\n    DWORD        dwNumberOfBytesTransferred,    // \u81ea\u5b9a\u4e49\u7684\u5b57\u8282\u6570, \u53ef\u7528\u4e8e\u4f20\u9012\u4fe1\u606f\\n    ULONG_PTR    dwCompletionKey,               // \u81ea\u5b9a\u4e49\u7684\u5b8c\u6210\u952e, \u53ef\u7528\u4e8e\u533a\u5206\u4e0d\u540c\u7684\u64cd\u4f5c\u6216I/O\u6e90\\n    LPOVERLAPPED lpOverlapped                   // OVERLAPPED\u7ed3\u6784\u7684\u6307\u9488\\n        // \u6ce8: GetQueuedCompletionStatusEx \u62ff\u5230\u7684\u662f \u6b64\u5904\u7684 OVERLAPPED\\n        // \u4f46\u662f\u4e4b\u524d\u7684 OVERLAPPED \u4e5f\u4f1a\u88ab iocp \u53d6\u51fa! \u56e0\u6b64\u6211\u4eec\u9700\u8981\u81ea\u5df1\u6807\u8bb0\u4e00\u4e0b ... \u5199\u4e2a\u72b6\u6001\u673a ...\\n);\\n            */\\n            bool ok = ::PostQueuedCompletionStatus(\\n                _self->_iocpHandle,\\n                0,\\n                static_cast<ULONG_PTR>(State::Cancel),\\n                static_cast<::OVERLAPPED*>(_self.get())\\n            );\\n            if (!ok) [[unlikely]] {\\n                throw std::runtime_error{\\"PostQueuedCompletionStatus ERROR: \\" \\n                    + std::to_string(::GetLastError())};\\n            }\\n            co_return;\\n        }\\n    private:\\n        friend AioTask;\\n        std::unique_ptr<AioTask> _self; // \u4e0d\u80fd\u4f7f\u7528 AioTask, \u56e0\u4e3a\u6b64\u65f6 AioTask \u8fd8\u4e0d\u5b8c\u6574, \\n                                        // \u4f46\u662f\u53ef\u4ee5\u4f7f\u7528 std::unique_ptr<AioTask>; \u5947\u602a\u5427?\\n                                        // \u539f\u56e0\u662f unique_ptr \u5185\u90e8\u662f\u4f7f\u7528\u6307\u9488\u7684, \u6240\u4ee5\u6ca1\u95ee\u9898!\\n        TimerLoop::TimerAwaiter _timerTask;\\n    };\\n\\n    /**\\n     * @brief \u5f02\u6b65\u8bfb\u53d6\u6587\u4ef6\\n     * @param fd \u6587\u4ef6\u53e5\u67c4\\n     * @param buf [out] \u8bfb\u53d6\u5230\u7684\u6570\u636e\\n     * @param offset \u6587\u4ef6\u504f\u79fb\u91cf\\n     * @return AioTask&& \\n     */\\n    [[nodiscard]] AioTask&& prepRead(\\n        HANDLE fd,\\n        std::span<char> buf,\\n        std::uint64_t offset\\n    ) && {\\n        // ::io_uring_prep_read(_sqe, fd, buf.data(), static_cast<unsigned int>(buf.size()), offset);\\n        /*\\nBOOL ReadFile(\\n  HANDLE       hFile,                // \u6587\u4ef6\u53e5\u67c4\uff08\u53ef\u4e3a\u6587\u4ef6\u3001\u7ba1\u9053\u3001\u4e32\u53e3\u3001Socket \u7b49\uff09\\n  LPVOID       lpBuffer,            // \u6570\u636e\u8bfb\u5165\u7684\u7f13\u51b2\u533a\u6307\u9488\uff08\u4f60\u51c6\u5907\u597d\u7684\u5185\u5b58\uff09\\n  DWORD        nNumberOfBytesToRead,// \u60f3\u8981\u8bfb\u53d6\u7684\u5b57\u8282\u6570\\n  LPDWORD      lpNumberOfBytesRead, // \u5b9e\u9645\u8bfb\u53d6\u7684\u5b57\u8282\u6570\uff08\u540c\u6b65\u65f6\u975e NULL, \u5f02\u6b65\u65f6\u8bbe\u4e3a NULL\uff09\\n  LPOVERLAPPED lpOverlapped         // OVERLAPPED \u7ed3\u6784\u6307\u9488\uff08\u5f02\u6b65\u65f6\u5fc5\u586b, \u540c\u6b65\u65f6\u4e3a NULL\uff09\\n);\\n        */\\n        /*\\ntypedef struct _OVERLAPPED {\\n  ULONG_PTR Internal;\\n  ULONG_PTR InternalHigh;\\n  union {\\n    struct {\\n      DWORD Offset;      // \u4f4e 32 \u4f4d\u6587\u4ef6\u504f\u79fb\u91cf\\n      DWORD OffsetHigh;  // \u9ad8 32 \u4f4d\u6587\u4ef6\u504f\u79fb\u91cf\\n                         // \u4e24\u4e2a\u7ec4\u6210 64 \u4e3a\u7684\u504f\u79fb\u91cf, \u7834win\u4e3a\u4e86\u8fdc\u53e4\u517c\u5bb9, \u5c31\u8fd9\u6837\u641e\u4e86...\\n    };\\n    PVOID Pointer;\\n  };\\n  HANDLE    hEvent;\\n} OVERLAPPED, *LPOVERLAPPED;\\n        */\\n        associateHandle(fd);\\n        // \u8bbe\u7f6e\u504f\u79fb\u91cf\\n        Offset = static_cast<DWORD>(offset & 0xFFFFFFFF);\\n        OffsetHigh = static_cast<DWORD>((offset >> 32) & 0xFFFFFFFF);\\n        bool ok = ::ReadFile(\\n            fd,\\n            buf.data(),\\n            static_cast<DWORD>(buf.size()),\\n            nullptr,\\n            static_cast<::OVERLAPPED*>(this)\\n        );\\n        if (!ok && ::GetLastError() != ERROR_IO_PENDING) [[unlikely]] {\\n            throw std::runtime_error{\\"ReadFile ERROR: \\" + std::to_string(::GetLastError())};\\n        }\\n        return std::move(*this);\\n    }\\n\\n    /**\\n     * @brief \u521b\u5efa\u672a\u94fe\u63a5\u7684\u8d85\u65f6\u64cd\u4f5c\\n     * @param ts \u8d85\u65f6\u65f6\u95f4\\n     * @param flags \\n     * @return AioTask&& \\n     */\\n    [[nodiscard]] _AioTimeoutTask prepLinkTimeout(\\n        TimerLoop::TimerAwaiter&& timerTask\\n    ) && {\\n        // ::io_uring_prep_link_timeout(_sqe, ts, flags);\\n        return {std::move(*this), std::move(timerTask)};\\n    }\\n\\n    [[nodiscard]] inline static auto linkTimeout(\\n        AioTask&& task, \\n        _AioTimeoutTask&& timeoutTask\\n    ) {\\n        // \u4e3a\u4ec0\u4e48\u4e0d\u80fd\u662f\u6355\u83b7? \u96be\u9053\u662f\u56e0\u4e3a\u5bf9\u4e8e\u534f\u7a0b\u51fd\u6570, \u4f60\u7684\u7c7b\u6355\u83b7\u4e0d\u4f1a\u7b97\u5165\u534f\u7a0b\u751f\u547d\u5468\u671f?!\\n        // \u5bf9\u7684\u5bf9\u7684, \u5c31\u662f\u8fd9\u6837! \u8fd9\u4e2a []()() \u5f97\u5230\u7684\u662f\u534f\u7a0b\u5bf9\u8c61\u4e86, \u4ec5\u6709\u4f20\u53c2\u7684\u4f1a\u7b97\u5165\u751f\u547d\u5468\u671f\\n        // \u4f46\u662f\u6355\u83b7\u7684\u8bdd, \u4f5c\u4e3a\u7c7b\u7684\u6210\u5458, \u5728 []() \u65f6\u5019\u662f\u6709\u6548\u7684\\n        // \u4f46\u662f []()() \u662f\u521b\u5efa\u4e00\u4e2a\u534f\u7a0b\u5bf9\u8c61, \u7136\u540e return \u4e86, \u56e0\u6b64 [...]() \u6355\u83b7\u7684\u5c31\u6790\u6784\u4e86\\n        // \u6240\u4ee5\u4f1a\u60ac\u6302\u5f15\u7528 (ub), \u5bfc\u81f4\u91ce\u6307\u9488 qwq...\\n#if 0\\n        return [_task = std::move(task), \\n                _timeoutTask = std::move(timeoutTask)]() mutable \\n        -> Task<HX::AwaiterReturnValue<decltype(whenAny(std::move(task), timeoutTask.co()))>> {\\n            _timeoutTask._self->_iocpHandle = _task._iocpHandle; // \u51fa\u9519\\n            co_return co_await whenAny(std::move(_task), _timeoutTask.co());\\n        }();\\n#else\\n        return [](AioTask&& _task,  _AioTimeoutTask&& _timeoutTask) \\n        -> Task<HX::AwaiterReturnValue<decltype(whenAny(std::move(task), timeoutTask.co()))>> {\\n            _timeoutTask._self->_iocpHandle = _task._iocpHandle;\\n            co_return co_await whenAny(std::move(_task), _timeoutTask.co());\\n        }(std::move(task), std::move(timeoutTask));\\n#endif\\n    }\\n};\\n```\\n\\n## 3. \u534f\u7a0b\u7684\u5c0f\u7ec6\u8282\\n\\n\u4e0a\u9762\u5df2\u7ecf\u662f\u5b8c\u6574\u7684\u6e90\u7801\u7684, \u4e5f\u662f\u672c\u6b21\u95ee\u9898\u51fa\u73b0\u7684\u5730\u65b9:\\n\\n```cpp [g2-BUG: \u4ec5\u6355\u83b7]\\n[[nodiscard]] inline static auto linkTimeout(\\n    AioTask&& task, \\n    _AioTimeoutTask&& timeoutTask\\n) {\\n    return [_task = std::move(task), \\n            _timeoutTask = std::move(timeoutTask)]() mutable \\n    -> Task<HX::AwaiterReturnValue<decltype(whenAny(std::move(task), timeoutTask.co()))>> {\\n        _timeoutTask._self->_iocpHandle = _task._iocpHandle; // \u8bbf\u95ee\u51fa\u9519 (\u91ce\u6307\u9488)\\n        co_return co_await whenAny(std::move(_task), _timeoutTask.co());\\n    }();\\n}\\n\\nauto res = co_await linkTimeout(...);\\n```\\n\\n```cpp [g2-ok: \u5ef6\u957f\u751f\u547d\u5468\u671f]\\n[[nodiscard]] inline static auto linkTimeout(\\n    AioTask&& task, \\n    _AioTimeoutTask&& timeoutTask\\n) {\\n    return [_task = std::move(task), \\n            _timeoutTask = std::move(timeoutTask)]() mutable \\n    -> Task<HX::AwaiterReturnValue<decltype(whenAny(std::move(task), timeoutTask.co()))>> {\\n        _timeoutTask._self->_iocpHandle = _task._iocpHandle;\\n        co_return co_await whenAny(std::move(_task), _timeoutTask.co());\\n    };\\n}\\n\\nauto res = co_await linkTimeout(...)();\\n```\\n\\n```cpp [g2-ok: \u901a\u8fc7\u4f20\u53c2]\\n[[nodiscard]] inline static auto linkTimeout(\\n    AioTask&& task, \\n    _AioTimeoutTask&& timeoutTask\\n) {\\n    return [](AioTask&& _task,  _AioTimeoutTask&& _timeoutTask) \\n    -> Task<HX::AwaiterReturnValue<decltype(whenAny(std::move(task), timeoutTask.co()))>> {\\n        _timeoutTask._self->_iocpHandle = _task._iocpHandle;\\n        co_return co_await whenAny(std::move(_task), _timeoutTask.co());\\n    }(std::move(task), std::move(timeoutTask));\\n}\\n\\nauto res = co_await linkTimeout(...);\\n```\\n\\n\u4e3a\u4ec0\u4e48\u4e0d\u80fd\u662f\u6355\u83b7?\\n\\n- \u56e0\u4e3a `[]()()` \u5f97\u5230\u7684\u662f\u534f\u7a0b\u5bf9\u8c61\u4e86, \u4ec5\u6709\u4f20\u53c2\u7684\u4f1a\u7b97\u5165\u751f\u547d\u5468\u671f\\n- \u4f46\u662f\u6355\u83b7\u7684\u8bdd, \u4f5c\u4e3a\u7c7b\u7684\u6210\u5458, \u5728 `[]()` \u65f6\u5019\u662f\u6709\u6548\u7684\\n- \u4f46\u662f `[]()()` \u662f\u521b\u5efa\u4e00\u4e2a\u534f\u7a0b\u5bf9\u8c61, \u7136\u540e `return` \u4e86, \u56e0\u6b64 `[...]()` \u6355\u83b7\u7684\u5c31\u6790\u6784\u4e86\\n- \u6240\u4ee5\u4f1a\u60ac\u6302\u5f15\u7528 (ub), \u5bfc\u81f4\u91ce\u6307\u9488 qwq...\\n\\n> [!NOTE]\\n> [Coroutines (C++20) | cppreference](https://cppreference.com/w/cpp/language/coroutines.html) \u6709\u63cf\u8ff0:\\n>\\n> copies all function parameters to the coroutine state: by-value parameters are moved or copied, by-reference parameters remain references (thus, may become dangling, if the coroutine is resumed after the lifetime of referred object ends \u2014 see below for examples).\\n>\\n> \u5c06\u6240\u6709\u51fd\u6570\u53c2\u6570\u590d\u5236\u5230\u534f\u7a0b\u72b6\u6001: \u6309\u503c\u53c2\u6570\u88ab\u79fb\u52a8\u6216\u590d\u5236, \u6309\u5f15\u7528\u53c2\u6570\u4ecd\u7136\u662f\u5f15\u7528 (\u56e0\u6b64, \u5982\u679c\u5728\u5f15\u7528\u5bf9\u8c61\u7684\u751f\u547d\u5468\u671f\u7ed3\u675f\u540e\u6062\u590d\u534f\u7a0b, \u5219\u53ef\u80fd\u4f1a\u53d8\u5f97\u60ac\u7a7a - \u8bf7\u53c2\u9605\u4e0b\u9762\u7684\u793a\u4f8b).\\n>\\n> ```cpp\\n> void bad3() {\\n>     auto h = [i = 0]() -> coroutine { // \u4e00\u4e2a\u4e5f\u662f\u534f\u7a0b\u7684 lambda\\n>         std::cout << i;\\n>         co_return;\\n>     }(); // \u7acb\u5373\u8c03\u7528\\n>     // lambda\u88ab\u6467\u6bc1\\n>     h.resume(); // \u4f7f\u7528 (\u533f\u540dlambda\u7c7b\u578b)::i \u5728\u91ca\u653e\u4e4b\u540e\\n>     h.destroy();\\n> }\\n> ```\\n\\n> [!TIP]\\n> \u867d\u7136\u6587\u5b57\u6ca1\u6709\u660e\u786e\u8bf4\u660e\u8fd9\u79cd\u60c5\u51b5, \u53ea\u662f\u8bf4\u660e\u4e86\u6838\u5fc3\u539f\u56e0; \u4f46\u662f\u4f8b\u5b50\u5df2\u7ecf\u660e\u786e\u7ed9\u51fa\u6765\u4e86, \u8fd8\u662f\u5f88\u660e\u786e\u7684!"},{"id":"/2025/06/24/01-Linux\u5e38\u89c1Hook\u65b9\u6cd5","metadata":{"permalink":"/HXLoLi/blog/2025/06/24/01-Linux\u5e38\u89c1Hook\u65b9\u6cd5","editUrl":"https://github.com/HengXin666/HXLoLi/edit/main/blog/2025/06/24/01-Linux\u5e38\u89c1Hook\u65b9\u6cd5.md","source":"@site/blog/2025/06/24/01-Linux\u5e38\u89c1Hook\u65b9\u6cd5.md","title":"Linux\u5e38\u89c1Hook\u65b9\u6cd5","description":"\u8fd9\u4e2a\u662f\u4e0a\u73ed\u8981\u6c42\u7684, \u4e0d\u80fd\u4f7f\u7528 AI, \u81ea\u5df1\u901a\u8fc7\u641c\u7d22, \u628a\u8fd9\u4e2a\u89e3\u51b3\u65b9\u6848\u641e\u51fa\u6765, \u5e76\u4e14\u8bf4\u660e\u4e3a\u4ec0\u4e48\u9009\u62e9\u8fd9\u4e2a\u65b9\u6848, \u4e0d\u9009\u62e9\u5176\u4ed6\u65b9\u6848.","date":"2025-06-24T22:28:44.000Z","tags":[{"inline":false,"label":"C++","permalink":"/HXLoLi/blog/tags/C++","description":"C++\u5c0f\u77e5\u8bc6"}],"readingTime":33.57,"hasTruncateMarker":true,"authors":[{"name":"Heng_Xin","title":"\u3053\u3053\u304b\u3089\u5148\u306f\u4e00\u65b9\u901a\u884c\u3060!","url":"https://github.com/HengXin666","email":"282000500@qq.com","socials":{"github":"https://github.com/HengXin666","bilibili":"https://space.bilibili.com/478917126"},"imageURL":"https://avatars.githubusercontent.com/u/103022267","key":"Heng_Xin","page":null}],"frontMatter":{"authors":"Heng_Xin","title":"Linux\u5e38\u89c1Hook\u65b9\u6cd5","date":"2025-06-24T22:28:44.000Z","tags":["C++"]},"unlisted":false,"lastUpdatedAt":1751294578000,"lastUpdatedBy":"Heng_Xin_666","prevItem":{"title":"\u3010C++\u3011\u534f\u7a0b\u4e0eLambda\u5c0f\u7ec6\u8282","permalink":"/HXLoLi/blog/2025/06/29/01-\u534f\u7a0b\u5c0f\u7ec6\u8282"},"nextItem":{"title":"\u4e0a\u73ed\u7b2c\u4e00\u8bfe","permalink":"/HXLoLi/blog/2025/06/23/01-\u4e0a\u73ed\u7b2c\u4e00\u8bfe"}},"content":"\u8fd9\u4e2a\u662f\u4e0a\u73ed\u8981\u6c42\u7684, \u4e0d\u80fd\u4f7f\u7528 AI, \u81ea\u5df1\u901a\u8fc7\u641c\u7d22, \u628a\u8fd9\u4e2a\u89e3\u51b3\u65b9\u6848\u641e\u51fa\u6765, \u5e76\u4e14\u8bf4\u660e\u4e3a\u4ec0\u4e48\u9009\u62e9\u8fd9\u4e2a\u65b9\u6848, \u4e0d\u9009\u62e9\u5176\u4ed6\u65b9\u6848.\\n\\n\u4eca\u5929\u5df2\u7ecf\u809d\u5b8c\u4e86, \u4e0a\u5934\u633a\u6ee1\u610f\u7684, \u7136\u540e\u8ba9\u6211\u628a\u4ed6\u4eec\u5199\u51fa\u6765\u4e86 =-=, Linux\u7f16\u5199\u5185\u6838\u6a21\u5757qwq...\\n\\n\x3c!-- truncate --\x3e\\n\\n## \u6587\u4ef6\u76d1\u63a7\u670d\u52a1\\n\\n### \u4e00\u3001\u9700\u6c42\\n#### 1.1 \u6587\u4ef6\u6e05\u5355\\n\\n\u7528\u6237\u53ef\u4ee5\u9009\u62e9\u6587\u4ef6, \u52a0\u5165`\u6587\u4ef6\u6e05\u5355`; \u7a0b\u5e8f\u4f1a\u8bb0\u5f55\u9009\u62e9\u7684\u6587\u4ef6\u7684 **\u7edd\u5bf9\u8def\u5f84**, \u4ee5\u786e\u4fdd\u65e0\u6b67\u4e49.\\n\\n#### 1.2 \u6307\u5b9a\u8fdb\u7a0b\\n\\n\u7528\u6237\u53ef\u4ee5\u6307\u5b9a\u8fdb\u7a0b, \u52a0\u5165`\u767d\u540d\u5355`; \u7a0b\u5e8f\u4f1a\u8bb0\u5f55\u9009\u62e9\u7684\u8fdb\u7a0b\u7684 **\u542f\u52a8\u8def\u5f84** \u7684 **\u7edd\u5bf9\u8def\u5f84** \u4f5c\u4e3a\u552f\u4e00\u8fdb\u7a0b\u6807\u8bc6. \\n\\n#### 1.3 \u53ef\u62e6\u622a\u8bfb\u5199\u7cfb\u7edf\u8c03\u7528\\n\\n\u5bf9 `\u6587\u4ef6\u6e05\u5355` \u5185\u7684\u6587\u4ef6\u8fdb\u884c\u8bfb\u5199\u64cd\u4f5c\u65f6, \u9700\u8981\u62e6\u622a **\u975e** \u767d\u540d\u5355 \u7684\u8fdb\u7a0b.\\n\\n#### 1.4 \u65e5\u5fd7\u7cfb\u7edf\\n\\n\u65e5\u5fd7\u8bb0\u5f55:\\n\\n> [\u89e6\u53d1\u65f6\u95f4] [\u89e6\u53d1\u8fdb\u7a0b(\u5168\u8def\u5f84)] [\u8be5\u8fdb\u7a0b\u64cd\u4f5c\u5bf9\u8c61(\u6587\u4ef6)] [\u8be5\u8fdb\u7a0b\u64cd\u4f5c\u5185\u5bb9] [\u672c\u7a0b\u5e8f\u5904\u7406\u7ed3\u679c]\\n\\n### X\u3001\u6280\u672f\u5b9e\u73b0\u7684\u67e5\u8be2\\n#### x.1 \u67e5\u627e\u5173\u952e\u5b57\u53ca\u5176\u6587\u7ae0\\n\\n\u7cfb\u7edf\u8bfb\u5199\u8c03\u7528\u62e6\u622a\\n- [\u624b\u628a\u624b\u6559\u4f60\uff5c\u62e6\u622a\u7cfb\u7edf\u8c03\u7528](https://blog.csdn.net/weiqifa0/article/details/122571798)\\n\\nlinux\u62e6\u622a\u8bfb\u5199\u8c03\u7528\\n- [Linux\u7cfb\u7edf\u4e0b\u767d\u540d\u5355\u5916\u8fdb\u7a0b\u963b\u65ad\u5b9e\u73b0\u539f\u7406](https://juejin.cn/post/7215825282040676412)\\n- [\u76d8\u70b9Linux\u4e2d\u5e38\u89c1\u7684\u8fc7\u6ee4\u62e6\u622a\u6280\u672f](https://zhuanlan.zhihu.com/p/549849135) (\u5b9e\u9645\u4e0a\u8fd9\u7bc7\u5c31\u662f\u7efc\u8ff0, \u7684\u8bf4)\\n    1. \u7528\u6237\u6001\u52a8\u6001\u5e93\u62e6\u622a\\n    2. \u5185\u6838\u6001\u7cfb\u7edf\u8c03\u7528\u62e6\u622a\\n    3. \u5806\u6808\u5f0f\u6587\u4ef6\u7cfb\u7edf\u62e6\u622a\\n    4. inline hook\u62e6\u622a\\n    5. LSM(Linux Security Modules)\\n    6. eBPF Hook\u62e6\u622a\\n- [Linux\u73af\u5883\u4e0b\u7684\u62e6\u622a\u6280\u672f](https://blog.csdn.net/qq_66359721/article/details/147139241)\\n    > \u6709\u4fdd\u62a4\u6587\u4ef6\u4e0e\u7f51\u7edc\u8fc7\u6ee4demo\\n\\n\u7cfb\u7edf\u8c03\u7528\u52ab\u6301\u83b7\u53d6\u6587\u4ef6\u7edd\u5bf9\u8def\u5f84\\n- [Linux\u5185\u6838\u4e2d\u901a\u8fc7\u6587\u4ef6\u63cf\u8ff0\u7b26\u83b7\u53d6\u7edd\u5bf9\u8def\u5f84](http://edsionte.com/techblog/archives/4406)\\n\\nLinux\u7cfb\u7edf\u8c03\u7528\u52ab\u6301\\n- [Linux\u6f0f\u6d1e\u6316\u6398:06---\u7cfb\u7edf\u8c03\u7528\u52ab\u6301\u4e4b\uff08\u901a\u8fc7/boot/System.map\u76ee\u5f55\u83b7\u53d6sys_call_table\u7cfb\u7edf\u8c03\u7528\u8868\uff09](https://www.freesion.com/article/1205184276/)\\n\\n- [sys_call_table](https://www.cnblogs.com/LittleHann/p/4127096.html)\\n> \u9700\u8981\u533a\u520632\u548c64\u4f4d\u7cfb\u7edf; \u5e76\u4e14\u7cfb\u7edf\u6bcf\u6b21\u91cd\u542f\u5176 sys_call_table \u7684\u5185\u5b58\u5730\u5740\u90fd\u4f1a\u53d8\u6211\u4eec\u9700\u8981\u83b7\u53d6\u5230\u4ed6\u4eec\u7684\u5730\u5740; \u5e76\u4e14\u8bb0\u5f97\u590d\u539f, \u5982\u679c\u4e0d\u590d\u539f\u7cfb\u7edf\u4f1a\u5d29\u6389, \u4f60\u7684\u7a0b\u5e8f\u7ed3\u675f\u540e, \u5c31\u662f\u91ce\u6307\u9488\u4e86\\n\\n\u5806\u6808\u5f0f\u6587\u4ef6\u7cfb\u7edf\\n- \u53d1\u73b0\u6bd4\u8f83\u96be\u5bf9\u4ed8, \u5148\u7565\u8fc7\\n\\ninline hook\\n- [inline hook \u539f\u7406&\u6559\u7a0b](https://www.cnblogs.com/luconsole/p/14813573.html)\\n- [\u4e94\u5206\u949f\u5e26\u4f60\u624b\u6413\u4e00\u4e2a\u7b80\u6613\u7684 inline hook \u5b9e\u73b0\u63a7\u5236\u6d41\u52ab\u6301](https://eunomia.dev/zh/blogs/inline-hook/) & https://github.com/eunomia-bpf/inline-hook-demo\\n> \u9700\u8981\u8003\u8651\u7ebf\u7a0b\u5b89\u5168; \u8de8\u5e73\u53f0(arm/x86)\u6307\u4ee4\u96c6\u7684\u5dee\u5f02\\n\\n\u5185\u6838\u5b89\u5168\u6a21\u5757 \u7f16\u5199\\n- [\u5982\u4f55\u7f16\u5199\u4e00\u4e2aLinux\u5185\u6838\u6a21\u5757\uff0c\u8fd9\u6b21\u624b\u628a\u624b\u6559\u4f60](https://zhuanlan.zhihu.com/p/420194002)\\n\\n\u5185\u6838\u5b89\u5168\u6a21\u5757 \u7f16\u5199\u62e6\u622a\\n- [\u52a8\u624b\u5199\u4e00\u4e2a\u57fa\u4e8eLinux\u5185\u6838\u7684\u7f51\u7edc\u6570\u636e\u5305\u62e6\u622a\u6269\u5c55](https://rivers.chaitin.cn/blog/cqj64sh0lnedo7thptp0)\\n\\n\u5185\u6838\u5b89\u5168\u6a21\u5757 \u53ef\u79fb\u690d\u6027\\n- [Linux\u5185\u6838\u5b66\u4e60\u7b14\u8bb0\u4e4b\u53ef\u79fb\u690d\u6027](https://hjk.life/posts/linux-kernel-portability/)\\n\\nLinux Security Modules \u53ef\u79fb\u690d\u6027\\n- [Linux \u5185\u6838\u7684\u53ef\u88c1\u526a\u6027\u4e0e\u53ef\u79fb\u690d\u6027\u5e95\u5c42\u539f\u7406\u8be6\u89e3](https://zhuanlan.zhihu.com/p/10981876370)\\n> \u611f\u89c9\u53ef\u4ee5\u63d2\u5165\u7684\u70b9\u6bd4\u8f83\u53d7\u7ea6\u675f?? \u518d\u627e\u627e\u770b; \u611f\u89c9\u548c eBPF \u7684\u533a\u522b\u5c31\u662f\u662f\u5426\u53ef\u4ee5hook\u7528\u6237\u6001? \u518d\u627e\u627e\u770b\\n\\nLSM\u6a21\u5757 \u53ef\u4f5c\u7528\u51fd\u6570\\n- [Linux \u5b89\u5168 - LSM hook\u70b9](https://blog.csdn.net/weixin_45030965/article/details/133749748)\\n- [LSM\u6a21\u5757\u52a8\u6001Hook\u5b9e\u73b0](https://just4coding.com/2023/12/01/lsm-hook/) (CentOS7/8\u7684\u793a\u4f8b)\\n\\nLSM\u6a21\u5757 hook\u70b9\\n- [LSM \u5b89\u5168\u6a21\u5757\u5f00\u53d1 \u2014\u2014 \u6587\u4ef6\u6253\u5f00 2FA ](https://www.neko.ooo/lsm-mod/)\\n\\neBPF Hook \u62e6\u622a\u8bfb\u5199\\n- [\u6536\u85cf\uff01\u4f7f\u7528eBPF\u6280\u672f\u5ba1\u8ba1\u548c\u62e6\u622a\u6587\u4ef6\u8bfb\u5199\u64cd\u4f5c](https://www.eet-china.com/mp/a357540.html)\\n\\nLSM\u6a21\u5757 \u4e0e eBPF hook \u5bf9\u6bd4\\n- [BPF LSM \u5b8c\u5168\u5b9e\u8df5\uff08\u5efa\u8bae\u6536\u85cf\uff09](https://zhuanlan.zhihu.com/p/681005652)\\n\\nlsm hook \u8bfb\u5199\\n- [Linux\u5185\u6838\u5b89\u5168\u6a21\u5757\uff08Linux Security Module\uff0cLSM\uff09\u4f8b\u5b50](https://blog.csdn.net/farsight_2098/article/details/130875915)\\n\\n### \u4e8c\u3001\u6280\u672f\u7b14\u8bb0\\n#### 2.1 Linux\u4e2d\u5e38\u89c1\u7684\u8fc7\u6ee4\u62e6\u622a\u6280\u672f\\n##### 2.1.1 \u7528\u6237\u6001\u52a8\u6001\u5e93\u62e6\u622a\\n\\nLinux\u4e0a\u7684\u52a8\u6001\u5e93\u52ab\u6301\u4e3b\u8981\u662f\u57fa\u4e8e `LD_PRELOAD` \u73af\u5883\u53d8\u91cf\uff0c\u8fd9\u4e2a\u73af\u5883\u53d8\u91cf\u7684\u4e3b\u8981\u4f5c\u7528\u662f\u6539\u53d8\u52a8\u6001\u5e93\u7684\u52a0\u8f7d\u987a\u5e8f\uff0c\u8ba9\u7528\u6237\u6709\u9009\u62e9\u7684\u8f7d\u5165\u4e0d\u540c\u52a8\u6001\u5e93\u4e2d\u7684\u76f8\u540c\u51fd\u6570\u3002\\n\\n\u4f46\u662f\u4f7f\u7528\u4e0d\u5f53\u5c31\u4f1a\u5f15\u8d77\u4e25\u91cd\u7684\u5b89\u5168\u95ee\u9898\uff0c\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u5b83\u5728\u4e3b\u7a0b\u5e8f\u548c\u52a8\u6001\u8fde\u63a5\u5e93\u4e2d\u52a0\u8f7d\u522b\u7684\u52a8\u6001\u51fd\u6570\uff0c\u8fd9\u5c31\u7ed9\u6211\u4eec\u63d0\u4f9b\u4e86\u4e00\u4e2a\u673a\u4f1a\uff0c\u5411\u522b\u4eba\u7684\u7a0b\u5e8f\u6ce8\u5165\u6076\u610f\u7684\u4ee3\u7801\u3002\\n\\n> [!TIP]\\n> \u8fd9\u662f\u4e00\u4e2a\u6700\u7b80\u5355\u7684\u52ab\u6301 \uff0c\u4f46\u662f\u5982\u679c\u52ab\u6301\u4e86\u7c7b\u4f3c\u4e8e `geteuid/getuid/getgid`\uff0c\u8ba9\u5176\u8fd4\u56de`0`\uff0c\u5c31\u76f8\u5f53\u4e8e\u66b4\u9732\u4e86root\u6743\u9650\u3002\u6240\u4ee5\u4e3a\u4e86\u5b89\u5168\u8d77\u89c1\uff0c\u4e00\u822c\u5c06 `LD_PRELOAD` \u73af\u5883\u53d8\u91cf\u7981\u7528\u6389\u3002\\n\\n##### 2.1.2 \u5185\u6838\u6001\u7cfb\u7edf\u8c03\u7528\u62e6\u622a\\n\\nLinux\u5185\u6838\u4e2d\u6240\u6709\u7684\u7cfb\u7edf\u8c03\u7528\u90fd\u662f\u653e\u5728\u4e00\u4e2a\u53eb\u505a `sys_call_table` \u7684\u5185\u6838\u6570\u7ec4\u4e2d\uff0c\u6570\u7ec4\u7684\u503c\u5c31\u8868\u793a\u8fd9\u4e2a\u7cfb\u7edf\u8c03\u7528\u670d\u52a1\u7a0b\u5e8f\u7684\u5165\u53e3\u5730\u5740\u3002\\n\\n![\u5185\u6838\u6001\u7cfb\u7edf\u8c03\u7528\u62e6\u622a\u8fc7\u7a0b ##w500##](image_01.png)\\n\\n\u5f53\u7528\u6237\u6001\u53d1\u8d77\u4e00\u4e2a\u7cfb\u7edf\u8c03\u7528\u65f6\uff0c\u4f1a\u901a\u8fc780\u8f6f\u4e2d\u65ad\u8fdb\u5165\u5230 `syscall hander`\uff0c\u8fdb\u800c\u8fdb\u5165\u5168\u5c40\u7684\u7cfb\u7edf\u8c03\u7528\u8868 `sys_call_table` \u53bb\u67e5\u627e\u5177\u4f53\u7684\u7cfb\u7edf\u8c03\u7528\uff0c\u90a3\u4e48\u5982\u679c\u6211\u4eec\u5c06\u8fd9\u4e2a\u6570\u7ec4\u4e2d\u7684\u5730\u5740\u6539\u6210\u6211\u4eec\u81ea\u5df1\u7684\u7a0b\u5e8f\u5730\u5740\uff0c\u5c31\u53ef\u4ee5\u5b9e\u73b0\u7cfb\u7edf\u8c03\u7528\u52ab\u6301\u3002\\n\\n\u4f46\u662f\u5185\u6838\u4e3a\u4e86\u5b89\u5168\uff0c\u5bf9\u8fd9\u79cd\u64cd\u4f5c\u505a\u4e86\u4e00\u4e9b\u9650\u5236:\\n\\n1. `sys_call_table` \u7684\u7b26\u53f7\u6ca1\u6709\u5bfc\u51fa, \u4e0d\u80fd\u76f4\u63a5\u83b7\u53d6.\\n2. `sys_call_table` \u6240\u5728\u7684\u5185\u5b58\u9875\u662f\u53ea\u8bfb\u5c5e\u6027\u7684, \u65e0\u6cd5\u76f4\u63a5\u8fdb\u884c\u4fee\u6539.\\n\\n\u89e3\u51b3\u65b9\u6cd5 (\u4e0d\u552f\u4e00):\\n\\n1. \u83b7\u53d6 `sys_call_table` \u7684\u5730\u5740: `grep sys_call_table /boot/System.map-uname -r`\\n\\n2. \u63a7\u5236\u9875\u8868\u53ea\u8bfb\u5c5e\u6027\u662f\u7531`CR0`\u5bc4\u5b58\u5668\u7684`WP\u4f4d`\u63a7\u5236\u7684\uff0c\u53ea\u8981\u5c06\u8fd9\u4e2a\u4f4d **\u6e05\u96f6** \u5c31\u53ef\u4ee5\u5bf9\u53ea\u8bfb\u9875\u8868\u8fdb\u884c\u4fee\u6539\u3002\\n\\n\u5b9e\u4f8b\u4ee3\u7801\u5728 https://zhuanlan.zhihu.com/p/549849135\\n\\n```cpp\\n/* make the page writable */\\nint make_rw(unsigned long address) {\\n    unsigned int level;\\n    pte_t *pte = lookup_address(address, &level); // \u67e5\u627e\u865a\u62df\u5730\u5740\u6240\u5728\u7684\u9875\u8868\u5730\u5740\\n    pte->pte |= _PAGE_RW; // \u8bbe\u7f6e\u9875\u8868\u8bfb\u5199\u5c5e\u6027\\n    return 0;\\n}\\n \\n/* make the page write protected */\\nint make_ro(unsigned long address) {\\n    unsigned int level;\\n    pte_t *pte = lookup_address(address, &level);\\n    pte->pte &= ~_PAGE_RW; // \u8bbe\u7f6e\u53ea\u8bfb\u5c5e\u6027\\n    return 0;\\n}\\n```\\n\\n```cpp\\n// \u5f00\u59cb\u66ff\u6362\u7cfb\u7edf\u8c03\u7528\\nstatic int syscall_init_module(void) {\\n    orig_getdents = sys_call_table[__NR_getdents];\\n    make_rw((unsigned long)sys_call_table); // \u4fee\u6539\u9875\u5c5e\u6027\\n    sys_call_table[__NR_getdents] = (unsigned long *)hacked_getdents; // \u8bbe\u7f6e\u65b0\u7684\u7cfb\u7edf\u8c03\u7528\u5730\u5740\\n    make_ro((unsigned long)sys_call_table);\\n    return 0;\\n}\\n\\n// \u6062\u590d\u539f\u72b6\\nstatic void syscall_cleanup_module(void) {\\n    printk(KERN_ALERT \\"Module syscall unloaded.\\\\n\\");\\n    make_rw((unsigned long)sys_call_table);\\n    sys_call_table[__NR_getdents] = (unsigned long *)orig_getdents;\\n    make_ro((unsigned long)sys_call_table);\\n}\\n```\\n\\n##### 2.1.3 \u5806\u6808\u5f0f\u6587\u4ef6\u7cfb\u7edf\\n\\nLinux\u901a\u8fc7`vfs\u865a\u62df\u6587\u4ef6\u7cfb\u7edf`\u6765\u7edf\u4e00\u62bd\u8c61\u5177\u4f53\u7684\u78c1\u76d8\u6587\u4ef6\u7cfb\u7edf\uff0c\u4ece\u4e0a\u5230\u4e0b\u7684IO\u6808\u5f62\u6210\u4e86\u4e00\u4e2a\u5806\u6808\u5f0f\u3002\\n\\n\u901a\u8fc7\u5bf9\u5185\u6838\u6e90\u7801\u7684\u5206\u6790\uff0c\u4ee5\u4e00\u6b21\u8bfb\u64cd\u4f5c\u4e3a\u4f8b\uff0c\u4ece\u4e0a\u5230\u4e0b\u6240\u6267\u884c\u7684\u6d41\u7a0b\u5982\u4e0b:\\n\\n![\u5806\u6808\u5f0f\u6587\u4ef6\u7cfb\u7edf\u8fc7\u7a0b ##w500##](image_02.png)\\n\\n\u5185\u6838\u4e2d\u91c7\u7528\u4e86\u5f88\u591ac\u8bed\u8a00\u5f62\u5f0f\u7684\u9762\u5411\u5bf9\u8c61\uff0c\u4e5f\u5c31\u662f\u51fd\u6570\u6307\u9488\u7684\u5f62\u5f0f\uff0c\u4f8b\u5982read\u662fvfs\u63d0\u4f9b\u7528\u6237\u7684\u63a5\u53e3\uff0c\u5177\u4f53\u5e95\u4e0b\u8c03\u7528\u7684\u662fext2\u7684read\u64cd\u4f5c\u3002\u6211\u4eec\u53ea\u8981\u5b9e\u73b0VFS\u63d0\u4f9b\u7684\u5404\u79cd\u63a5\u53e3\uff0c\u5c31\u53ef\u4ee5\u5b9e\u73b0\u4e00\u4e2a\u5806\u6808\u5f0f\u6587\u4ef6\u7cfb\u7edf\u3002L\\n\\n\u5b9e\u73b0\u4e86\u4e00\u4e2a\u5806\u6808\u5f0f\u6587\u4ef6\u7cfb\u7edf\uff0c\u76f8\u5f53\u4e8e\u6240\u6709\u7684\u8bfb\u5199\u64cd\u4f5c\u90fd\u4f1a\u8fdb\u5165\u5230\u6211\u4eec\u7684\u6587\u4ef6\u7cfb\u7edf\uff0c\u53ef\u4ee5\u62ff\u5230\u6240\u6709\u7684\u6570\u636e\uff0c\u5c31\u53ef\u4ee5\u8fdb\u884c\u505a\u4e00\u4e9b\u62e6\u622a\u8fc7\u6ee4\u3002\\n\\n##### 2.1.4 inline hook\\n\\n\u6211\u4eec\u77e5\u9053\u5185\u6838\u4e2d\u7684\u51fd\u6570\u4e0d\u53ef\u80fd\u628a\u6240\u6709\u529f\u80fd\u90fd\u5728\u8fd9\u4e2a\u51fd\u6570\u4e2d\u5168\u90e8\u5b9e\u73b0\uff0c\u5b83\u5fc5\u5b9a\u8981\u8c03\u7528\u5b83\u7684\u4e0b\u5c42\u51fd\u6570\u3002\\n\\n\u5982\u679c\u8fd9\u4e2a\u4e0b\u5c42\u51fd\u6570\u53ef\u4ee5\u5f97\u5230\u6211\u4eec\u60f3\u8981\u7684\u8fc7\u6ee4\u4fe1\u606f\u5185\u5bb9\uff0c\u5c31\u53ef\u4ee5\u628a\u4e0b\u5c42\u51fd\u6570\u5728\u4e0a\u5c42\u51fd\u6570\u4e2d\u7684offset\u66ff\u6362\u6210\u65b0\u7684\u51fd\u6570\u7684offset\uff0c\u8fd9\u6837\u4e0a\u5c42\u51fd\u6570\u8c03\u7528\u4e0b\u5c42\u51fd\u6570\u65f6\uff0c\u5c31\u4f1a\u8df3\u5230\u65b0\u7684\u51fd\u6570\u4e2d\uff0c\u5728\u65b0\u7684\u51fd\u6570\u4e2d\u505a\u8fc7\u6ee4\u548c\u52ab\u6301\u5185\u5bb9\u7684\u5de5\u4f5c\u3002\\n\\n\u6240\u4ee5\u4ece\u539f\u7406\u4e0a\u6765\u8bf4\uff0cinline hook\u53ef\u4ee5\u60f3hook\u54ea\u91cc\u5c31hook\u54ea\u91cc\u3002\\n\\n\u4f46\u662f\u6709\u4e24\u4e2a\u95ee\u9898:\\n\\n1. \u5982\u4f55\u5b9a\u4f4dhook\u70b9.\\n2. \u5982\u4f55\u6ce8\u5165hook\u51fd\u6570\u5165\u53e3.\\n\\n\u7b2c\u4e00\u4e2a\u9700\u8981\u4f60\u770b\u8fc7\u5bf9\u5e94\u7684\u5185\u6838\u6e90\u7801\\n\\n- \u7b2c\u4e8c\u4e2a\u6709\u4e24\u79cd\u65b9\u6cd5:\\n    1. \u63a5\u8fdb\u884c\u4e8c\u8fdb\u5236\u66ff\u6362\uff0c\u5c06call\u6307\u4ee4\u7684\u64cd\u4f5c\u6570\u66ff\u6362\u4e3ahook\u51fd\u6570\u7684\u5730\u5740\\n    2. Linux\u5185\u6838\u63d0\u4f9b\u7684kprobes\u673a\u5236\\n        > \u5176\u539f\u7406\u662f\u5728hook\u70b9\u6ce8\u5165int 3(x86)\u7684\u673a\u5668\u7801\uff0c\u8ba9cpu\u8fd0\u884c\u5230\u8fd9\u91cc\u7684\u65f6\u5019\u4f1a\u89e6\u53d1sig_trap\u4fe1\u53f7\uff0c\u7136\u540e\u5c06\u7528\u6237\u81ea\u5b9a\u4e49\u7684hook\u51fd\u6570\u6ce8\u5165\u5230sig_trap\u7684\u56de\u8c03\u51fd\u6570\u4e2d\uff0c\u8fbe\u5230\u89e6\u53d1hook\u51fd\u6570\u7684\u76ee\u7684\u3002\u8fd9\u4e2a\u5176\u5b9e\u4e5f\u662f\u8c03\u8bd5\u5668\u7684\u539f\u7406\u3002\\n\\n##### 2.1.5 LSM (\u5185\u6838\u5b89\u5168\u6a21\u5757)\\n\\n![\u5185\u6838\u5b89\u5168\u6a21\u5757 ##w500##](image_03.png)\\n\\nLSM\u5728\u5185\u6838\u4e2d\u505a\u4e86\u4ee5\u4e0b\u5de5\u4f5c:\\n1. \u5728\u7279\u5b9a\u7684\u5185\u6838\u6570\u636e\u7ed3\u6784\u4e2d\u52a0\u5165\u5b89\u5168\u57df\u3002\\n2. \u5728\u5185\u6838\u6e90\u4ee3\u7801\u4e2d\u4e0d\u540c\u7684\u5173\u952e\u70b9\u63d2\u5165\u5bf9\u5b89\u5168\u94a9\u5b50\u51fd\u6570\u7684\u8c03\u7528\u3002\\n3. \u52a0\u5165\u4e00\u4e2a\u901a\u7528\u7684\u5b89\u5168\u7cfb\u7edf\u8c03\u7528\u3002\\n4. \u63d0\u4f9b\u4e86\u51fd\u6570\u5141\u8bb8\u5185\u6838\u6a21\u5757\u6ce8\u518c\u4e3a\u5b89\u5168\u6a21\u5757\u6216\u8005\u6ce8\u9500\u3002\\n5. \u5c06capabilities\u903b\u8f91\u7684\u5927\u90e8\u5206\u79fb\u690d\u4e3a\u4e00\u4e2a\u53ef\u9009\u7684\u5b89\u5168\u6a21\u5757,\u5177\u6709\u53ef\u6269\u5c55\u6027\u3002\\n\\n\u5b9e\u4f8b: https://rivers.chaitin.cn/blog/cqj64sh0lnedo7thptp0\\n\\n```cpp\\n#include <linux/module.h> // included for all kernel modules\\n#include <linux/kernel.h> // included for KERN_INFO\\n#include <linux/init.h>   // included for __init and __exit macros\\n#include <linux/netfilter.h>\\n#include <linux/netfilter_ipv4.h>\\n#include <linux/netdevice.h>\\n#include <linux/vmalloc.h>\\n\\nMODULE_LICENSE(\\"GPL\\");\\nMODULE_DESCRIPTION(\\"A Simple Hello Packet Module\\");\\n\\nenum {\\n    NF_IP_PRE_ROUTING,\\n    NF_IP_LOCAL_IN,\\n    NF_IP_FORWARD,\\n    NF_IP_LOCAL_OUT,\\n    NF_IP_POST_ROUTING,\\n    NF_IP_NUMHOOKS\\n};\\n\\nstatic struct nf_hook_ops in_nfho;  // net filter hook option struct\\nstatic struct nf_hook_ops out_nfho; // net filter hook option struct\\n\\nstatic void dump_addr(unsigned char *iphdr) {\\n    int i;\\n    for (i = 0; i < 4; i++) {\\n        printk(\\"%d.\\", *(iphdr + 12 + i));\\n    }\\n    printk(\\" -> \\");\\n    for (i = 0; i < 4; i++) {\\n        printk(\\"%d.\\", *(iphdr + 16 + i));\\n    }\\n    printk(\\"\\\\n\\");\\n}\\n\\nunsigned int my_hook(void *priv, struct sk_buff *skb, const struct nf_hook_state *state) {\\n    printk(\\"Hello packet! \\");\\n    // printk(\\"from %s to %s\\\\n\\", in->name, out->name);\\n    unsigned char *iphdr = skb_network_header(skb);\\n    if (iphdr)\\n    {\\n        dump_addr(iphdr);\\n    }\\n    return NF_ACCEPT;\\n    // return NF_DROP;//\u4f1a\u5bfc\u81f4\u4e0a\u4e0d\u4e86\u7f51\\n}\\n\\nstatic int __init init_func(void) {\\n    // NF_IP_PRE_ROUTING hook\\n    in_nfho.hook = my_hook;\\n    in_nfho.hooknum = NF_IP_LOCAL_IN;\\n    in_nfho.pf = PF_INET;\\n    in_nfho.priority = NF_IP_PRI_FIRST;\\n\\n    nf_register_net_hook(&init_net, &in_nfho);\\n\\n    // NF_IP_LOCAL_OUT hook\\n    out_nfho.hook = my_hook;\\n    out_nfho.hooknum = NF_IP_LOCAL_OUT;\\n    out_nfho.pf = PF_INET;\\n    out_nfho.priority = NF_IP_PRI_FIRST;\\n\\n    nf_register_net_hook(&init_net, &out_nfho);\\n    return 0;\\n}\\n\\nstatic void __exit exit_func(void) {\\n    nf_unregister_net_hook(&init_net, &in_nfho);\\n    nf_unregister_net_hook(&init_net, &out_nfho);\\n    printk(KERN_INFO \\"Cleaning up Hello_Packet module.\\\\n\\");\\n}\\n\\nmodule_init(init_func);\\nmodule_exit(exit_func);\\n```\\n\\n##### 2.1.6 ebpf\\n\\neBPF \u662f\u4e00\u4e2a\u5728\u5185\u6838\u4e2d\u8fd0\u884c\u7684\u865a\u62df\u673a\uff0c\u5b83\u53ef\u4ee5\u53bb\u8fd0\u884c\u7528\u6237\u3002\u5728\u7528\u6237\u6001\u5b9e\u73b0\u7684\u8fd9\u79cd eBPF \u7684\u4ee3\u7801\uff0c\u5728\u5185\u6838\u4ee5\u672c\u5730\u4ee3\u7801\u7684\u5f62\u5f0f\u548c\u901f\u5ea6\u53bb\u6267\u884c\uff0c\u5b83\u53ef\u4ee5\u8ddf\u5185\u6838\u7684 Trace \u7cfb\u7edf\u76f8\u7ed3\u5408\uff0c\u7ed9\u6211\u4eec\u63d0\u4f9b\u4e86\u5728\u7ebf\u6269\u5c55\u5185\u6838\u529f\u80fd\u7684\u6280\u672f\u3002\\n\\neBPF\u7684hook\u70b9\u529f\u80fd\u5305\u62ec\u4ee5\u4e0b\u51e0\u90e8\u5206:\\n1. \u53ef\u4ee5\u5728Storage\u3001Network\u7b49\u4e0e\u5185\u6838\u4ea4\u4e92\u4e4b\u95f4\uff1b\\n2. \u4e5f\u53ef\u4ee5\u5728\u5185\u6838\u4e2d\u7684\u529f\u80fd\u6a21\u5757\u4ea4\u4e92\u4e4b\u95f4\uff1b\\n3. \u53c8\u53ef\u4ee5\u5728\u5185\u6838\u6001\u4e0e\u7528\u6237\u6001\u4ea4\u4e92\u4e4b\u95f4\uff1b\\n4. \u66f4\u53ef\u4ee5\u5728\u7528\u6237\u6001\u8fdb\u7a0b\u7a7a\u95f4\u3002\\n\\n##### 2.1.7 \u603b\u7ed3\\n\\n1. \u52a8\u6001\u5e93\u52ab\u6301\u4e0d\u592a\u5b8c\u5168\uff0c\u52ab\u6301\u7684\u4fe1\u606f\u6709\u53ef\u80fd\u6ee1\u8db3\u4e0d\u4e86\u6211\u4eec\u7684\u9700\u6c42\uff0c\u8fd8\u6709\u53ef\u80fd\u522b\u4eba\u5728\u4f60\u4e4b\u524d\u52ab\u6301\u4e86\uff0c\u4e00\u65e6\u7981\u7528 `LD_PRELOAD` \u5c31\u5931\u6548\u4e86\u3002\\n\\n2. \u7cfb\u7edf\u8c03\u7528\u52ab\u6301\uff0c\u52ab\u6301\u7684\u4fe1\u606f\u6709\u53ef\u80fd\u6ee1\u8db3\u4e0d\u4e86\u6211\u4eec\u7684\u9700\u6c42\uff0c\u4f8b\u5982\u4e0d\u80fd\u83b7\u53d6 `struct file` \u7ed3\u6784\u4f53\uff0c\u4e0d\u80fd\u83b7\u53d6\u6587\u4ef6\u7684`\u7edd\u5bf9\u8def\u5f84`\u7b49\u3002\\n\\n3. \u5806\u6808\u5f0f\u6587\u4ef6\u7cfb\u7edf\uff0c\u4f9d\u8d56\u4e8eMount,\u53ef\u80fd\u9700\u8981\u91cd\u542f\u7cfb\u7edf\u3002\\n\\n4. inline hook\uff0c\u7075\u6d3b\u6027\u9ad8\uff0c\u968f\u610fHook\uff0c\u5373\u65f6\u751f\u6548\u65e0\u9700\u91cd\u542f\uff0c\u4f46\u662f\u5728\u4e0d\u540c\u5185\u6838\u7248\u672c\u4e4b\u95f4\u901a\u7528\u6027\u5dee\uff0c\u4e00\u65e6\u67d0\u4e9b\u51fd\u6570\u53d1\u751f\u4e86\u53d8\u5316\uff0cHook\u5931\u6548\u3002\\n\\n5. LSM\uff0c\u5728\u65e9\u671f\u7684\u5185\u6838\u4e2d\uff0c\u53ea\u80fd\u5141\u8bb8\u4e00\u4e2aLSM\u5185\u6838\u6a21\u5757\u52a0\u8f7d\uff0c\u4f8b\u5982\u52a0\u8f7d\u4e86SELinux\uff0c\u5c31\u4e0d\u80fd\u52a0\u8f7d\u5176\u4ed6\u7684LSM\u6a21\u5757\uff0c\u5728\u6700\u65b0\u7684\u5185\u6838\u7248\u672c\u4e2d\u4e0d\u5b58\u5728\u8fd9\u4e2a\u95ee\u9898\u3002\\n\\n6. eBPF Hook,\u53ef\u4ee5\u7528\u6237\u6001\u7f16\u7a0b\u63a7\u5236\uff0c\u7075\u6d3b\u6027\u9ad8\uff0c\u5373\u65f6\u751f\u6548\u65e0\u9700\u91cd\u542f\uff0c\u4f46\u4f9d\u8d56\u5185\u6838\u7684\u7248\u672c\uff0c\u901a\u7528\u6027\u5dee\uff0c\u4e00\u65e6\u67d0\u4e9b\u51fd\u6570\u53d1\u751f\u4e86\u53d8\u5316\uff0cHook\u5931\u6548\u3002\\n\\n#### 2.2 LSM hook\u70b9\u8bf4\u660e\\n\\n\u5728VFS\uff08\u865a\u62df\u6587\u4ef6\u7cfb\u7edf\uff09\u5c42\u4e2d\uff0c\u5b9a\u4e49\u4e86\u4e09\u4e2a\u4e3b\u8981\u5bf9\u8c61\uff0c\u5b83\u4eec\u5c01\u88c5\u4e86\u4f4e\u7ea7\u6587\u4ef6\u7cfb\u7edf\u5f00\u53d1\u6240\u4f7f\u7528\u7684\u63a5\u53e3:\\n\\n```cpp\\nsuper_block\uff08\u8d85\u7ea7\u5757\uff09\u5bf9\u8c61\\nfile\uff08\u6587\u4ef6\uff09\u5bf9\u8c61\\ninode\uff08\u7d22\u5f15\u8282\u70b9\uff09\u5bf9\u8c61\\n```\\n\\n\u6bcf\u4e2a\u5bf9\u8c61\u90fd\u5305\u542b\u4e00\u7ec4\u64cd\u4f5c\uff0c\u8fd9\u4e9b\u64cd\u4f5c\u5b9a\u4e49\u4e86VFS\u4e0e\u5b9e\u9645\u6587\u4ef6\u7cfb\u7edf\u4e4b\u95f4\u7684\u63a5\u53e3\u3002LSM\uff08Linux\u5b89\u5168\u6a21\u5757\uff09\u5229\u7528\u8fd9\u4e9b\u63a5\u53e3\u6765\u4ecb\u5165\u6587\u4ef6\u7cfb\u7edf\u8bbf\u95ee\u3002\\n\\n> LSM\u4f7f\u7528\u5185\u6838\u5bf9\u8c61\u4e2d\u5b9a\u4e49\u7684\u4e0d\u900f\u660e\u5b89\u5168\u6307\u9488; \u901a\u8fc7\u5728\u8fd9\u4e9b\u7ed3\u6784\u4f53\u4e2d\u6dfb\u52a0\u5b89\u5168\u6307\u9488\uff0cLSM\u53ef\u4ee5\u76d1\u89c6\u548c\u63a7\u5236\u4e0e\u6587\u4ef6\u7cfb\u7edf\u76f8\u5173\u7684\u64cd\u4f5c\u3002\\n> \\n> \u8fd9\u6837\uff0cLSM\u53ef\u4ee5\u5728\u6587\u4ef6\u7cfb\u7edf\u8bbf\u95ee\u8fc7\u7a0b\u4e2d\u4ecb\u5165\uff0c\u6267\u884c\u5b89\u5168\u7b56\u7565\u68c0\u67e5\u3001\u6743\u9650\u63a7\u5236\u7b49\u64cd\u4f5c\uff0c\u4ee5\u589e\u5f3a\u7cfb\u7edf\u7684\u5b89\u5168\u6027\u3002\\n\\n##### 2.2.1 LSM super_block hooks\\n\\n```cpp\\nstruct super_block {\\n\\t......\\n#ifdef CONFIG_SECURITY\\n\\tvoid *s_security;\\n#endif\\n\\t.....\\n}\\n```\\n\\n\u5f53\u6587\u4ef6\u7cfb\u7edf\u5728\u5185\u6838\u4e2d\u8868\u793a\u65f6, `super_block` \u7ed3\u6784\u4f53\u662f\u4ee3\u8868\u8be5\u6587\u4ef6\u7cfb\u7edf\u7684\u5185\u6838\u5bf9\u8c61\u3002\\n\\n`super_block` \u7ed3\u6784\u4f53\u5728\u6302\u8f7d\u548c\u5378\u8f7d\u6587\u4ef6\u7cfb\u7edf\u4ee5\u53ca\u83b7\u53d6\u6587\u4ef6\u7cfb\u7edf\u7edf\u8ba1\u4fe1\u606f\u65f6\u88ab\u4f7f\u7528\u3002\\n\\nLSM\uff08Linux\u5b89\u5168\u6a21\u5757\uff09\u63d0\u4f9b\u4e86\u4e00\u7ec4\u94a9\u5b50\u51fd\u6570\uff0c\u7528\u4e8e\u4ecb\u5165\u5bf9 `super_block` \u7684\u5404\u79cd\u64cd\u4f5c\u3002\\n\\n- \u5728\u6302\u8f7d\u6587\u4ef6\u7cfb\u7edf\u65f6\uff0c\u5185\u6838\u9996\u5148\u901a\u8fc7\u8c03\u7528 `sb_mount()` \u94a9\u5b50\u51fd\u6570\u6765\u9a8c\u8bc1\u6302\u8f7d\u8bf7\u6c42\u7684\u6709\u6548\u6027\u3002LSM\u53ef\u4ee5\u4f7f\u7528\u8be5\u94a9\u5b50\u51fd\u6570\u6267\u884c\u989d\u5916\u7684\u5b89\u5168\u68c0\u67e5\uff0c\u4f8b\u5982\u9a8c\u8bc1\u6302\u8f7d\u4efb\u52a1\u7684\u6743\u9650\u6216\u786e\u4fdd\u6302\u8f7d\u9009\u9879\u7684\u6709\u6548\u6027\u3002\\n\\n- \u5728\u5378\u8f7d\u6587\u4ef6\u7cfb\u7edf\u65f6\uff0c\u4f1a\u8c03\u7528 `sb_umount()` \u94a9\u5b50\u51fd\u6570\u6765\u68c0\u67e5\u5378\u8f7d\u6587\u4ef6\u7cfb\u7edf\u6240\u9700\u7684\u6743\u9650\u3002LSM\u53ef\u4ee5\u5229\u7528\u8fd9\u4e2a\u94a9\u5b50\u51fd\u6570\u6765\u6267\u884c\u8bbf\u95ee\u63a7\u5236\uff0c\u786e\u4fdd\u53ea\u6709\u6388\u6743\u7684\u4efb\u52a1\u80fd\u591f\u6267\u884c\u5378\u8f7d\u64cd\u4f5c\u3002\\n\\n- `sb_remount()` \u94a9\u5b50\u51fd\u6570\u5728\u4fee\u6539\u6587\u4ef6\u7cfb\u7edf\u6302\u8f7d\u9009\u9879\u65f6\u88ab\u8c03\u7528\u3002LSM\u53ef\u4ee5\u5229\u7528\u8be5\u94a9\u5b50\u51fd\u6570\u9a8c\u8bc1\u8bf7\u6c42\u7684\u6302\u8f7d\u9009\u9879\u7684\u6709\u6548\u6027\u548c\u5b89\u5168\u6027\u3002\\n\\n\u5f53\u4efb\u52a1\u5c1d\u8bd5\u83b7\u53d6\u6587\u4ef6\u7cfb\u7edf\u7edf\u8ba1\u4fe1\u606f\uff08\u5982\u78c1\u76d8\u4f7f\u7528\u60c5\u51b5\u6216\u53ef\u7528\u7a7a\u95f4\uff09\u65f6\uff0c\u4f1a\u8c03\u7528 `sb_statfs()` \u94a9\u5b50\u51fd\u6570\u3002LSM\u53ef\u4ee5\u4f7f\u7528\u8be5\u94a9\u5b50\u51fd\u6570\u6267\u884c\u6743\u9650\u68c0\u67e5\uff0c\u786e\u4fdd\u53ea\u6709\u6388\u6743\u7684\u4efb\u52a1\u80fd\u591f\u8bbf\u95ee\u6587\u4ef6\u7cfb\u7edf\u7edf\u8ba1\u4fe1\u606f\u3002\\n\\n```cpp\\nunion security_list_options {\\n\\t// ......\\n\\tint (*sb_remount)(struct super_block *sb, void *mnt_opts);\\n\\tint (*sb_statfs)(struct dentry *dentry);\\n\\tint (*sb_mount)(const char *dev_name, const struct path *path,\\n\\t\\t\\tconst char *type, unsigned long flags, void *data);\\n\\tint (*sb_umount)(struct vfsmount *mnt, int flags);\\n\\t// ......\\n}\\n```\\n\\n##### 2.2.2 LSM hooks\\n\\n\u540c\u7406\u8fd8\u6709\u4ee5\u4e0bhook:\\n\\n```md\\n\u4e00\u3001LSM file system hooks\\n    1.1 LSM super_block hooks\\n    1.2 LSM file hooks\\n    1.3 LSM inode hooks\\n\u4e8c\u3001LSM Task hooks\\n    > \u5f53\u4efb\u52a1\u5728\u5185\u6838\u4e2d\u8868\u793a\u4e3a\u53ef\u8c03\u5ea6\u4efb\u52a1\u65f6\uff0ctask_struct \u7ed3\u6784\u4f53\u662f\u4ee3\u8868\u8be5\u4efb\u52a1\u7684\u5185\u6838\u5bf9\u8c61\u3002\\n    > task_struct \u7ed3\u6784\u4f53\u5305\u542b\u4e86\u4efb\u52a1\u7684\u57fa\u672c\u4fe1\u606f\uff0c\u5982\u7528\u6237/\u7ec4 ID\u3001\u8d44\u6e90\u9650\u5236\u4ee5\u53ca\u8c03\u5ea6\u7b56\u7565\u548c\u4f18\u5148\u7ea7\u7b49\u3002\\n\u4e09\u3001LSM IPC hooks\\n    > \u5f53\u4efb\u52a1\u9700\u8981\u8bbf\u95ee\u5185\u6838\u4e2d\u7684 SysV IPC \u673a\u5236\u65f6\uff0c\u5185\u6838\u63d0\u4f9b\u4e86\u6807\u51c6\u7684 SysV IPC \u673a\u5236\uff0c\u5305\u62ec\u5171\u4eab\u5185\u5b58\u3001\u4fe1\u53f7\u91cf\u548c\u6d88\u606f\u961f\u5217\u7b49\u3002\u8fd9\u4e9b\u673a\u5236\u5141\u8bb8\u8fdb\u7a0b\u4e4b\u95f4\u8fdb\u884c\u901a\u4fe1\u548c\u5171\u4eab\u6570\u636e\u3002\\n\u56db\u3001LSM Network hooks\\n    > \u7f51\u7edc\u662fLinux\u4e2d\u7684\u4e00\u4e2a\u91cd\u8981\u65b9\u9762\uff0c\u5c24\u5176\u662f\u5728\u4fdd\u62a4\u7cfb\u7edf\u514d\u53d7\u7f51\u7edc\u653b\u51fb\u65b9\u9762\uff0cLSM\u4e3a\u5185\u6838\u7684\u8fd9\u4e2a\u9886\u57df\u63d0\u4f9b\u4e86\u6269\u5c55\u7684\u5b89\u5168\u6027\u3002\u5e94\u7528\u5c42\u5bf9\u7f51\u7edc\u7684\u8bbf\u95ee\u662f\u901a\u8fc7\u4e00\u7cfb\u5217\u4e0e\u5957\u63a5\u5b57\u76f8\u5173\u7684\u94a9\u5b50\u51fd\u6570\u8fdb\u884c\u4ecb\u5165\u7684\u3002\\n\u4e94\u3001LSM Module & System hooks\\n```\\n\\nhttps://blog.csdn.net/farsight_2098/article/details/130875915\\n\\n\u4ee3\u7801\u5b9e\u4f8b:\\n\\n\u4e0b\u9762\u662f\u4e00\u4e2a\u57fa\u4e8e\u8fdb\u7a0b\u540d\u548c\u6587\u4ef6\u540d\u5b9e\u73b0\u7279\u5b9a\u8fdb\u7a0b\u53ef\u4ee5\u8bbf\u95ee\u7279\u5b9a\u6587\u4ef6\u7684LSM\u793a\u4f8b\u4ee3\u7801\\n\\n> \u8fd9\u4e2a\u793a\u4f8b\u7684\u529f\u80fd\u662f\uff0c\u53ea\u5141\u8bb8\u7279\u5b9a\u8fdb\u7a0b\u53ef\u4ee5\u8bbf\u95ee\u7279\u5b9a\u7684\u6587\u4ef6\u3002\u5f53\u8fdb\u7a0b\u4e0d\u5728\u5141\u8bb8\u8bbf\u95ee\u5217\u8868\u6216\u8005\u8bbf\u95ee\u7684\u6587\u4ef6\u4e0e\u88ab\u4fdd\u62a4\u8def\u5f84\u4e0d\u5339\u914d\u65f6\uff0c\u4f1a\u8fd4\u56de-EACCES\u9519\u8bef\uff0c\u8868\u793a\u62d2\u7edd\u8bbf\u95ee\u3002\\n\\n```cpp\\n#include <linux/lsm_hooks.h>\\n#include <linux/path.h>\\n#include <linux/dcache.h>\\n#include <linux/namei.h>\\n \\n// \u5b9a\u4e49\u5141\u8bb8\u8bbf\u95ee\u6587\u4ef6\u7684\u8fdb\u7a0b\u540d\u79f0\\nstatic char *allowed_process_name = \\"my_app\\";\\n// \u5b9a\u4e49\u9700\u8981\u4fdd\u62a4\u7684\u6587\u4ef6\u8def\u5f84\\nstatic char *file_path = \\"path/to/protected/file\\";\\n \\n// \u5728inode\u5bf9\u8c61\u8bbf\u95ee\u7684\u94a9\u5b50\u70b9\u4e0a\u5b9e\u73b0\u81ea\u5b9a\u4e49\u94a9\u5b50\u51fd\u6570\\nstatic int example_inode_permission(struct inode *inode, int mask) {\\n    // \u83b7\u53d6\u5f53\u524d\u8fdb\u7a0b\u7684\u8fdb\u7a0b\u7ec4ID\u548c\u8fdb\u7a0bID\\n    pid_t current_pid = task_tgid_vnr(current);\\n    // \u83b7\u53d6\u5f53\u524d\u8fdb\u7a0b\u7684\u8fdb\u7a0b\u540d\u79f0\\n    char * current_process_name = (char*)get_task_comm(current);\\n \\n    // \u5224\u65ad\u8fdb\u7a0b\u540d\u79f0\u548c\u8fdb\u7a0b\u7ec4\u662f\u5426\u5339\u914d\\n    if (strcmp(current_process_name, allowed_process_name) || current_pid != pid_nr(get_task_pid(current, PIDTYPE_PID))) {\\n        // \u5982\u679c\u5f53\u524d\u8fdb\u7a0b\u540d\u79f0\u548c\u8fdb\u7a0b\u7ec4\u548c\u8981\u6c42\u4e0d\u5339\u914d\uff0c\u5219\u62d2\u7edd\u8bbf\u95ee\\n        return -EACCES;\\n    }\\n \\n    // \u5224\u65ad\u8bbf\u95ee\u7684\u6587\u4ef6\u8def\u5f84\u662f\u5426\u4e0e\u88ab\u4fdd\u62a4\u8def\u5f84\u5339\u914d\\n    struct path file;\\n    int err = kern_path(file_path, LOOKUP_FOLLOW, &file);\\n    if (err) {\\n        printk(KERN_INFO \\"%!(NOVERB)s not found.\\\\n\\", file_path);\\n        return -EACCES;\\n    }\\n    if (file.dentry != inode->i_dentry) {\\n        return -EACCES;\\n    }\\n \\n    // \u5141\u8bb8\u8fdb\u7a0b\u8bbf\u95ee\u6587\u4ef6\\n    return 0;\\n}\\n \\n// \u5b9a\u4e49\u81ea\u5b9a\u4e49\u94a9\u5b50\u51fd\u6570\u5217\u8868\\nstatic struct security_hook_list example_hooks[] = {\\n    LSM_HOOK_INIT(inode_permission, example_inode_permission),\\n};\\n \\n// \u5b89\u5168\u6a21\u5757\u521d\u59cb\u5316\u51fd\u6570\\nstatic __init int example_init(void) {\\n    printk(KERN_INFO \\"example LSM initialized\\\\n\\");\\n \\n    // \u6ce8\u518c\u81ea\u5b9a\u4e49\u94a9\u5b50\u51fd\u6570\\n    security_add_hooks(example_hooks, ARRAY_SIZE(example_hooks));\\n \\n    return 0;\\n}\\n \\n// \u5b89\u5168\u6a21\u5757\u6ce8\u9500\u51fd\u6570\\nstatic __exit void example_exit(void) {\\n    printk(KERN_INFO \\"example LSM exited\\\\n\\");\\n\\n    // \u5220\u9664\u81ea\u5b9a\u4e49\u94a9\u5b50\u51fd\u6570\\n    security_delete_hooks(example_hooks, ARRAY_SIZE(example_hooks));\\n}\\n \\n// \u6a21\u5757\u521d\u59cb\u5316\u548c\u6ce8\u9500\u51fd\u6570\\nsecurity_initcall(example_init);\\nmodule_exit(example_exit);\\n \\nMODULE_LICENSE(\\"GPL\\");\\nMODULE_DESCRIPTION(\\"LSM\u793a\u4f8b\uff1a\u4ec5\u7279\u5b9a\u8fdb\u7a0b\u53ef\u4ee5\u8bbf\u95ee\u7279\u5b9a\u6587\u4ef6\\");\\n```\\n\\n\u4e0b\u9762\u662f\u4e00\u4e2a\u57fa\u4e8e\u7279\u5b9a\u8fdb\u7a0b\u540d\u5b9e\u73b0\u53ea\u6709\u7279\u5b9a\u8fdb\u7a0b\u53ef\u4ee5\u4f7f\u7528\u7f51\u7edc\u7684LSM\u793a\u4f8b\u4ee3\u7801:\\n\\n> \u793a\u4f8b\u7684\u529f\u80fd\u662f\uff0c\u53ea\u5141\u8bb8\u7279\u5b9a\u8fdb\u7a0b\u53ef\u4ee5\u4f7f\u7528\u7f51\u7edc\u3002\u5982\u679c\u8fdb\u7a0b\u4e0d\u5728\u5141\u8bb8\u4f7f\u7528\u7f51\u7edc\u7684\u5217\u8868\u4e2d\uff0c\u4f1a\u8fd4\u56de-EACCES\u9519\u8bef\uff0c\u8868\u793a\u62d2\u7edd\u4f7f\u7528\u7f51\u7edc\u3002\u6b64\u793a\u4f8b\u91cd\u70b9\u6d4b\u8bd5\u5957\u63a5\u5b57\u548c\u8fde\u63a5\u5230\u8fdc\u7a0b\u4e3b\u673a\u7684\u884c\u4e3a\uff0c\u4f46\u53ef\u4ee5\u901a\u8fc7\u6dfb\u52a0\u5176\u4ed6\u9002\u5f53\u7684\u94a9\u5b50\u6765\u6269\u5c55\u5176\u529f\u80fd\u3002\\n\\n```cpp\\n#include <linux/lsm_hooks.h>\\n#include <linux/net.h>\\n#include <linux/sched.h>\\n \\n// \u5b9a\u4e49\u5141\u8bb8\u4f7f\u7528\u7f51\u7edc\u7684\u8fdb\u7a0b\u540d\u79f0\\nstatic char *allowed_process_name = \\"my_network_app\\";\\n \\n// \u5728socket\u5bf9\u8c61\u8bbf\u95ee\u7684\u94a9\u5b50\u70b9\u4e0a\u5b9e\u73b0\u81ea\u5b9a\u4e49\u94a9\u5b50\u51fd\u6570\\nstatic int example_socket_socket_create(int family, int type, int protocol, int kern) {\\n    // \u83b7\u53d6\u5f53\u524d\u8fdb\u7a0b\u7684\u8fdb\u7a0b\u540d\u79f0\\n    char * current_process_name = (char*)get_task_comm(current);\\n \\n    // \u5224\u65ad\u5f53\u524d\u8fdb\u7a0b\u540d\u79f0\u662f\u5426\u5339\u914d\u5141\u8bb8\u4f7f\u7528\u7f51\u7edc\u7684\u8fdb\u7a0b\u540d\u79f0\\n    if (strcmp(current_process_name, allowed_process_name)) {\\n        return -EACCES;\\n    }\\n \\n    return 0;\\n}\\n \\n// \u5728bind\uff08\u7ed1\u5b9a\u5957\u63a5\u5b57\uff09\u94a9\u5b50\u70b9\u4e0a\u5b9e\u73b0\u81ea\u5b9a\u4e49\u94a9\u5b50\u51fd\u6570\\nstatic int example_socket_socket_bind(struct socket *sock, struct sockaddr *address, int addrlen) {\\n    // \u83b7\u53d6\u5f53\u524d\u8fdb\u7a0b\u7684\u8fdb\u7a0b\u540d\u79f0\\n    char * current_process_name = (char*)get_task_comm(current);\\n \\n    // \u5224\u65ad\u5f53\u524d\u8fdb\u7a0b\u540d\u79f0\u662f\u5426\u5339\u914d\u5141\u8bb8\u4f7f\u7528\u7f51\u7edc\u7684\u8fdb\u7a0b\u540d\u79f0\\n    if (strcmp(current_process_name, allowed_process_name)) {\\n        return -EACCES;\\n    }\\n \\n    return 0;\\n}\\n \\n// \u5728connect\uff08\u8fde\u63a5\u5230\u8fdc\u7a0b\u4e3b\u673a\uff09\u94a9\u5b50\u70b9\u4e0a\u5b9e\u73b0\u81ea\u5b9a\u4e49\u94a9\u5b50\u51fd\u6570\\nstatic int example_socket_socket_connect(struct socket *sock, struct sockaddr *address, int addrlen, int flags) {\\n    // \u83b7\u53d6\u5f53\u524d\u8fdb\u7a0b\u7684\u8fdb\u7a0b\u540d\u79f0\\n    char * current_process_name = (char*)get_task_comm(current);\\n \\n    // \u5224\u65ad\u5f53\u524d\u8fdb\u7a0b\u540d\u79f0\u662f\u5426\u5339\u914d\u5141\u8bb8\u4f7f\u7528\u7f51\u7edc\u7684\u8fdb\u7a0b\u540d\u79f0\\n    if (strcmp(current_process_name, allowed_process_name)) {\\n        return -EACCES;\\n    }\\n \\n    return 0;\\n}\\n \\n// \u5b9a\u4e49\u81ea\u5b9a\u4e49\u94a9\u5b50\u51fd\u6570\u5217\u8868\\nstatic struct security_hook_list example_hooks[] = {\\n    LSM_HOOK_INIT(socket_socket_create, example_socket_socket_create),\\n    LSM_HOOK_INIT(socket_bind, example_socket_socket_bind),\\n    LSM_HOOK_INIT(socket_connect, example_socket_socket_connect),\\n};\\n \\n// \u5b89\u5168\u6a21\u5757\u521d\u59cb\u5316\u51fd\u6570\\nstatic __init int example_init(void) {\\n    printk(KERN_INFO \\"example LSM initialized\\\\n\\");\\n \\n    // \u6ce8\u518c\u81ea\u5b9a\u4e49\u94a9\u5b50\u51fd\u6570\\n    security_add_hooks(example_hooks, ARRAY_SIZE(example_hooks));\\n \\n    return 0;\\n}\\n \\n// \u5b89\u5168\u6a21\u5757\u6ce8\u9500\u51fd\u6570\\nstatic __exit void example_exit(void) {\\n    printk(KERN_INFO \\"example LSM exited\\\\n\\");\\n \\n    // \u5220\u9664\u81ea\u5b9a\u4e49\u94a9\u5b50\u51fd\u6570\\n    security_delete_hooks(example_hooks, ARRAY_SIZE(example_hooks));\\n}\\n \\n// \u6a21\u5757\u521d\u59cb\u5316\u548c\u6ce8\u9500\u51fd\u6570\\nsecurity_initcall(example_init);\\nmodule_exit(example_exit);\\n \\nMODULE_LICENSE(\\"GPL\\");\\nMODULE_DESCRIPTION(\\"LSM\u793a\u4f8b\uff1a\u4ec5\u7279\u5b9a\u8fdb\u7a0b\u53ef\u4ee5\u4f7f\u7528\u7f51\u7edc\\");\\n```\\n\\n#### 2.3 LSM \u4e0e BPF\\n##### 2.3.1 \u7cfb\u7edf\u8ba4\u8bc6 LSM\\nLSM\uff08Linux Security Module\uff09 \u4e2d\u6587\u7ffb\u8bd1\u4e3a\u5185\u6838\u5b89\u5168\u6a21\u5757\uff0c\u5c3d\u7ba1\u4ece\u540d\u5b57\u4e0a\u662f\u5b89\u5168\u6a21\u5757\uff0c\u4f46 LSM \u5176\u5b9e\u662f\u4e00\u4e2a\u5728\u5185\u6838\u5404\u4e2a\u5b89\u5168\u6a21\u5757\u7684\u57fa\u7840\u4e0a\u63d0\u51fa\uff08\u62bd\u8c61\u51fa\uff09\u7684\u8f7b\u91cf\u7ea7\u5b89\u5168\u8bbf\u95ee\u63a7\u5236\u6846\u67b6\u3002\u8be5\u6846\u67b6\u53ea\u662f\u63d0\u4f9b\u4e00\u4e2a\u652f\u6301\u5b89\u5168\u6a21\u5757\u7684\u63a5\u53e3\uff0c\u672c\u8eab\u4e0d\u80fd\u589e\u5f3a\u7cfb\u7edf\u5b89\u5168\u6027\uff0c\u5177\u4f53\u7684\u5de5\u4f5c\u4ea4\u7ed9\u5404\u5b89\u5168\u6a21\u5757\u6765\u505a\u3002\\n\\nLSM \u5728\u5185\u6838\u4e2d\u4f53\u73b0\u4e3a\u4e00\u7ec4\u5b89\u5168\u76f8\u5173\u7684\u51fd\u6570\uff0c\u662f\u63d0\u4f9b\u5b9e\u65bd\u5f3a\u5236\u8bbf\u95ee\u63a7\u5236\uff08MAC\uff09\u6a21\u5757\u7684\u5fc5\u8981\u7ec4\u4ef6\uff0c\u53ef\u5b9e\u73b0\u7b56\u7565\u4e0e\u5185\u6838\u6e90\u4ee3\u7801\u89e3\u8026\u3002\u5b89\u5168\u51fd\u6570\u5728\u7cfb\u7edf\u8c03\u7528\u7684\u6267\u884c\u8def\u5f84\u4e2d\u4f1a\u88ab\u8c03\u7528\uff0c\u5bf9\u7528\u6237\u6001\u8fdb\u7a0b\u8bbf\u95ee\u5185\u6838\u8d44\u6e90\u5bf9\u8c61\u8fdb\u884c\u5f3a\u5236\u8bbf\u95ee\u63a7\u5236\uff0c\u53d7\u4fdd\u62a4\u7684\u5bf9\u8c61\u7c7b\u578b\u5305\u62ec\u6587\u4ef6\u3001\u76ee\u5f55\u3001\u4efb\u52a1\u5bf9\u8c61\u3001\u51ed\u636e\u7b49\u3002\u4ece\u7248\u672c 5.4 \u5f00\u59cb\uff0c\u8be5\u6846\u67b6\u76ee\u524d\u5305\u62ec\u6574\u4e2a\u5185\u6838\u7684 224 \u4e2a\u6302\u94a9\u70b9\u3001\u4e00\u4e2a\u7528\u4e8e\u6ce8\u518c\u8981\u5728\u8fd9\u4e9b\u6302\u94a9\u70b9\u8c03\u7528\u7684\u51fd\u6570\u7684 API\uff0c\u4ee5\u53ca\u4e00\u4e2a\u7528\u4e8e\u4fdd\u7559\u4e0e\u53d7\u4fdd\u62a4\u5185\u6838\u5bf9\u8c61\u5173\u8054\u7684\u5185\u5b58\u4ee5\u4f9b LSM \u4f7f\u7528\u7684 API\u3002\u5982\u679c\u8981\u60f3\u8981\u8fdb\u4e00\u6b65\u4e86\u89e3\u53ef\u53c2\u8003\u5185\u6838\u6587\u6863 [LSM \u90e8\u5206](https://www.kernel.org/doc/html/latest/admin-guide/LSM/index.html) \u5185\u5bb9\u3002\\n\\n![LSM_AND_BPF ##w500##](image_04.png)\\n\\nLSM \u80cc\u540e\u7684\u6838\u5fc3\u6982\u5ff5\u662f LSM \u94a9\u5b50\u3002LSM \u94a9\u5b50\u66b4\u9732\u5728\u5185\u6838\u7684\u5173\u952e\u4f4d\u7f6e\uff0c\u53ef\u901a\u8fc7\u6302\u94a9\u8fdb\u884c\u7ba1\u5236\u7684\u64cd\u4f5c\u793a\u4f8b\u5305\u62ec:\\n\\n- \u6587\u4ef6\u7cfb\u7edf\u64cd\u4f5c\\n- \u6253\u5f00\u3001\u521b\u5efa\u3001\u79fb\u52a8\u548c\u5220\u9664\u6587\u4ef6\\n- \u6302\u8f7d\u548c\u5378\u8f7d\u6587\u4ef6\u7cfb\u7edf\\n- task/process operations \u4efb\u52a1 / \u8fdb\u7a0b\u64cd\u4f5c\\n- \u5206\u914d\u548c\u91ca\u653e\u4efb\u52a1\uff0c\u66f4\u6539\u4efb\u52a1\u7684\u7528\u6237\u548c\u7ec4\u6807\u8bc6\\n- \u5957\u63a5\u5b57\u64cd\u4f5c\\n- \u521b\u5efa\u548c\u7ed1\u5b9a\u5957\u63a5\u5b57\\n- \u63a5\u6536\u548c\u53d1\u9001\u6d88\u606f\\n\\n\u5176\u88ab\u5b9a\u4e49\u5728 [lsm_hook_defs.h](https://elixir.bootlin.com/linux/v6.2/source/include/linux/lsm_hook_defs.h) \u4e2d:\\n\\n```cpp\\n/*\\n * The macro LSM_HOOK is used to define the data structures required by\\n * the LSM framework using the pattern:\\n *\\n *\\tLSM_HOOK(<return_type>, <default_value>, <hook_name>, args...)\\n *\\n * struct security_hook_heads {\\n *   #define LSM_HOOK(RET, DEFAULT, NAME, ...) struct hlist_head NAME;\\n *   #include <linux/lsm_hook_defs.h>\\n *   #undef LSM_HOOK\\n * };\\n */\\nLSM_HOOK(int, 0, binder_set_context_mgr, const struct cred *mgr)\\nLSM_HOOK(int, 0, binder_transaction, const struct cred *from,\\n\\t const struct cred *to)\\nLSM_HOOK(int, 0, binder_transfer_binder, const struct cred *from,\\n\\t const struct cred *to)\\nLSM_HOOK(int, 0, binder_transfer_file, const struct cred *from,\\n\\t const struct cred *to, struct file *file)\\nLSM_HOOK(int, 0, ptrace_access_check, struct task_struct *child,\\n\\t unsigned int mode)\\nLSM_HOOK(int, 0, ptrace_traceme, struct task_struct *parent)\\n```\\n\\n\u683c\u5f0f\u4e3a:\\n\\n```cpp\\nLSM_HOOK(<return_type>, <default_value>, <hook_name>, args...)\\n```\\n\\nLSM \u63d0\u4f9b\u7684\u5927\u591a\u6570\u94a9\u5b50\u90fd\u9700\u8981\u8fd4\u56de\u4e00\u4e2a\u6574\u6570\u503c\uff08\u4e5f\u6709\u90e8\u5206\u8fd4\u56de `void`, \u8868\u793a\u5ffd\u7565\u8fd0\u884c\u7ed3\u679c\uff09\uff0c\u8fd4\u56de\u503c\u4e2d\u7684\u503c\u4e00\u822c\u5b9a\u4e49\u5982\u4e0b:\\n\\n- 0 \u7b49\u540c\u4e8e\u6388\u6743\uff1b\\n- ENOMEM \u65e0\u53ef\u7528\u5185\u5b58\uff1b\\n- EACCESS\uff0c\u5b89\u5168\u7b56\u7565\u62d2\u7edd\u8bbf\u95ee\uff1b\\n- EPERM\uff0c\u6267\u884c\u6b64\u64cd\u4f5c\u9700\u8981\u6743\u9650\u3002\\n\\n##### 2.3.2 LSM BPF\\n\\n\u5728 LSM BPF \u51fa\u73b0\u4e4b\u524d\uff0c\u80fd\u591f\u5b9e\u73b0\u5b9e\u65bd\u5b89\u5168\u7b56\u7565\u76ee\u6807\u7684\u65b9\u5f0f\u6709\u4e24\u79cd\u9009\u62e9\uff1a\u914d\u7f6e\u73b0\u6709\u7684 LSM \u6a21\u5757\uff08\u5982 AppArmor\u3001SELinux\uff09\uff0c\u6216\u7f16\u5199\u81ea\u5b9a\u4e49\u5185\u6838\u6a21\u5757\u3002LSM BPF \u5219\u63d0\u4f9b\u4e86\u7b2c\u4e09\u79cd\u5b9e\u73b0\u7684\u65b9\u6848 \uff0c\u7075\u6d3b\u4e14\u5b89\u5168\uff0c\u5177\u6709\u53ef\u7f16\u7a0b\u6027\u3002\\n\\n\u4f7f\u7528 LSM BPF\uff0c\u5f00\u53d1\u4eba\u5458\u80fd\u591f\u5728\u65e0\u9700\u914d\u7f6e\u6216\u52a0\u8f7d\u5185\u6838\u6a21\u5757\u7684\u60c5\u51b5\u4e0b\u7f16\u5199\u7cbe\u7ec6\u7b56\u7565\u3002LSM BPF \u7a0b\u5e8f\u4f1a\u5728\u52a0\u8f7d\u65f6\u8fdb\u884c\u9a8c\u8bc1\uff0c\u7136\u540e\u5728\u8c03\u7528\u8def\u5f84\u4e2d\u5230\u8fbe LSM hook \u65f6\u6267\u884c\u3002\u8fd9\u4e9b BPF \u7a0b\u5e8f\u5141\u8bb8\u7279\u6743\u7528\u6237\u5bf9 LSM \u94a9\u5b50\u8fdb\u884c\u8fd0\u884c\u65f6\u68c0\u6d4b\uff0c\u4ee5\u4f7f\u7528 eBPF \u5b9e\u73b0\u7cfb\u7edf\u8303\u56f4\u7684 MAC\uff08\u5f3a\u5236\u8bbf\u95ee\u63a7\u5236\uff09\u548c\u5ba1\u8ba1\u7b56\u7565\u3002\\n\\n\u622a\u6b62\u5230\u5185\u6838 6.2.0 \u7248\u672c\uff0c BPF \u81ea\u8eab\u5b89\u5168\u76f8\u5173\u7684 LSM hook \u51fd\u6570\u6709 7 \u4e2a \uff0c\u901a\u8fc7\u7f16\u8bd1\u6761\u4ef6\u5b8f CONFIG_BPF_SYSCALL \u63a7\u5236\uff0c\u4e3b\u8981\u8bbe\u6d89\u53ca bpf \u7cfb\u7edf\u8c03\u7528\u3001BPF \u7a0b\u5e8f\u548c BPF map \u76f8\u5173\u64cd\u4f5c:\\n\\n```cpp\\n#ifdef CONFIG_BPF_SYSCALL\\nLSM_HOOK(int, 0, bpf, int cmd, union bpf_attr *attr, unsigned int size)\\nLSM_HOOK(int, 0, bpf_map, struct bpf_map *map, fmode_t fmode)\\nLSM_HOOK(int, 0, bpf_prog, struct bpf_prog *prog)\\nLSM_HOOK(int, 0, bpf_map_alloc_security, struct bpf_map *map)\\nLSM_HOOK(void, LSM_RET_VOID, bpf_map_free_security, struct bpf_map *map)\\nLSM_HOOK(int, 0, bpf_prog_alloc_security, struct bpf_prog_aux *aux)\\nLSM_HOOK(void, LSM_RET_VOID, bpf_prog_free_security, struct bpf_prog_aux *aux)\\n#endif /* CONFIG_BPF_SYSCALL */\\n```\\n\\n\u5728\u7ee7\u7eed\u5e76\u5c1d\u8bd5\u7f16\u5199 LSM BPF \u7a0b\u5e8f\u4e4b\u524d\uff0c\u8bf7\u786e\u4fdd\uff1a\\n\\n- \u5185\u6838\u7248\u672c\u81f3\u5c11\u4e3a 5.7\uff1b\\n- LSM BPF \u5df2\u542f\u7528\u3002\\n\\nLSM BPF \u7684\u542f\u7528\u53ef\u4ee5\u901a\u8fc7\u4ee5\u4e0b\u65b9\u5f0f\u8fdb\u884c\u9a8c\u8bc1\uff0c\u6b63\u786e\u7684\u8f93\u51fa\u5e94\u5305\u542b bpf:\\n\\n```bash\\ncat /sys/kernel/security/lsm\\ncapability,lockdown,landlock,yama,apparmor,bpf\\n```\\n\\n\u5982\u679c\u6ca1\u6709\uff0c\u5219\u5fc5\u987b\u901a\u8fc7\u5c06 LSM BPF \u6dfb\u52a0\u5230\u5185\u6838\u914d\u7f6e\u53c2\u6570\u4e2d\u6765\u624b\u52a8\u542f\u7528\u5b83\u3002 ...\\n\\n### \u4e09\u3001\u51b3\u7b56\\n#### 3.1 Hook \u6280\u672f\u9009\u578b: LSM\\n\\n\u6211\u4eec\u8ba4\u8bc6\u4e86 \u5e38\u89c1\u7684 Linux \u7684\u62e6\u622a\u6280\u672f:\\n\\n1. \u7528\u6237\u6001\u52a8\u6001\u5e93\u62e6\u622a\\n2. \u5185\u6838\u6001\u7cfb\u7edf\u8c03\u7528\u62e6\u622a\\n3. \u5806\u6808\u5f0f\u6587\u4ef6\u7cfb\u7edf\u62e6\u622a\\n4. inline hook\u62e6\u622a\\n5. LSM(Linux Security Modules)\\n6. eBPF Hook\u62e6\u622a\\n\\n\u5148\u8bf4\u7ed3\u8bba, \u9009\u62e9 [5]LSM(Linux Security Modules) \u4f5c\u4e3a Hook \u6280\u672f\\n\\n\u597d\u5904: \u8fd9\u4e2a\u662f\u7cfb\u7edf\u5185\u6838\u63d0\u4f9b\u7684API, \u76f8\u5bf9\u4e8e\u6211\u4eec\u81ea\u5df1\u5bf9\u975e\u516c\u5f00\u7684\u51fd\u6570\u8fdb\u884chook, \u663e\u7136\u64cd\u4f5c\u7cfb\u7edf\u672c\u8eab\u63d0\u4f9b\u7684API\u4f1a\u66f4\u52a0\u7a33\u5b9a\\n\\n> [!NOTE]\\n> \u6700\u65b0\u7684\u53d8\u5316, \u53ef\u4ee5\u76f4\u63a5\u770b Linux \u7684git\u5f00\u53d1\u65e5\u5fd7: https://github.com/torvalds/linux/commits/master/include/linux/lsm_hook_defs.h\\n>\\n> \u5386\u53f2\u7248\u672capi\u53d8\u5316\u5bf9\u6bd4, \u53ef\u4ee5\u53c2\u8003: https://depsurf.github.io/index/lsm.html\\n\\n\u800c\u4e14\u5b83\u5df2\u7ecf\u6ee1\u8db3\u6211\u9700\u8981\u7684\u529f\u80fd:\\n\\n1. \u53ef\u4ee5 hook \u6587\u4ef6\u3001\u7f51\u7edc\u7684\u8bfb\u5199\u64cd\u4f5c\\n2. api \u6bd4\u8f83\u5bb9\u6613\u9002\u914d\\n\\n\u7136\u540e\u662f\u4e3a\u4ec0\u4e48\u4e0d\u9009\u62e9\u5176\u4ed6\u7684:\\n\\n\u5bf9\u4e8e[1]\u7528\u6237\u6001\u52a8\u6001\u5e93\u62e6\u622a, \u5b83\u975e\u5e38\u7684\u4e0d\u7a33\u5b9a; \u5982\u679c `LD_PRELOAD` \u73af\u5883\u53d8\u91cf\u88ab\u7981\u7528\u5c31\u65e0\u6548\u4e86; pass\\n\\n\u5bf9\u4e8e[2]\u5185\u6838\u6001\u7cfb\u7edf\u8c03\u7528\u62e6\u622a, \u9700\u8981\u627e\u5230\u5185\u6838\u8fd0\u884c\u65f6\u7684 `sys_call_table` \u51fd\u6570\u6307\u9488\u6570\u7ec4, \u7136\u540e\u60f3\u529e\u6cd5\u4fee\u6539\u6211\u4eec\u9700\u8981\u7684\u90a3\u4e2a\u51fd\u6570\u7684\u51fd\u6570\u6307\u9488; \u5e76\u4e14\u9700\u8981\u5904\u7406 x86/arm\u3001 64/32 \u4e0a\u7684\u4e00\u4e9b\u5dee\u5f02\u95ee\u9898; \u800c\u4e14\u52ab\u6301\u7684\u4fe1\u606f\u91cf\u592a\u5c11\u4e86, \u4e0d\u80fd\u83b7\u53d6 `struct file` \u7ed3\u6784\u4f53\uff0c\u4e0d\u80fd\u83b7\u53d6\u6587\u4ef6\u7684`\u7edd\u5bf9\u8def\u5f84`\u7b49; \u5b8c\u5168\u4e0d\u6ee1\u8db3\u6211\u4eec\u4e4b\u524d\u7684\u9700\u6c42. pass\\n\\n\u5bf9\u4e8e[3]\u5806\u6808\u5f0f\u6587\u4ef6\u7cfb\u7edf\u62e6\u622a, \u4e2a\u4eba\u8ba4\u4e3a\u8fd9\u4e2a\u592a\u590d\u6742\u4e86, \u770b\u522b\u4eba\u5b9e\u73b0\u7684\u7b80\u6613demo\u90fd\u662f1300\u884c\u7684; \u800c\u4e14\u4f9d\u8d56\u4e8eMount, \u53ef\u80fd\u9700\u8981\u91cd\u542f\u7cfb\u7edf\u624d\u80fd\u751f\u6548; \u6240\u6709pass\u6389, \u56e0\u4e3a\u6709\u66f4\u597d\u7684\u9009\u62e9\\n\\n\u5bf9\u4e8e[4]inline hook\u62e6\u622a, \u5b83\u867d\u7136\u4f3c\u4e4e\u662f\u4e07\u80fd\u7684, \u4f46\u662f\u6709\u4e24\u4e2a\u96be\u70b9: \\n\\n1. \u627ehook\u70b9, \u4e00\u822c\u662f\u9700\u8981\u5bf9\u64cd\u4f5c\u7cfb\u7edf\u5185\u6838\u6709\u4e00\u5b9a\u4e86\u89e3\u7684, \u624d\u53ef\u4ee5\u627e\u5230hook\u70b9 (\u77e5\u9053\u8c03\u7528\u94fe\u8def, \u77e5\u9053\u5e94\u8be5hook\u8c01), \u53c8\u56e0\u4e3a\u5b83hook\u7684\u662f\u64cd\u4f5c\u7cfb\u7edf\u5185\u90e8\u7684\u79c1\u6709\u51fd\u6570, \u6240\u4ee5\u53ef\u80fd\u4f1a\u56e0\u4e3a\u7cfb\u7edf\u66f4\u65b0\u3001\u4e0d\u540c\u53d1\u884c\u7248\u7684\u5dee\u5f02, \u5bfc\u81f4\u63a5\u53e3\u5bf9\u4e0d\u4e0a, \u6bd4\u8f83\u96be\u9002\u914d\u5404\u4e2a\u53d1\u884c\u7248;\\n\\n2. \u6ce8\u5165hook\u51fd\u6570\u7684\u5165\u53e3, \u89e3\u51b3\u65b9\u6848\u90fd\u662f\u6bd4\u8f83\u96be\u9002\u914d\u5404\u4e2a\u53d1\u884c\u7248\u7684;\\n\\n\u5bf9\u4e8e[6]eBPF Hook\u62e6\u622a, \u5b83\u5f88\u5f3a\u5927, \u4f46\u662f\u53ef\u80fd\u8fc7\u4e8e\u65b0\u4e86, \u8981\u6c42\u64cd\u4f5c\u7cfb\u7edf\u5185\u6838 \u9700\u8981 5.7 \u4ee5\u4e0a\u7684\u7248\u672c; \u800c\u4e14\u5c31\u7b97\u662f\u652f\u6301, \u4e5f\u4e0d\u4e00\u5b9a\u662f\u9ed8\u8ba4\u5f00\u542f\u7684, \u9700\u8981\u81ea\u5df1\u8bbe\u7f6e\u5f00\u542f;  \u5c31\u6bd4\u5982:\\n\\n```bash\\nkylin@tq:~/hx$ lsb_release -a\\nNo LSB modules are available.\\nDistributor ID:\\tKylin\\nDescription:\\tKylin V10 SP1\\nRelease:\\tv10\\nCodename:\\tkylin\\n\\nkylin@tq:~/hx$ uname -a\\nLinux tq 5.10.0-8-generic #33~v10pro-KYLINOS SMP Wed Mar 22 07:21:49 UTC 2023 x86_64 x86_64 x86_64 GNU/Linux\\n```\\n\\n\u4ee5\u53ca\u6559\u7a0b\u4f7f\u7528\u7684 \u4e4c\u73ed\u56fe-22.04 \u4e5f\u662f\u9ed8\u8ba4\u4e0d\u5f00\u542f\u7684; \u53ef\u89c1\u652f\u6301\u6bd4\u8f83\u9ebb\u70e6, \u65e5\u540e\u53ef\u4ee5\u4f5c\u4e3a\u53ef\u9009\u7ec4\u4ef6\u52a0\u4e0a, \u4f46\u662f\u521d\u6b65\u5f00\u53d1\u5c31\u5148 pass\\n\\n#### 3.2 \u5176\u4ed6\u7ec6\u8282\\n##### 3.2.1 \u5982\u4f55\u83b7\u53d6 \u88abhook\u7684\u64cd\u4f5c\u7684\u6267\u884c \u8fdb\u7a0bpid\\n\\nhttps://blog.csdn.net/farsight_2098/article/details/130875915\\n\\n```cpp\\n// \u83b7\u53d6\u5f53\u524d\u8fdb\u7a0b\u7684\u8fdb\u7a0b\u7ec4ID\u548c\u8fdb\u7a0bID\\npid_t current_pid = task_tgid_vnr(current);\\n// \u83b7\u53d6\u5f53\u524d\u8fdb\u7a0b\u7684\u8fdb\u7a0b\u540d\u79f0\\nchar * current_process_name = (char*)get_task_comm(current);\\n```\\n\\n\u6216\u8005\u662f\\n\\n```cpp\\n// Linux LSM(Linux Security Modules) Hook Technology\\n// https://www.cnblogs.com/LittleHann/p/4134939.html\\nint execve_lsm_hook(struct linux_binprm* bprm) {\\n    struct cred* currentCred;\\n\\n    if (bprm->filename) {\\n        printk(\\"file: %s\\\\n\\", bprm->filename);\\n        //printk(\\"file argument: %s\\\\n\\",bprm->p);\\n    } else {\\n        printk(\\"file exec\\\\n\\");\\n    } \\n    \\n    currentCred = current->cred;    \\n    printk(KERN_INFO \\"uid = %d\\\\n\\", currentCred->uid);\\n    printk(KERN_INFO \\"gid = %d\\\\n\\", currentCred->gid);\\n    printk(KERN_INFO \\"suid = %d\\\\n\\", currentCred->suid);\\n    printk(KERN_INFO \\"sgid = %d\\\\n\\", currentCred->sgid);\\n    printk(KERN_INFO \\"euid = %d\\\\n\\", currentCred->euid);\\n    printk(KERN_INFO \\"egid = %d\\\\n\\", currentCred->egid);  \\n\\n    printk(\\"comm: %s\\\\n\\", current->comm);\\n    return 0;\\n} \\n```\\n\\n##### 3.2.2 \u83b7\u53d6\u8fdb\u7a0b\u7684\u7edd\u5bf9\u542f\u52a8\u8def\u5f84\\n\\n> [!NOTE]\\n> \u53ef\u4ee5\u8fdb\u4e00\u6b65\u7684, \u83b7\u53d6\u5176inode, \u4ee5\u9632\u6b62\u7a0b\u5e8f\u91cd\u547d\u540d\u4e86\u5e26\u6765\u7684\u95ee\u9898?\\n\\n\x3c!-- \\nLinux\u5185\u6838\u4e2d\u901a\u8fc7\u6587\u4ef6\u63cf\u8ff0\u7b26\u83b7\u53d6\u7edd\u5bf9\u8def\u5f84 http://edsionte.com/techblog/archives/4406\\n --\x3e\\n\\n[[linux c/c++] \u901a\u8fc7\u8bfb\u53d6 /proc \u8def\u5f84\u83b7\u53d6\u6307\u5b9a\u8fdb\u7a0b\u540d\u7684\u4fe1\u606f](https://blog.51cto.com/u_15803983/9231946)\\n\\n[Linux C\u8bed\u8a00 \u83b7\u53d6\u53ef\u6267\u884c\u6587\u4ef6\u7684\u7edd\u5bf9\u8def\u5f84\u3001\u8fdb\u7a0b\u8fd0\u884c\u76ee\u5f55\u3010cwd\u3011](https://blog.csdn.net/qq_22613757/article/details/88828424)\\n\\n```cpp\\n#include <stdio.h>\\n#include <unistd.h>\\nchar * get_exe_path( char * buf, int count) {\\n    int i;\\n    int rslt = readlink(\\"/proc/self/cwd\\", buf, count - 1);\\n    if (rslt < 0 || (rslt >= count - 1)) {\\n        return NULL;\\n    }\\n    buf[rslt] = \'\\\\0\';\\n    for (i = rslt; i >= 0; i--) {\\n        printf(\\"buf[%d] %c\\\\n\\", i, buf[i]);\\n        if (buf[i] == \'/\') {\\n            buf[i + 1] = \'\\\\0\';\\n            break;\\n        }\\n    }\\n    return buf;\\n}\\n\\nint main(int argc, char ** argv) {\\n    char path[1024];\\n    printf(\\"%s\\\\n\\", get_exe_path(path, 1024));\\n    return 0;\\n}\\n```"},{"id":"/2025/06/23/01-\u4e0a\u73ed\u7b2c\u4e00\u8bfe","metadata":{"permalink":"/HXLoLi/blog/2025/06/23/01-\u4e0a\u73ed\u7b2c\u4e00\u8bfe","editUrl":"https://github.com/HengXin666/HXLoLi/edit/main/blog/2025/06/23/01-\u4e0a\u73ed\u7b2c\u4e00\u8bfe.md","source":"@site/blog/2025/06/23/01-\u4e0a\u73ed\u7b2c\u4e00\u8bfe.md","title":"\u4e0a\u73ed\u7b2c\u4e00\u8bfe","description":"\u4eca\u5929\u7b2c\u4e00\u5929\u4e0a\u73ed, 730\u5c31\u5230\u4e86 =-=","date":"2025-06-23T21:07:17.000Z","tags":[{"inline":false,"label":"\u65e5\u5e38","permalink":"/HXLoLi/blog/tags/\u65e5\u5e38","description":"\u4e00\u4e9b\u65e5\u5e38\u7684\u8bb0\u5f55 (\u5927\u591a\u662f\u788e\u788e\u5ff5)"}],"readingTime":7.63,"hasTruncateMarker":true,"authors":[{"name":"Heng_Xin","title":"\u3053\u3053\u304b\u3089\u5148\u306f\u4e00\u65b9\u901a\u884c\u3060!","url":"https://github.com/HengXin666","email":"282000500@qq.com","socials":{"github":"https://github.com/HengXin666","bilibili":"https://space.bilibili.com/478917126"},"imageURL":"https://avatars.githubusercontent.com/u/103022267","key":"Heng_Xin","page":null}],"frontMatter":{"authors":"Heng_Xin","title":"\u4e0a\u73ed\u7b2c\u4e00\u8bfe","date":"2025-06-23T21:07:17.000Z","tags":["\u65e5\u5e38"]},"unlisted":false,"lastUpdatedAt":1750775513000,"lastUpdatedBy":"Heng_Xin_666","prevItem":{"title":"Linux\u5e38\u89c1Hook\u65b9\u6cd5","permalink":"/HXLoLi/blog/2025/06/24/01-Linux\u5e38\u89c1Hook\u65b9\u6cd5"},"nextItem":{"title":"\u3010\u516b\u560eC++\u3011\u60ac\u6302\u5f15\u7528","permalink":"/HXLoLi/blog/2025/06/21/01-\u516b\u560e\u65e5\u5fd7-\u60ac\u6302\u5f15\u7528"}},"content":"\u4eca\u5929\u7b2c\u4e00\u5929\u4e0a\u73ed, 7:40 \u51fa\u53d1, \u89c4\u5212\u7684\u5730\u94c1\u8def\u7ebf\u6ca1\u6709\u60f3\u8c61\u7684\u90a3\u4e48\u6324, 8:30\u5c31\u5230\u4e86 =-=\\n\\n\x3c!-- truncate --\x3e\\n\\n> \u901a\u52e4\u65f6\u95f4\u5927\u6982\u662f 1h\\n\\n\u4e0a\u73ed\u65f6\u95f4\u662f 09:00 ~ 12:00, 13:30 ~ 18:00\\n\\n## \u4e0a\u73ed\\n\\n\u65e9\u4e0a\u4e3b\u8981\u662f\u719f\u6089\u73af\u5883, \u516c\u53f8\u7535\u8111\u90fd\u662f\u9e92\u9e9fos, \u7528\u7684\u662f `apt`; \u56e0\u6b64\u5305\u7ba1\u7406\u5c31\u548cubt\u90a3\u4e9b\u4e00\u6837, \u7248\u672c\u592a\u65e7\u4e86...\\n\\ncmake \u7248\u672c\u592a\u65e7\u4e86, \u5f97\u4ece\u5b98\u7f51\u4e0b\u8f7d, \u7136\u540e\u81ea\u5df1\u653e\u5230 bin\u76ee\u5f55 (\u6211\u662f\u89e3\u538b, \u7136\u540e\u5efa\u7acb\u4e86\u8f6f\u94fe\u63a5)\\n\\n\u7136\u540e\u8fd8\u81ea\u5df1\u7f16\u8bd1\u4e86\u51e0\u4e2a\u5e93, \u7136\u540e\u628a\u9879\u76ee\u8dd1\u8d77\u6765\u4e86, \u4f46\u662f\u5177\u4f53\u4e0d\u77e5\u9053\u600e\u4e48\u4f7f\u7528, \u662f\u6839\u636e\u542f\u52a8\u53c2\u6570\u7684; \u4f46\u662f\u6211\u4e00\u542f\u52a8, \u6307\u5b9a\u4e86\u51e0\u4e2a\u53c2\u6570\u540e, \u5f39\u51fa\u7cfb\u7edf\u5bc6\u7801\u6846\u7136\u540e\u5c31 EasyDB \u62a5\u9519\u4e86? \u53ef\u80fd\u9700\u8981\u5bc6\u7801\u5417?\\n\\ngcc \u4e5f\u662f 10.x, \u597d\u50cf\u6700\u9ad8\u662f\u652f\u6301 C++17; \u6211\u770b\u4ee3\u7801\u7684\u7b2c\u4e09\u65b9\u5e93\u6709\u4f7f\u7528 C++20 \u90a3\u4e9b\\n\\n\u4e0d\u8fc7\u4f3c\u4e4e\u7f16\u8bd1\u7684\u65f6\u5019\u6ca1\u6709\u7f16\u8bd1\u5230?\\n\\n\u4f7f\u7528\u7684\u662f vscode, \u6211\u81ea\u5df1\u4e0b\u4e86\u70b9\u63d2\u4ef6 =-=\\n\\n\u4ed6\u4eec\u9879\u76ee\u8fd8\u662f\u9700\u8981\u591a\u65b9\u9002\u914d\u7684, \u591a\u79cdlinux\u53d1\u884c\u7248 \u548c x86/arm \u67b6\u6784\\n\\n## \u5f00\u809d\\n\\n\u4e0b\u5348\u5c31\u88ab\u53eb\u53bb\u4e86 qwq\\n\\n\u5b66\u4e60\u4e86\u5982\u4f55\u5199\u9700\u6c42:\\n\\n> [!NOTE]\\n> \u9700\u6c42\u662f\u628a\u8981\u6c42\u8bf4\u6e05\u695a\\n>\\n> - \u6e05\u695a\u7b49\u4e8e\u65e0\u6b67\u4e49\\n>\\n> - \u5b57\u9700\u8981\u5c3d\u53ef\u80fd\u5c11, \u4f46\u4e0d\u80fd\u4e22\u5931\u539f\u4e49\\n\\n\u5b66\u4e60\u4e86\u4e24\u79cd\u7248\u672c:\\n\\n1. \u4ece\u6280\u672f\u89d2\u5ea6\u7684\u63cf\u8ff0\u4e2d\u63d0\u53d6\u51fa\u9700\u6c42\\n\\n> \u6211\u9700\u8981\u4e00\u4e2a\u7a0b\u5e8f, \u53ef\u4ee5\u53ea\u8ba9ABC\u53ef\u4ee5 \u770b \u6587\u4ef6D, \u5176\u4ed6\u7684\u90fd\u4e0d\u884c. \u600e\u4e48\u89e3\u51b3?\\n\\n\u6211\u8a00: \u52a0\u5bc6\\n\\n\u5bf9\u66f0: \u90a3\u8fd8\u6709\u5462? \u662f\u5426\u6709\u4e0d\u52a0\u5bc6\u7684\u529e\u6cd5?\\n\\n\u6211\u7b54: \u8bbe\u7f6e\u6743\u9650?\\n\\n\u5bf9\u66f0: \u8fd9\u8c01\u90fd\u53ef\u4ee5\u8bbe\u7f6e; \u90a3\u80fd\u4e0d\u80fd\u505a\u5230\u5c31\u662f\u53ea\u8ba9\u6211\u770b, \u5176\u4ed6\u90fd\u4e0d\u80fd\u770b?\\n\\n\u6211\u5fd8\u8bb0\u662f\u6211\u56de\u7b54\u7684\u8fd8\u662f\u4ed6\u89e3\u7b54\u7684\u4e86...\\n\\n\u7136\u540e\u5c31\u5f15\u5230\u4e86\u64cd\u4f5c\u7cfb\u7edf\u63d0\u4f9b\u7684\u63a5\u53e3, \u5141\u8bb8\u6211\u4eec\u8fd9\u6837\u5e72.\\n\\n\u603b\u4e4b, \u5148\u5199\u9700\u6c42\u561b\\n\\n\u6211\u4e00\u5f00\u59cb\u5199\u7684\u662f:\\n\\n- \u7528\u6237\u5e0c\u671b\u4ec5\u81ea\u5df1\u53ef\u4ee5\u67e5\u770b\u6307\u5b9a\u6587\u4ef6\\n\\n\u4f46\u662f\u4e0d\u884c, \u603b\u4e4b\u6700\u540e\u53d8\u6210:\\n\\n```md\\n# \u6587\u4ef6\u76d1\u63a7\u670d\u52a1 - \u7528\u6237\u9700\u6c42\\n\\n## \u4e00\u3001\u9700\u6c42\\n### 1.1 \u6587\u4ef6\u6e05\u5355\\n\\n\u7528\u6237\u53ef\u4ee5\u9009\u62e9\u6587\u4ef6, \u52a0\u5165`\u6587\u4ef6\u6e05\u5355`; \u7a0b\u5e8f\u4f1a\u8bb0\u5f55\u9009\u62e9\u7684\u6587\u4ef6\u7684 **\u7edd\u5bf9\u8def\u5f84**, \u4ee5\u786e\u4fdd\u65e0\u6b67\u4e49.\\n\\n### 1.2 \u6307\u5b9a\u8fdb\u7a0b\\n\\n\u7528\u6237\u53ef\u4ee5\u6307\u5b9a\u8fdb\u7a0b, \u52a0\u5165`\u767d\u540d\u5355`; \u7a0b\u5e8f\u4f1a\u8bb0\u5f55\u9009\u62e9\u7684\u8fdb\u7a0b\u7684 **\u542f\u52a8\u8def\u5f84** \u7684 **\u7edd\u5bf9\u8def\u5f84** \u4f5c\u4e3a\u552f\u4e00\u8fdb\u7a0b\u6807\u8bc6. \\n\\n### 1.3 \u53ef\u62e6\u622a\u8bfb\u5199\u7cfb\u7edf\u8c03\u7528\\n\\n\u5bf9 `\u6587\u4ef6\u6e05\u5355` \u5185\u7684\u6587\u4ef6\u8fdb\u884c\u8bfb\u5199\u64cd\u4f5c\u65f6, \u9700\u8981\u62e6\u622a **\u975e** \u767d\u540d\u5355 \u7684\u8fdb\u7a0b.\\n\\n### 1.4 \u65e5\u5fd7\u7cfb\u7edf\\n\\n\u65e5\u5fd7\u8bb0\u5f55:\\n\\n> [\u89e6\u53d1\u65f6\u95f4] [\u89e6\u53d1\u8fdb\u7a0b(\u5168\u8def\u5f84)] [\u8be5\u8fdb\u7a0b\u64cd\u4f5c\u5bf9\u8c61(\u6587\u4ef6)] [\u8be5\u8fdb\u7a0b\u64cd\u4f5c\u5185\u5bb9] [\u672c\u7a0b\u5e8f\u5904\u7406\u7ed3\u679c]\\n```\\n\\n> [!TIP]\\n> \u5176\u4e2d\u8fd8\u6709\u7ec6\u8282: \u4e3a\u4e86\u786e\u4fdd\u6ca1\u6709\u6b67\u4e49, \u6211\u4eec\u9700\u8981\u4f7f\u7528\u6587\u4ef6\u7684\u7edd\u5bf9\u8def\u5f84, \u4ee5\u9632\u6b62\u6df7\u6dc6.\\n>\\n> \u540c\u7406, \u8fdb\u7a0b\u4e5f\u4e0d\u80fd\u4f7f\u7528pid, \u800c\u5e94\u8be5\u4f7f\u7528 \u8fdb\u7a0b\u7684\u542f\u52a8\u8def\u5f84 \u7684\u7edd\u5bf9\u8def\u5f84\\n\\n2. \u4ece\u4e0d\u61c2\u6280\u672f\u7684\u89d2\u5ea6\u4e2d\u63d0\u53d6\u9700\u6c42\\n\\n> \u4e00\u4e2a\u8001\u677f, \u770b\u5230\u5458\u5de5\u4e0a\u73ed\u5728\u6253\u6e38\u620f, \u7092\u80a1\u7968, \u4f60\u4eec\u4e0d\u8981\u7ed9\u6211\u6478\u9c7c!\\n\\n\u73b0\u5728\u9700\u8981\u8bbe\u8ba1\u5e94\u8be5\u7a0b\u5e8f, \u4f60\u600e\u4e48\u5199\u9700\u6c42?\\n\\n\u8fd9\u91cc\u6211\u60f3\u5f97\u592a\u590d\u6742\u4e86, \u4ee5\u4e3a\u9700\u8981\u76d1\u63a7\u5de5\u4f4d\u4e0a\u7684\u73a9\u624b\u673a\u7b49... \u8fd9\u600e\u4e48\u7528\u7a0b\u5e8f\u5199\u561b~ \u53ea\u80fd\u60f3\u5230 py + yolo\\n\\n\u7136\u540e\u6211\u5426\u5b9a\u4e86, \u592a\u590d\u6742\u4e86, \u7136\u540e\u618b\u4e86\u4e2a:\\n\\n> \u4e0a\u73ed\u65f6\u95f4, \u53ef\u76d1\u63a7\u5458\u5de5\u6253\u5f00\u7684\u8fdb\u7a0b, \u5982\u679c\u8be5\u8fdb\u7a0b\u4e0d\u662f\u6307\u5b9a\u767d\u540d\u5355\u8fdb\u7a0b, \u5219\u5224\u5b9a\u4e3a\u6478\u9c7c.\\n\\n\u5b9e\u9645\u4e0a\u6211\u8fd9\u91cc\u5f88\u591a\u95ee\u9898, \u5bf9\u66f0: \u6211\u4e0d\u5e94\u8be5\u6dfb\u6cb9\u52a0\u918b, \u5e94\u8be5\u53ea\u662f\u628a\u5185\u5bb9\u7ffb\u8bd1\u4e3a\u9700\u6c42. \u800c\u4e14, \u6211\u4eec\u8981\u7684\u4e0d\u662f`\u5224\u5b9a`; \u800c\u662f\u76f4\u63a5\u62e6\u622a.\\n\\n\u7136\u540e\u6211\u8fd8\u63d0\u51fa\u4e86\u7591\u95ee: \u5982\u679c\u6709\u4e9b\u6280\u672f\u6211\u6682\u65f6\u4e0d\u77e5\u9053\u600e\u4e48\u529e? \u662f\u4e0d\u662f\u5199\u4e0d\u4e86\u9700\u6c42\u4e86?\\n\\n\u7b54\u66f0: \u4f60\u5c31\u5047\u88c5\u4f60\u662f\u4e07\u80fd\u7684; \u6216\u8005\u4f60\u53ea\u7ba1\u5199, \u4e07\u4e00\u5230\u65f6\u5019\u4e0d\u662f\u4f60\u5b9e\u73b0\u5462?\\n\\n\u7136\u540e\u6211\u5c31\u6539\u4e86\u7248:\\n\\n> \u4e0a\u73ed\u65f6\u95f4, \u7981\u6b62\u5458\u5de5\u505a\u4e0e\u4e0a\u73ed\u65e0\u5173\u7684\u4e8b\u60c5\\n\\n\u7136\u540e\u4f9d\u65e7\u5927\u9519\u7279\u9519\u4e86, \u5b8c\u5168\u6ca1\u6709\u6280\u672f\u6db5\u76d6! qwq\\n\\n\u4e2d\u95f4\u8fd8\u6709\u4e00\u7248, \u4e5f\u88ab\u6307\u51fa\u4e86\\n\\n\u6700\u540e:\\n\\n```md\\n# \u7f51\u7edc\u8bf7\u6c42\u76d1\u63a7\u670d\u52a1 - \u7528\u6237\u9700\u6c42\\n\\n## \u4e00\u3001\u9700\u6c42\\n### 1.1 \u4e0a\u73ed\u65f6\u95f4\\n\\n\u7528\u6237\u53ef\u4ee5\u5b9a\u4e49 `\u4e0a\u73ed\u533a\u95f4`; \u5176\u8f93\u5165\u683c\u5f0f\u793a\u4f8b: `09:00~12:00, 13:30~18:00` (\u4f7f\u7528\u4e8c\u5341\u56db\u5c0f\u65f6\u5236; \u5982\u679c\u6709\u591a\u4e2a\u533a\u95f4, \u9700\u8981\u4f7f\u7528`\u82f1\u6587\u9017\u53f7`\u9694\u5f00)\\n\\n> (\u6ce8\u610f: \u9700\u8981\u5224\u65ad\u533a\u95f4\u662f\u5426\u4e3a\u5408\u6cd5\u533a\u95f4 \u5982 `23:00~04:00` \u5e94\u8be5\u5199\u4e3a `23:00~24:00, 00:00~04:00`)\\n\\n### 1.2 \u6307\u5b9a\u5408\u6cd5\u7f51\u7edc\u8bf7\u6c42\\n\\n\u7528\u6237\u53ef\u4ee5\u6307\u5b9a `\u9ed1\u540d\u5355` \u7f51\u5740 (\u4ee5 `ip:\u7aef\u53e3` \u7684\u683c\u5f0f\u6307\u5b9a, \u591a\u7684\u53ef\u5206\u884c (\u7b26\u5408\u7528\u6237\u4e60\u60ef))\\n\\n### 1.3 \u62e6\u622a\u975e\u6cd5\u7f51\u7edc\u8bf7\u6c42\\n\\n\u7a0b\u5e8f\u4f1a\u76d1\u542c\u6240\u6709\u7684\u7f51\u7edc\u8bf7\u6c42; \u5728 `\u4e0a\u73ed\u65f6\u95f4` \u5185, \u5bf9\u4e8e\u6240\u6709\u7f51\u7edc\u8bf7\u6c42, \u7a0b\u5e8f\u9700\u8981\u62e6\u622a `\u9ed1\u540d\u5355` \u7684\u8bf7\u6c42.\\n\\n### 1.4 \u65e5\u5fd7\u7cfb\u7edf\\n\\n\u65e5\u5fd7\u8bb0\u5f55:\\n\\n> [\u89e6\u53d1\u65f6\u95f4] [\u89e6\u53d1\u8fdb\u7a0b(\u5168\u8def\u5f84)] [\u8bf7\u6c42\u76ee\u6807(\u7f51\u5740)] [\u8bf7\u6c42\u5185\u5bb9] [\u7a0b\u5e8f\u5904\u7406\u7ed3\u679c]\\n```\\n\\n\u6ce8\u610f, \u683c\u5f0f\u65e0\u6b67\u4e49; \u4ee5\u53ca\u65e5\u5fd7\u5185\u5bb9 [\u89e6\u53d1\u8fdb\u7a0b(\u5168\u8def\u5f84)] [\u8bf7\u6c42\u76ee\u6807(\u7f51\u5740)] \u8fd9\u4e2a\u5f88\u91cd\u8981!\\n\\n## \u603b\u7ed3\\n\\n\u5927\u6982\u7684\u6a21\u677f\u6a21\u5f0f\u662f:\\n\\n\u5b9a\u4e49A, \u5b9a\u4e49B \u8ba9\u4ed6\u4eec\u90fd\u6ca1\u6709\u6b67\u4e49, \u5e76\u4e14\u6e05\u6670, \u5c31\u548c\u5199\u4ee3\u7801\u4e00\u6837\\n\\n\u7136\u540e\u662f \u5b9a\u4e49\u64cd\u4f5c, \u5b9a\u4e49\u6761\u4ef6, \u4e0e \u4e4b\u524d\u5b9a\u4e49\u7684AB\u8fdb\u884c\u4ea4\u4e92\\n\\n---\\n\\n\u7136\u540e\u662f\u5982\u4f55\u67e5\u627e,\\n\\n1. \u5148\u4f7f\u7528\u81ea\u5df1\u601d\u8003\u7684\u5173\u952e\u8bcd\u67e5\u627e\\n\\n2. \u5bf9\u4e8e\u6bd4\u8f83\u4e0d\u9519\u7684\u6587\u7ae0, \u4f7f\u7528\u5b83\u7684\u4e00\u4e9b\u5173\u952e\u8bcd, \u4ee5\u4f18\u5316\u81ea\u5df1\u7684\u5173\u952e\u8bcd, \u8fdb\u884c\u67e5\u627e\\n\\n3. \u4ec0\u4e48\u65f6\u5019\u53ef\u4ee5\u505c\u4e0b\u6765? \u5f53\u641c\u7d22\u5230\u7684\u5185\u5bb9\u90fd\u662f\u8bf4\u5f97\u4e00\u6837\u7684\u65f6\u5019\\n\\n---\\n\\n\u4eca\u65e5\u95ee\u9898\\n\\n- lqb\u56fd\u4e8c\u7ed9\u6211\u6c34\u4e86\u4e2a...\\n\\n- \u628a\u516c\u53f8\u63d2\u5ea7\u641e\u574f\u4e86, \u6211\u7684\u7b14\u8bb0\u672c\u7535\u6e90\u9002\u914d\u5668\u592a\u7d27\u4e86, \u5b83\u592a\u8106\u4e86, \u6211\u4e00\u62d4\u76f4\u63a5\u8fde\u6839\u62d4\u8d77\u4e86 ... (\u800c\u4e14\u8fd9\u4e2a\u63d2\u5ea7\u5f88\u8001, \u8fdb\u53bb\u65f6\u5019\u8fd8\u6709\u7535\u706b\u82b1awa...)\\n\\n---\\n\\n\u8865\u5145:\\n\\n\u5f53\u5929\u8fd8\u5f00\u4e86\u51e0\u5341\u5206\u949f\u7684\u7ec4\u4f1a, \u6bcf\u4e2a\u4eba\u6c47\u62a5\u4e00\u4e0b\u8fdb\u5ea6\u548c\u95ee\u9898~"},{"id":"/2025/06/21/01-\u516b\u560e\u65e5\u5fd7-\u60ac\u6302\u5f15\u7528","metadata":{"permalink":"/HXLoLi/blog/2025/06/21/01-\u516b\u560e\u65e5\u5fd7-\u60ac\u6302\u5f15\u7528","editUrl":"https://github.com/HengXin666/HXLoLi/edit/main/blog/2025/06/21/01-\u516b\u560e\u65e5\u5fd7-\u60ac\u6302\u5f15\u7528.md","source":"@site/blog/2025/06/21/01-\u516b\u560e\u65e5\u5fd7-\u60ac\u6302\u5f15\u7528.md","title":"\u3010\u516b\u560eC++\u3011\u60ac\u6302\u5f15\u7528","description":"\u8fd1\u65e5\u4e00\u540d\u95f2\u7684\u6ca1\u4e8b\u5e72\u7684\u5c0f\u706b\u5b50, \u6253\u7b97\u4e3a\u8fdc\u53e4\u7684iocp\u5bf9\u63a5\u534f\u7a0b\u5e76\u4e14\u652f\u6301\u8d85\u65f6; \u4ee5\u7edf\u4e00io_uring\u4fa7API;","date":"2025-06-21T11:59:10.000Z","tags":[{"inline":false,"label":"C++","permalink":"/HXLoLi/blog/tags/C++","description":"C++\u5c0f\u77e5\u8bc6"}],"readingTime":9.125,"hasTruncateMarker":true,"authors":[{"name":"Heng_Xin","title":"\u3053\u3053\u304b\u3089\u5148\u306f\u4e00\u65b9\u901a\u884c\u3060!","url":"https://github.com/HengXin666","email":"282000500@qq.com","socials":{"github":"https://github.com/HengXin666","bilibili":"https://space.bilibili.com/478917126"},"imageURL":"https://avatars.githubusercontent.com/u/103022267","key":"Heng_Xin","page":null}],"frontMatter":{"authors":"Heng_Xin","title":"\u3010\u516b\u560eC++\u3011\u60ac\u6302\u5f15\u7528","date":"2025-06-21T11:59:10.000Z","tags":["C++"]},"unlisted":false,"lastUpdatedAt":1750491976000,"lastUpdatedBy":"Heng_Xin_666","prevItem":{"title":"\u4e0a\u73ed\u7b2c\u4e00\u8bfe","permalink":"/HXLoLi/blog/2025/06/23/01-\u4e0a\u73ed\u7b2c\u4e00\u8bfe"},"nextItem":{"title":"LQB\u7ed3\u675f\u5566, \u6211\u81ea\u7531\u5566","permalink":"/HXLoLi/blog/2025/06/15/01-lqb\u7ed3\u675f\u5566"}},"content":"\u8fd1\u65e5\u4e00\u540d\u95f2\u7684\u6ca1\u4e8b\u5e72\u7684\u5c0f\u706b\u5b50, \u6253\u7b97\u4e3a\u8fdc\u53e4\u7684iocp\u5bf9\u63a5\u534f\u7a0b\u5e76\u4e14\u652f\u6301\u8d85\u65f6; \u4ee5\u7edf\u4e00io_uring\u4fa7API;\\n\\n\u6545\u6b64\u9700\u8981\u4f3a\u5019 MSVC\u3001Win32 API\\n\\n\u5e76\u4e14\u4e3a\u4e86\u5b9e\u73b0\u65e0\u5355\u4f8b\u67b6\u6784\u548c\u8ffd\u6c42\u7b80\u6613API\u539f\u5219.\\n\\n\u4f7f\u7528\u4e86 \u5efa\u9020\u8005\u6a21\u5f0f\u6765\u5c01\u88c5 API...\\n\\n\u4e00\u4e0d\u5c0f\u5fc3 (\u8bf4\u662f\u4e0d\u662f\u6545\u610f\u7684?) \u5c31\u5199\u4e86 \u60ac\u6302\u5f15\u7528\u4e86... \u7136\u540e\u51fa\u73b0\u516b\u560e\u4e86\\n\\n\x3c!-- truncate --\x3e\\n\\n## \u4e00\u3001\u60ac\u6302\u5de6\u503c\u5f15\u7528\\n\\n\u4e0b\u9762\u4ee3\u7801, \u5b9e\u9645\u4e0a\u81f3\u5c11\u5b58\u5728\u4e24\u5904\u9519\u8bef. \u8fd9\u91cc\u4ec5\u8ba8\u8bba\u5176\u4e2d\u7684\u4e00\u4e2a, \u4e5f\u5c31\u662f `\u60ac\u6302\u5de6\u503c\u5f15\u7528`, \u4f60\u53ef\u4ee5\u770b\u51fa\u6765\u5230\u5e95\u662f\u54ea\u91cc\u5f00\u59cb\u60ac\u6302\u7684\u5417?\\n\\n```cpp [g1-\u95ee\u9898\u5904]\\nstruct TimerLoop {\\n    using TimerTree = std::multimap<std::chrono::system_clock::time_point, std::coroutine_handle<>>;\\n\\n    TimerLoop& operator=(TimerLoop&&) = delete;\\n\\n    std::optional<std::chrono::system_clock::duration> run() {\\n        while (_timerTree.size()) {\\n            auto nowTime = std::chrono::system_clock::now();\\n            auto it = _timerTree.begin();\\n            if (it->first <= nowTime) {\\n                it->second.resume();\\n                _timerTree.erase(it);\\n            } else {\\n                return it->first - nowTime;\\n            }\\n        }\\n        return {};\\n    }\\n\\n    TimerTree::iterator addTimer(\\n        std::chrono::system_clock::time_point expireTime,\\n        std::coroutine_handle<> coroutine\\n    ) {\\n        return _timerTree.insert({expireTime, coroutine});\\n    }\\n    struct [[nodiscard]] TimerAwaiter {\\n        TimerAwaiter(TimerLoop& timerLoop)\\n            : _timerLoop{timerLoop}\\n            , _expireTime{}\\n            , _it{}\\n        {}\\n\\n        bool await_ready() const noexcept {\\n            return false;\\n        }\\n        auto await_suspend(std::coroutine_handle<> coroutine) const noexcept {\\n            _it = _timerLoop.addTimer(_expireTime, coroutine);\\n        }\\n        void await_resume() const noexcept {\\n            _it.reset(); // \u5982\u679c\u7ee7\u7eed, \u8bf4\u660e\u662f\u4ece TimerTree::run() \u6765\u7684\\n                         // \u4e4b\u540e\u5916\u754c\u4f1a\u6267\u884c _timerTree.erase(_it)\\n                         // \u56e0\u6b64\u5185\u90e8\u8981\u6267\u884c _it = {}, \u9632\u6b62\u591a\u6b21 erase\\n        }\\n        TimerAwaiter&& setExpireTime(std::chrono::system_clock::time_point expireTime) && noexcept {\\n            _expireTime = expireTime;\\n            return std::move(*this);\\n        }\\n        ~TimerAwaiter() noexcept {\\n            if (_it) {\\n                _timerLoop._timerTree.erase(*_it);\\n            }\\n        }\\n    private:\\n        TimerLoop& _timerLoop;\\n        std::chrono::system_clock::time_point _expireTime;  // \u8fc7\u671f\u65f6\u95f4\\n        mutable std::optional<TimerTree::iterator> _it;     // \u7ea2\u9ed1\u6811\u8fed\u4ee3\u5668\\n    };\\nprivate:\\n    struct [[nodiscard]] TimerAwaiterBuilder {\\n        TimerAwaiterBuilder(TimerLoop& timerLoop)\\n            : _timerLoop{timerLoop}\\n        {}\\n\\n        TimerAwaiterBuilder& operator=(TimerAwaiterBuilder&&) noexcept = delete;\\n\\n        /**\\n         * @brief \u6682\u505c\u4e00\u6bb5\u65f6\u95f4\\n         * @param duration \u6bd4\u5982 3s\\n         */\\n        TimerAwaiter&& sleepFor(std::chrono::system_clock::duration duration) && {\\n            return std::move(TimerAwaiter{_timerLoop}.setExpireTime(\\n                std::chrono::system_clock::now() + duration));\\n        }\\n        /**\\n         * @brief \u6682\u505c\u6307\u5b9a\u65f6\u95f4\u70b9\\n         * @param timerLoop \u8ba1\u65f6\u5668\u5faa\u73af\u5bf9\u8c61\\n         * @param expireTime \u65f6\u95f4\u70b9, \u5982 2024-8-4 22:12:23\\n         */\\n        TimerAwaiter&& sleepUntil(std::chrono::system_clock::time_point expireTime) && {\\n            return std::move(TimerAwaiter{_timerLoop}.setExpireTime(expireTime));\\n        }\\n        TimerLoop& _timerLoop;\\n    };\\npublic:\\n    /**\\n     * @brief \u521b\u5efa\u4e00\u4e2a\u5b9a\u65f6\u5668\u5de5\u5382, \u9700\u8981\u7528\u6237\u6307\u5b9a\u5b9a\u65f6\u7684\u65f6\u95f4\\n     * @param timerLoop \\n     * @return TimerAwaiterBuilder \\n     */\\n    static TimerAwaiterBuilder makeTimer(TimerLoop& timerLoop) {\\n        return {timerLoop};\\n    }\\nprivate:\\n    TimerTree _timerTree;\\n};\\n```\\n\\n```cpp [g1-\u8c03\u7528\u5904]\\nstruct Loop {\\n    auto makeTimer() {\\n        return TimerLoop::makeTimer(_timerLoop);\\n    }\\n\\n    Task<> test {\\n        co_await makeTimer().sleepFor(3s); // \u8c03\u7528\\n    }\\n\\n    TimerTree _timerLoop;\\n};\\n```\\n\\n\u592a\u70e7\u8111\u4e86? \u90a3\u6211\u5199\u5728\u4e00\u8d77:\\n\\n```cpp [g2-\u5c55\u5f00]\\nTask<> test {\\n    co_await [this] {\\n        return [](TimerLoop& timerLoop) -> TimerAwaiterBuilder {\\n            return {timerLoop};\\n        } (_timerLoop);\\n    }().sleepFor(3s); // \u8c03\u7528\\n}\\n```\\n\\n```cpp [g2-\u7ed3\u679c]\\nTask<> test {\\n    co_await TimerAwaiterBuilder{timerLoop}.sleepFor(3s); // \u8c03\u7528\\n}\\n```\\n\\n\u7136\u540e\u6700\u7ec8\u662f\u8c03\u7528:\\n\\n```cpp\\nTimerAwaiter&& TimerAwaiterBuilder::sleepFor(\\n    std::chrono::system_clock::duration duration\\n) && {\\n    return std::move(TimerAwaiter{_timerLoop}.setExpireTime(\\n        std::chrono::system_clock::now() + duration));\\n}\\n```\\n\\n- \u6700\u521d `TimerAwaiterBuilder` \u7684 `_timerLoop` \u662f\u5408\u6cd5\u7684\\n\\n- \u4f46\u662f\u8fd4\u56de\u540e: `TimerAwaiterBuilder` \u6790\u6784, \u7136\u540e `_timerLoop` \u5c31\u662f\u60ac\u6302\u7684\u4e86\\n\\n- \u5373\u4fbf\u6b64\u65f6 `TimerAwaiter{_timerLoop}` \u8fd8\u5728\u751f\u547d\u5468\u671f, \u4f46\u662f \u4f20\u9012\u7684 `_timerLoop` \u5df2\u7ecf\u60ac\u6302\u4e86\\n\\n\u7b49\u4ef7\u4e8e:\\n\\n```cpp\\nstruct Data {\\n    int& data;\\n};\\n\\nint a = 0;\\nData* c = nullptr;\\n{\\n    int& b = a;\\n    c = new Data{b};\\n}\\n// b \u6790\u6784, b \u4e3a\u60ac\u6302\u5f15\u7528\\n// \u90a3\u4e48, c.data = b, \u5b9e\u9645\u4e0a\u4e5f\u662f\u60ac\u6302\u5f15\u7528!\\n// \u6240\u4ee5, \u4e0d\u5e94\u8be5\u4f7f\u7528 \u5e76\u67e5\u96c6 \u601d\u60f3\u770b \u5f15\u7528, \u5f15\u7528\u672c\u8eab\u4e0d\u4f1a\u4f20\u9012!\\n// \u5f15\u7528\u7684\u672c\u8d28\u53ea\u662f\u522b\u540d! \u6240\u4ee5 c.data \u5b9e\u9645\u4e0a\u662f b \u7684\u522b\u540d\\n// \u4f46\u662f\u4e0d\u7b49\u4ef7\u4e8e a \u7684\u522b\u540d, \u53ea\u662f\u4fee\u6539 b \u7684\u65f6\u5019, \u6b63\u597d\u7b49\u4ef7\u4e8e\u4fee\u6539 a!\\n```\\n\\n---\\n\\n\u4f46\u662f\u4e8b\u5b9e\u771f\u7684\u662f\u8fd9\u6837\u5417?\\n\\n> [!NOTE]\\n> \u6839\u636e [C++17 \xa712.2/5](https://en.cppreference.com/w/cpp/language/lifetime.html#Temporary_objects)\\n> \\n> All temporary objects are destroyed as the last step in evaluating the full-expression that (lexically) contains the point where they were created, and if multiple temporary objects were created, they are destroyed in the order opposite to the order of creation. This is true even if that evaluation ends in throwing an exception.\\n>\\n> \u6240\u6709\u4e34\u65f6\u5bf9\u8c61\u90fd\u4f5c\u4e3a\u8bc4\u4f30\u5b8c\u6574\u8868\u8fbe\u5f0f\u7684\u6700\u540e\u4e00\u6b65\u88ab\u9500\u6bc1, \u8be5\u8868\u8fbe\u5f0f(\u8bcd\u6cd5\u4e0a)\u5305\u542b\u5b83\u4eec\u7684\u521b\u5efa\u70b9, \u5982\u679c\u521b\u5efa\u4e86\u591a\u4e2a\u4e34\u65f6\u5bf9\u8c61, \u5219\u5b83\u4eec\u5c06\u6309\u4e0e\u521b\u5efa\u987a\u5e8f\u76f8\u53cd\u7684\u987a\u5e8f\u9500\u6bc1\u3002\u5373\u4f7f\u8be5\u8bc4\u4f30\u4ee5\u5f15\u53d1\u5f02\u5e38\u7ed3\u675f, \u4e5f\u662f\u5982\u6b64\u3002\\n\\n\u56e0\u6b64, `co_await makeTimer().sleepFor(3s);` \u7684 `TimerAwaiterBuilder` \u8fd8\u6ca1\u6709\u6790\u6784! (\u81f3\u5c11\u5728 `sleepFor` \u4e2d\u662f\u8fd9\u6837)\\n\\n\u4f46\u662f, \u516b\u560e\u6ca1\u6709\u7ed3\u675f, \u6838\u5fc3\u516b\u560e\u662f\u4e0b\u9762...\\n\\n## \u4e8c\u3001\u60ac\u6302\u53f3\u503c\u5f15\u7528\\n\\n\u4e3a\u4e86\u4fdd\u9669\u8d77\u89c1 (\u5b9e\u9645\u4e0a\u662f\u5c1d\u8bd5\u4e86\u5f88\u591a\u5730\u65b9\u540e), \u73b0\u5728\u4ee3\u7801\u53d8\u6210\u4e0b\u9762\u8fd9\u6837\u4e86:\\n\\n> \u5728MSVC\u4e0a, \u4f1a\u88ab\u68c0\u6d4b\u51fa\u6765; \u5982\u679c\u662f\u5728\u529b\u6263\u63d0\u4ea4 (\u56e0\u4e3a\u529b\u6263\u9ed8\u8ba4\u662fclang18 (C++23) + \u5f00\u542f `Address Sanitizer`\u68c0\u6d4b\u7684)\\n>\\n> \u8fd0\u884c, \u90fd\u629b\u5f02\u5e38\u4e86;\\n>\\n> \u4f46\u662f, Release \u4e0b, \u5168\u90fd\u6ca1\u6709\u95ee\u9898: https://godbolt.org/z/KqzP1T68E (godbolt\u597d\u50cf\u9ed8\u8ba4\u90fd\u662fRelease\u8fd0\u884c\u7684?)\\n\\n\u4ee3\u7801:\\n\\n```cpp vscode\\n#include <iostream>\\n#include <map>\\n#include <optional>\\n#include <chrono>\\n\\nusing namespace std::chrono;\\n\\nauto makeTime = [](std::chrono::system_clock::duration d) {\\n    return std::chrono::system_clock::now() + d;\\n};\\n\\nnamespace print {\\n\\ntemplate <typename... Ts>\\nvoid println(Ts&&... ts) {\\n    ((std::cout << ts), ...);\\n    std::cout << \'\\\\n\';\\n}\\n\\n} // namespace print\\n\\nstruct MD {\\n    using MdTree = std::multimap<std::chrono::system_clock::time_point, int>;\\n    MD& operator=(MD&&) = delete;\\n    \\n    MdTree::iterator addTimer(\\n        std::chrono::system_clock::time_point expireTime,\\n        int v\\n    ) {\\n        print::println(\\"insert: \\", v);\\n        return _mdTree.insert({expireTime, v});\\n    }\\n\\n    struct A {\\n        A(MD* md)\\n            : _md{md}\\n            , _expireTime{}\\n            , _it{}\\n        {\\n            print::println(\\"make this: \\", this);\\n        }\\n    \\n        A(A const&) = delete;\\n        A& operator=(A const&) noexcept = delete;\\n\\n#if 0\\n        A(A&&) = default;\\n        A& operator=(A&&) noexcept = default;\\n#else\\n        A(A&& that)\\n            : _md{that._md}\\n            , _expireTime{std::move(that._expireTime)}\\n            , _it{std::move(that._it)}\\n        {\\n            // \u5982\u679c\u7f3a\u5c11\u4e0b\u9762\u7684, \u5c31\u4f1a\u629b\u5f02\u5e38 \u4ec5 MSVC (?)\\n            print::println(\\"that: \\", this, \\" [A&&] ref: \\", _md);\\n            print::println(\\"this: \\", this, \\" [A&&] ref: \\", _md);\\n        }\\n\\n        A& operator=(A&& that) noexcept {\\n            _md = that._md;\\n            _expireTime = std::move(that._expireTime);\\n            _it = std::move(that._it);\\n            // print::println(\\"that: \\", this, \\" [operator=&&] ref: \\", _timerLoop);\\n            print::println(\\"this: \\", this, \\" [operator=&&] ref: \\", _md);\\n            return *this;\\n        }\\n#endif\\n    \\n        void await_suspend() const noexcept {\\n            print::println(\\"this: \\", this);\\n            _it = _md->addTimer(_expireTime, 1);\\n        }\\n    \\n        void await_resume() const noexcept {\\n            print::println(\\"this: \\", this);\\n            _it.reset();\\n        }\\n    \\n        A&& setExpireTime(std::chrono::system_clock::time_point expireTime) && noexcept {\\n            _expireTime = expireTime;\\n            return std::move(*this);\\n        }\\n    \\n        ~A() noexcept {\\n            print::println(\\"~this: \\", this);\\n            if (_it) {\\n                print::println(\\"the \\", this, \\" del!\\");\\n                _md->_mdTree.erase(*_it);\\n            }\\n        }\\n    \\n    private:\\n        MD* _md;\\n        std::chrono::system_clock::time_point _expireTime;\\n        mutable std::optional<MdTree::iterator> _it;\\n    };\\nprivate:  \\n    struct BuildA {\\n        BuildA(MD* md) \\n            : _md{md}\\n        {}\\n    \\n        BuildA& operator=(BuildA&&) noexcept = delete;\\n\\n        // \u8fd4\u56de\u503c\u4e0d\u80fd\u5199\u4e3a decltype(auto) \u6216\u8005 && !? \u53ea\u80fd\u5199 A?\\n        // \u4f46\u662f\u6211\u662f\u4f20\u5165 void linkTimeout(MD::A timeout)\\n        // \u7406\u8bba\u4e0a\u5e94\u8be5\u662f\u4f7f\u7528\u79fb\u52a8\u6784\u9020\u5f97\u51fa\u65b0\u5bf9\u8c61 timeout \u5427?\\n        A&& build(std::chrono::system_clock::duration t) && {\\n            // \u56e0\u4e3a\u4e0d\u662f return std::move(*this); \u6240\u4ee5\u4e0d\u662f\u5408\u9002\u7684, \u8fd4\u56de\u7684\u662f\u5c06\u4ea1\u503c\\n            return \\n                // std::move( // \u8fd9\u4e2a std::move \u53ef\u6709\u53ef\u65e0\\n                    A{_md}.setExpireTime(makeTime(t)\\n                // )\\n            );\\n        }\\n\\n        MD* _md;\\n    };\\npublic:\\n    static BuildA makeBuild(MD& md) {\\n        return BuildA{&md};\\n    }\\n\\nprivate:\\n    MdTree _mdTree;\\n};\\n\\n\\nstatic void linkTimeout(MD::A timeout) { // \u5982\u679c\u4fee\u6539\u4e3a A&& \u6216\u8005 const&, insert\u540e, \u4f1a\u5361\u6b7b\u5728STL\u7684\u4e00\u4e2awhile\u4e2d\\n                                         // _Iterator_base12::_Orphan_me_unlocked_v3 \u4e2d \u7684 while\\n    timeout.await_suspend();\\n    timeout.await_resume();\\n}\\n\\nvoid test02() {\\n    MD fk;\\n    linkTimeout(\\n        // std::move( // \u5982\u679c\u6b64\u5904\u52a0 std::move \u6beb\u65e0\u4f5c\u7528 | \u662f\u53ef\u6709\u53ef\u65e0\u7684\\n            MD::makeBuild(fk).build(1s)\\n        // )\\n    );\\n}\\n\\nint main() {\\n    test02();\\n    return 0;\\n}\\n```\\n\\n\u6211\u76f4\u63a5\u7ed9\u51fa\u7b54\u6848(\u95ee\u9898\u6240\u5728)\u4e86:\\n\\n```cpp\\nA&& BuildA::build(std::chrono::system_clock::duration t) && {\\n    return A{_md}.setExpireTime(makeTime(t));\\n}\\n```\\n\\n\u8fd4\u56de\u7684\u662f `A&&`! **\u5f53\u8fd4\u56de\u65f6\u5019, `A{_md}.setExpireTime(makeTime(t))` \u5c31\u6790\u6784\u4e86**\\n\\n\u5373\u4fbf\u4f7f\u7528 `A =` \u8fd9\u79cd\u8bed\u6cd5\u6765\u63a5\u4f4f, \u5b9e\u9645\u4e0a\u53ea\u662f\u8bed\u6cd5\u901a\u8fc7\u4e86; \u4f46\u662f\u5b9e\u9645\u4e0a\u8fd8\u662f\u6307\u5411\u4e86 `\u60ac\u6302\u5f15\u7528 A&&`\\n\\n\u4e0d\u4fe1\u53ef\u4ee5\u81ea\u5df1\u8c03\u8bd5\u4e00\u4e0b:\\n\\n```cpp\\nauto __test02__ = [] {\\n    HX::print::println(\\"Test02 {\\");\\n    struct A {\\n        A&& todo() && {\\n            return std::move(*this);\\n        }\\n\\n        static A&& mk() {\\n            return std::move(A{}.todo());\\n        }\\n\\n        ~A() noexcept {\\n            HX::print::println(\\"~A \\", this);\\n            (void)_p;\\n        }\\n\\n    private:\\n        using MdTree = std::multimap<std::chrono::system_clock::time_point, int>;\\n        std::optional<MdTree::iterator> _p{};\\n    };\\n    struct ABuild {\\n        A&& build() && {\\n            return std::move(A{}.todo());\\n        }\\n        ~ABuild() noexcept {\\n            HX::print::println(\\"~ABuild \\", this);\\n        }\\n    };\\n    auto makeBuild = []{\\n        return ABuild{};\\n    };\\n    {\\n        auto&& a = makeBuild().build();\\n        (void)a;\\n        HX::print::println(\\"--- mk End a ---\\\\n\\");\\n    }\\n    HX::print::println(\\"--- --- --- --- ---\\\\n\\");\\n    {\\n        decltype(auto) b = makeBuild().build();\\n        (void)b;\\n        HX::print::println(\\"--- mk End b ---\\\\n\\");\\n    }\\n    HX::print::println(\\"--- --- --- --- ---\\\\n\\");\\n    {\\n        auto c = makeBuild().build();\\n        (void)c;\\n        HX::print::println(\\"--- mk End c ---\\\\n\\");\\n    }\\n    HX::print::println(\\"--- --- --- --- ---\\\\n\\");\\n    {\\n        auto func = [](A a) {\\n            (void)a;\\n            HX::print::println(\\"func\\\\n\\");\\n            return;\\n        };\\n        // \u4e0b\u9762\u8fd9\u884c\u6253\u65ad\u70b9\\n        func(makeBuild().build()); // ub\\n                                   // \u8c03\u8bd5\u7684\u65f6\u5019\u5c31\u53ef\u4ee5\u53d1\u73b0:\\n                                   // return std::move(A{}.todo());\\n                                   // \u53d1\u751f\u4e86\u6790\u6784, \u624d\u8fdb\u884c\u8fd4\u56de!\\n                                   // \u56e0\u6b64\u8bbf\u95ee\u7684\u662f\u60ac\u6302\u5f15\u7528!\\n        HX::print::println(\\"--- mk End d ---\\\\n\\");\\n    }\\n    HX::print::println(\\"--- --- --- --- ---\\\\n\\");\\n    HX::print::println(\\"} // Test02\\");\\n    return 0;\\n}();\\n```\\n\\n\u6838\u5fc3\u5c31\u662f\u8fd9\u6837; \u5269\u4e0b\u53ea\u80fd\u591a\u907f\u514d\u4e86; \u6ca1\u4e8b\u4e0d\u8981\u5199 `A&&` \u4f5c\u4e3a\u8fd4\u56de\u503c;\\n\\n\u5e38\u89c1\u7684\u4f7f\u7528\u573a\u666f\u5e94\u8be5\u662f\u94fe\u5f0f\u8c03\u7528, \u800c **\u4e0d\u662f** \u8fd4\u56de\u4e34\u65f6\u5bf9\u8c61:\\n\\n```cpp\\nstruct A {\\n    [[nodiscard]] A&& set() && { return std::move(*this); } // \u6b63\u786e\u7684\u4f7f\u7528\u573a\u666f\\n};\\n```\\n\\n\u540c\u7406, \u5982\u679c\u4f7f\u7528 `decltype(auto)` \u4e5f\u8981\u7279\u522b\u5c0f\u5fc3, \u5c0f\u5fc3\u5b83\u88ab\u63a8\u5bfc\u4e3a `T&&`!"},{"id":"/2025/06/15/01-lqb\u7ed3\u675f\u5566","metadata":{"permalink":"/HXLoLi/blog/2025/06/15/01-lqb\u7ed3\u675f\u5566","editUrl":"https://github.com/HengXin666/HXLoLi/edit/main/blog/2025/06/15/01-lqb\u7ed3\u675f\u5566.md","source":"@site/blog/2025/06/15/01-lqb\u7ed3\u675f\u5566.md","title":"LQB\u7ed3\u675f\u5566, \u6211\u81ea\u7531\u5566","description":"LQB\u7ed3\u675f\u5566, \u6211\u81ea\u7531\u5566~ \u7ec8\u4e8e\u53ef\u4ee5\u5b66\u70b9\u522b\u7684\u4e86~","date":"2025-06-15T23:30:54.000Z","tags":[{"inline":false,"label":"\u65e5\u5e38","permalink":"/HXLoLi/blog/tags/\u65e5\u5e38","description":"\u4e00\u4e9b\u65e5\u5e38\u7684\u8bb0\u5f55 (\u5927\u591a\u662f\u788e\u788e\u5ff5)"}],"readingTime":0.995,"hasTruncateMarker":true,"authors":[{"name":"Heng_Xin","title":"\u3053\u3053\u304b\u3089\u5148\u306f\u4e00\u65b9\u901a\u884c\u3060!","url":"https://github.com/HengXin666","email":"282000500@qq.com","socials":{"github":"https://github.com/HengXin666","bilibili":"https://space.bilibili.com/478917126"},"imageURL":"https://avatars.githubusercontent.com/u/103022267","key":"Heng_Xin","page":null}],"frontMatter":{"authors":"Heng_Xin","title":"LQB\u7ed3\u675f\u5566, \u6211\u81ea\u7531\u5566","date":"2025-06-15T23:30:54.000Z","tags":["\u65e5\u5e38"]},"unlisted":false,"lastUpdatedAt":1750001925000,"lastUpdatedBy":"Heng_Xin_666","prevItem":{"title":"\u3010\u516b\u560eC++\u3011\u60ac\u6302\u5f15\u7528","permalink":"/HXLoLi/blog/2025/06/21/01-\u516b\u560e\u65e5\u5fd7-\u60ac\u6302\u5f15\u7528"},"nextItem":{"title":"\u535a\u5ba2\u66f4\u65b0\u65e5\u5fd7","permalink":"/HXLoLi/blog/2025/06/02/01-\u535a\u5ba2\u66f4\u65b0\u65e5\u5fd7"}},"content":"LQB\u7ed3\u675f\u5566, \u6211\u81ea\u7531\u5566~ \u7ec8\u4e8e\u53ef\u4ee5\u5b66\u70b9\u522b\u7684\u4e86~\\n\\n\x3c!-- truncate --\x3e\\n\\n\u4eca\u5e74\u597d\u96be... \u611f\u89c9\u5168\u662f\u6570\u5b66...\\n\\n\u56de\u6765\u8fd8\u8981\u5149\u901f\u5907\u6218\u671f\u672b\u8003\u8bd5... \u660e\u5929\u65e9\u4e0a\u5c31\u8003OS\u4e86... \u4e3a\u521a\u521a\u4e00\u4e2a\u5c0f\u65f6\u6781\u9650\u590d\u4e60...\\n\\n\u5199\u70b9\u65e5\u540e\u8ba1\u5212\u5427~\\n\\n- [ ] \u56fd\u4ea7Linux \u5b89\u88c5 (\u4e0a\u73ed\u7528)\\n\\n- [ ] \u91cd\u6784 HXLibs, \u652f\u6301\u539f\u751f\u4e2d\u65ad(\u57fa\u4e8eio_uring) + \u7edf\u4e00Json\u53cd\u5c04 + \u652f\u6301Json\u89e3\u6790\u5b8f + \u91cd\u6784\u89e3\u6790\u5c42(\u975e\u591a\u6001\u5b9e\u73b0Http\u4e0es, \u800c\u662f\u91c7\u7528\u5b8f\u8868\u793a\u662f\u5426\u542f\u7528) + \u91cd\u6784\u4ee3\u7801\u67b6\u6784 (\u4e0d\u518d\u4f7f\u7528\u5355\u4f8b, \u800c\u662f\u4ec5\u5bf9\u8c61\u5f0f) + \u91cd\u6784io\u5c42 (recv -> recvv)\\n\\n- QT\\n    - \u4e07\u80fd\u6697\u591c\u6a21\u5f0f\\n    - Linux + ASS \u97f3\u4e50\u64ad\u653e\u5668\\n    - \u79c1\u6709\u90e8\u7f72\u7535\u5b50\u4e66\u7ba1\u7406\u5668 (C/S)\\n\\n- B\u7ad9\u5386\u53f2\u5f39\u5e55\u722c\u866b\u4f18\u5316\\n\\n- \u5b66\u4e60: OpenGL ... \u865a\u5e7b5 C++(\u5e7b\u60f3\u65f6\u523b)"},{"id":"/2025/06/02/01-\u535a\u5ba2\u66f4\u65b0\u65e5\u5fd7","metadata":{"permalink":"/HXLoLi/blog/2025/06/02/01-\u535a\u5ba2\u66f4\u65b0\u65e5\u5fd7","editUrl":"https://github.com/HengXin666/HXLoLi/edit/main/blog/2025/06/02/01-\u535a\u5ba2\u66f4\u65b0\u65e5\u5fd7.md","source":"@site/blog/2025/06/02/01-\u535a\u5ba2\u66f4\u65b0\u65e5\u5fd7.md","title":"\u535a\u5ba2\u66f4\u65b0\u65e5\u5fd7","description":"\u4eca\u5929\u6709\u7a7a, \u5b8c\u5584\u4e00\u4e0b\u535a\u5ba2, \u652f\u6301\u4e86\u732b\u5a18\u62a4\u6cd5, \u4ee5\u53ca\u9879\u76ee\u8f6e\u64ad\u56fe.","date":"2025-06-02T02:41:46.000Z","tags":[{"inline":false,"label":"\u65e5\u5e38","permalink":"/HXLoLi/blog/tags/\u65e5\u5e38","description":"\u4e00\u4e9b\u65e5\u5e38\u7684\u8bb0\u5f55 (\u5927\u591a\u662f\u788e\u788e\u5ff5)"}],"readingTime":1.065,"hasTruncateMarker":true,"authors":[{"name":"Heng_Xin","title":"\u3053\u3053\u304b\u3089\u5148\u306f\u4e00\u65b9\u901a\u884c\u3060!","url":"https://github.com/HengXin666","email":"282000500@qq.com","socials":{"github":"https://github.com/HengXin666","bilibili":"https://space.bilibili.com/478917126"},"imageURL":"https://avatars.githubusercontent.com/u/103022267","key":"Heng_Xin","page":null}],"frontMatter":{"authors":"Heng_Xin","title":"\u535a\u5ba2\u66f4\u65b0\u65e5\u5fd7","date":"2025-06-02T02:41:46.000Z","tags":["\u65e5\u5e38"]},"unlisted":false,"lastUpdatedAt":1748855756000,"lastUpdatedBy":"Heng_Xin_666","prevItem":{"title":"LQB\u7ed3\u675f\u5566, \u6211\u81ea\u7531\u5566","permalink":"/HXLoLi/blog/2025/06/15/01-lqb\u7ed3\u675f\u5566"},"nextItem":{"title":"\u9762\u8bd5\u8fc7\u5566 (C++\u4fe1\u5b89)","permalink":"/HXLoLi/blog/2025/05/29/01-\u9762\u8bd5\u8fc7\u5566"}},"content":"\u4eca\u5929\u6709\u7a7a, \u5b8c\u5584\u4e00\u4e0b\u535a\u5ba2, \u652f\u6301\u4e86\u732b\u5a18\u62a4\u6cd5, \u4ee5\u53ca\u9879\u76ee\u8f6e\u64ad\u56fe.\\n\\n\x3c!-- truncate --\x3e\\n\\n\u4f46\u662f\u8fd8\u662f\u6709\u70b9\u95ee\u9898..., \u7a81\u7136\u53d1\u73b0, \u5b83\u5e76\u4e0d\u662f\u652f\u6301\u767d\u5929\u6a21\u5f0f\u7684qwq...\\n\\n\u8fd8\u5f97\u6539\u4e00\u6539, \u518d\u8005, \u660e\u4eae\u6a21\u5f0f\u4e5f\u592a\u96be\u770b\u4e86\u5427, \u600e\u4e48\u90fd\u4e0d\u597d\u770b, \u6709\u70b9\u60f3\u628a\u7f51\u9875\u641e\u6210\u4ec5`\u9ed1\u591c\u6a21\u5f0f`\u4e86qwq\\n\\n\u73b0\u5728\u7b80\u5355\u517c\u5bb9\u4e86\u4e00\u4e0b\u767d\u5929\u6a21\u5f0f\u4e86qwq... \u6cbb\u6807\u4e0d\u6cbb\u672c, \u6211\u4e00\u70b9\u90fd\u4e0d\u60f3\u652f\u6301...\\n\\n\u54c8\u54c8\u54c8, \u627e\u5230\u4e86, `docusaurus.config.ts`\u4e2d\u53ef\u4ee5\u914d\u7f6e:\\n\\n```ts\\nthemeConfig: {\\n    colorMode: {\\n        defaultMode: \'dark\',              // \u9ed8\u8ba4\u9ed1\u591c\u6a21\u5f0f\\n        disableSwitch: true,              // \u7981\u7528\u6a21\u5f0f\u5207\u6362\u6309\u94ae\\n        respectPrefersColorScheme: false, // \u4e0d\u6839\u636e\u7528\u6237\u64cd\u4f5c\u7cfb\u7edf\u7684\u504f\u597d\u5207\u6362\\n    },\\n},\\n```\\n\\n\u76ee\u524d\u8fd8\u6709\u4e9b\u95ee\u9898, \u5c31\u662f\u624b\u673a\u4e0a\u67e5\u770b\u53ef\u4ee5\u6709bug, (\u732b\u5a18\u62a4\u6cd5\u7684\u95ee\u9898, \u65e5\u540e\u53ef\u4ee5\u54cd\u5e94\u5f0f\u7684\u4e0d\u663e\u793a\u732b\u5a18\u5c31\u597d\u4e86qwq...)"},{"id":"/2025/05/29/01-\u9762\u8bd5\u8fc7\u5566","metadata":{"permalink":"/HXLoLi/blog/2025/05/29/01-\u9762\u8bd5\u8fc7\u5566","editUrl":"https://github.com/HengXin666/HXLoLi/edit/main/blog/2025/05/29/01-\u9762\u8bd5\u8fc7\u5566.md","source":"@site/blog/2025/05/29/01-\u9762\u8bd5\u8fc7\u5566.md","title":"\u9762\u8bd5\u8fc7\u5566 (C++\u4fe1\u5b89)","description":"\u4eca\u5929\u53bb\u6df1\u5733\u9762\u8bd5C++\u5b9e\u4e60\u751f, wc\u8fc7\u5566!","date":"2025-05-29T22:18:02.000Z","tags":[{"inline":false,"label":"\u65e5\u5e38","permalink":"/HXLoLi/blog/tags/\u65e5\u5e38","description":"\u4e00\u4e9b\u65e5\u5e38\u7684\u8bb0\u5f55 (\u5927\u591a\u662f\u788e\u788e\u5ff5)"}],"readingTime":9.95,"hasTruncateMarker":true,"authors":[{"name":"Heng_Xin","title":"\u3053\u3053\u304b\u3089\u5148\u306f\u4e00\u65b9\u901a\u884c\u3060!","url":"https://github.com/HengXin666","email":"282000500@qq.com","socials":{"github":"https://github.com/HengXin666","bilibili":"https://space.bilibili.com/478917126"},"imageURL":"https://avatars.githubusercontent.com/u/103022267","key":"Heng_Xin","page":null}],"frontMatter":{"authors":"Heng_Xin","title":"\u9762\u8bd5\u8fc7\u5566 (C++\u4fe1\u5b89)","date":"2025-05-29T22:18:02.000Z","tags":["\u65e5\u5e38"]},"unlisted":false,"lastUpdatedAt":1748532804000,"lastUpdatedBy":"Heng_Xin_666","prevItem":{"title":"\u535a\u5ba2\u66f4\u65b0\u65e5\u5fd7","permalink":"/HXLoLi/blog/2025/06/02/01-\u535a\u5ba2\u66f4\u65b0\u65e5\u5fd7"},"nextItem":{"title":"\u8d77\u731b\u4e86, \u5c45\u7136\u6709\u9762\u8bd5\u4e86","permalink":"/HXLoLi/blog/2025/05/24/01-\u6709\u9762\u8bd5\u4e86"}},"content":"\u4eca\u5929\u53bb\u6df1\u5733\u9762\u8bd5C++\u5b9e\u4e60\u751f, wc\u8fc7\u5566!\\n\\n\x3c!-- truncate --\x3e\\n\\n\u5982\u4e4b\u524d\u6240\u8a00\u7684, \u4eca\u5929\u53bb\u6df1\u5733\u9762\u8bd5, \u8fd8\u4e0b\u4e86\u5927\u96e8...\\n\\n\u4eca\u5929\u65e9\u4e0a\u60f3\u770b\u770b\u600e\u4e48\u901f\u901a\u5730\u94c1, \u7136\u540e\u60ca\u5947\u7684\u53d1\u73b0, \u6709\u53ef\u80fd\u4f1a\u8fdf\u523010\u5206\u949f!!!\\n\\n\u7136\u540e\u6211\u679c\u65ad\u4e70\u4e86\u66f4\u52a0\u524d\u7684\u9ad8\u94c1\u7968qwq... (\u540e\u6765\u53d1\u73b0, \u53ef\u4ee5\u6539\u7b7e\u554a..., \u4e0d\u8fc7\u6539\u7b7e\u548c\u9000\u7968\u540c\u6837\u90fd\u8981\u624b\u7eed\u8d39...\u5dee\u4e0d\u591a)\\n\\n\u7136\u540e\u6211\u662f\u63d0\u524d\u4e861\u4e2a\u5c0f\u65f6\u5230\u516c\u53f8\u7684\u5730\u94c1\u7ad9\u4e86, \u5916\u9762\u4e0b\u7740\u96e8, \u6211\u4e5f\u4e0d\u60f3\u8fd9\u4e48\u65e9... \u5c31\u5728\u5730\u94c1\u7ad9\u7b49\u4e86\u534a\u4e2a\u5c0f\u65f6\u5728\u53bb\u4e86=-=\\n\\n\u516c\u53f8\u592a\u633a\u8fd1\u7684, \u51fa\u5730\u94c1\u7ad9, \u62d0\u4e2a\u5f2f\u5c31\u5230\u4e86 =-=\\n\\n\u7136\u540e\u5c31\u662f\u9762\u8bd5\u4e86~\\n\\n\u9996\u5148\u662f\u81ea\u6211\u4ecb\u7ecd, \u771f\u7684\u4e0d\u600e\u4e48\u7d27\u5f20, \u6709\u70b9\u610f\u5916\u5427, \u6211\u4ee5\u4e3a\u6211\u4f1a\u5f88\u7d27\u5f20\u7684. \u53ef\u80fd\u662f\u9762\u8bd5\u5b98\u5f88\u6709\u4eb2\u548c\u529b\u5427?\\n\\n\u6211\u9762\u8bd5\u7684\u65f6\u5019\u8868\u73b0\u7684\u51e0\u4e4e\u90fd\u5f88\u81ea\u7136 (\u540e\u9762\u8bf4\u6211\u6700\u5927\u7684\u7f3a\u70b9\u662f\u4ec0\u4e48, \u6211\u8bf4\u6211\u6bd4\u8f83\u5185\u5411\u4e00\u70b9, \u9762\u8bd5\u5b98\u8fd8\u8bf4\u6ca1\u6709\u5440~ \u6211\u89c9\u5f97\u4f60\u8bb2\u5f97\u633a\u597d\u7684)\\n\\n\u9762\u8bd5\u95ee\u7684\u51e0\u4e4e\u6ca1\u6709\u4ec0\u4e48\u6280\u672f, \u53ea\u6709\u4e00\u4e9b\u5b66\u6821\u6210\u7ee9\u3001\u65e5\u5e38\u8bdd\u9898(\u5bb6\u5ead(\u6709\u6ca1\u6709\u5403\u8fc7\u82e6?), \u4eba\u751f\u76ee\u524d\u9047\u5230\u8fc7\u538b\u529b\u6700\u5927\u7684\u65f6\u5019\u662f\u4ec0\u4e48(\u6211\u7b54\u662f\u9ad8\u4e09...))\\n\\n\u611f\u89c9\u5c31\u662f\u76f8\u4e92\u4e86\u89e3\u7684\u5bd2\u6684\u5427? \u7136\u540e\u5c31\u662f\u7b14\u8bd5\u4e86, \u4e0d\u662f\u4e0a\u673a, \u662f\u771f\u7684\u7b14\u8bd5, \u5c31\u4e00\u5f20A4\u4e24\u9762\u6709\u9898\\n\\n\u5927\u6982\u8003\u4e86 Linux\u547d\u4ee4 (\u586b\u7a7a): \\n\\n1. \u600e\u4e48\u67e5\u770b\u5f53\u524dLinux\u53d1\u884c\u7248 (\u6211\u4e0d\u4f1a)\\n2. \u600e\u4e48\u67e5\u627e\u4e00\u4e2a\u540d\u5b57\u53eb xxx \u7684\u8fdb\u7a0b\u4fe1\u606f (\u9700\u8981\u8fc7\u6ee4), \u6211\u662f `top | find \\"xxx\\"` \u8fd9\u6837\\n3. vim\u600e\u4e48\u4e0d\u4fdd\u5b58\u9000\u51fa, `:q!`\\n4. vim\u600e\u4e48\u6a21\u7cca\u67e5\u627e\u4e00\u4e2a\u4e1c\u897f? `:%s \\"*\\"` (\u8fd9\u4e2a\u6211\u5e94\u8be5\u662f\u5199\u9519\u4e86)\\n5. Linux\u600e\u4e48\u624b\u52a8\u542f\u52a8\u56fe\u5f62\u754c\u9762? (\u547d\u4ee4\u4e0d\u4f1a... \u800c\u4e14\u8fd9\u4e48\u591a\u56fe\u5f62\u754c\u9762, \u4e5f\u6ca1\u6709\u544a\u8bc9\u6211\u540d\u79f0\u554aqwq)\\n\\n\u597d\u50cf\u5c31\u8fd9\u4e9b...\\n\\n\u7136\u540e\u95ee\u4e86\u516b\u80a1, \u8fdb\u7a0b\u95f4\u901a\u4fe1\u6709\u4ec0\u4e48\u65b9\u6cd5? `\u7ba1\u9053, \u5171\u4eab\u5185\u5b58, \u6d88\u606f\u961f\u5217, \u4fe1\u53f7\u91cf, \u5957\u63a5\u5b57, \u6587\u4ef6`\\n\\n\u7136\u540e\u662f gcc \u600e\u4e48\u7f16\u8bd1 c1.c\u3001 c2.c \u4e3a\u9759\u6001\u5e93\u548c\u52a8\u6001\u5e93, \u6211\u4f9d\u65e7\u5fd8\u8bb0\u6307\u4ee4\u4e86\\n\\n\u76f4\u63a5\u8499\u7684 -o -l (\u9759\u6001\u5e93), -o -s (\u52a8\u6001\u5e93), \u80af\u5b9a\u4e0d\u5bf9, \u601d\u60f3\u5bf9\u4e86\u5427qwq\\n\\n\u7136\u540e\u662f\u770b\u6c47\u7f16... \u6ca1\u6709\u770b\u61c2 =-=\\n\\n```\u6c47\u7f16\\nmov XA, 0;\\nmov XB, 1;\\nmov XC, 100;\\n:A add XA XB;\\nine XB;\\nloop A;\\nhex;\\n```\\n\\n\u95ee\u4e0a\u9762 XB \u8f93\u51fa, \u6211\u5199\u662f `1`... (\u4e0a\u9762\u6c47\u7f16\u4e5f\u662f\u4e0d\u5bf9, \u6211\u6309\u7167\u5370\u8c61\u5199\u7684)\\n\\n\u7136\u540e\u8003 gdb \u8c03\u8bd5, \u95ee\u5982\u679c\u60f3\u8fdb\u5165 `OpenJSON::Get_xxx_USB()` \u51fd\u6570\u540d\u5b57\u5fd8\u4e86.. \u8981\u7528\u4ec0\u4e48\u547d\u4ee4? \u6211\u4e0d\u4f1a, \u5199\u7684 `l OpenJSON::Get_xxx_USB()`\\n\\n\u8fd8\u6709 makefile \u600e\u4e48\u5217\u51fa\u6240\u6709\u4f9d\u8d56, \u8c01\u4f1a\u5199 makefile \u554a? \u54e5\u4eec\u90fd\u662f cv CMake\u7684... \u6240\u4ee5\u4e5f\u4e0d\u4f1a...\\n\\n\u597d\u50cf\u5c31\u8fd9\u4e9b\u4e86, \u7136\u540eC\u8bed\u8a00\u9898\u76ee\\n\\n```c\\n#define ADD(x) x + x\\nprintf(\\"%d\\", ADD(3) * 5);\\n```\\n\\n\u95ee\u8f93\u51fa\u4ec0\u4e48? \u8fd9\u4e2a\u5b9e\u9645\u4e0a\u662f\u5e38\u89c1\u7684\u5751, \u5b8f\u662f\u6587\u672c\u66ff\u6362, \u6240\u4ee5\u662f `ADD(3) * 5 == 3 + 3 * 5 == 18`\\n\\n\u770b\u4e00\u773c\u5c31\u77e5\u9053\u662f\u8003\u4ec0\u4e48\u4e86...\\n\\n\u7136\u540e\u662f\\n\\n```c\\nint a = 511;\\nchar* p = (char *)&a + 1;\\nprintf(\\"%d\\", *p);\\n```\\n\\n\u9898\u76ee\u5927\u6982\u610f\u601d\u662f\u8fd9\u6837\u5427... \u5fd8\u8bb0\u9898\u76ee\u4e86qwq...\\n\\n\u8003\u7684\u5b9e\u9645\u4e0a\u662f\u5bf9\u6307\u9488\u7406\u89e3, \u548c\u5185\u5b58\u7684\u7406\u89e3\u5427, \u7406\u89e3\u5bf9 `\u6307\u9488 + 1` \u5b9e\u9645\u4e0a\u662f\u7c7b\u578b\u7684\u504f\u79fb...\\n\\nint a = 511 = `0x00 00 01 FF`, \u8fd9\u91cc\u53ef\u80fd\u9700\u8981\u8003\u8651\u5927\u5c0f\u7aef\u7684\u95ee\u9898, \u4f46\u662f\u9898\u76ee\u6ca1\u6709\u8bf4, \u6211\u5c31\u76f4\u63a5\u5047\u8bbe\u4e86, \u56e0\u4e3a `1` \u6bd5\u7adf\u597d\u770b, \u5c31\u7b97\u662f\u6b63\u89e3\u4e86...\\n\\n\u56e0\u4e3a `(char *)&a` \u5bf9\u5e94\u662f `FF`, \u90a3\u4e48 + 1, \u662f `01` \u90e8\u5206. \u6240\u4ee5\u662f 1 (\u5176\u4ed6\u90fd\u4e0d\u5408\u7406, \u56e0\u4e3a\u9898\u76ee\u6ca1\u6709\u8bf4=-=)\\n\\n\u7136\u540e\u771f\u7684\u76f4\u63a5\u7ed9\u6211\u5f00\u773c\u4e86! \u300a\u8c2d\u6d69\u5f3aC\u8bed\u8a00\u300b\u51fa\u73b0\u5566!\\n\\n```c\\nint i = 0, a[] = {1, 2, 3, 4};\\na[++i] = i++;\\nprintf(\\"%d %d %d\\\\n\\", a[0], a[1], i);\\n```\\n\\n\u8fd9tm, `a[++i] = i++;` \u662f\u672a\u5b9a\u4e49\u884c\u4e3a\u554a!, \u4f60\u8ba9\u6211\u600e\u4e48\u8f93\u51fa\u561b?!\\n\\n\u6211\u76f4\u63a5\u5199\u4e86\u672a\u5b9a\u4e49\u884c\u4e3a, \u7136\u540e\u8fd8\u7f57\u5217\u4e86\u4e09\u79cd\u53ef\u80fd\u7684\u60c5\u51b5\\n\\n1. `++i` \u5148\u8ba1\u7b97, \u5e76\u4e14\u5f71\u54cd\u4e86 `i++` \u7136\u540e `i++` \u540e\u8ba1\u7b97 (\u8fd9\u4e2a\u662f\u8fd9\u4e2a\u9898\u7684\u6b63\u89e3, \u81f3\u5c11\u6211\u5199\u8fd9\u6837, \u9762\u8bd5\u5b98\u8bf4\u8fd0\u884c\u51fa\u6765\u5c31\u662f\u5bf9\u7684, \u4e0d\u662f\u672a\u5b9a\u4e49\u884c\u4e3a\u554a, \u56e0\u4e3a\u8fd0\u884c\u51fa\u6765\u5c31\u662f\u8fd9\u6837...)\\n2. `i++` \u5148\u8ba1\u7b97, \u518d\u8ba1\u7b97 `++i`\\n3. i++ \u548c ++i \u540c\u65f6\u8ba1\u7b97, \u8fd9\u6837\u4f1a\u62b5\u6d88\u4e00\u4e2a ++ (\u76f8\u5f53\u4e8e\u90fd\u662f\u5bf90\u52a0\u52a0\u4e86, \u7c7b\u4f3c\u4e8e\u7ade\u4e89\u6001, \u6240\u4ee5\u53ea\u5199\u56de\u4e861) \u663e\u7136\u4e0d\u53ef\u80fd, \u8c2d\u6d69\u5f3a\u4e5f\u4e0d\u4f1a\u8fd9\u4e48\u50bb\u5427? \u6392\u9664\u4e86, \u7136\u540e \u5c31\u5199\u4e86 `1.` \u7684\u7b54\u6848...\\n\\n\u6700\u540e\u8fd8\u662f\u6307\u9488\\n\\n```c\\nvoid func(int* b, int n) {\\n    int k;\\n    for (k = 0; k < n; k++)\\n        *(b + 1) = *(b + k) + 5;\\n}\\n\\nint main() {\\n    int i, a = {2, 4, 6, 8, 10};\\n    func(a, 5);\\n    for (i = 0; i <= 4; i++)\\n        printf(\\"%d, \\", a[i]);\\n}\\n```\\n\\n\u6838\u5fc3\u5c31\u662f \u77e5\u9053\u6307\u9488\u561b, \u6309\u7167\u8bed\u6cd5\u7cd6[]\u89c4\u5219, \u66ff\u6362\u4e00\u4e0b\u5c31\u662f `b[1] = b[k] + 5`, \u53d6\u6700\u540e\u4e00\u4e2a\u751f\u6548, \u5199\u51fa\u8f93\u51fa\u5c31\u5bf9\u4e86...\\n\\n\u5b8c\u5168\u6ca1\u6709C++\u561b, \u6211\u8fd8\u51c6\u5907\u4e86\u624b\u6495\u591a\u6001(\u9759\u6001CRTP\u3001\u8fd0\u884c\u65f6\u865a\u8868\u7b49)\u7684\u539f\u7406, U/S\u667a\u80fd\u6307\u9488\u624b\u6495(S\u667a\u80fd\u6307\u9488\u5305\u542b\u7c7b\u578b\u64e6\u9664\u7684\u6790\u6784!), C++20\u534f\u7a0b,\\n\u8ba1\u7f51\u3001\u591a\u7ebf\u7a0b\u3001\u5185\u5b58\u3001QT \u7684\u77e5\u8bc6\u5462qwq... \u6ca1\u6709\u6311\u6218\u554aqwq\\n\\n\u6700\u540e\u4e00\u9898\u662f\u5199\u4f60\u8ba4\u4e3a\u6700\u597d\u7684 Linux C/C++ \u4e66\u7c4d\u3001\u7f51\u5740\u3001\u4ee3\u7801, \u6211\u5199\u662f Linux\u6e90\u7801\u3001\u300aC++ \u6a21\u7248\u300b\u3001\u300aC++20\u7f16\u7a0b\u300b(\u7f57\u80fd)\u3001\u5c0f\u5f6d\u5927\u5178\u3001PureCpp (\u867d\u7136\u62fc\u9519\u4e86qwq)\\n\\n\u6700\u540e\u5c31\u662f\u53cd\u5ba2\u4e3a\u4e3b\u73af\u8282, \u6211\u6709\u4ec0\u4e48\u60f3\u95ee\u7684?\\n\\n\u5982\u679c\u6211\u6765\u4e86, \u5177\u4f53\u662f\u8d1f\u8d23\u4ec0\u4e48\u5185\u5bb9\u5462? \u662f\u5426\u9700\u8981\u57f9\u8bad?\\n\\n> \u56de\u7b54\u662f\u57f9\u8bad1\u661f\u671f, \u4e0d\u7528\u94b1, \u4f46\u662f\u4e5f\u6ca1\u6709\u5de5\u8d44, \u4f46\u662f\u4e5f\u4e0d\u8003\u52e4, \u4f46\u662f\u6709\u8003\u6838.\\n>\\n> \u8d1f\u8d23\u4ec0\u4e48? \u6ca1\u6709\u660e\u786e\u8bf4, \u53ea\u662f\u4e3e\u4f8b\u4e86: \u6316\u6cb3(2\u7c73\u6df1)\u548c\u6316\u4e95\u7684\u4f8b\u5b50, \u540c\u6837\u662f\u4e00\u767e\u7c73, \u6316\u6cb3\u7b80\u5355, \u4f46\u662f\u82e6\u529b; \u6316\u4e95\u96be, \u4f46\u662f\u8111\u529b\\n>\\n> \u5e76\u4e14\u6316\u4e95\u53ef\u80fd\u662f\u4e00\u5f00\u59cb\u7b80\u5355(\u524d2\u7c73\u548c\u6316\u6cb3\u6ca1\u6709\u533a\u522b), \u540e\u9762\u53ef\u80fd\u4f1a\u6709\u6311\u6218, \u6bd4\u5982\u4e95\u91cc\u5f88\u9ed1; \u4f46\u662f\u901a\u8fc7\u6162\u6162\u6f6e\u6e7f\u5230\u6700\u540e\u51fa\u6c34\u4e86,\\n>\\n> \u8fd9\u79cd\u5e0c\u671b\u548c\u6210\u5c31\u611f, \u662f\u4e0d\u4e00\u6837\u7684~ \u7136\u540e\u8bf4\u6211\u4eec\u505a\u7684\u5b9e\u9645\u4e0a\u5c31\u662f\u6316\u4e95\u7684\u6d3b(\u4fe1\u5b89) (zf\u673a\u5173 + \u56fd\u4ea7Linux\u4e0a\u7684)\\n\\n\u8fd8\u544a\u8bc9\u6211\u4e00\u4e2a\u5927\u9053\u7406:\\n\\n\u5047\u5982\u6211\u6ca1\u6709\u9047\u5230\u4ed6\u4eec\u516c\u53f8, \u6211\u7684\u672a\u67653\u5e74\u662f\u600e\u4e48\u89c4\u5212\u7684?\\n\\n\u6211\u56de\u7b54\u662f, \u7ee7\u7eed\u4fdd\u8bc1\u6691\u5047\u627e\u4e2a\u5b9e\u4e60, \u5bd2\u5047\u627e\u4e2a\u5b9e\u4e60, \u7136\u540e\u79cb\u62db...\\n\\n\u4ed6\u544a\u8bc9\u6211, \u5982\u679c\u662f\u666e\u901a\u4eba\u7684\u8bdd, \u57fa\u672c\u4e0a\u90fd\u662f\u8fd9\u6837\u60f3, \u8fd9\u6837\u4e5f\u6ca1\u6709\u9519.\\n\\n\u4f46\u662f\u6709\u4e00\u4e2a\u8bef\u533a, \u7136\u540e\u5c31\u4e3e\u4f8b\u4e86\u4e00\u4e2a\u4f8b\u5b50 \u8dd1\u6b65\u5927\u795e \u7a81\u7136 \u6539\u4e3a\u6e38\u6cf3\u5927\u5e08 (\u4f46\u662f\u4ece\u96f6\u5b66\u8d77\u4e86), \u540e\u9762\u53c8\u6539\u53bb\u79cd\u6811...\\n\\n\u603b\u4e4b\u5c31\u662f\u8bf4, **\u4eba\u5e94\u8be5\u4e13\u7cbe\u4e8e\u4e00\u4e2a\u9886\u57df!**, (\u4e0d\u8fc7\u6211\u8ba4\u4e3a, \u6211\u591a\u79ef\u7d2f\u5b9e\u4e60, \u5b9e\u9645\u4e0a\u4e5f\u7b97\u4e00\u4e2a\u9886\u57df\u5427qwq...)\\n\\n\u4e0d\u8fc7\u6211\u4e0d\u9700\u8981\u600e\u4e48\u65e9\u5b9a\u65b9\u5411 (\u548c\u4e0d\u662f\u6709\u94b1\u5c31\u9a6c\u4e0a\u4e70\u80a1\u7968\u4e00\u6837, \u6709\u65f6\u673a\u7684!)\\n\\n\u627e\u5230\u4e00\u4e2a\u81ea\u5df1\u611f\u5174\u8da3, \u70ed\u7231\u7684! \u5e72\u4e0b\u53bb\u5427!\\n\\n\u540e\u9762\u6211\u53c8\u95ee\u4e86, \u6211\u6765\u4e4b\u524d, \u6211\u53ef\u4ee5\u81ea\u5df1\u5148\u5b66\u4ec0\u4e48\u5462? \u9762\u8bd5\u5b98\u8bf4, \u64cd\u4f5c\u7cfb\u7edf \u770b\u534a\u4e2a\u6708, \u5230 \u719f\u6089 \u6216\u8005\u8bf4\u4e86\u89e3\u76842\u500d\u90a3\u6837!\\n\\n(\u8bf4\u5b9e\u8bdd, \u5230\u73b0\u5728, \u6211\u8fd8\u662f\u4e0d\u77e5\u9053\u5177\u4f53\u7684\u4fe1\u5b89\u548cc++\u53ef\u4ee5\u600e\u4e48\u6df7qwq...)\\n\\n\u6700\u540e\u6211\u5c31\u95ee\u7684\u5dee\u4e0d\u591a\u4e86, \u7136\u540e\u4ed6\u8bf4\u6211\u8fd8\u6ca1\u6709\u95ee\u5de5\u8d44\u5462~\\n\\n\u6211\u8868\u793a\u94b1\u6709\u5c31\u884c, \u4ed6\u8868\u793a\u8d5e\u540c; \u5e76\u4e14\u544a\u8bc9\u6211, **\u521a\u521a\u51fa\u6765\u5de5\u4f5c\u90a3\u51e0\u5e74, \u662f\u6211\u79ef\u7d2f\u4eba\u8109\u3001\u4e8b\u60c5\u8109\u7684\u65f6\u95f4\u6bb5**!\\n\\n\u7b49\u8fc7\u4e86\u51fa\u6765\u7684\u8fd9\u51e0\u5e74, \u4f60\u4e5f\u4ea6\u7136\u6210\u4e3a\u4e86\u67d0\u4e2a\u9886\u57df\u7684Top, \u4e0d\u8bf4\u524d3, \u524d3\u4e07\u5427, \u90a3\u4e5f\u6211\u7684\u672c\u8eab\u5566! \u4e5f\u53ef\u4ee5\u81ea\u5df1\u521b\u4e1a\u4ec0\u4e48\u7684, \u901a\u8fc7\u81ea\u5df1\u7684\u8ba4\u77e5!\\n\\n> \u4e2a\u4eba\u8ba4\u4e3a\u662f\u6536\u83b7\u5f88\u591a\u5f88\u591a\u7684!\\n\\n\u6700\u540e\u4ea4\u6362\u4e86wx, \u7136\u540e\u5982\u679c\u6211\u53ef\u4ee5\u6765\u4e86, \u5c31\u8054\u7cfb\u4ed6\u8fd9\u6837, (\u5907\u6ce8\u7684\u65f6\u5019, \u600e\u4e48\u79f0\u547c? \u4ed6\u8bf4\u53eb`\u8001\u5e08`\u5427~)\\n\\n\u786e\u5b9e! \u53d7\u6559\u4e86! \u611f\u8c22!"},{"id":"/2025/05/24/01-\u6709\u9762\u8bd5\u4e86","metadata":{"permalink":"/HXLoLi/blog/2025/05/24/01-\u6709\u9762\u8bd5\u4e86","editUrl":"https://github.com/HengXin666/HXLoLi/edit/main/blog/2025/05/24/01-\u6709\u9762\u8bd5\u4e86.md","source":"@site/blog/2025/05/24/01-\u6709\u9762\u8bd5\u4e86.md","title":"\u8d77\u731b\u4e86, \u5c45\u7136\u6709\u9762\u8bd5\u4e86","description":"\u5728\u725b\u5ba2\u6295\u4e86 20 \u6765\u4e2a\u7b80\u5386, (\u6709\u5f88\u591a\u90fd\u662f\u4e71\u6295\u7684), \u4eca\u5929\u7a81\u7136\u6765\u4e2a\u901a\u8fc7\u4e86!!!","date":"2025-05-24T00:36:36.000Z","tags":[{"inline":false,"label":"\u65e5\u5e38","permalink":"/HXLoLi/blog/tags/\u65e5\u5e38","description":"\u4e00\u4e9b\u65e5\u5e38\u7684\u8bb0\u5f55 (\u5927\u591a\u662f\u788e\u788e\u5ff5)"}],"readingTime":1.94,"hasTruncateMarker":true,"authors":[{"name":"Heng_Xin","title":"\u3053\u3053\u304b\u3089\u5148\u306f\u4e00\u65b9\u901a\u884c\u3060!","url":"https://github.com/HengXin666","email":"282000500@qq.com","socials":{"github":"https://github.com/HengXin666","bilibili":"https://space.bilibili.com/478917126"},"imageURL":"https://avatars.githubusercontent.com/u/103022267","key":"Heng_Xin","page":null}],"frontMatter":{"authors":"Heng_Xin","title":"\u8d77\u731b\u4e86, \u5c45\u7136\u6709\u9762\u8bd5\u4e86","date":"2025-05-24T00:36:36.000Z","tags":["\u65e5\u5e38"]},"unlisted":false,"lastUpdatedAt":1748019231000,"lastUpdatedBy":"Heng_Xin_666","prevItem":{"title":"\u9762\u8bd5\u8fc7\u5566 (C++\u4fe1\u5b89)","permalink":"/HXLoLi/blog/2025/05/29/01-\u9762\u8bd5\u8fc7\u5566"},"nextItem":{"title":"\u590d\u4e60\u5feb\u6392\u5e76\u6a21\u7248\u5316","permalink":"/HXLoLi/blog/2025/05/19/01-\u590d\u4e60\u5feb\u6392\u5e76\u6a21\u7248\u5316"}},"content":"\u5728\u725b\u5ba2\u6295\u4e86 20 \u6765\u4e2a\u7b80\u5386, (\u6709\u5f88\u591a\u90fd\u662f\u4e71\u6295\u7684), \u4eca\u5929\u7a81\u7136\u6765\u4e2a\u901a\u8fc7\u4e86!!!\\n\\n\x3c!-- truncate --\x3e\\n\\n> \u6211\u6ca1\u60f3\u5230, \u6211\u6700\u8ba4\u4e3a\u4e0d\u9760\u8c31\u7684\u725b\u5ba2, \u5c45\u7136\u662f\u7ed9\u6211\u53d1\u7b2c\u4e00\u4e2a\u9762\u8bd5\u7684...\\n\\n\u8fd8\u662f\u633a\u5bf9\u53e3\u7684!!!\\n\\nwin/\u56fd\u4ea7Linux \u4e0b VS/QT \u5f00\u53d1, \u653f\u5e9c\u4fe1\u606f\u5b89\u5168\u7684\u9879\u76ee, \u597d\u50cf\u5f88\u5389\u5bb3\\n\\n\u4e86\u89e3\u5230, \u662f 65% QT + 35% \u754c\u9762, QT\u7684\u8bdd, \u5e94\u8be5\u662f\u6bd4\u8f83\u7b80\u5355\u5427, \u4e5f\u4e0d\u77e5\u9053\u4f01\u4e1a\u662f\u4ec0\u4e48\u4e2a\u5f62\u5f0f\u7684qwq\\n\\n\u53d1\u4e86\u4ee3\u7801, \u7ed9\u5bf9\u9762\u770b, \u7136\u540e\u5c31\u76f4\u63a5\u53d1\u9762\u8bd5\u4e86 (\u9707\u60ca!) \u4e00\u8d77\u90fd\u592a\u987a\u5229\u4e86\u5427qwq\\n\\n\u4f46\u662f\u662f\u7ebf\u4e0b\u9762\u8bd5! \u597d\u5bb3\u6015, \u597d\u7d27\u5f20\u554a... \u53ea\u611f\u89c9\u73b0\u5728\u7684\u81ea\u5df1\u53ea\u60f3\u7740\u6295, \u4f46\u662f\u90fd\u662f\u4ee5\u6ca1\u6709\u9762\u4e3a\u524d\u63d0\u7684, \u7565\u663e\u8ff7\u832bqwq\\n\\n\u95ee\u4e86ddg, \u5206\u6790\u4e86\u4e00\u4e9b\u4f01\u4e1a\u4fe1\u606f, \u4e5f\u4e0d\u504f, \u5c31\u662f\u5916\u666f\u770b\u7684\u6709\u70b9\u62c9\u80efqwq... \u548c\u6211\u5370\u8c61\u7684\u6df1\u5733\u5b8c\u5168\u4e0d\u6cbe\u8fb9qwq...\\n\\n\u4e0d\u77e5\u9053\u5185\u9970\u5982\u4f55? \u4e0d\u8fc7\u9644\u4ef6\u6709\u5730\u94c1\u7ad9\\n\\n\u603b\u4e4b\u5c31\u662f\u5f88\u7d27\u5f20, \u4e5f\u4e0d\u77e5\u9053\u7b14\u8bd5\u8003\u4ec0\u4e48qwq \u4f30\u8ba1\u4e5f\u4e0d\u80fd\u95ee\u5427\\n\\n\u51c6\u5907\u4e00\u4e2a\u6d41\u7545\u7684\u81ea\u6211\u4ecb\u7ecd, \u7136\u540e\u5e26\u4e2a\u7b14\u7535, \u7ed9\u9762\u8bd5\u5b98\u5c55\u793a\u4e00\u4e0b HXLibs + QT * 2 + \u7b14\u8bb0 + ... \u5427?\\n\\n\u6765\u56de\u8981\u6295\u8d44\u4e0a\u767e\u5143qwq \u5c31\u5f53\u662f\u79ef\u7d2f\u7ecf\u9a8c\u4e86! \u5e73\u5e38\u5fc3! \u4e0d\u8981\u614c! ~~\u4e0d\u8fc7\u4e5f\u6b63\u5408\u6211\u610f?!~~\\n\\n\u8bf4\u5b9e\u8bdd, \u8fc7\u548c\u4e0d\u8fc7\u90fd\u5f88\u8ff7\u832b, \u4f46\u662f\u73b0\u5728\u4e0d\u5e94\u8be5\u8003\u8651\u8fd9\u4e48\u591a, \u7acb\u8db3\u5f53\u4e0b, \u505a\u597d\u81ea\u5df1, \u5e72\u5c31\u5b8c\u4e86!!!\\n\\n> ddg\u8fd8\u8bf4, \u770b\u770b\u80fd\u4e0d\u80fd\u7ea6\u4e00\u4e0b\u9644\u4ef6\u7684, \u5230\u65f6\u5019\u4e00\u8d77\u9762\u4e86!"},{"id":"/2025/05/19/01-\u590d\u4e60\u5feb\u6392\u5e76\u6a21\u7248\u5316","metadata":{"permalink":"/HXLoLi/blog/2025/05/19/01-\u590d\u4e60\u5feb\u6392\u5e76\u6a21\u7248\u5316","editUrl":"https://github.com/HengXin666/HXLoLi/edit/main/blog/2025/05/19/01-\u590d\u4e60\u5feb\u6392\u5e76\u6a21\u7248\u5316.md","source":"@site/blog/2025/05/19/01-\u590d\u4e60\u5feb\u6392\u5e76\u6a21\u7248\u5316.md","title":"\u590d\u4e60\u5feb\u6392\u5e76\u6a21\u7248\u5316","description":"\u590d\u4e60\u5feb\u6392, \u5e76\u4e14\u5b9e\u73b0\u4e86\u652f\u6301\u8c13\u8bcd\u548c\u4ec5\u524d\u5411\u81ea\u589e\u8fed\u4ee3\u5668\u7684\u6a21\u7248\u7684\u5feb\u6392","date":"2025-05-19T23:59:59.000Z","tags":[{"inline":false,"label":"C++","permalink":"/HXLoLi/blog/tags/C++","description":"C++\u5c0f\u77e5\u8bc6"}],"readingTime":3.365,"hasTruncateMarker":true,"authors":[{"name":"Heng_Xin","title":"\u3053\u3053\u304b\u3089\u5148\u306f\u4e00\u65b9\u901a\u884c\u3060!","url":"https://github.com/HengXin666","email":"282000500@qq.com","socials":{"github":"https://github.com/HengXin666","bilibili":"https://space.bilibili.com/478917126"},"imageURL":"https://avatars.githubusercontent.com/u/103022267","key":"Heng_Xin","page":null}],"frontMatter":{"authors":"Heng_Xin","title":"\u590d\u4e60\u5feb\u6392\u5e76\u6a21\u7248\u5316","date":"2025-05-19T23:59:59.000Z","tags":["C++"]},"unlisted":false,"lastUpdatedAt":1747724233000,"lastUpdatedBy":"Heng_Xin_666","prevItem":{"title":"\u8d77\u731b\u4e86, \u5c45\u7136\u6709\u9762\u8bd5\u4e86","permalink":"/HXLoLi/blog/2025/05/24/01-\u6709\u9762\u8bd5\u4e86"},"nextItem":{"title":"\u4eca\u65e5\u8da3\u95fb\uff1a\u5356\u8bfe\u7684\u6765\u5566","permalink":"/HXLoLi/blog/2025/05/16/01-\u4eca\u65e5\u8da3\u95fb\uff1a\u5356\u8bfe\u7684\u6765\u5566"}},"content":"\u590d\u4e60\u5feb\u6392, \u5e76\u4e14\u5b9e\u73b0\u4e86\u652f\u6301\u8c13\u8bcd\u548c\u4ec5\u524d\u5411\u81ea\u589e\u8fed\u4ee3\u5668\u7684\u6a21\u7248\u7684\u5feb\u6392\\n\\n\x3c!-- truncate --\x3e\\n\\n\u672c\u8282\u7684\u539f\u7406: [\u4ea4\u6362\u6392\u5e8f -> \u5feb\u901f\u6392\u5e8f](https://hengxin666.github.io/HXLoLi/docs/%E8%AE%A1%E4%BD%AC%E5%B8%B8%E8%AD%98/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/%E3%80%90%E7%AE%97%E6%B3%95%E3%80%91%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/%E4%BA%A4%E6%8D%A2%E6%8E%92%E5%BA%8F)\\n\\n- \u53cc\u8fb9\u5feb\u6392 (\u4ece `arr[begin]` \u4f5c\u4e3a\u57fa\u51c6)\\n\\n```cpp [z1-\u53cc\u8fb9\u5feb\u6392]\\nstruct Sorter {\\n    void sort(int begin, int end) {\\n        if (begin >= end) {\\n            return;\\n        }\\n        auto l = begin, r = end;\\n        auto t = std::move(arr[l]);\\n        bool runLight = false;\\n        while (l < r) {\\n            if (runLight) {\\n                if (arr[l] > t) {\\n                    std::swap(arr[l], arr[r]);\\n                    runLight ^= 1;\\n                } else {\\n                    ++l;\\n                }\\n            } else {\\n                if (arr[r] < t) {\\n                    std::swap(arr[l], arr[r]);\\n                    runLight ^= 1;\\n                } else {\\n                    --r;\\n                }\\n            }\\n        }\\n        arr[l] = std::move(t);\\n        sort(begin, l - 1);\\n        sort(l + 1, end);\\n    }\\n    std::vector<int>& arr;\\n};\\n```\\n\\n```cpp [z1-\u4f18\u5316\u7684\u53cc\u8fb9\u5feb\u6392]\\nstruct Sorter {\\n    void sort(int begin, int end) {\\n        if (begin >= end) {\\n            return;\\n        }\\n        auto l = begin, r = end;\\n        auto t = std::move(arr[l]);\\n        while (l < r) {\\n            while (l < r && arr[r] >= t) // \u53cd\u4eba\u7c7b\u7684\u4ece r \u5f00\u59cb\\n                --r;\\n            while (l < r && arr[l] <= t) \\n                ++l;\\n            if (l < r)\\n                std::swap(arr[l], arr[r]);\\n        }\\n        std::swap(arr[begin], arr[l]);\\n        sort(begin, l - 1);\\n        sort(l + 1, end);\\n    }\\n    std::vector<int>& arr;\\n};\\n```\\n\\n\u4f46\u662f\u8fd8\u662f\u592a\u590d\u6742\u4e86, \u6709`if else`\u7684\u4e0d\u4f18\u96c5, \u6ca1\u7684, \u53c8\u4e0d\u987a\u773c (`\u4ecer\u5f00\u59cb`)\\n\\n- \u6240\u4ee5\u5199\u4e86\u5355\u8fb9\u5faa\u73af\u7684:\\n\\n```cpp [z2-\u5355\u8fb9\u5feb\u6392]\\nstruct Sorter {\\n    // \u5355\u8fb9\u5faa\u73af\u6cd5, \u4ea4\u6362\u6b21\u6570\u66f4\u5c11, \u4e5f\u66f4\u7b80\u5355\\n    void sort(int begin, int end) {\\n        if (begin >= end) {\\n            return;\\n        }\\n        auto j = begin;\\n        auto& t = arr[j];\\n        for (auto i = begin + 1; i <= end; ++i) {\\n            if (arr[i] < t)\\n                std::swap(arr[++j], arr[i]);\\n        }\\n        std::swap(arr[begin], arr[j]);\\n        sort(begin, j - 1);\\n        sort(j + 1, end);\\n    }\\n    std::vector<int>& arr;\\n};\\n```\\n\\n```cpp [z2-\u652f\u6301\u8fed\u4ee3\u5668]\\ntemplate <typename T>\\nstruct Sorter {\\n    // \u652f\u6301\u8fed\u4ee3\u5668 (\u6b64\u65f6 end \u662f\u5f00\u533a\u95f4, \u56e0\u4e3a end \u4e0d\u80fd\u89e3\u5f15\u7528!)\\n    template <typename It>\\n    void sort(const It begin, const It end) {\\n        if (std::distance(begin, end) <= 1) { // \u6ce8\u610f std::distance \u53ef\u80fd\u662f O(n) \u7684\\n            return;\\n        }\\n        auto j = begin;\\n        auto& t = *j;\\n        for (auto i = begin + 1; i != end; ++i) {\\n            if (*i < t)\\n                std::swap(*++j, *i);\\n        }\\n        std::swap(*begin, *j);\\n        sort(begin, j);\\n        sort(j + 1, end);\\n    }\\n    T& arr;\\n};\\n```\\n\\n```cpp [z2-\u652f\u6301\u8c13\u8bcd\u548c\u4ec5\u524d\u5411\u81ea\u589e\u8fed\u4ee3\u5668]\\nnamespace internal{\\ntemplate <typename T, typename Func>\\nstruct Sorter {\\n    // \u652f\u6301\u8c13\u8bcd \u548c \u751a\u81f3 std::forward_list \u7684 \u4ec5\u524d\u5411\u81ea\u589e\u8fed\u4ee3\u5668\\n    template <typename It>\\n    void sort(const It begin, const It end) {\\n        if (begin == end) {\\n            return;\\n        }\\n        auto j = begin;\\n        auto& t = *j;\\n        for (auto i = [&] { auto res = begin; return ++res; }(); i != end; ++i) {\\n            if (func(*i, t))\\n                std::swap(*++j, *i);\\n        }\\n        std::swap(*begin, *j);\\n        sort(begin, j);\\n        sort(++j, end);\\n    }\\n    T& arr;\\n    const Func& func;\\n};\\n} // namespace internal\\n\\ntemplate <typename T, typename Func>\\nauto sort(T& arr, const Func& func) -> decltype(\\n    arr.begin(), arr.end(),\\n    std::is_same_v<bool, decltype(func(*arr.begin(), *arr.begin()))>, void()\\n) {\\n    internal::Sorter {arr, func}.sort(arr.begin(), arr.end());\\n}\\n\\ntemplate <typename T>\\nauto sort(T& arr) -> decltype(\\n    *arr.begin() < *arr.begin(), void()\\n) {\\n    using Type = std::decay_t<decltype(*arr.begin())>;\\n    internal::Sorter {arr, [](const Type& i, const Type& j) {\\n        return i < j;\\n    }}.sort(arr.begin(), arr.end());\\n}\\n\\n// \u8c03\u7528: (\u4e0a\u9762\u5185\u5bb9\u662f\u5c01\u88c5\u5728hx\u4f5c\u7528\u57df\u7684)\\nint main() {\\n    std::forward_list<int> arr{1, 4, 3, 3, 2, 2, 3};\\n    HX::print::println(arr);\\n    hx::sort(arr, [](int i, int j) {\\n        return i > j;\\n    });\\n    HX::print::println(arr);\\n    hx::sort(arr);\\n    HX::print::println(arr);\\n    return 0;\\n}\\n```"},{"id":"/2025/05/16/01-\u4eca\u65e5\u8da3\u95fb\uff1a\u5356\u8bfe\u7684\u6765\u5566","metadata":{"permalink":"/HXLoLi/blog/2025/05/16/01-\u4eca\u65e5\u8da3\u95fb\uff1a\u5356\u8bfe\u7684\u6765\u5566","editUrl":"https://github.com/HengXin666/HXLoLi/edit/main/blog/2025/05/16/01-\u4eca\u65e5\u8da3\u95fb\uff1a\u5356\u8bfe\u7684\u6765\u5566.md","source":"@site/blog/2025/05/16/01-\u4eca\u65e5\u8da3\u95fb\uff1a\u5356\u8bfe\u7684\u6765\u5566.md","title":"\u4eca\u65e5\u8da3\u95fb\uff1a\u5356\u8bfe\u7684\u6765\u5566","description":"\u597d\u6d88\u606f! \u5feb\u624b\u76f4\u63a5\u52a0\u6211\u5fae\u4fe1\u4e86! \u7ed9\u6211\u53d1\u5b9e\u4e60!","date":"2025-05-16T17:48:20.000Z","tags":[{"inline":false,"label":"\u65e5\u8bb0","permalink":"/HXLoLi/blog/tags/\u65e5\u8bb0","description":"\u305f\u3060\u306e\u65e5\u8a18\u3060 (\u8a08\u753b\u306e\u5b8c\u6210\u72b6\u614b\u3068\u304b\u3053\u3068)"}],"readingTime":5,"hasTruncateMarker":true,"authors":[{"name":"Heng_Xin","title":"\u3053\u3053\u304b\u3089\u5148\u306f\u4e00\u65b9\u901a\u884c\u3060!","url":"https://github.com/HengXin666","email":"282000500@qq.com","socials":{"github":"https://github.com/HengXin666","bilibili":"https://space.bilibili.com/478917126"},"imageURL":"https://avatars.githubusercontent.com/u/103022267","key":"Heng_Xin","page":null}],"frontMatter":{"authors":"Heng_Xin","title":"\u4eca\u65e5\u8da3\u95fb\uff1a\u5356\u8bfe\u7684\u6765\u5566","date":"2025-05-16T17:48:20.000Z","tags":["\u65e5\u8bb0"]},"unlisted":false,"lastUpdatedAt":1747415917000,"lastUpdatedBy":"Heng_Xin_666","prevItem":{"title":"\u590d\u4e60\u5feb\u6392\u5e76\u6a21\u7248\u5316","permalink":"/HXLoLi/blog/2025/05/19/01-\u590d\u4e60\u5feb\u6392\u5e76\u6a21\u7248\u5316"},"nextItem":{"title":"\u7b2c\u4e00\u6b21\u6295\u5b9e\u4e60\u7ecf\u5386","permalink":"/HXLoLi/blog/2025/05/15/01-\u7b2c\u4e00\u6b21\u6295\u5b9e\u4e60\u7ecf\u5386"}},"content":"\u597d\u6d88\u606f! \u5feb\u624b\u76f4\u63a5\u52a0\u6211\u5fae\u4fe1\u4e86! \u7ed9\u6211\u53d1\u5b9e\u4e60!\\n\\n\x3c!-- truncate --\x3e\\n\\n\u7684\u5185\u63a8\u7801...\\n\\n\u4e00\u60ca\u4e00\u4e4d\u7684...\\n\\n\u4e50, \u4eca\u5929\u6211\u4e0b\u5348\u6253\u5f00\u5fae\u4fe1, \u4e00\u4e2a\u81ea\u79f0\u662f\u5feb\u624b\u5b9e\u4e60\u7684 (\u5b9a\u4f4d\u663e\u793a\u5728\u4e0a\u6d77\u6d66\u4e1c\u7684\u8001\u54e5) \u6765\u52a0\u6211\u5fae\u4fe1...\\n\\n\u8bf4\u6211\u4e00\u8868\u4eba\u624d, \u60f3\u5185\u63a8\u6211\u8fdb\u5feb\u624b; \u4f46\u662f\u7b80\u5386\u5f97\u7f8e\u5316, \u63a8\u8350\u6211\u4e2a\u5927\u4f6c...\\n\\n\u6211\u611f\u89c9\u5c31\u4e0d\u5bf9, \u4f46\u662f\u8fd8\u662f\u770b\u770b (\u8bf4\u5b9e\u8bdd\u4e00\u5f00\u59cb\u6211\u8fd8\u633a\u6fc0\u52a8\u7684, \u6bd5\u7adf\u6ca1\u6709\u89c1\u8fc7\u5927\u4e16\u9762qwq)\\n\\n\u52a0\u4e0a\u54e5\u4eec\u5c31\u53bb\u5fd9\u4e86, \u6211\u6293\u7d27\u8c03\u7814\u4ed6\u4eec\u80cc\u666f\\n\\n1. \u8fd9\u4e2a\u5185\u63a8\u7801\u6700\u65e9\u5728 23 \u5e74\u5c31\u6709\u4e86, \u4e5f\u5c31\u662f\u8bf4, \u53ef\u80fd\u662f\u7f51\u4e0a\u5077\u7684\u5047\u5185\u63a8\\n\\n2. \u5176\u6b21, \u4ed6\u4eec\u600e\u4e48\u641e\u5230\u6211\u7684\u4fe1\u606f\u7684?! \u6211\u4e00\u67e5, \u5f88\u591a\u8bf4\u8fd9\u79cd\u5c31\u662f\u5356\u8bfe\u7684\\n\\n\u6240\u4ee5\u6211\u5df2\u7ecf\u5341\u62ff\u4e5d\u7a33\u4e86, \u8ddf\u8fd9\u4e2a\u5356\u8bfe\u7684\u73a9\u73a9\\n\\n\u8fd9\u5bb6\u4f19, \u6700\u641e\u7b11\u7684\u662f\u8bf4\u6211\u7b80\u5386\u7684\u5b66\u5386\u662f\u4e00\u4e2a\u4e0d\u9519\u7684\u4e00\u672c(<-- \u6700\u641e\u7b11\u7684), \u8bf4\u6211\u53ef\u4ee5\u968f\u968f\u4fbf\u4fbf\u627e\u4e2a\u5c0f\u516c\u53f8\u5b9e\u4e60(\u8fd9\u4e2a\u4e0d\u5047).\\n\\n\u7136\u540e\u5c31\u53d1\u4e9b\u77e5\u8bc6\u70b9\u7684\u90a3\u4e9b, \u5b9e\u9645\u4e0a\u90fd\u662f\u5f88\u57fa\u7840\u7684\u7b97\u662f\u516b\u80a1\u7684\u5427...\\n\\n\u6211\u5c31\u8bf4\u6211\u8fd9\u4e9b\u90fd\u719f\u7ec3... \u7136\u540e\u90a3\u5bb6\u4f19\u5c31\u8bf4, \u4f60\u6ef4\u6ca1\u6709\u8fd0\u7528\u6ef4\u5e72\u6d3b...\\n\\n\u6211\u6ca1\u6709\u56de\u590d\u4ed6, \u7136\u540e\u53c8\u7ed3\u5408\u7b80\u5386\u5177\u4f53\u8bf4, \u628a\u6211\u5217\u51fa\u6765\u7684\u6570\u636e\u8bf4\u7684\u53ea\u662f\u5b9e\u9a8c\u6570\u636e, \u516c\u53f8\u8981\u6ef4\u662f\u8fd0\u7528, \u5b9e\u9645\u7684\u7ecf\u9a8c, \u4e0d\u662f\u5b9e\u9a8c (\u8fd9\u4e2a\u662f\u771f, \u4f46\u662f\u6211\u7684\u4e5f\u662f\u771f\u7684)\\n\\n> \u8bf4\u5b9e\u8bdd, \u6211\u5b66\u7684\u65f6\u5019\u90fd\u662f\u4e3a\u4e86\u8fd0\u7528\u53bb\u7684, \u7136\u540e\u4e5f\u4e86\u89e3\u4e00\u4e9b\u5e95\u5c42\u90a3\u4e9b... \u53c8\u4e0d\u662f\u4e0d\u4f1a\u8fd0\u7528 =-=\\n\\n\u7136\u540e\u6211\u5927\u9879\u76ee\u7684\u5c31\u4e0d\u8bf4\u4e86?? \u5c31\u8bf4\u6211Web\u6846\u67b6\u662f\u4e0d\u662f\u770b\u8bfe\u7684\\n\\n\u6211\u8bf4\u57fa\u7840\u662f\u770b\u8bfe\u5b66\u7684 (\u4f60\u544a\u8bc9\u6211, \u4e0d\u770b\u8bfe\u54ea\u91cc\u6709\u6765\u7684\u57fa\u7840?) \u7136\u540e\u540e\u9762\u662f\u6211\u81ea\u5df1\u8bbe\u8ba1\u7684\\n\\n\u7136\u540e\u4ed6\u8bf4\u5927\u90e8\u5206\u4eba\u90fd\u548c\u6211\u4e00\u6837, \u6ca1\u6709\u4ec0\u4e48\u65b9\u5411 =-=\\n\\n\u54e5\u4eec\u8fd9\u4e2a\u53ef\u662f\u6211\u7814\u7a76\u4e86\u5c0f\u5f6d\u8001\u5e08\u7684\u767e\u4e07\u5e76\u53d1\u670d\u52a1\u5668 (\u56e0\u4e3a\u6700\u540e\u7684\u5b9a\u65f6\u6a21\u7248\u8026\u5408\u504f\u7279\u5316+=\u8026\u5408+=\u591a\u53c2\u6570+=\u65e0\u6ce8\u91ca+=\u81ea\u5b9e\u73b0c++23\u7684\u5f02\u5e38\u8fd4\u56de\u503c, \u6839\u672c\u770b\u4e0d\u660e\u767d += io_uring \u7684\u51e0\u4e2aapi\u63cf\u8ff0\u4e0d\u8be6\u7ec6) \u624d\u6362\u81ea\u5df1\u7684\u67b6\u6784\u7684, \u800c\u4e14\u7efc\u5408\u4e86\u5f88\u591a\u6bd4\u5982 \u96c5\u5170\u4ead\u5e93\u7684\u5207\u9762\u6ce8\u5165\u7f16\u7a0b, oat++\u540c\u6b3e\u529f\u80fd\u7684 url\u53c2\u6570\u89e3\u6790 \u7b49\u7b49, \u5168\u662f\u5b9e\u9645\u9879\u76ee\u7684\u9006\u5411\u5b9e\u73b0(\u4ece\u529f\u80fd, \u731c\u5b9e\u73b0, \u81ea\u5df1\u5199)\\n\\n\u6ca1\u5f97\u8bf4\u597d\u5427\\n\\n\u6700\u540e\u8fd9\u4e2a\u54e5\u4eec\u4e0d\u6f14\u4e86, \u8bf4\u6700\u597d\u627e\u4eba\u5e26, \u4ed6\u4eec\u4eba\u633a\u591a\u7684, \u7136\u540e\u5c31\u662fcv\u8bdd\u672f\u4e86\\n\\n\u6211\u95ee\u4e86\u4e00\u4e0bboss\u600e\u4e48\u6c9f\u901a, \u4ed6\u56de\u590d\u7684\u4e5f\u6bd4\u8f83\u4eba\u673a, \u6211\u5c31\u4e0d\u7406\u4e86 =-= \u5220\u4e86\\n\\n\u4f46\u662f\u8fd8\u662f\u6709\u6bd4\u8f83\u597d\u7684\u6536\u83b7\u7684, \u5c31\u662f\u89d2\u5ea6\u5427\\n\\n\u4ed6\u63d0\u5230\u8981\u6709\u89c4\u5212, \u6bd4\u5982\u4e00\u5e74\u540e\u79cb\u62db\u8981\u4e0a\u4ec0\u4e48\u65b9\u5411? \u4ec0\u4e48\u85aa\u8d44?\\n\\n\u6211\u73b0\u5728\u6839\u672c\u5c31\u6ca1\u6709\u601d\u8def\u8fc7\\n\\n\u6bd5\u7adf\u6211\u4e00\u76f4\u8ba4\u4e3a\u6709\u4e2a\u5b9e\u4e60\u5c31\u4e0d\u9519\u4e86... \u4f46\u662f, \u4ed6\u8bf4\u4e5f\u5bf9, \u7136\u540e\u53c8\u662f\u8df3\u677f\u8bf4\u6cd5\\n\\n\u4f46\u662f, \u4e5f\u5f97\u6709\u65b9\u5411, \u4e0d\u80fd\u662f\u6253\u6742xxx (\u6211\u8fdb\u516c\u53f8, \u96be\u9053\u522b\u4eba\u4f5c\u7684, \u4e0d\u80fd\u662f\u6211\u7684\u6210\u679c\u5417? \u6211\u4e0d\u4f1a\u5b66\u5440~)\\n\\n\u603b\u4e4b\u5c31\u662f, \u6709\u70b9\u89c4\u5212\u5427, \u4e0d\u80fd\u5f97\u8fc7\u4e14\u8fc7\\n\\n\u4e5f\u662f, \u76ee\u524d\u6295\u540e\u7aef\u7684, \u671f\u671b\u662f\u6bd4qt\u8001\u54e5\u9ad8\u8d35\u7684? (\u8981\u4e0d\u662f\u6211qt\u7684\u9879\u76ee\u8fd8\u6ca1\u6709\u641e\u5b8c, \u4e0d\u7136\u6211\u4e5f\u5f97\u5199\u4e0a, \u7136\u540e\u5c31\u53ef\u4ee5\u6295qt\u4e86qwq \u767d\u5b66qml\u4e86\u5417\u6211?)\\n\\n\u4ee5\u4e0a.\\n\\n---\\n\\n\u53e6\u5916\u590d\u4e60\u4e86\u4e00\u4e0b c++20\u534f\u7a0b, \u53d1\u73b0\u4e00\u4e2a\u4e0d\u9519\u7684\u6559\u7a0b, \u660e\u5929\u8bb0\u4e00\u4e0b\u7b14\u8bb0\\n\\n\u8fd8\u6709, CRTP, \u4e5f\u5b66\u4e86\u4e00\u4e0b. \u4e0d\u8fc7\u6211\u90a3\u4e2a\u9879\u76ee\u5e94\u8be5\u4e0d\u80fd\u7528crtp\u91cd\u5199, \u56e0\u4e3a\u662f\u771f\u7684\u9700\u8981\u8fd0\u884c\u65f6\u591a\u6001?\\n\\n\u597d\u5427, \u5b9e\u9645\u4e0a\u4e5f\u53ea\u662f http \u4e0e https \u8fd9\u4e24\u79cd\u72b6\u6001, \u4e0d\u4f18\u5316\u4e5f\u884c, \u4f18\u5316\u7684\u8bdd, \u8981\u4e48\u5c31\u662f\u4f7f\u7528\u5b8f\u4f5c\u4e3a\u7f16\u8bd1\u9009\u9879 (\u56e0\u4e3a\u4e00\u822c\u90fd\u662fhttp\u7684)\\n\\n\u8981\u4e0d\u5c31\u662f\u5f88\u591a\u5730\u65b9\u90fd\u8981\u6539\u4e3a CRTP (\u8fd9\u6211\u53ef\u592a\u61d2\u4e86, \u5982\u679c\u771f\u8981\u641e, \u5c31\u8981\u72e0\u72e0\u91cd\u6784\u4e86...)"},{"id":"/2025/05/15/01-\u7b2c\u4e00\u6b21\u6295\u5b9e\u4e60\u7ecf\u5386","metadata":{"permalink":"/HXLoLi/blog/2025/05/15/01-\u7b2c\u4e00\u6b21\u6295\u5b9e\u4e60\u7ecf\u5386","editUrl":"https://github.com/HengXin666/HXLoLi/edit/main/blog/2025/05/15/01-\u7b2c\u4e00\u6b21\u6295\u5b9e\u4e60\u7ecf\u5386.md","source":"@site/blog/2025/05/15/01-\u7b2c\u4e00\u6b21\u6295\u5b9e\u4e60\u7ecf\u5386.md","title":"\u7b2c\u4e00\u6b21\u6295\u5b9e\u4e60\u7ecf\u5386","description":"\u6ca1\u4ec0\u4e48\u597d\u8bf4\u7684, \u53ea\u662f\u5728\u8bd5\u6c34.","date":"2025-05-15T19:55:12.000Z","tags":[{"inline":false,"label":"\u65e5\u8bb0","permalink":"/HXLoLi/blog/tags/\u65e5\u8bb0","description":"\u305f\u3060\u306e\u65e5\u8a18\u3060 (\u8a08\u753b\u306e\u5b8c\u6210\u72b6\u614b\u3068\u304b\u3053\u3068)"}],"readingTime":3.26,"hasTruncateMarker":true,"authors":[{"name":"Heng_Xin","title":"\u3053\u3053\u304b\u3089\u5148\u306f\u4e00\u65b9\u901a\u884c\u3060!","url":"https://github.com/HengXin666","email":"282000500@qq.com","socials":{"github":"https://github.com/HengXin666","bilibili":"https://space.bilibili.com/478917126"},"imageURL":"https://avatars.githubusercontent.com/u/103022267","key":"Heng_Xin","page":null}],"frontMatter":{"authors":"Heng_Xin","title":"\u7b2c\u4e00\u6b21\u6295\u5b9e\u4e60\u7ecf\u5386","date":"2025-05-15T19:55:12.000Z","tags":["\u65e5\u8bb0"]},"unlisted":false,"lastUpdatedAt":1747322034000,"lastUpdatedBy":"Heng_Xin_666","prevItem":{"title":"\u4eca\u65e5\u8da3\u95fb\uff1a\u5356\u8bfe\u7684\u6765\u5566","permalink":"/HXLoLi/blog/2025/05/16/01-\u4eca\u65e5\u8da3\u95fb\uff1a\u5356\u8bfe\u7684\u6765\u5566"},"nextItem":{"title":"\u6700\u8fd1\u7684\u603b\u7ed3","permalink":"/HXLoLi/blog/2025/05/14/01-\u6700\u8fd1\u7684\u603b\u7ed3"}},"content":"\u6ca1\u4ec0\u4e48\u597d\u8bf4\u7684, \u53ea\u662f\u5728\u8bd5\u6c34.\\n\\n\x3c!-- truncate --\x3e\\n\\n## 1. Boss\u76f4\u62db \u60c5\u51b5(\u521d\u6b21\u5c1d\u8bd5)\\n\\n> \u4eca\u5929\u6362\u4e2a\u771f\u4eba\u5934\u50cf\u4e86, \u7136\u540e\u628a\u8003\u8651\u673a\u4f1a\u6539\u4e3a\u6708\u5185\u5230\u5c97! \u611f\u89c9\u597d\u4e9b\\n\\n\u4eca\u5929Boss\u6295\u4e86 \u4e8c\u5341\u6765\u4efd, \u53d1\u73b0\u7684\u89c4\u5f8b\u662f, \u81f3\u5c11\u662f \u5e7f\u4e1c\u7701\u5185\u7684, \u624d\u4f1a\u9e1f\u6211qwq\\n\\n\u5c31\u7b97\u662f\u4f60\u5389\u5bb3, \u4f60\u4e5f\u8981\u8ba9\u522b\u4eba\u770b\u5230\u554a, \u8fde\u89c1\u90fd\u8fd8\u59b9\u5f00\u59cb, \u5c31\u5df2\u7ecf\u7ed3\u675f\u4e86...\\n\\n\u6240\u4ee5, \u8fd8\u662f\u6295\u5e7f\u4e1c\u7701\u5185\u7684\u5427\\n\\n\u5176\u6b21, \u6211\u4e5f\u4e0d\u592a\u6e05\u695a\u600e\u4e48\u804a\u5929...\\n\\n\u611f\u89c9\u6ca1\u6709\u5fc5\u8981\u8d77\u624b\u5c31\u662f `\u60a8\u597d, \u6211\u662fxxx`, tm\u7684\u4e0d\u662f\u6709\u5199\u5417? \u4eba\u5bb6\u53c8\u4e0d\u662f\u6ca1\u6709\u773c\u775b, \u6ca1\u5fc5\u8981\u8bf4\u6211\u662fxxx\\n\\n\u5229\u7528\u597d\u8d77\u624b\u7684\u51e0\u4e2a\u5b57, \u76f4\u63a5\u5f00\u95e8\u89c1\u5c71!\\n\\n\u4eca\u5929\u7684\u5c1d\u8bd5\u5c31\u662f\u8fd9\u6837, \u7136\u540e\u5982\u679c\u5df2\u8bfb\u7684\u8bdd, \u5c31\u76f4\u63a5\u628a\u7b80\u5386\u56fe\u7247\u6254\u8fc7\u53bb...\\n\\n\u7136\u540e\u56fe\u7247\u5df2\u8bfb, \u90a3\u6211\u4e5f\u4e0d\u77e5\u9053\u56de\u590d\u4ec0\u4e48\u4e86, \u611f\u89c9\u4ed6\u4eec\u5c31\u662f\u4eba\u673a, \u5df2\u8bfb\u4e0d\u4f1aBoss...\\n\\n\u4eca\u5929\u6295\u4e86 20 \u5de6\u53f3\u5427\\n\\n\u6536\u83b7\u5982\u4e0b:\\n\\n- 5\u4e2a\u53ef\u4ee5\u53d1\u9001\u51fa\u56fe\u7247 (\u4e00\u7ea7\u5df2\u8bfb), \u7136\u540e\u5c31\u662f\u5df2\u8bfb\u4e0d\u56de\\n\\n- 2\u4f4d\u70ed\u5fc3\u7684\u6709\u56de\u590d, \u90fd\u662f\u5e7f\u5dde\u7684\u516c\u53f8, \u4e00\u4e2a\u662f\u56de\u590d `27\u5c4a\u8fd8\u59b9\u5f00\u59cb\u62db`, \u53e6\u4e00\u4e2a\u662f\u963f\u91cc\u7684, \u8bf4 `\u540c\u5b66\u4f60\u597d\u5440 27\u5c4a\u53ef\u4ee5\u6295\u9012\u65e5\u5e38\u5b9e\u4e60\u751f\u5c97\u4f4d~ https://talent.lingxigames.com/campus/position-list?campusType=dailyInternship`, \u8bf4\u5b9e\u8bdd, \u6211\u90fd\u4e0d\u77e5\u9053\u4e00\u70b9\u7075\u7280\u662f\u963f\u91cc\u7684...\\n\\n\u8bf4\u5b9e\u8bdd, \u5df2\u8bfb\u7387\u8fd8\u662f\u6709\u7684, 30 ~ 40% \u5de6\u53f3\u5427\\n\\n\u574f\u5904\u5c31\u662f\u4ed6\u4eec\u4e0d\u662f\u4e00\u76f4\u5728\u9605\u8bfb, \u5df2\u8bfb\u540e, \u6211\u4e0d\u80fd\u53ca\u65f6\u8865\u4e0a\u7b80\u5386\u56fe\u7247, \u5c31\u4e0d\u77e5\u9053\u600e\u4e48\u6837qwq\\n\\n\u5176\u6b21, \u6211\u4e0d\u77e5\u9053\u600e\u4e48\u548c\u4ed6\u4eec\u804a\u554a, \u600e\u4e48\u5f00\u53e3\u554a? \u6211\u81ea\u5df1\u8be2\u95ee\u5417? \u600e\u4e48\u89c6\u9891\u7684\u53ef\u4ee5\u8fd9\u6837\u554a?\\n\\n## 2. \u725b\u5ba2\\n\\n\u597d\u50cf\u7b80\u5386\u5c31\u662f\u76f4\u63a5\u6295, \u968f\u4fbf\u6295\u4e863\u30014\u4e2a, \u7136\u540e\u7cfb\u7edf\u6709\u4e2a\u63a8\u8350\u7684, \u6211\u4e5f\u76f4\u63a5\u4e00\u952e\u6295 (\u6ca1\u5565\u7528\u597d\u5427)\\n\\n\u7136\u540e, \u611f\u89c9\u8fd9\u8fb9\u7684\u6bd4\u8f83\u597d, 4\u4e2a\u91cc\u97622\u4e2a\u662f\u770b\u4e86\u7b80\u5386\u7684, \u5c31\u662f\u4e0d\u8bf4\u8bdd (\u96be\u9053\u663e\u793a\u67e5\u770b\u4e86\u7b80\u5386\u662f\u5047\u7684?)\\n\\n\u96be\u9053\u8981\u6211\u8be2\u95ee\u5417? qwq\\n\\n\u7136\u540e\u5269\u4e0b\u4e24\u4e2a\u662f\u770b\u90fd\u6ca1\u7a7a, \u76f4\u63a5\u5feb\u6377\u56de\u590d, pass\u4e86\\n\\n## 3. \u667a\u8054\u62db\u8058\\n\\n\u628a\u7b80\u5386\u5199\u4e86\u4e9b\u5427qwq\\n\\n---\\n\\n\u6bd4\u60f3\u8c61\u7684\u6709\u96be\u5ea6, \u96be\u5728\u4e0d\u77e5\u9053\u600e\u4e48\u5f00\u53e3\u5427?\\n\\n\u53e6\u5916\u6211\u518d\u5b66\u4e00\u4e0b\u534f\u7a0b\u5148, \u6709\u70b9\u5fd8\u8bb0\u4e86, \u611f\u89c9\u5305\u95ee\u7684\u554aqwq\\n\\n## 4. \u63a5\u4e0b\u6765\u8ba1\u5212\\n\\n- \u5468\u672b\u628a\u90a3\u4e2a\u5565\u601d\u653f\u4efb\u52a1\u809d\u4e86\\n\\n- \u770b\u5230\u4e86: [C++20 \u7ea6\u675f constraint \u5143\u5bf9\u8c61\u5316: detector \u8bbe\u8ba1\u6a21\u5f0f | purecpp](http://www.purecpp.cn/detail?id=2302) \u4f18\u79c0\u6587\u7ae0, \u5148 @todo, \u65e5\u540e\u518d\u770b\\n\\n\u7136\u540e\u770b\u5230\u4e86: [RTTI](https://zh.cppreference.com/w/cpp/types) -> [CPO meta API: \u7f16\u8bd1\u671f\u6a21\u677f\u53c2\u6570\u591a\u6001 | purecpp](http://www.purecpp.cn/detail?id=2251)"},{"id":"/2025/05/14/01-\u6700\u8fd1\u7684\u603b\u7ed3","metadata":{"permalink":"/HXLoLi/blog/2025/05/14/01-\u6700\u8fd1\u7684\u603b\u7ed3","editUrl":"https://github.com/HengXin666/HXLoLi/edit/main/blog/2025/05/14/01-\u6700\u8fd1\u7684\u603b\u7ed3.md","source":"@site/blog/2025/05/14/01-\u6700\u8fd1\u7684\u603b\u7ed3.md","title":"\u6700\u8fd1\u7684\u603b\u7ed3","description":"\u6700\u8fd1\u7684\u603b\u7ed3, \u56e0\u4e3a\u88ab\u4e0a\u538b\u529b\u4e86...","date":"2025-05-14T22:23:28.000Z","tags":[{"inline":false,"label":"\u65e5\u8bb0","permalink":"/HXLoLi/blog/tags/\u65e5\u8bb0","description":"\u305f\u3060\u306e\u65e5\u8a18\u3060 (\u8a08\u753b\u306e\u5b8c\u6210\u72b6\u614b\u3068\u304b\u3053\u3068)"}],"readingTime":1.485,"hasTruncateMarker":true,"authors":[{"name":"Heng_Xin","title":"\u3053\u3053\u304b\u3089\u5148\u306f\u4e00\u65b9\u901a\u884c\u3060!","url":"https://github.com/HengXin666","email":"282000500@qq.com","socials":{"github":"https://github.com/HengXin666","bilibili":"https://space.bilibili.com/478917126"},"imageURL":"https://avatars.githubusercontent.com/u/103022267","key":"Heng_Xin","page":null}],"frontMatter":{"authors":"Heng_Xin","title":"\u6700\u8fd1\u7684\u603b\u7ed3","date":"2025-05-14T22:23:28.000Z","tags":["\u65e5\u8bb0"]},"unlisted":false,"lastUpdatedAt":1747322034000,"lastUpdatedBy":"Heng_Xin_666","prevItem":{"title":"\u7b2c\u4e00\u6b21\u6295\u5b9e\u4e60\u7ecf\u5386","permalink":"/HXLoLi/blog/2025/05/15/01-\u7b2c\u4e00\u6b21\u6295\u5b9e\u4e60\u7ecf\u5386"},"nextItem":{"title":"\u3010\u8d64\u77f3C++\u3011\u4f7f\u7528\u6a21\u7248\u4e8c\u9636\u6bb5\u540d\u79f0\u67e5\u627e\u89e3\u51b3\u5faa\u73af\u4f9d\u8d56\u95ee\u9898","permalink":"/HXLoLi/blog/2025/05/13/01-C++\u6a21\u7248\u4e8c\u9636\u6bb5\u540d\u79f0\u67e5\u627e"}},"content":"\u6700\u8fd1\u7684\u603b\u7ed3, \u56e0\u4e3a\u88ab\u4e0a\u538b\u529b\u4e86...\\n\\n\x3c!-- truncate --\x3e\\n\\n\u6295\u5b9e\u4e60~\\n\\n\u628a\u4e4b\u524d\u7684\u9879\u76ee\u6574\u7406\u4e00\u4e0b, \u590d\u4e60\u4e00\u4e0b\u534f\u7a0b\u5427?! io_uring \u4e5f\u662f\\n\\n\u600e\u4e48\u6253\u62db\u547c\u554a? \u5c1d\u8bd5\u4e863\u4e2a, \u53ef\u80fd\u662f\u665a\u4e0a? \u751a\u81f3\u90fd\u6ca1\u6709\u5df2\u8bfb...\\n\\n\u660e\u5929\u5148\u628a\u4e8c\u6b21\u5143\u5934\u50cf\u6362\u4e86, \u4ed6\u4eec\u771f\u662f~~\u6709\u773c\u65e0\u73e0~~, \u96be\u9053\u4e0d\u77e5\u9053\u53ef\u7231\u662f\u6280\u672f\u529b\u7684\u8c61\u5f81\u5417 (\u96fe)\\n\\n---\\n\\n\u4e0b\u9762\u662f\u8fd9\u51e0\u5929, \u770b\u4e0a\u538b\u529b\u7684\u603b\u7ed3\\n\\n1. \u6295\u5b9e\u4e60, \u522b\u6015! \u603b\u6709\u4eba\u8981\u7684!\\n\\n2. \u9762\u8bd5\u5b98\u9762\u8bd5\u4f60 == \u5728\u7528\u9762\u8bd5\u5b98\u7684\u65f6\u95f4, \u5e2e\u6211\u81ea\u5df1\u5b66\u4e60!\\n\\n3. \u4e00\u4efd\u6d41\u7545\u7684\u81ea\u6211\u4ecb\u7ecd!\\n\\n- \u95ee\u95ee\u9898\u7684\u6280\u5de7\\n\\n    > \u62ff\u4e00\u4e2a\u9636\u6bb5\u6027\u6210\u679c, \u518d\u95ee.\\n\\n    > \u4f60\u76f4\u63a5\u8bf4\u8fd9\u4e2a\u95ee\u9898\u4f60\u4e0d\u4f1a, \u4eba\u5bb6\u4f1a\u8ba4\u4e3a\u4f60\u662f\u516b\u560e; \u4f46\u662f\u5982\u679c\u4f60\u8bf4\u6211\u5df2\u7ecf\u5c1d\u8bd5\u4e86xxx/yyy/zzz\u4f46\u662f\u8fd8\u662f\u4e0d\u884c, \u8bf7\u95ee\u53ef\u4ee5\u5e2e\u6211\u770b\u770b\u662f\u600e\u4e48\u56de\u4e8b\u5417? \u8fd9\u6837\u522b\u4eba\u5c31\u4f1a\u6bd4\u8f83\u6709\u5174\u8da3: \u600e\u4e48\u4f1a\u4e0d\u884c\u5462?~ \u7136\u540e\u5c31\u6765\u5e2e\u4f60\u89e3\u51b3\u95ee\u9898\u4e86~\\n\\n4. \u505a\u4e8b\u60c5\u8981\u7559\u75d5\u8ff9\\n\\n    > \u5fae\u4fe1\u804a\u5929\u8bb0\u5f55\u7684`\u662f\u7684`\u3001\u90ae\u4ef6\u6284\u9001\u4ec0\u4e48\u7684\\n\\n5. \u4e0d\u8981\u5077\u5077\u4ed8\u51fa! \u8981\u4e0d\u7ecf\u610f\u7684\u8ba9\u522b\u4eba\u77e5\u9053\u4f60\u5728\u5e72\u6d3b! \u800c\u4e0d\u662f\u5077\u5377!\\n\\n---"},{"id":"/2025/05/13/01-C++\u6a21\u7248\u4e8c\u9636\u6bb5\u540d\u79f0\u67e5\u627e","metadata":{"permalink":"/HXLoLi/blog/2025/05/13/01-C++\u6a21\u7248\u4e8c\u9636\u6bb5\u540d\u79f0\u67e5\u627e","editUrl":"https://github.com/HengXin666/HXLoLi/edit/main/blog/2025/05/13/01-C++\u6a21\u7248\u4e8c\u9636\u6bb5\u540d\u79f0\u67e5\u627e.md","source":"@site/blog/2025/05/13/01-C++\u6a21\u7248\u4e8c\u9636\u6bb5\u540d\u79f0\u67e5\u627e.md","title":"\u3010\u8d64\u77f3C++\u3011\u4f7f\u7528\u6a21\u7248\u4e8c\u9636\u6bb5\u540d\u79f0\u67e5\u627e\u89e3\u51b3\u5faa\u73af\u4f9d\u8d56\u95ee\u9898","description":"\u6700\u8fd1\u5728\u77e5\u4e4e\u4e0a\u770b\u5230\u7684, \u53d1\u73b0\u633a\u795e\u5947\u7684, \u5c31\u4ed4\u7ec6\u770b\u770b. \u7a81\u53d1\u5947\u60f3, \u5982\u679c\u662f\u666e\u901a\u7c7b, \u662f\u4e0d\u662f\u53ef\u4ee5\u4f7f\u7528\u51e0\u4e2a\u5b8f, \u5c01\u88c5\u4e00\u4e0b, \u8fd9\u6837\u5c31\u53d8\u6210\u6a21\u7248.","date":"2025-05-13T23:43:51.000Z","tags":[{"inline":false,"label":"C++","permalink":"/HXLoLi/blog/tags/C++","description":"C++\u5c0f\u77e5\u8bc6"}],"readingTime":2.16,"hasTruncateMarker":true,"authors":[{"name":"Heng_Xin","title":"\u3053\u3053\u304b\u3089\u5148\u306f\u4e00\u65b9\u901a\u884c\u3060!","url":"https://github.com/HengXin666","email":"282000500@qq.com","socials":{"github":"https://github.com/HengXin666","bilibili":"https://space.bilibili.com/478917126"},"imageURL":"https://avatars.githubusercontent.com/u/103022267","key":"Heng_Xin","page":null}],"frontMatter":{"authors":"Heng_Xin","title":"\u3010\u8d64\u77f3C++\u3011\u4f7f\u7528\u6a21\u7248\u4e8c\u9636\u6bb5\u540d\u79f0\u67e5\u627e\u89e3\u51b3\u5faa\u73af\u4f9d\u8d56\u95ee\u9898","date":"2025-05-13T23:43:51.000Z","tags":["C++"]},"unlisted":false,"lastUpdatedAt":1747236655000,"lastUpdatedBy":"Heng_Xin_666","prevItem":{"title":"\u6700\u8fd1\u7684\u603b\u7ed3","permalink":"/HXLoLi/blog/2025/05/14/01-\u6700\u8fd1\u7684\u603b\u7ed3"},"nextItem":{"title":"\u529b\u6263Hot100\u901f\u8bb0","permalink":"/HXLoLi/blog/2025/05/10/01-\u529b\u6263Hot100\u901f\u8bb0"}},"content":"\u6700\u8fd1\u5728\u77e5\u4e4e\u4e0a\u770b\u5230\u7684, \u53d1\u73b0\u633a\u795e\u5947\u7684, \u5c31\u4ed4\u7ec6\u770b\u770b. \u7a81\u53d1\u5947\u60f3, \u5982\u679c\u662f\u666e\u901a\u7c7b, \u662f\u4e0d\u662f\u53ef\u4ee5\u4f7f\u7528\u51e0\u4e2a\u5b8f, \u5c01\u88c5\u4e00\u4e0b, \u8fd9\u6837\u5c31\u53d8\u6210\u6a21\u7248.\\n\\n\u8fd9\u6837\u53ef\u4ee5\u4f7f\u7528\u6a21\u7248\u4e8c\u9636\u6bb5\u540d\u79f0\u67e5\u627e, \u4ece\u800c\u89e3\u51b3\u5faa\u73af\u4f9d\u8d56\u95ee\u9898?\\n\\n> [!TIP]\\n> \u672c\u8282\u662f\u8d64\u77f3C++!, \u4e0d\u5efa\u8bae\u5b9e\u9645\u4f7f\u7528!\\n\\n\x3c!-- truncate --\x3e\\n\\n\u54b1\u4eec\u5148\u770b\u770b\u4ec0\u4e48\u662f\u5faa\u73af\u4f9d\u8d56\u5427~\\n\\n\u8003\u8651\u4ee5\u4e0b\u4ee3\u7801, \u6709\u65f6\u5019\u6211\u4eec\u53ef\u80fd\u9700\u8981\u6ce8\u5165\u4e00\u4e2a\u7c7b\u5230\u53e6\u4e00\u4e2a\u7c7b\u5185\u90e8, \u4f46\u662f\u53cc\u65b9\u90fd\u6709\u5176\u5f15\u7528, \u53ef\u4ee5\u76f4\u63a5\u8c03\u7528.\\n\\n> \u4e3a\u4ec0\u4e48\u4f1a\u5199\u8fd9\u79cd\u5783\u573e\u4ee3\u7801? \u56e0\u4e3a\u67b6\u6784\u6ca1\u60f3\u597d\u6216\u8005\u7a81\u7136\u6765\u9700\u6c42, \u7136\u540e\u5176\u4ed6\u53c8\u6ca1\u6cd5\u91cd\u6784\u4e86\u618b...\\n\\n```cpp\\nstruct B;\\n\\nstruct A {\\n    explicit A(B& b)\\n        : _b(b)\\n    {}\\n\\n    void func() {\\n        _b.todo(); // ERROR: Member access into incomplete type \'B\'\\n    }\\n\\n    B& _b;\\n};\\n\\nstruct B {\\n    A& a;\\n\\n    void todo() {}\\n};\\n```\\n\\n\u6b64\u65f6\u6211\u4eec\u53ef\u4ee5\u5957\u4e00\u4e2a\u6a21\u7248:\\n\\n```cpp\\ntemplate <typename T>\\nstruct B;\\n\\ntemplate <typename T = void>\\nstruct A {\\n    static_assert(std::is_same_v<T, void>, \\"error\\"); // \u53ef\u4ee5\u52a0\u4e2a\u8fd9\u4e2a, \u6765\u9650\u5236\u7c7b\u578b~\\n\\n    explicit A(B<T>& b)\\n        : _b(b)\\n    {}\\n\\n    void fun() {\\n        _b.todo(*this); // \u53ef\u4ee5\u4f7f\u7528 _b !\\n    }\\n\\n    B<T>& _b;\\n};\\n\\ntemplate <typename T = void>\\nstruct B {\\n    void todo(A<T>& a) {\\n        static_cast<void>(a._b); // \u6b64\u5904\u53ea\u662f\u6f14\u793a\u771f\u7684\u53ef\u4ee5\u8c03\u7528 a \u7684_b, \\n                                 // \u4e0d\u8f6cvoid\u5728\u6211\u8fd9\u91cc\u5c31\u662f\u8b66\u544a, \u5c31\u662f\u7f16\u8bd1\u9519\u8bef (cmake\u8bbe\u7f6e\u4e86)\\n        HX::print::println(\\"todo: B\\");\\n    }\\n};\\n\\nint main() {\\n    // \u56e0\u4e3a\u6a21\u7248\u9ed8\u8ba4\u53c2\u6570\u7684\u5b58\u5728, \u7528\u6237\u53ef\u80fd\u6839\u672c\u4e0d\u77e5\u9053\u8fd9\u91cc\u6709\u4e2a\u6a21\u7248! \u8fd8\u4ee5\u4e3a\u662f\u666e\u901a\u7c7b\u5462~\\n    B b{};\\n    A a{b};\\n    a.fun();\\n    return 0;\\n}\\n```\\n\\n\u4ee5\u4e0a~, \u5f53\u7136\u4f60\u53ef\u4ee5\u6574\u4e2a\u5b8f, \u4f46\u662f\u5927\u53ef\u4e0d\u5fc5, \u4e5f\u592a\u4e11\u4e86\u5427! \u6709\u8fd9\u4e2a\u65f6\u95f4\u8fd8\u4e0d\u5982\u91cd\u6784\u5462!\\n\\n\u62d3\u5c55\u7684\u3001\u7cfb\u7edf\u5b66\u4e60\u4e00\u4e0b:\\n\\n- [C++\u91cc\u7684Two phase lookup](https://izualzhy.cn/two-phase-lookup)"},{"id":"/2025/05/10/01-\u529b\u6263Hot100\u901f\u8bb0","metadata":{"permalink":"/HXLoLi/blog/2025/05/10/01-\u529b\u6263Hot100\u901f\u8bb0","editUrl":"https://github.com/HengXin666/HXLoLi/edit/main/blog/2025/05/10/01-\u529b\u6263Hot100\u901f\u8bb0.md","source":"@site/blog/2025/05/10/01-\u529b\u6263Hot100\u901f\u8bb0.md","title":"\u529b\u6263Hot100\u901f\u8bb0","description":"\u6700\u8fd1\u6253\u7b97\u628a Hot100 \u7ed9\u5b83\u809d\u4e86, \u4e0d\u8fc7\u53ea\u662f\u6bcf\u65e53\u9898\u7f62\u4e86...","date":"2025-05-10T15:05:03.000Z","tags":[{"inline":false,"label":"\u5237\u9898","permalink":"/HXLoLi/blog/tags/\u5237\u9898","description":"\u5237\u9898\u7684\u4e00\u4e9b\u8bb0\u5f55, \u5927\u90e8\u5206\u5e94\u8be5\u5b58\u653e\u5728\u7b14\u8bb0\u7684; \u4f46\u662f\u5982\u679c\u662f\u8bb0\u5f55\u6027\u8d28\u7684, \u90a3\u4e48\u4f1a\u653e\u5230\u535a\u5ba2~"}],"readingTime":7.585,"hasTruncateMarker":true,"authors":[{"name":"Heng_Xin","title":"\u3053\u3053\u304b\u3089\u5148\u306f\u4e00\u65b9\u901a\u884c\u3060!","url":"https://github.com/HengXin666","email":"282000500@qq.com","socials":{"github":"https://github.com/HengXin666","bilibili":"https://space.bilibili.com/478917126"},"imageURL":"https://avatars.githubusercontent.com/u/103022267","key":"Heng_Xin","page":null}],"frontMatter":{"authors":"Heng_Xin","title":"\u529b\u6263Hot100\u901f\u8bb0","date":"2025-05-10T15:05:03.000Z","tags":["\u5237\u9898"]},"unlisted":false,"lastUpdatedAt":1747236655000,"lastUpdatedBy":"Heng_Xin_666","prevItem":{"title":"\u3010\u8d64\u77f3C++\u3011\u4f7f\u7528\u6a21\u7248\u4e8c\u9636\u6bb5\u540d\u79f0\u67e5\u627e\u89e3\u51b3\u5faa\u73af\u4f9d\u8d56\u95ee\u9898","permalink":"/HXLoLi/blog/2025/05/13/01-C++\u6a21\u7248\u4e8c\u9636\u6bb5\u540d\u79f0\u67e5\u627e"},"nextItem":{"title":"2025-05-09 \u9879\u76ee\u6f14\u793a\u5c0f\u7076\u5206\u4eab","permalink":"/HXLoLi/blog/2025/05/09/01-\u9879\u76ee\u6f14\u793a\u5c0f\u7076"}},"content":"\u6700\u8fd1\u6253\u7b97\u628a Hot100 \u7ed9\u5b83\u809d\u4e86, \u4e0d\u8fc7\u53ea\u662f\u6bcf\u65e53\u9898\u7f62\u4e86...\\n\\n\u6709\u4e9b\u9898\u76ee\u4e8c\u5237\u4e86, \u4e4b\u524d\u4f1a\u7684, \u73b0\u5728\u8fd8\u662f\u5f97\u601d\u8003, \u4f46\u662f\u8fd9\u79cd\u4e1c\u897f, \u4f60\u601d\u8003\u4f60\u5c31\u8f93\u4e86...\\n\\n\u6545\u672c\u535a\u5ba2\u4f1a\u8bb0\u5f55\u9898\u76ee, \u5e76\u4e14\u628a\u9898\u76ee\u7684\u89e3\u6cd5\u603b\u7ed3\u4e3a\u77ed\u77ed\u7684\u51e0\u53e5\u8bdd\u6216\u8005\u56fe\u793a, \u4ee5\u65b9\u4fbf\u6211\u590d\u4e60 =-=\\n\\n> \u957f\u671f\u66f4\u65b0\\n\\n\x3c!-- truncate --\x3e\\n\\n## 1. \u54c8\u5e0c\\n\\n- [1. \u4e24\u6570\u4e4b\u548c](https://leetcode.cn/problems/two-sum/description/)\\n\\n    > \u524d\u7f00\u548c (\u7ef4\u62a4\u53f3\u679a\u4e3e\u5de6), \u79d2\u4e86\\n\\n- [49. \u5b57\u6bcd\u5f02\u4f4d\u8bcd\u5206\u7ec4](https://leetcode.cn/problems/group-anagrams/)\\n\\n    > \u7ed9\u6bcf\u4e00\u4e2a\u5b57\u7b26\u4e32\u6392\u5e8f\u540e\u54c8\u5e0c\u52a0\u5165\u5206\u7ec4, \u7136\u540e\u518dreturn; $O(n \\\\times m \\\\log{m} )$, $m$ \u662f\u5b57\u7b26\u4e32\u957f\u5ea6\\n\\n    > \u8fdb\u9636\u7684\u662f\u4f7f\u7528 `array<int, 26>` \u6765\u8bb0\u5f55\u6570\u5b57\u7136\u540e\u54c8\u5e0c; $O(n m)$\\n\\n    > \u66f4\u5389\u5bb3\u7684\u662f\u4f7f\u7528\u8d28\u6570\u8868\u7136\u540e\u4e58\u6cd5, \u8fd9\u6837\u53ef\u4ee5\u76f4\u63a5\u62ff\u6570\u5b57\u54c8\u5e0c\\n\\n- [128. \u6700\u957f\u8fde\u7eed\u5e8f\u5217](https://leetcode.cn/problems/longest-consecutive-sequence/)\\n  \\n    > \u5728\u672a\u6392\u5e8f\u7684\u6570\u7ec4\u4e2d, $O(n)$ \u627e\u5230\u6700\u957f\u8fde\u7eed\u5e8f\u5217, \u4f7f\u7528\u54c8\u5e0c\u96c6\u5408, \u679a\u4e3e $x$ \u4e0e $x + 1$ \u6765\u4e0d\u65ad next; \u7ef4\u62a4\u6700\u5927\u957f\u5ea6, \u526a\u679d\u5c31\u662f\u5148\u628a\u5168\u90e8\u6570\u5148\u653e\u96c6\u5408, \u4ece\u800c\u53bb\u91cd; \u7136\u540e\u518d\u5224\u65ad $x - 1$ \u662f\u5426\u5728\u96c6\u5408, \u5982\u679c\u5728, \u8bf4\u660e\u4e4b\u524d\u5df2\u7ecf\u679a\u4e3e\u8fc7\u5b83\u4e86, \u4e0d\u4f1a\u6709\u66f4\u957f\u7684, \u53ef\u4ee5\u76f4\u63a5 `continue` \u4e86\\n\\n## 2. \u53cc\u6307\u9488\\n\\n- [283. \u79fb\u52a8\u96f6](https://leetcode.cn/problems/move-zeroes/)\\n\\n    > \u4e00\u4e2a\u6307\u9488\u6307\u5411\u6570\u5b57\u7684\u540e\u4e00\u4e2a\u4f4d\u7f6e, \u548c\u4e00\u4e2a\u4e0d\u65ad\u53d8\u91cf\u7684\u6570\u5b57, \u5982\u679c\u975e0, \u5c31\u548c\u8be5\u6307\u9488\u4ea4\u6362\u4f4d\u7f6e, \u5e76\u4e14\u6307\u9488++;\\n\\n    ```cpp\\n    class Solution {\\n    public:\\n        void moveZeroes(vector<int>& nums) {\\n            int mae = 0;\\n            for (int& x : nums) {\\n                if (x) {\\n                    swap(x, nums[mae]);\\n                    ++mae;\\n                }\\n            }\\n        }\\n    };\\n    ```\\n\\n- [11. \u76db\u6700\u591a\u6c34\u7684\u5bb9\u5668](https://leetcode.cn/problems/container-with-most-water/)\\n\\n    > \u5de6\u53f3\u6307\u9488, \u7ef4\u62a4\u6700\u9ad8\u7684\u67f1\u5b50, \u540c\u65f6\u904d\u5386\u8fc7\u7a0b\u4e2d, \u4e0d\u65ad\u8ba1\u7b97\u5e76\u7ef4\u62a4\u5f53\u524d\u7684\u6c34\u7684\u6700\u5927\u503c; \u79fb\u52a8\u5de6\u53f3\u7684\u4f4e\u7684\u67f1\u5b50\\n\\n- [15. \u4e09\u6570\u4e4b\u548c](https://leetcode.cn/problems/3sum/)\\n\\n    > \u6709\u5f88\u6162\u7684 $O(n^2)$ \u7684\u54c8\u5e0c\u7684\u7ef4\u62a4\u53f3\u679a\u4e3e\u5de6\u7684\u5199\u6cd5.\\n\\n    > \u6b63\u89e3\u5e94\u8be5\u662f\u6392\u5e8f\u540e\u53cc\u6307\u9488\\n\\n    ```cpp\\n    class Solution {\\n        using ll = long long;\\n    public:\\n        vector<vector<int>> threeSum(vector<int>& nums) {\\n            // \u548c\u4e3a 0 \u7684, \u4e0d\u91cd\u590d\u7684 (v1, v2, v3)\\n            int n = nums.size();\\n            vector<vector<int>> res;\\n            ranges::sort(nums); // \u6392\u5e8f\u540e, \u5b9a\u4e00, \u7136\u540e\u5c31\u662f [\u6709\u5e8f\u7248-\u4e24\u6570\u4e4b\u548c]\\n            for (int i = 0; i < n - 2; ++i) {\\n                int v = nums[i];\\n                if (i && v == nums[i - 1]) // \u53bb\u91cd\\n                    continue;\\n                if (v + nums[i + 1] + nums[i + 2] > 0) // \u526a\u679d: \u5f53\u524d + \u6700\u5c0f > 0 => \u4e0d\u53ef\u80fd\u4f1a == 0\\n                    break;\\n                if (v + nums[n - 1] + nums[n - 2] < 0) // \u526a\u679d: \u5f53\u524d + \u6700\u5927 < 0 => \u76ee\u524d\u4e0d\u4f1a == 0\\n                    continue;\\n                int l = i + 1, r = n - 1, tg = -v;\\n                while (l < r) {\\n                    int x = nums[l] + nums[r];\\n                    if (x > tg) {\\n                        --r;\\n                    } else if (x < tg) {\\n                        ++l;\\n                    } else { // ==\\n                        int lv = nums[l], rv = nums[r];\\n                        res.push_back({v, lv, rv});\\n                        while (l < r && lv == nums[l]) // \u53bb\u91cd\\n                            ++l;\\n                        while (l < r && rv == nums[r]) // \u53bb\u91cd\\n                            --r;\\n                    }\\n                }\\n            }\\n            return res;\\n        }\\n    };\\n    ```\\n\\n- [42. \u63a5\u96e8\u6c34](https://leetcode.cn/problems/trapping-rain-water/)\\n\\n    > \u524d\u7f00\u548c + \u540e\u7f00\u548c \u7f62\u4e86 (\u5176\u4e2d\u4e00\u4e2a\u65b9\u6cd5)\\n    >\\n    > ![\u63a5\u96e8\u6c34 ##w500##r10##](PixPin_2025-05-10_16-25-27.png)\\n\\n## 3. \u6ed1\u52a8\u7a97\u53e3\\n\\n- [3. \u65e0\u91cd\u590d\u5b57\u7b26\u7684\u6700\u957f\u5b50\u4e32](https://leetcode.cn/problems/longest-substring-without-repeating-characters/)\\n\\n    > \u54c8\u5e0c\u8868\u8ba1\u6570 + \u6ed1\u7a97 \u5373\u53ef\\n\\n- [438. \u627e\u5230\u5b57\u7b26\u4e32\u4e2d\u6240\u6709\u5b57\u6bcd\u5f02\u4f4d\u8bcd](https://leetcode.cn/problems/find-all-anagrams-in-a-string/)\\n  \\n    > \u54c8\u5e0c\u8868\u8ba1\u6570\u5b57\u6bcd + \u6ed1\u7a97\\n\\n## 4. \u5b50\u4e32\\n\\n- [560. \u548c\u4e3a K \u7684\u5b50\u6570\u7ec4](https://leetcode.cn/problems/subarray-sum-equals-k/)\\n\\n    > \u524d\u7f00\u548c\u4e0a\u7684\u4e24\u6570\u4e4b\u548c (\u53ef\u7ef4\u62a4\u53f3\u679a\u4e3e\u5de6, \u8bb0\u5f97\u5199\u7b49\u5f0f\u63a8: $r - l = k \\\\to l = r - k$, \u5176\u4e2d $l, r$ \u4e3a\u524d\u7f00\u548c\u7684\u503c)\\n\\n- [239. \u6ed1\u52a8\u7a97\u53e3\u6700\u5927\u503c](https://leetcode.cn/problems/sliding-window-maximum/)\\n\\n    > \u5355\u8c03\u53cc\u7aef\u961f\u5217: {\u7ef4\u62a4\u5355\u8c03\u6027 => \u5143\u7d20\u79bb\u5f00\u7a97\u53e3 => \u8bb0\u5f55\u7b54\u6848} for in nums \u5373\u53ef~\\n\\n- [76. \u6700\u5c0f\u8986\u76d6\u5b50\u4e32](https://leetcode.cn/problems/minimum-window-substring/)\\n\\n    > \u54c8\u5e0c\u8ba1\u6570\u5b57\u7b26\u4e2a\u6570 + \u89e6\u53d1\u9608\u503c\u7684\u6ed1\u7a97 (\u5982\u679c\u6ee1\u8db3\u5b57\u7b26\u4e86 => \u624d\u5f00\u59cb\u51cf)\\n\\n    ```cpp\\n    class Solution {\\n    public:\\n        string minWindow(string s, string t) {\\n            auto hash = [](char c) -> int {\\n                return (c & \' \') ? c - \'a\' : c - \'A\' + 26;\\n            };\\n            array<int, 26 + 26> cntS{}, cntT{};\\n            for (char c : t)\\n                ++cntT[hash(c)];\\n            int n = s.size(), isOk = [&]{\\n                int res = 0;\\n                for (int v : cntT)\\n                    res += v > 0;\\n                return res;\\n            }();\\n            int resBegin = 1e9, resLen = 1e9;\\n            for (int i = 0, l = 0; i < n; ++i) {\\n                int idx = hash(s[i]);\\n                if (++cntS[idx] == cntT[idx])\\n                    --isOk;\\n                while (!isOk) {\\n                    int jdx = hash(s[l]);\\n                    if (cntS[jdx]-- == cntT[jdx]) {\\n                        ++isOk;\\n                        if (resBegin == (int)1e9 || i - l + 1 < resLen)\\n                            resBegin = l, resLen = i - l + 1;\\n                    }\\n                    ++l;\\n                }\\n            }\\n            return resBegin == (int)1e9\\n                ? \\"\\"\\n                : s.substr(resBegin, resLen);\\n        }\\n    };\\n    ```\\n\\n## 5. \u666e\u901a\u6570\u7ec4\\n\\n- [53. \u6700\u5927\u5b50\u6570\u7ec4\u548c](https://leetcode.cn/problems/maximum-subarray/)\\n\\n    > \u8d2a\u5fc3/dp: \u5982\u679c\u5c0f\u4e8e0, \u5c31\u4e0d\u9009\u4e86, \u7136\u540e\u7ef4\u62a4\u8fd9\u4e2a\u8fc7\u7a0b\u4e2d\u7684\u6700\u5927\u503c\\n\\n- [56. \u5408\u5e76\u533a\u95f4](https://leetcode.cn/problems/merge-intervals/)\\n\\n    > \u6392\u5e8f\u540e, \u4ece\u5934\u904d\u5386, \u770b\u770b\u662f\u5426\u7b54\u6848\u7684\u53f3\u7aef\u70b9\u662f\u5426 \u5927\u4e8e \u5f53\u524d\u7684\u5de6\u7aef\u70b9, \u5982\u679c\u662f\u5219 \u66f4\u65b0\u5f53\u524d\u7b54\u6848\u7684\u53f3\u7aef\u70b9\u7684\u6700\u5927\u503c, \u5982\u679c\u5426, \u5219\u7b54\u6848\u65b0\u589e\u4e00\u4e2a\u533a\u95f4\\n\\n- [189. \u8f6e\u8f6c\u6570\u7ec4](https://leetcode.cn/problems/rotate-array/)\\n\\n    > \u5982\u679c\u4e0d\u60f3\u989d\u5916\u7a7a\u95f4, \u90a3\u4e48\u5c31\u4e0a\u7ed3\u8bba\u5427: \u7b54\u6848 = \u53cd\u8f6c\u6574\u4e2a\u6570\u7ec4 + \u53cd\u8f6c [0, k) + \u53cd\u8f6c [k, n)\\n    >\\n    > @todo: \u6709\u7a7a\u628a\u63a8\u5bfc\u6df1\u5165\u770b\u770b, \u6211\u7528\u7684\u662f\u4ea4\u6362\u6cd5, \u6709\u70b9\u96be\u8c03, \u53d1\u73b0\u7b54\u6848\u662f gcd(k, n) \u8f6e\u4ea4\u6362... \u4e0d\u662f\u540c\u4e00\u4e2a\u7b97\u6cd5\u5427~\\n\\n- [238. \u9664\u81ea\u8eab\u4ee5\u5916\u6570\u7ec4\u7684\u4e58\u79ef](https://leetcode.cn/problems/product-of-array-except-self/)\\n\\n    > \u8fd4\u56de\u7684\u6570\u7ec4\u505a\u540e\u7f00\u79ef, \u7136\u540e\u987a\u5e8f\u518d\u4e00\u6b21\u524d\u7f00\u79ef\u5373\u53ef\\n\\n- [41. \u7f3a\u5931\u7684\u7b2c\u4e00\u4e2a\u6b63\u6570](https://leetcode.cn/problems/first-missing-positive/)\\n\\n    > $O(n)$ \u6362\u5ea7\u4f4d: \u5047\u8bbe [1, n] \u90fd\u5728\u81ea\u5df1\u5ea7\u4f4d\u4e0a, \u5982\u679c nums[i] \u4e0d\u5728 i + 1 \u4e0a, \u8bf4\u660e\u4f4d\u7f6e\u4e0d\u5bf9, \u7ed9\u5979\u6362\u4e86:\\n\\n    ```cpp\\n    class Solution {\\n    public:\\n        int firstMissingPositive(vector<int>& nums) {\\n            int n = nums.size();\\n            for (int i = 0; i < n; ++i) {\\n                // \u5728 [1, n] \u5185\\n                // nums[i] - 1 \u662f\u56e0\u4e3a\u7d22\u5f15\u4ece 0 \u5f00\u59cb\\n                // nums[nums[i] - 1] == nums[i]\\n                // \u7684\u524d\u63d0\u662f nums[i] = i + 1\\n                while (nums[i] >= 1 \\n                    && nums[i] <= n \\n                    && nums[nums[i] - 1] != nums[i]\\n                ) {\\n                    // \u4ea4\u6362: \u628a\u8fd9\u91cc\u7684\u6362\u8fc7\u53bb, \u90a3\u91cc\u7684\u4e5f\u6362\u8fc7\u6765\\n                    swap(nums[i], nums[nums[i] - 1]);\\n                }\\n            }\\n            for (int i = 0; i < n; ++i) // \u6700\u7ec8\u5224\u65ad\u7b2c\u4e00\u6b21 nums[i] != i + 1 \u7684\\n                if (nums[i] != i + 1)   // \u5c31\u662f\u7f3a\u5c11 i + 1 \u53f7\u540c\u5b66\\n                    return i + 1;\\n            return n + 1;               // \u5426\u5219\u5c31\u662f\u90fd\u6709; \u7f3a n + 1\\n        }\\n    };\\n    ```\\n\\n## 6. \u77e9\u9635\\n\\n- [73. \u77e9\u9635\u7f6e\u96f6](https://leetcode.cn/problems/set-matrix-zeroes/)\\n\\n    > \u628a\u7b2c\u4e00\u884c\u548c\u7b2c\u4e00\u5217\u4f5c\u4e3a\u6807\u5fd7\u4f4d, \u518d\u53e6\u5916\u4f7f\u7528\u4e24\u4e2a\u53d8\u91cf\u6807\u8bb0\u7b2c\u4e00\u884c\u3001\u5217\u672c\u8eab\u662f\u5426\u67090\u5373\u53ef"},{"id":"/2025/05/09/01-\u9879\u76ee\u6f14\u793a\u5c0f\u7076","metadata":{"permalink":"/HXLoLi/blog/2025/05/09/01-\u9879\u76ee\u6f14\u793a\u5c0f\u7076","editUrl":"https://github.com/HengXin666/HXLoLi/edit/main/blog/2025/05/09/01-\u9879\u76ee\u6f14\u793a\u5c0f\u7076.md","source":"@site/blog/2025/05/09/01-\u9879\u76ee\u6f14\u793a\u5c0f\u7076.md","title":"2025-05-09 \u9879\u76ee\u6f14\u793a\u5c0f\u7076\u5206\u4eab","description":"\u548c\u540c\u5b66\u4eec\u7684\u4e00\u4e9b\u5206\u4eab, \u6f14\u793a\u4e00\u4e9b\u840c\u65b0\u53ef\u4ee5\u505a\u7684\u3001\u7b80\u5355\u7684java\u9879\u76ee, \u4e0e\u7b80\u5355\u7684\u6280\u672f\u4ecb\u7ecd.","date":"2025-05-09T14:01:29.000Z","tags":[{"inline":false,"label":"\u5206\u4eab","permalink":"/HXLoLi/blog/tags/\u5206\u4eab","description":"\u4e00\u4e9b\u4e2a\u4eba\u89c1\u89e3\u7684\u5206\u4eab~"}],"readingTime":17.26,"hasTruncateMarker":true,"authors":[{"name":"Heng_Xin","title":"\u3053\u3053\u304b\u3089\u5148\u306f\u4e00\u65b9\u901a\u884c\u3060!","url":"https://github.com/HengXin666","email":"282000500@qq.com","socials":{"github":"https://github.com/HengXin666","bilibili":"https://space.bilibili.com/478917126"},"imageURL":"https://avatars.githubusercontent.com/u/103022267","key":"Heng_Xin","page":null}],"frontMatter":{"authors":"Heng_Xin","title":"2025-05-09 \u9879\u76ee\u6f14\u793a\u5c0f\u7076\u5206\u4eab","date":"2025-05-09T14:01:29.000Z","tags":["\u5206\u4eab"]},"unlisted":false,"lastUpdatedAt":1746800971000,"lastUpdatedBy":"Heng_Xin_666","prevItem":{"title":"\u529b\u6263Hot100\u901f\u8bb0","permalink":"/HXLoLi/blog/2025/05/10/01-\u529b\u6263Hot100\u901f\u8bb0"},"nextItem":{"title":"2025-05-07 \u5c0f\u7076\u5206\u4eab","permalink":"/HXLoLi/blog/2025/05/07/001-\u5c0f\u7076\u5206\u4eab"}},"content":"\u548c\u540c\u5b66\u4eec\u7684\u4e00\u4e9b\u5206\u4eab, \u6f14\u793a\u4e00\u4e9b\u840c\u65b0\u53ef\u4ee5\u505a\u7684\u3001\u7b80\u5355\u7684java\u9879\u76ee, \u4e0e\u7b80\u5355\u7684\u6280\u672f\u4ecb\u7ecd.\\n\\n\x3c!-- truncate --\x3e\\n\\n<details>\\n<summary>\u8003\u52e4</summary>\\n\\n> <h2 style=\\"color:red\\">\u7ec4\u957f\u8003\u52e4, \u7ed3\u675f\u540e\u628a\u53c2\u4f1a\u540d\u5355\u79c1\u53d1\u5c0f\u5b66\u957f (\u4eca\u665a12\u70b9\u524d)</h2>\\n> \u683c\u5f0f: xxx\u5c0f\u7ec4, \u5b9e\u9645\u5230\u573a\u4eba\u6570/\u603b\u4eba\u6570 | (\u5b66\u957f\u9700\u8981\u7edf\u8ba1, \u4ee5\u8bc4\u4f30\u79ef\u6781\u6027)\\n\\n- [x] \u8bb0\u5f97\u5f55\u5c4f\\n\\n> [!WARNING]\\n> B\u7ad9\u76f4\u64ad\u6709 5 ~ 10 \u79d2\u7684\u5ef6\u8fdf, \u5404\u4f4d\u89c1\u8c05\u4e00\u4e0b\u54c8, \u6211\u4e5f\u6ca1\u6709\u529e\u6cd5.\\n>\\n> \u820d\u53cb\u8fd9\u8fb9\u53ef\u80fd\u4f1a\u6709\u70b9\u5435, \u5404\u4f4d\u51d1\u5408\u4e00\u4e0b~\\n\\n<div style=\\"margin-top: 200px;\\" />\\n\\n</details>\\n\\n## 1. \u5c0f\u7ec4\u4e8b\u9879\u63d0\u9192\\n### 1.1 \u7edf\u8ba1\u5230\u573a\u4eba\u6570\\n\\n\u8bf7`\u7ec4\u957f`\u7edf\u8ba1\u6bcf\u4e2a\u5c0f\u7ec4\u5230\u573a\u4eba\u6570, \u7136\u540e\u79c1\u53d1\u7ed9`\u6211`.\\n\\n\u683c\u5f0f: xxx\u7ec4\u5168\u9f50 / yyy\u6ca1\u6709\u5230(\u7f3a\u52e4/\u8054\u7cfb\u4e0d\u4e0a) / zzz\u56e0\u4e3axyz\u8bf7\u5047\\n\\n### 1.2 \u7b2c\u4e00\u6b21\u9879\u76ee\u7684\u8bf4\u660e\\n\\n\u7b2c\u4e00\u6b21\u9879\u76ee\u4ee5 **\u719f\u6089\u6d41\u7a0b** \u4e3a\u4e3b\\n- \u4e0d\u8981\u505a\u96be\u5ea6\u9ad8\u7684\u9879\u76ee \u800c\u662f\u5c3d\u91cf\u591a\u7684\u7ec4\u5458\u53c2\u4e0e\u5230\u56e2\u961f\u9879\u76ee\u4e2d\\n\\n> \u901a\u5e38\u96be\u5ea6\u9ad8\u7684\u9879\u76ee, \u4f1a\u5bfc\u81f4\u90e8\u5206\u7ec4\u5458\u6ca1\u6cd5\u53c2\u4e0e\u5f00\u53d1!\\n\\n### 1.3 \u5ba1\u6838\u9898\\n\\n> \u5b8c\u6210\u4eba\u6570\u4e0d\u52302\u4eba\u7684 \u53ea\u80fd\u505a\u4e00\u661f\u96be\u5ea6\u9879\u76ee\\n> \\n> \u5b8c\u6210\u4eba\u6570\u4e0d\u5230\u4e00\u534a\u7684 \u53ea\u80fd\u505a\u4e00, \u4e8c\u661f\u96be\u5ea6\u9879\u76ee\\n\\n- \u72ec\u7acb\u5b8c\u6210!\\n\\n- \u5bf90\u57fa\u7840\u540c\u5b66\u6709\u4e00\u5b9a\u96be\u5ea6!\\n\\n- \u8bc4\u4f30\u5c0f\u7ec4\u662f\u5426\u53ef\u4ee5\u505a\u9ad8\u96be\u5ea6\u9879\u76ee\u7684\u624b\u6bb5!\\n\\n> [!TIP]\\n> \u4e0d\u662f\u5fc5\u987b\u5b8c\u6210\u7684, \u53ea\u662f\u8bc4\u4f30\u624b\u6bb5.\\n\\n#### 1.3.1 \u9879\u76ee\u96be\u5ea6\u5ba1\u6838\u9898\u5224\u5206\u6807\u51c6\\n\\n\u5ba1\u6838\u6807\u51c6:\\n1. \u5168\u5c40\u53d8\u91cf/\u9759\u6001\u53d8\u91cf(\u53d8\u91cf\u7c7b\u578b/\u53d8\u91cf\u540d) <span style=\\"color:red\\">\u4e0d\u5141\u8bb8\u4fee\u6539</span>\\n2. \u51fd\u6570\u58f0\u660e(\u53c2\u6570, \u8fd4\u56de\u503c, \u51fd\u6570\u540d\u6b21) <span style=\\"color:red\\">\u4e0d\u5141\u8bb8\u4fee\u6539</span>\\n3. \u51fd\u6570\u7684 **\u4ee3\u7801\u5b9e\u73b0\u903b\u8f91** \u548c **\u529f\u80fd\u63cf\u8ff0** \u8981\u80fd`\u5bf9\u5e94`\u4e0a, \u786e\u4fdd **\u4ee3\u7801\u8d28\u91cf** \u548c **\u53ef\u8bfb\u6027**!\\n\\n- \u9664\u4e86\u6280\u672f\u5b98\u4ee5\u5916\u7684\u540c\u5b66, \u4e0d\u8981\u6c42\u5b9e\u73b0`isWin`\u548c`gameView`\\n- \u6280\u672f\u5b98\u9700\u8981\u53e6\u5916\u63d0\u4ea4\u8fd0\u884c\u622a\u56fe(\u5927\u4e8e\u7b49\u4e8e5\u9897\u843d\u5b50\u7684\u622a\u56fe + \u80dc\u5229\u754c\u9762\u622a\u56fe)\\n\\n#### 1.3.2 \u9879\u76ee\u96be\u5ea6\u5ba1\u6838\u9898\u63d0\u4ea4\u65f6\u95f4\\n\\n14\u53f7, \u4e2d\u534812\u70b9\u524d, \u7ec4\u957f\u628a\u4e94\u5b50\u68cb\u4ee3\u7801 \u6309\u7167\u683c\u5f0f\u6536\u9f50; \\n\\n> [!TIP]\\n> (\u5982\u679c\u53ef\u4ee5, \u53ef\u4ee5\u5148\u5728 `13\u53f7\u4e2d\u5348` \u6536\u9f50\u4e00\u6b21, \u63d0\u4ea4\u4e0a\u6765, \u6211\u5148\u5ba1\u6838. \u5982\u679c\u4e00\u6b21\u4e0d\u8fc7\u5173, \u90a3\u4e48\u662f\u53ef\u4ee5\u4fee\u6539\u7684)\\n\\n> [!WARNING]\\n> \u7ec4\u957f\u8981\u628a\u5173`\u6253\u5305\u7684\u683c\u5f0f`\\n\\n> <span style=\\"color:red\\">\u7ec4\u957f\u72e0\u72e0\u7684\u8ddf\u8fdb\u5440!</span> \u6ca1\u6709\u4ec0\u4e48\u65f6\u95f4\u4e86 \\n\\n#### 1.3.3 \u8003\u6838\u9898\u6613\u9519\u70b9: \u9012\u5f52\u8c03\u7528\\n\\n\u56e0\u4e3a\u4e0a\u7ea7\u5bf9\u8fd9\u4e2a\u9519\u8bef\u7684\u8bc4\u5224\u7565\u663e\u66a7\u6627, \u6211\u4e5f\u4e0d\u77e5\u9053\u5bf9\u4e0d\u5bf9, \u4f46\u662f\u6211\u770b\u7684\u4e0d\u723d, \u90a3\u5e94\u8be5\u5c31\u662f\u4e0d\u5bf9. (\u4e0a\u73ed\u8fd9\u6837\u5199, \u53ef\u4ee5\u9a6c\u4e0a\u4e0b\u73ed\u4e86! \u6c38\u4e45)\\n\\n```java [j2-\u9012\u5f52\u8c03\u7528\u793a\u4f8b]\\n// \u4ee5\u4e0b\u6709\u90e8\u5206\u662f\u4f2a\u4ee3\u7801!, \u547d\u540d\u6211\u4e5f\u7528\u4e2d\u6587\u597d\u4e86!\\npublic class Game {\\n    public static void \u83dc\u5355() {\\n        while (true) {\\n            switch (\u7528\u6237\u8f93\u5165) {\\n                case \'1\':\\n                    \u5f00\u59cb\u6e38\u620f();\\n                    break;\\n                case \'2\':\\n                    // \u6253\u5370\u656c\u8bf7\u671f\u5f85\\n                    \u83dc\u5355(); // \u8fd4\u56de\u83dc\u5355\\n                    break;\\n                // ...\\n            }\\n        }\\n    }\\n\\n    public static void \u5f00\u59cb\u6e38\u620f() {\\n        \u521d\u59cb\u5316();\\n        while (true) {\\n            \u6253\u5370\u5730\u56fe();\\n            \u7528\u6237\u8f93\u5165();\\n            if (\u662f\u5426\u6e38\u620f\u7ed3\u675f()) {\\n                \u6253\u5370\u80dc\u5229\u754c\u9762();\\n                break;\\n            }\\n        }\\n    }\\n\\n    public static void \u6253\u5370\u80dc\u5229\u754c\u9762() {\\n        // printf ... \u6253\u5370\\n        \u7528\u6237\u6309\u4efb\u610f\u952e\u7ee7\u7eed();\\n        // \u8fd4\u56de\u83dc\u5355\\n        \u83dc\u5355();\\n    }\\n}\\n```\\n\\n```java [j2-\u4fee\u590d\u516b\u560e]\\n// \u4ee5\u4e0b\u6709\u90e8\u5206\u662f\u4f2a\u4ee3\u7801!, \u547d\u540d\u6211\u4e5f\u7528\u4e2d\u6587\u597d\u4e86!\\npublic class Game {\\n    public static void \u83dc\u5355() {\\n        while (true) {\\n            switch (\u7528\u6237\u8f93\u5165) {\\n                case \'1\':\\n                    \u5f00\u59cb\u6e38\u620f();\\n                    break;\\n                case \'2\':\\n                    // \u6253\u5370\u656c\u8bf7\u671f\u5f85\\n                    break; // \u8fd4\u56de\u83dc\u5355\\n                // ...\\n            }\\n        }\\n    }\\n\\n    public static void \u5f00\u59cb\u6e38\u620f() {\\n        \u521d\u59cb\u5316();\\n        while (true) {\\n            \u6253\u5370\u5730\u56fe();\\n            \u7528\u6237\u8f93\u5165();\\n            if (\u662f\u5426\u6e38\u620f\u7ed3\u675f()) {\\n                \u6253\u5370\u80dc\u5229\u754c\u9762();\\n                break;\\n            }\\n        }\\n    }\\n\\n    public static void \u6253\u5370\u80dc\u5229\u754c\u9762() {\\n        // printf ... \u6253\u5370\\n        \u7528\u6237\u6309\u4efb\u610f\u952e\u7ee7\u7eed();\\n        // \u8fd4\u56de\u83dc\u5355\\n        return; // !!!\\n    }\\n}\\n```\\n\\n### 1.4 \u4e00\u4e9b\u622a\u6b62\u65f6\u95f4\u63d0\u9192\\n\\n- \u6700\u4f4e\u8fdb\u5ea6\u8981\u6c42\u7684\u622a\u6b62\u65f6\u95f4 (\u53c2\u8003\u662f: \u8003\u9898\u63d0\u4ea4\u4e4b\u524d, \u4f46\u6700\u665a\u662f: \u9879\u76ee\u542f\u52a8\u4e4b\u524d)\\n\\n- \u989d\u5916\u6280\u672f/\u9879\u76ee\u542f\u52a8\u7684\u65f6\u95f4\u7b49\u7b49; gui: swing, \u6570\u636e\u6301\u4e45: i/o\u6d41\u3001mysql (\u5fc5\u987b\u5f97\u5728 `\u7b2c\u4e8c\u6b21\u5c0f\u7ec4\u4f1a\u8bae` \u4e0a, \u5168\u5458\u786e\u8ba4\u4e86, \u5e76\u4e14\u5b8c\u6210\u4e86\u5bf9\u5e94\u7684\u8003\u6838\u9898\u624d\u884c. \u5982\u679c\u662f\u9879\u76ee\u5f00\u59cb\u540e\u624d\u6253\u7b97\u8fb9\u5b66\u8fb9\u505a, \u5c31\u7edd\u5bf9\u4e0d\u88ab\u5141\u8bb8\u7684!!!)\\n\\n> [!NOTE]\\n> \u50cf\u97f3\u4e50\u64ad\u653e\u3001\u5f69\u8272\u5b57\u4f53\u8fd9\u79cd, \u662f\u53ef\u4ee5\u4e34\u65f6\u5b66\u4f1a\u7684, \u4f46\u6700\u597d\u90fd\u5b89\u6392\u4e00\u4e0b~\\n\\n### 1.5 \u7b2c\u4e8c\u6b21\u5c0f\u7ec4\u4f1a\u8bae\\n\\n\u8fd9\u4e9b\u662f\u7ec4\u957f\u5728`\u7b2c\u4e8c\u6b21\u5c0f\u7ec4\u4f1a\u8bae`\u4f1a\u8bae\u8981\u8bf4\u7684, \u8fd9\u91cc\u4e0d\u788e\u788e\u5ff5\u4e86..\\n\\n```markdown [vscode]\\n1. \u5c0f\u7ec4\u4f1a\u8bae: \u9879\u76ee\u524d\u51c6\u5907\\n\u5185\u5bb9:\\n    1. \u9879\u76ee\u7684\u5f00\u53d1\u6d41\u7a0b: \\n        \u7acb\u9879 \u8bbe\u8ba1 \u67b6\u6784 \u5206\u5de5 \u6d4b\u8bd5 \u7b54\u8fa9\\n    \\n    2. \u5b66\u4e60\u8fdb\u5ea6\u7edf\u8ba1: \\n        \u7edf\u8ba1\u6bcf\u4e2a\u7ec4\u5458\u7684\u5b66\u4e60\u8fdb\u5ea6\\n    \\n    3. \u989d\u5916\u6280\u672f\u5b89\u6392:\\n        1. \u7ec4\u957f\u5f97\u8bb2\u4e00\u904d\u5bf9\u5e94\u7684\u754c\u9762\u6280\u672f\\n        \\n        2. \u5b89\u6392\u989d\u5916\u6280\u672f\\n            c/c++ \u5c0f\u7ec4\u5185\u8981\u5b89\u6392\u5b66\u4e60\u63a7\u5236\u53f0\u64cd\u4f5c\u6216easyx\\n            \u5177\u4f53\u7684\u5185\u5bb9:\u5b66\u4ec0\u4e48\\n            \u8d1f\u8d23\u4eba: \u54ea\u4e9b\u4eba\u5b66\\n            \u622a\u6b62\u65f6\u95f4: \u6700\u597d\u662f\u3010\u9879\u76ee\u542f\u52a8\u3011\u4e4b\u524d\u5b8c\u6210\\n            \u63d0\u4ea4\u65b9\u5f0f: \u901a\u5e38\u662f\u5b8c\u6210\u67d0\u9053\u9898\u76ee\\n        \\n    4. \u7acb\u9879\u51c6\u5907:\\n        \u5c0f\u7ec4\u5185 \u6bcf\u4e2a\u7ec4\u5458\u53ef\u4ee5\u5f00\u59cb\u51c6\u5907\u81ea\u5df1\u7684\u9879\u76ee\u60f3\u6cd5\\n        \u5728\u540e\u9762\u9879\u76ee\u542f\u52a8\u65f6 \u8981\u5f00\u4f1a\u8ba8\u8bba\u5b9a\u4e0b\u6765\u505a\u4ec0\u4e48\u9879\u76ee\\n        \u9879\u76ee\u60f3\u6cd5: \u4e0d\u8981\u53ea\u662f\u4e00\u4e2a\u540d\u5b57 \u6700\u597d\u8be6\u7ec6\u4e00\u4e9b\\n            \u6bd4\u5982\u540d\u6b21/\u6838\u5fc3\u529f\u80fd/\u62d3\u5c55\u60f3\u6cd5/\u53c2\u8003\u89c6\u9891\u94fe\u63a5\\n    \\n    5. \u65f6\u95f4\u63d0\u9192:\\n        \u9879\u76ee\u671f\u95f4:\\n            \u7ec4\u5458: \u5b8c\u6210\u6bcf\u5929\u5206\u914d\u7684\u4efb\u52a1\\n                \u8bbe\u8ba1\u9636\u6bb5: \u6bcf\u5929\u4e00\u5c0f\u65f6 + \u5c0f\u7ec4\u4f1a\u8bae\u53c2\u4e0e\\n                \u5f00\u53d1\u9636\u6bb5: \u6bcf\u5929\u4e24\u5c0f\u65f6 + \u5c0f\u7ec4\u4f1a\u8bae\u53c2\u4e0e\\n            \\n            \u6ce8\u610f:\\n                \u4ea7\u54c1\u7ecf\u7406/\u6280\u672f\u5b98 \u5728\u9879\u76ee\u8bbe\u8ba1\u9636\u6bb5/\u9879\u76ee\u5f00\u53d1\u9636\u6bb5 \u4e0d\u5141\u8bb8\u5c0f\u7ec4\u4f1a\u8bae\u8bf7\u5047\\n        \\n\\n=== \u7b2c\u4e8c\u6b21\u5c0f\u7ec4\u4f1a\u8bae ===\\n\\n- \u53c2\u4f1a\u60c5\u51b5\\n\\n- \u9879\u76ee\u5f00\u53d1\u6d41\u7a0b\u4ecb\u7ecd\\n\\t- \u6574\u4f53\u9879\u76ee\u6d41\u7a0b (\u7acb\u9879~\u7b54\u8fa9)\\n\\t- \u9879\u76ee\u65f6\u95f4\u5b89\u6392\\n\\n- \u5b66\u4e60\u8fdb\u5ea6\u7edf\u8ba1 [\u7cbe\u786e\u5230\u4eba\u540d, \u53ea\u9700\u8981\u586b\u5199\u4e0b\u9762\u6570\u5b57!!!]\\n\\t1: \u6570\u636e\u7c7b\u578b, \u8fd0\u7b97\u7b26\u53ca\u4e4b\u524d\\n\\t2. if, switch\u90e8\u5206\\n\\t3. for while\u90e8\u5206\\n\\t4. \u6570\u7ec4\\n\\t5. C/C++: \u51fd\u6570\u6216\u6307\u9488\u8fbe\u5230\u5176\u4e00 | Java: \u65b9\u6cd5\\n\\t6. C/C++: \u8fbe\u5230\u6700\u4f4e\u8fdb\u5ea6\u8981\u6c42 | Java: \u9762\u5411\u5bf9\u8c61\u5b66\u4e60\u4e2d\\n\\t7: Java\u8fbe\u5230\u6700\u4f4e\u8fdb\u5ea6\u8981\u6c42\\n\\n    \u793a\u4f8b: \\n        \u5f20\u4e09: 7\\n        \u8001\u516b: 6\\n\\n- \u989d\u5916\u6280\u672f\u8bb2\u89e3\\n\\t- \u8bb2\u89e3\u989d\u5916\u6280\u672f(\u754c\u9762, \u6570\u636e\u6301\u4e45)\\n\\t- \u662f\u5426\u5b89\u6392\u989d\u5916\u77e5\u8bc6\u70b9\u5b66\u4e60\u4efb\u52a1\\n\\t\\t- \u4eba\u6570: \u6280\u672f\u70b9\\n\\t\\t- \u4eba\u6570: \u6280\u672f\u70b9\\n\\t\\t\\t> \u4f8b:   5:EasyX\\n\\t\\t\\t>       2:\u6587\u4ef6\u6d41\\n\\t- \u622a\u6b62\u65f6\u95f4\\n\\n- \u5176\u4ed6:\\n\\t- \u7acb\u9879\u8ba8\u8bba\\n\\t- \u65f6\u95f4\u5b89\u6392\u7684\u63d0\u524d\u8bf4\u660e\\n\\n=====================================\\n```\\n\\n\\n<div style=\\"margin-top: 80px;\\" />\\n\\n## 2. \u9879\u76ee\u6f14\u793a\u8bb2\u89e3\\n### 2.1 \u2605 \u8d70\u8ff7\u5bab\\n\\n\u6d89\u53ca\u6280\u672f:\\n\\n- \u63a7\u5236\u53f0\u3001\u5f69\u8272\u5b57\u4f53\u3001\u97f3\u4e50\u64ad\u653e\\n\\n\u4f18\u70b9:\\n\\n- \u5f69\u8272\u5b57\u4f53, \u65b9\u4fbf\u533a\u5206; \\n\\n- \u5b9e\u73b0\u7b80\u5355, \u65b9\u4fbf\u62d3\u5c55 (\u6b64\u5904\u8ba9\u5404\u4f4d, \u601d\u8003\u4e00\u4e0b, \u4f60\u8ba4\u4e3a\u8fd8\u6709\u4ec0\u4e48\u53ef\u4ee5\u6dfb\u52a0\u7684\u5462?)\\n\\n    > \u5730\u56fe\u8fd8\u662f\u592a\u7b80\u5355\u4e86? \u80fd\u5426\u590d\u6742\u70b9? \u6211\u80fd\u4e0d\u80fd\u6dfb\u52a0\u63a8\u7bb1\u5b50\u5143\u7d20? \u8fd9\u6837\u5730\u56fe\u5c31\u662f\u53ef\u53d8\u7684\u4e86\\n\\n    > \u4ea6\u6216\u8005\u662f\u7bb1\u5b50\u5360\u70b9? \u89e3\u5bc6\u5f00\u95e8? ...\\n\\n    > \u6211\u80fd\u5426\u5b9e\u73b0\u602a\u7269\u968f\u673a\u6e38\u8d70? \u6765\u56de\u6e38\u8d70?\\n\\n    > \u662f\u4e0d\u662f\u8fd8\u7f3a\u5c11\u4e86\u80cc\u666f\u97f3\u4e50? (\u6709\u4e86\u97f3\u4e50, \u8bbe\u7f6e\u4e0d\u4e5f\u53ef\u4ee5\u52a0\u4e0a\u4e86\u5417?)\\n\\n    > \u80fd\u5426\u5b9e\u73b0\u968f\u673a\u5730\u56fe? (\u4e0a\u7f51\u590d\u5236\u7c98\u8d34\u4e00\u4e2a\u8ff7\u5bab\u751f\u6210\u7b97\u6cd5, \u7136\u540e\u81ea\u5df1\u518d\u5df2\u6709\u5730\u56fe\u4e0a, \u7b80\u5355\u4fee\u6539\u4e00\u4e0b, \u4e0d\u5c31\u662f\u81ea\u5df1\u5199\u7684\u4e86\u5417?)\\n\\n    > \u6ce8\u610f\u5230, \u4ed6\u4eec\u7684\u56f0\u96be\u5730\u56fe, \u662f\u6709\u5b50\u8ff7\u5bab\u673a\u5236\u7684, \u4f46\u662f\u5b50\u8ff7\u5bab\u53ea\u662f\u8fdb\u53bb, \u7136\u540e\u51fa\u6765\u53c8\u5728\u539f\u70b9.\\n\\n    > \u80fd\u4e0d\u80fd\u62d3\u5c55\u4e00\u4e0b? \u4ece A -> B \u8ff7\u5bab, \u51fa\u6765\u540e\u662f\u5728 C \u8ff7\u5bab, \u8fd9\u91cc\u624d\u6709 \u51fa\u53e3, \u800c A \u8ff7\u5bab\u7684\u51fa\u53e3\u662f\u5047\u51fa\u53e3?\\n\\n    > \u6216\u8005\u539f\u672c\u662f\u6b7b\u8def, \u51fa\u6765\u540e, \u624d\u770b\u5230\u6d3b\u8def?\\n\\n    > \u6216\u8005\u6dfb\u52a0\u9677\u9631, \u7136\u540e\u5982\u679c\u5728\u9677\u9631\u560e\u4e86, \u4f1a\u89e6\u53d1\u770b\u5e7f\u544a\u3001\u5145\u503c\u673a\u5236? \u7136\u540e\u518d\u6b7b\u4ea1\u56de\u6eaf? \u56de\u5230\u6700\u8fd1\u7684\u6b7b\u4ea1\u524d\u7684\u4e00\u523b?\\n\\n    > \u662f\u4e0d\u662f\u8fd8\u7f3a\u4e1c\u897f? \u80fd\u4e0d\u80fd\u641e\u80cc\u5305? \u8fd9\u6837\u53d8\u6210\u641c\u96c6\u5411 + \u89e3\u5bc6\u5411, \u987a\u5e26\u53ef\u4ee5\u6dfb\u52a0\u6210\u5c31\u7cfb\u7edf\\n\\n    > \u8ff7\u5bab\u592a\u65e0\u804a\u4e86? \u6574\u70b9\u5e26\u8ff7\u96fe\u7684\u8ff7\u5bab? \u5fc5\u987b\u8981\u63a2\u7d22\u4e86, \u624d\u4f1a\u663e\u793a? \u6216\u8005\u66f4\u96be\u7684, \u53ea\u6709\u6700\u8fd1\u7684 $x$ \u683c, \u624d\u4f1a\u663e\u793a (\u76f8\u5f53\u4e8e\u89c6\u91ce\u8303\u56f4)\\n\\n    > \u56e0\u4e3a\u53ea\u662f\u63a7\u5236\u53f0, \u505a\u4e0d\u4e86\u624b\u7535\u7b52\u7248\u672c? \u9519, \u53ef\u4ee5\u662fwasd\u662f\u79fb\u52a8, \u65b9\u5411\u952e\u7684\u4e0a\u4e0b\u5de6\u53f3\u662f\u624b\u7535\u7b52, \u8fd9\u6837\u89c6\u91ce\u5c31\u81ea\u5e26\u65b9\u5411!\\n\\n    > \u518d\u6574\u70b9\u968f\u673a, \u5c31tm\u53d8\u6210\u79fb\u52a8\u8ff7\u5bab\u4e86?! (\u4f60\u4eec\u8fd8\u53ef\u4ee5\u7ee7\u7eed\u62d3\u5c55...)\\n\\n\u4ee5\u4e0a\u7684\u62d3\u5c55, \u90fd\u662f\u6211\u521a\u521a\u60f3\u5230\u7684~, \u6838\u5fc3\u529f\u80fd\u7684\u96be\u5ea6\u53ea\u6709\u4e00\u661f: \u8d70\u8ff7\u5bab + (\u63a8\u7bb1\u5b50)\\n\\n- \u67d0\u4e9b\u62d3\u5c55, \u5b9e\u9645\u4e0a\u4e5f\u5e76\u4e0d\u662f\u5f88\u96be, \u591a\u52a0\u4e00\u4e9b\u53d8\u91cf, \u8bb0\u5f55\u597d\u72b6\u6001\u5373\u53ef(~~\u6700\u597d\u7528\u679a\u4e3e\u54c8~~), \u4f46\u662f\u6e38\u620f\u7684\u4e30\u5bcc\u5ea6, \u5c31\u5b8c\u5168\u4e0d\u662f\u4e00\u4e2a\u7ef4\u5ea6\u4e86~\\n\\n### 2.2 \u2605\u2605 \u767d\u624b\u8d77\u5bb6\\n\\n\u6d89\u53ca\u6280\u672f:\\n\\n- \u63a7\u5236\u53f0, io\u6d41 (\u5b58\u6863), \u5f69\u8272\u5b57\u4f53\\n\\n\u4f18\u70b9:\\n\\n- \u6a21\u62df\u7ecf\u8425\u3001\u4ea4\u4e92\u5f0f\u7684\u6e38\u620f, \u6bd4\u8f83\u9002\u5408java... (\u56e0\u4e3a\u8f93\u5165\u8f93\u51fa\u7684\u95ee\u9898, \u7b49\u4f1a\u4f1a\u8bb2)\\n\\n- \u5f69\u8272\u5b57\u4f53\u6e38\u620f\u603b\u4f53\u7684\u98ce\u683c\u7edf\u4e00, \u800c\u4e14\u6709\u80cc\u5305\u7cfb\u7edf, \u4ee5\u53ca\u968f\u673a\u4e8b\u4ef6, \u8ba9\u73a9\u5bb6\u5207\u8eab\u4ee5\u4e3a\u81ea\u5df1\u771f\u7684\u662f\u5978\u5546~\\n\\n### 2.3 \u2605\u2605 \u6c34\u6728\u706b\\n\\n\u6d89\u53ca\u6280\u672f:\\n\\n- swing (\u754c\u9762\u7f8e\u5316) + \u80cc\u666f\u97f3\u4e50\\n\\n\u4f18\u70b9:\\n\\n- \u672c\u8d28\u662f\u63a8\u7bb1\u5b50, \u6216\u8005\u8bf4\u662f 2048; \u975e\u5e38\u597d\u73a9, \u6709\u521b\u65b0, \u878d\u5408\u4e86\u4e00\u4e9b\u77e5\u8bc6~\\n\\n- \u7f8e\u672f\u98ce\u683c\u7edf\u4e00\\n\\n### 2.4 \u2605\u2605 \u6821\u56ed\u4e09\u56fd\u6740\\n\\n\u6d89\u53ca\u6280\u672f:\\n\\n- swing + \u80cc\u666f\u97f3\u4e50 + \u6570\u636e\u6301\u4e45\u5316(\u767b\u5f55\u6ce8\u518c)\\n\\n\u4f18\u70b9:\\n\\n- \u6709\u8da3, \u4f7f\u7528\u4e86\u5f88\u591a\u62bd\u8c61\u5143\u7d20, \u4f7f\u4eba\u773c\u524d\u4e00\u9ed1\\n\\n- \u672c\u8d28\u662f\u4e09\u56fd\u6740 (\u867d\u7136\u6211\u4e0d\u662f\u5f88\u4f1a\u73a9), \u4f46\u662f\u878d\u5408\u4e86\u4e00\u4e9b\u73b0\u5b9e\u7684\u9b54\u6539, \u4f7f\u5176\u4e3a\u81ea\u5df1\u521b\u65b0\u7684 `\u6821\u56ed\u6740`\\n\\n- \u8fd8\u6709\u5f69\u86cb: \u8f93\u5165xxx\u7684\u540d\u5b57, \u5c31\u53ef\u4ee5\u542f\u7528\u4f5c\u5f0a\u6a21\u5f0f\\n\\n<div style=\\"margin-top: 80px;\\" />\\n\\n## 3. \u9879\u76ee\u6d41\u7a0b\\n### 3.1 \u5982\u4f55\u53d1\u9879\u76ee\u7ed9\u522b\u4eba\\n\\n\u9879\u76ee\u6839\u76ee\u5f55, \u6253\u6210\u538b\u7f29\u5305!\\n\\n![\u6253\u5f00\u4e3a\u9879\u76ee\u6839\u76ee\u5f55 ##w700##r10##](PixPin_2025-05-09_20-07-33.png)\\n\\n![\u6253\u5305zip ##w700##r10##](PixPin_2025-05-09_20-09-04.png)\\n\\n> \u4e3a\u4ec0\u4e48\u4e0d\u4f7f\u7528`Git`?\\n>\\n> - \u7b2c\u4e8c\u6b21\u9879\u76ee / \u5927\u9879\u76ee \u624d\u8981\u6c42\u4f7f\u7528;\\n>\\n> - \u672c\u6b21\u5982\u679c\u60f3\u4f7f\u7528git, \u90a3\u4e48\u81f3\u5c11\u672c\u7ec4\u7684\u5168\u90e8\u4eba\u90fd\u53ef\u4ee5\u719f\u7ec3\u7684\u4f7f\u7528git!\\n\\n### 3.2 \u5177\u4f53\u7684\u9879\u76ee\u6d41\u7a0b\\n\\n> \u90fd\u4f1a\u6709\u76f8\u5e94\u7684\u76f4\u64ad\u4f1a\u8bae\u6559\u5927\u5bb6\\n\\n### 3.3 \u96be\u5ea6\u5212\u5206\\n\\n> \u540c\u6b65\u548c\u5f02\u6b65\u53ef\u4ee5\u81ea\u5df1\u53bb\u5b66\u4e60\u4e00\u4e0b\\n>\\n> \u67d0\u4e9b\u5f02\u6b65\u64cd\u4f5c\u53ef\u4ee5\u4f7f\u7528\u540c\u6b65\u63d2\u5e27\u5b9e\u73b0\\n\\n```Java [j1-1\u7ea7]\\nclass GameData {\\n    // \u6570\u503c\u8bbf\u95ee\u7b80\u5355\\n    public static int[][] map;\\n\\n    // \u540c\u6b65, \u6e38\u620f\u89c4\u5219\u7b80\u5355\\n    public static void run() {\\n        while (true) {\\n            // \u8f93\u51fa\u5730\u56fe\\n            // \u8f93\u5165 (\u53ef\u4ee5\u7b49\u597d\u4e45, \u5fc5\u9700\u505a\u51fa\u64cd\u4f5c, \u624d\u4f1a\u5f71\u54cd\u6e38\u620f, \u5426\u5219\u76f8\u5f53\u4e8e\u6682\u505c)\\n            // \u79fb\u52a8\\n            // \u5224\u65ad\u8f93\u8d62 / \u4f24\u5bb3 -> break or continue\\n        }\\n    }\\n}\\n```\\n\\n```java [j1-2\u7ea7]\\n// \u6709\u4f7f\u7528\u7c7b \u5173\u8054\u4e00\u4e2a\u7c7b\\nclass Data {\\n    int[][] \u80cc\u5305;\\n};\\n\\nclass \u73a9\u5bb6 {\\n  \\tData m_\u80cc\u5305;\\n};\\n```\\n\\n\\n- 3\u7ea7 (web \u524d\u540e\u7aef)\\n\\t- \u4f9d\u8d56\u4e8e\u5f02\u6b65\u5b9e\u73b0\uff0c\u90e8\u5206\u529f\u80fd\u6709\u8f83\u9ad8\u96be\u5ea6\uff0c\u6570\u503c\u8bbf\u95ee\u5df2\u7ecf\u6bd4\u8f83\u590d\u6742\uff08\u6bd4\u5982\u5d4c\u5957\u6570\u7ec4\u3001\u5d4c\u5957\u7c7b\uff09\\n\\t- \u901a\u5e38\u5177\u6709`\u81ea\u7531\u79fb\u52a8`(\u652f\u6301\u659c\u5411(\u6bd4\u5982 37\xb0 \u65b9\u5411\u79fb\u52a8)), `\u53d1\u5c04\u5b50\u5f39`(\u901f\u5ea6\u5dee), `\u78b0\u649e\u68c0\u6d4b` \u7b49\u529f\u80fd\u7684\u5c0f\u6e38\u620f\u5c5e\u4e8e\u8fd9\u4e2a\u96be\u5ea6\u8303\u7574\\n\\n\\n---\\n\\n> [!TIP]\\n> \u7279\u522b\u7684, \u6839\u636e\u5c0f\u7ec4\u5b9e\u529b, <span style=\\"color:gold\\">\u4e0d\u5efa\u8bae\u7b2c\u4e00\u6b21\u9879\u76ee, \u76f4\u63a5\u91c7\u7528`\u9762\u5411\u5bf9\u8c61`\u8fdb\u884c\u67b6\u6784, \u7279\u522b\u662f\u6d89\u53ca\u7ee7\u627f\u548c\u591a\u6001\u7684</span>\\n\\n### 3.4 \u5173\u4e8e\u989d\u5916\u6280\u672f\\n#### 3.4.1 swing\\n\\n- \u56fe\u5f62\u754c\u9762\\n\\n> \u5982\u679c\u8981\u5b66\u4e60`\u56fe\u5f62\u754c\u9762`, \u5fc5\u9700\u5728 $\u7b2c\u4e8c\u6b21\u4f1a\u8bae$ \u65f6\u5019\u5b9a\u4e0b\u6765, \u4e0d\u80fd\u9879\u76ee\u5f00\u59cb (\u4e5f\u5c31\u662f\u53ef\u884c\u6027\u5206\u6790\u9636\u6bb5) \u624d\u5f00\u59cb\u5b66\u4e60!\\n>\\n> \u5e76\u4e14`\u56fe\u5f62\u754c\u9762`<span style=\\"color:red\\">\u5fc5\u9700\u5b8c\u6210\u7ec3\u4e60\u9898, \u624d\u7b97\u662f\u521d\u6b65\u638c\u63e1</span>, \u4e0d\u7136\u9879\u76ee\u671f\u95f4\u539f\u5730\u66b4\u6bd9 (\u7279\u522b\u662f\u662fswing)\\n>\\n> \u6ce8\u610f: \u5982\u679c\u4f7f\u7528`\u56fe\u5f62\u754c\u9762`, \u90a3\u4e48\u5c0f\u7ec4\u81f3\u5c11\u8981 **\u4e00\u534a\u4eba**(\u4e0a\u53d6\u6574) \u638c\u63e1(\u5373\u5b8c\u6210\u7ec3\u4e60\u9898), \u5426\u5219\u5f62\u5f0f\u80a5\u80a0\u5371\u9669!\\n\\n#### 3.4.2 \u6570\u636e\u6301\u4e45\u5316 (\u6587\u4ef6\u8bfb\u5199)\\n\\n- \u7528\u5904: \u5b58\u6863 / \u767b\u5f55\u6ce8\u518c / \u6392\u884c\u699c\\n\\n- \u9ad8\u7ea7\u7528\u5904: \u4ece\u6587\u4ef6\u4e2d\u8bfb\u53d6\u5173\u5361\u6570\u636e...\\n\\n#### 3.4.3 \u97f3\u4e50\u64ad\u653e\\n\\n- \u6ca1\u4ec0\u4e48\u597d\u8bf4\u7684, \u57fa\u672c\u4e0a\u662f\u590d\u5236\u7c98\u8d34\u5c31ok\\n\\n#### 3.4.4 \u5206\u6587\u4ef6\u3001\u5206\u5305\u7f16\u7a0b\\n\\n- \u5206\u6587\u4ef6\u5f00\u53d1, \u53ef\u4ee5\u4f7f\u5f97\u4ee3\u7801\u7ed3\u6784\u6e05\u6670\\n\\n> (\u53ef\u4ee5\u7684\u8bdd) \u6280\u672f\u5b98\u53ef\u4ee5\u5b66\u4e00\u4e0b\\n\\n### 3.5 \u4ee3\u7801\u89c4\u8303\\n\\n\u6ce8\u91ca:\\n\\n```C++ [vscode]\\n/**\\n * @brief \u51fd\u6570\u4f5c\u7528\\n * @param a - \u542b\u4e49 (\u53ef\u4f7f\u7528\u7684\u503c)\\n * @param b - \u542b\u4e49 <\u5176\u4ed6\u5907\u6ce8>\\n * @return <\u7c7b\u578b> - \u542b\u4e49\\n * */\\nint fun(int a, int b);\\n```\\n\\n- https://gitee.com/Heng_Xin_666/binomial/blob/v1.0.1/ProjectDocuments/05_ReadmeFile/GoodCode.md\\n\\n## 4. \u4e00\u4e9b\u9879\u76ee\u6280\u5de7\\n### 4.1 \u6e38\u620f\u4f53\u9a8c\\n\\n\u4ee5\u4e0b\u662f\u4e00\u4e9b\u7b80\u5355\u7684\u529f\u80fd, \u53ef\u4ee5\u4f5c\u4e3a\u62d3\u5c55, \u4f46\u662f\u7b54\u8fa9\u7684\u65f6\u5019\u5e0c\u671b\u5927\u5bb6\u90fd\u53ef\u4ee5\u52a0\u4e0a, \u4ee5\u4e30\u5bcc\u9879\u76ee:\\n\\n> [!TIP]\\n> \u6b64\u5904\u4ec5\u8ba8\u8bba \u63a7\u5236\u53f0 \u9879\u76ee\\n\\n1. \u65b0\u624b\u5f15\u5bfc: \u7b2c\u4e00\u6b21\u8fdb\u5165\u6e38\u620f/\u7b2c\u4e00\u5173, \u53ef\u4ee5\u7279\u5316\u4e00\u4e9b\u6587\u5b57, \u4ee5\u6559\u5bfc\u73a9\u5bb6\u6700\u57fa\u672c\u7684\u64cd\u4f5c\\n\\t\\n    \u6709\u7684\u5c0f\u7ec4\u505a\u4e00\u4e2a\u62fc\u56fe\u6e38\u620f, \u4f46\u662f\u5374\u6ca1\u6709\u62fc\u597d\u7684\u6837\u5b50\u7ed9\u73a9\u5bb6\u5bf9\u7167, \u6211\u4e0d\u77e5\u9053\u539f\u56fe, \u6211\u600e\u4e48\u62fc\u554a? (\u4f46\u662f\u7570\u8b70\u3042\u308a!)\\n\\n2. \u5f69\u8272\u5b57\u4f53\\n\\n```C++\\nint main() {\\n     printf(\\"Hello Color!\\\\n\\");\\n     return 0;\\n}\\n```\\n\\n```\\nint main() {\\n     printf(\\"Hello Color!\\\\n\\");\\n     return 0;\\n}\\n```\\n\\n3. \u6253\u5b57\u673a\u7279\u6548\\n\\n\\t\u5bf9\u4e8e\u4e00\u4e9b\u5267\u60c5\u3001\u80cc\u666f\u4ea4\u4ee3\u7684\u6587\u5b57, \u54b1\u4eec\u53ef\u4ee5\u4e00\u4e2a\u5b57\u4e00\u4e2a\u5b57\u7684\u6253\u5370, \u800c\u4e0d\u662f\u4e00\u4e0b\u8f93\u51fa\u4e00\u5927\u5768\u6587\u5b57.\\n\\n    | \u6253\u5b57\u673a\u7279\u6548 |\\n    |:--:|\\n    |![\u6253\u5b57\u673a](https://camo.githubusercontent.com/e2d3ea9bfde3e572c14c8d4edb62a03863ab1c7fd9a01c4f7ba074634821a6f5/68747470733a2f2f726561646d652d747970696e672d7376672e64656d6f6c61622e636f6d3f666f6e743d4b6c65652b4f6e65267765696768743d3530302673697a653d32352670617573653d3130303026636f6c6f723d3939303039392663656e7465723d74727565267643656e7465723d747275652672616e646f6d3d747275652677696474683d343335266c696e65733d254533253831253933254533253831253933254533253831253842254533253832253839254535253835253838254533253831254146254534254238253830254536253936254239254539253830253941254538254131253843254533253831254130254546254243253831)|\\n\\n\\t\u5bf9\u4e8e\u56fe\u5f62\u754c\u9762, \u54b1\u4eec\u4e5f\u53ef\u4ee5\u8fd9\u6837 (\u7c7b\u4f3c\u4e8eglgame) \u6216\u8005 \u641e\u661f\u7403\u5927\u6218\u90a3\u79cd\u7531\u8fdc\u53ca\u8fd1\u7684\u4e5f\u53ef\u4ee5 (\u50cf\u662fppt\u7279\u6548..)\\n\\n4. \u97f3\u4e50\u64ad\u653e\\n\\n\\t\u8fd9\u4e2a\u597d\u50cf\u5f88\u590d\u6742, \u4f46\u662f\u5b9e\u9645\u4e0a\u5c31\u662f\u590d\u5236\u7c98\u8d34\u7684 (\u5177\u4f53\u53ef\u4ee5\u770b\u56fe\u7075\u9662\u6587\u6863)\\n\\n### 4.2 \u8d85\u7b80\u5355\u7684\u62d3\u5c55\\n\\n\u5f88\u7b80\u5355, \u4f46\u662f\u786e\u5b9e\u53ef\u4ee5\u4e30\u5bcc\u6e38\u620f, \u8ba9\u6211\u4eec\u770b\u8d77\u6765\u529f\u80fd\u5f88\u591a.\\n\\n- \u6559\u7a0b\u5173\u5361\\n\\n- \u76ae\u80a4\u5207\u6362\\n\\n- \u5f00\u53d1\u4eba\u5458\u4ecb\u7ecd\\n\\n- \u5185\u8d2d\u5145\u503c?!\\n\\n- \u5f69\u86cb?!\\n\\n- \u6210\u5c31\u7cfb\u7edf?!\\n\\n### 4.3 \u4e2a\u4eba\u63d0\u4f9b\u7684Java\u5e93\\n\\n\u975e\u963b\u585e\u8f93\u5165!\\n\\n- https://github.com/HengXin666/HXCin\\n\\n- \u56fd\u5185\u94fe\u63a5: https://gitee.com/Heng_Xin_666/HXCin"},{"id":"/2025/05/07/001-\u5c0f\u7076\u5206\u4eab","metadata":{"permalink":"/HXLoLi/blog/2025/05/07/001-\u5c0f\u7076\u5206\u4eab","editUrl":"https://github.com/HengXin666/HXLoLi/edit/main/blog/2025/05/07/001-\u5c0f\u7076\u5206\u4eab.md","source":"@site/blog/2025/05/07/001-\u5c0f\u7076\u5206\u4eab.md","title":"2025-05-07 \u5c0f\u7076\u5206\u4eab","description":"\u548c\u540c\u5b66\u4eec\u7684\u4e00\u4e9b\u5206\u4eab, \u5305\u542b\u4e86 C/C++\u3001Java\u4ee5\u53ca\u7b97\u6cd5\u7684\u4e00\u4e9b\u5206\u4eab~","date":"2025-05-07T00:00:28.000Z","tags":[{"inline":false,"label":"\u5206\u4eab","permalink":"/HXLoLi/blog/tags/\u5206\u4eab","description":"\u4e00\u4e9b\u4e2a\u4eba\u89c1\u89e3\u7684\u5206\u4eab~"}],"readingTime":30.87,"hasTruncateMarker":true,"authors":[{"name":"Heng_Xin","title":"\u3053\u3053\u304b\u3089\u5148\u306f\u4e00\u65b9\u901a\u884c\u3060!","url":"https://github.com/HengXin666","email":"282000500@qq.com","socials":{"github":"https://github.com/HengXin666","bilibili":"https://space.bilibili.com/478917126"},"imageURL":"https://avatars.githubusercontent.com/u/103022267","key":"Heng_Xin","page":null}],"frontMatter":{"authors":"Heng_Xin","title":"2025-05-07 \u5c0f\u7076\u5206\u4eab","date":"2025-05-07T00:00:28.000Z","tags":["\u5206\u4eab"]},"unlisted":false,"lastUpdatedAt":1746632559000,"lastUpdatedBy":"Heng_Xin_666","prevItem":{"title":"2025-05-09 \u9879\u76ee\u6f14\u793a\u5c0f\u7076\u5206\u4eab","permalink":"/HXLoLi/blog/2025/05/09/01-\u9879\u76ee\u6f14\u793a\u5c0f\u7076"},"nextItem":{"title":"\u7d42\u308f\u308a","permalink":"/HXLoLi/blog/2025/05/06/001-\u7d42\u308f\u308a"}},"content":"\u548c\u540c\u5b66\u4eec\u7684\u4e00\u4e9b\u5206\u4eab, \u5305\u542b\u4e86 C/C++\u3001Java\u4ee5\u53ca\u7b97\u6cd5\u7684\u4e00\u4e9b\u5206\u4eab~\\n\\n\x3c!-- truncate --\x3e\\n\\n<details>\\n<summary>\u8003\u52e4</summary>\\n\\n> <h2 style=\\"color:red\\">\u7ec4\u957f\u8003\u52e4, \u7ed3\u675f\u540e\u628a\u53c2\u4f1a\u540d\u5355\u79c1\u53d1\u5c0f\u5b66\u957f</h2>\\n> \u683c\u5f0f: xxx\u5c0f\u7ec4, \u5b9e\u9645\u5230\u573a\u4eba\u6570/\u603b\u4eba\u6570 | (\u5b66\u957f\u9700\u8981\u7edf\u8ba1, \u4ee5\u8bc4\u4f30\u79ef\u6781\u6027)\\n\\n- [x] \u8bb0\u5f97\u5f55\u5c4f\\n\\n> [!WARNING]\\n> \u7ed3\u675f\u540e, \u5f55\u5c4f\u53ef\u80fd\u4f1a\u88ab\u817e\u8baf\u5c01\u6389, \u6ce8\u610f\u4e0d\u8981\u5220\u9664\u6e90\u6587\u4ef6, \u4ee5\u4fbf\u52a0\u5bc6\u91cd\u53d1!\\n>\\n> \u5404\u4f4d\u5982\u679c\u9700\u8981\u5f55\u5c4f, \u8bf7\u5c3d\u5feb\u4e0b\u8f7d~ (\u817e\u8baf\u5df2\u7ecf\u5c01\u62113\u30014\u6b21\u4e86wc...)\\n\\n> \u820d\u53cb\u8fd9\u8fb9\u53ef\u80fd\u4f1a\u6709\u70b9\u5435, \u5404\u4f4d\u51d1\u5408\u4e00\u4e0b~\\n\\n<div style=\\"margin-top: 200px;\\" />\\n\\n</details>\\n\\n\\n## \u30bc\u30ed\u3001\u524d\u8a00 \u3068 \u3056\u3053\u3082\u306e\\n### 0.1 \u81ea\u6211\u4ecb\u7ecd\\n\\n\u5927\u5bb6\u597d, \u81f3\u5c11\u5728\u4eca\u5929\u6211\u8fd8\u662f\u5927\u4e8c~, \u9ad8\u4e2d\u5b66\u7684\u662f\u65e5\u8bed, \u4e00\u540d\u4e0d\u600e\u4e48\u770b\u61c2\u82f1\u8a9e\u306e\u7a0b\u5e8f\u5458. \u5e73\u65f6\u559c\u6b22\u770b\u756a~ (\u30ed\u30ea\u30b3\u30f3 += \u30b7\u30b9\u30b3\u30f3)\\n\\n\u4e3b\u653b **\u73b0\u4ee3C++**, \u76ee\u524d\u6bd4\u8f83\u62ff\u7684\u51fa\u624b\u7684\u662f [\u4e00\u4e2aC++20\u534f\u7a0b\u7684\u57fa\u4e8eLinux io_uring \u7684web\u6846\u67b6, \u652f\u6301\u65e0\u5b8f\u7684\u805a\u5408\u7c7b\u53cd\u5c04, \u7cfb\u7edf\u9ed8\u8ba4\u652f\u6301\u65ad\u70b9\u7eed\u4f20...\u7b49\u7b49](https://github.com/HengXin666/HXLibs); \u76ee\u524d\u6b63\u5728\u5b66\u4e60 QT (QML), \u6b63\u5728\u7f16\u5199\u4e00\u4e2a C/S \u90fd\u7531 C++ \u7f16\u5199\u7684 \u79c1\u6709\u4e91\u7535\u5b50\u4e66 \u9879\u76ee...\\n\\n\u5b66\u8fc7\u4e00\u70b9Java, \u76ee\u524d\u4ec5\u6709 [HX-ANiMe](https://github.com/HengXin666/HX-ANiMe) \u8fd9\u4e00\u4e2a\u524d\u540e\u7aef\u67b6\u6784\u7684Spring-Boot\u9879\u76ee...\\n\\n\u524d\u7aef\u4e5f\u5b66\u8fc7\u4e00\u70b9, \u6bd4\u5982\u76ee\u524d\u8fd9\u4e2a\u535a\u5ba2\u5b9e\u9645\u4e0a\u5c31\u662f\u4e00\u4e2a\u6211 ~~\u4e8c\u6b21\u5f00\u53d1~~ \u4e3b\u9898\u9b54\u6539 \u7684\u4e00\u4e2a\u535a\u5ba2 [HXLoLiHub](https://github.com/HengXin666/HXLoLiHub) \u53ef\u4ee5\u76f4\u63a5\u90e8\u7f72\u5728 Github Page \u4e0a, \u4e0d\u7528\u81ea\u5df1\u8d2d\u4e70\u4e91\u670d\u52a1\u5668.\\n\\n\u8fd8\u4f1a\u70b9py\u722c\u866b... \u7f16\u5199\u8fc7\u4e00\u4e2a [B\u7ad9\u5168\u5f39\u5e55\u83b7\u53d6](https://github.com/HengXin666/BiLiBiLi_DanMu_Crawling) \u7a0b\u5e8f. (\u76ee\u524d\u5c45\u7136\u662f\u6211github\u91cc\u9762start\u6700\u591a\u7684\u9879\u76ee qwq)\\n\\n<div style=\\"margin-top: 80px;\\" />\\n\\n### 0.2 \u7b14\u8bb0\u63a8\u8350\\n\\n\u5efa\u8bae\u4f7f\u7528 [MarkDown](https://markdown.com.cn/basic-syntax/) \u5199, \u5b83\u6613\u8bfb\u6613\u5199, \u7a0b\u5e8f\u5458\u90fd\u8981\u4f1a\u5b83! github\u7684\u81ea\u8ff0\u6587\u4ef6\u5c31\u662f\u5b83\u5199\u7684...\\n\\n- \u4ee5\u540e\u5199\u4ec0\u4e48\u9879\u76ee\u6587\u6863, \u4ee5\u53ca\u770b\u5f88\u591a\u5f00\u6e90\u6587\u6863, \u5b83\u4eec\u90fd\u662fmd\u5199\u7684~ (\u6ca1\u4eba\u4f1a\u5199word\u6587\u6863! \u5982\u679c\u67d0\u4e2a\u8ab0, \u8ba9\u4f60\u5199word, \u90a3\u4ed6\u80af\u5b9a\u4e0d\u662f\u641e\u6280\u672f\u7684...)\\n\\n> \u7279\u522b\u4e0d\u5efa\u8bae!!! \u7528`word`, \u80fd\u4e0d\u7528\u5c31\u4e0d\u7528.\\n\\n> [!TIP]\\n> \u63a8\u8350\u51e0\u4e2a`markdown`\u7f16\u8f91\u5668: `VSCode + \u63d2\u4ef6`\u3001`Typora`\\n\\n<div style=\\"margin-top: 80px;\\" />\\n\\n### 0.3 \u7b14\u8bb0\u4e0d\u63a8\u8350\\n\\n<span style=\\"color:red\\">\\n\\n- \u4e0d\u5efa\u8bae\u5728`CSDN`\u4e0a\u505a\u7b14\u8bb0!!!\\n\\n\u7eaf\u7eaf\u590d\u5236\u7c98\u8d34\u7684\u5783\u573e\u8bba\u575b, \u8fd8\u82b1\u94b1\u4e70\u641c\u7d22\u5f15\u64ce, \u641c\u7d22\u5230\u7684\u5168\u662fCSDN\u7684\u590d\u5236\u7c98\u8d34\u5077\u522b\u4eba\\n\\n\u800c\u4e14\u5168tm\u662f\u5e7f\u544a\uff01\uff01\u6709\u65f6\u5019\u4f60\u4e00\u4e2a\u9875\u9762\uff0c\u5b83\u5b8c\u5b8c\u6574\u6574\u7684\u7ed9\u4f60\u5360\u4e86\u4e00\u5927\u534a\uff01\uff01\u6bd4tm\u770b\u7247\u7f51\u7ad9\u5e7f\u544a\u8fd8\u591a\u3002\\n\\n\u800c\u4e14\u4f1a\u968f\u673a\u7684\u628a\u4f60\u7684\u6587\u7ae0\u8bbe\u7f6e\u4e3a\u6536\u8d39\u3002\u5373\u4fbf\u4e0d\u662f\u4f60\u8bbe\u7f6e\u7684\uff01\\n\\n\u90a3\u4f60\u4e0d\u662f\u5728\u5e2e\u522b\u4eba\u514d\u8d39\u6253\u5de5\u5417\uff1f\uff01\\n\\n</span>\\n\\n> [!TIP]\\n> \u4e2a\u4eba\u8ba4\u4e3a, csdn\u8fdf\u65e9\u5012\u95ed! \u548c\u5b83\u4e0a\u9762\u7684\u4e1c\u897f\u4e00\u8d77\u7070\u98de\u70df\u706d!\\n>\\n> \u4ece\u4f60\u7684\u7b14\u8bb0\u5b89\u5168\u4e0a, \u6211\u4e5f\u4e0d\u5efa\u8bae\u4f60\u628a\u7b14\u8bb0\u653e\u5230\u8fd9\u4e0a\u9762\\n\\n<span style=\\"color:gold\\">\\n\\n\u8840\u6dcb\u6dcb\u7684\u73b0\u5b9e:\\n\\n- \u6211\u641c\u7d22`libass`, \u5b83\u603b\u662f\u4ee5\u4e00\u79cd\u597d\u50cf\u662f\u5f88\u5389\u5bb3, \u5b9e\u9645\u4e0a\u5c31\u662fai\u7684\u4e1c\u897f, \u6392\u5728\u524d\u9762:\\n\\n> \u63a8\u8350\u4f7f\u7528\uff1alibass - \u5f3a\u5927\u7684\u5b57\u5e55\u6e32\u67d3\u5e93 - CSDN\u535a\u5ba2\\n>\\n> 2024\u5e745\u67089\u65e5\u2002\xb7\u2002libass\u662f\u4e00\u4e2a\u9ad8\u7ea7\u5b57\u5e55\u6e32\u67d3\u5e93\uff0c\u7528\u4e8e\u5c06\u5b57\u5e55\u6587\u4ef6\u6e32\u67d3\u4e3a\u89c6\u9891\u3002\u800clibass-msvc\u5219\u662flibass\u7684\u7279\u5b9a\u7248\u672c\uff0c\u8be5\u9879\u76ee\u6587\u4ef6\u662f\u4e3aMicrosoft Visual C++\uff08msvc\uff09\u7f16\u8bd1\u5668\u4f18\u5316\u7684\u3002 \u9996\u5148\uff0c\u6807\u9898 \u2026\\n\\n- \u5e76\u4e14\u5f88\u591a\u4e1c\u897f, \u5b9e\u9645\u4e0a\u90fd\u662f\u590d\u5236\u7c98\u8d34\u522b\u4eba\u7684\u4e1c\u897f! \u5199\u7684\u4eba\u4e0d\u77e5\u9053\u8fd9\u662f\u771f\u7684\u5047\u7684, \u90a3\u4f60\u600e\u4e48\u80fd\u4fdd\u8bc1\u7528\u7684\u80fd\u4e0d\u80fd\u7528\u561e?!\\n\\n- \u6d4f\u89c8\u91cfcsdn\u4e5f\u662f\u6709\u4eba\u673a\u7ed9\u4f60\u5237\u7684, \u56de\u590d\u4e5f\u662f\u6709\u4eba\u673a\u5728\u90a3\u91cc\u56de\u590d... \u5f88\u591a\u8d44\u6599\u6ca1\u6709\u4e00\u70b9\u53c2\u8003\u4ef7\u503c..\\n\\n</span>\\n\\n> \u540c\u7406, \u6211\u4e5f\u4e0d\u63a8\u8350\u4f7f\u7528word\u8fd9\u79cd, \u4ee5\u53ca\u975e\u5f00\u6e90\u7684\u7b14\u8bb0\u683c\u5f0f, \u4ed6\u4eec\u4e0d\u5229\u4e8e\u4fdd\u5b58, \u4e5f\u4e0d\u5229\u4e8e\u8fc1\u79fb.\\n\\n<div style=\\"margin-top: 80px;\\" />\\n\\n### 0.4 \u4ea4\u6d41\u7684\u63a8\u8350\u65b9\u5f0f\\n\\n- \u770b\u5230\u6d88\u606f\u4e86, \u8bb0\u5f97\u56de\u5e94, \u6bd4\u5982`OK`; \u4e0d\u7136\u4f1a\u88ab\u4eba\u4ee5\u4e3a\u5931\u8e2a\u4e86\\n\\n- \u95ee\u95ee\u9898\u4e86, \u522b\u4eba\u56de\u7b54\u4e86, \u8bf7\u7ed9\u4e2a\u56de\u5e94\\n\\n\u4f8b\u5982: \\n\\n```C++ [z1-\u9519\u8bef\u793a\u83031]\\n\u9053\u53cbA: \u554a\u554a\u554a\u5b66\u957f, \u8fd9\u4e2a\u600e\u4e48\u529e\u554a???qwq\\n\u9053\u53cbA: [\u56fe\u7247] (\u4e0d\u77e5\u9053\u4f55\u5904\u4f20\u6765: \\"\u8bf7\u9009\u62e9\u4f60\u7684\u622a\u56fe\u5bfc\u5e08\\" \u97f3\u6548)\\n\\n\u5b66\u957fH: \u963f\u5df4\u963f\u5df4\\n\u5b66\u957fH: \u5df4\u62c9\u5df4\u62c9\\n\u5b66\u957fH: [\u56fe\u7247]\\n\u5b66\u957fH: [\u56fe\u7247]\\n\u5b66\u957fH: \u5440\u554a\u554a\u554a\\n\u5b66\u957fH: [\u8868\u60c5\u5305]\\n\\n// \u6b64\u65f6\u9053\u53cbA\u8fd9\u8fb9, A: \u641c\u560e\u641c\u560e (\u6253\u7535\u52a8\u53bb\u4e86..)\\n\\n/* \u6b64\u65f6\u7559\u4e0b\u4e86\u4e0d\u77e5\u9053\u662f\u81ea\u5df1\u83dc, \u800c\u5bfc\u81f4\u5bf9\u65b9\u65e0\u8bed\u7684\u5b66\u957f, \u5728\u8fd9\u91cc\u601d\u60f3\u640f\u6597\u3002\u3002\u3002 */\\n```\\n\\n```C++ [z1-\u9519\u8bef\u793a\u4f8b2]\\n\u9053\u53cbB: 114514\u884c\u4ee3\u7801(\u7f29\u8fdb\u4e71\u4e03\u516b\u7cdf\u7248 (\u5982\u540cjs\u6df7\u6dc6\u4e00\u822c))\\n\u9053\u53cbB: \u4e3a\u4ec0\u4e48\u4e0d\u884c?\\n\\n<\u5b66\u957fX: \u4ec0\u4e48\u65f6\u5019\u4e0b\u73ed?>\\n\\n// \u751a\u81f3, \u8fd9\u91cc\u9762\u6709\u4e09\u5343\u4e03\u767e\u4e07\u4e2a\u9519\u8bef, \u6211\u770b\u4e86\u4e00\u4f1a, \u627e\u4e86\u4e00\u4e2a\u6765\u56de\u590d:\\n\u5b66\u957fH: xxx\u8fd9\u91cc, \u5e94\u8be5\u4f7f\u7528yyy\u5427...\\n\u9053\u53cbB: \u554a\u8fd9\u4e2a\u6211\u77e5\u9053\\n\\n/* \u4e0d\u662f\u54e5\u4eec? \u90a3\u6211\u95ee\u4f60, \u4f60\u662f\u54ea\u91cc\u4e0d\u61c2? */\\n```\\n\\n```C++ [z1-\u9519\u8bef\u793a\u4f8b3]\\n#include <cstdio>\\n\\n/*\\n- \u95ee\u95ee\u9898, \u622a\u56fe\u8bf7\u622a\u53d6\u5168\u9762:\\n\\n\u793a\u8303: \u5728 Linux \u63a7\u5236\u53f0\u4e2d (\u4f60\u4eec\u8ba4\u4e3a\u8fd0\u884c\u7ed3\u679c\u662f\u4ec0\u4e48?)\\n*/\\n\\nint main() {\\n    printf(\\"\u521d\u59cb\u5316 i\\\\n\\");\\n    int i = 0;\\n\\n    printf(\\"\u5bf9 i \u8fdb\u884c\u64cd\u4f5c: \\");\\n\\n    // \u5047\u88c5\u6709\u5f88\u590d\u6742\u7684\u4ee3\u7801 ...\\n    *(int *)1 = 0; // \u6bb5\u9519\u8bef\\n\\n    printf(\\"\u554a\u554a\u554a~\\\\n\\");\\n    return 0;\\n}\\n\\n// > \u5b66\u957f\u6709\u4ec0\u4e48\u9519? \u3010\u56fe\u7247\u3011: \u53ea\u622a\u56fe\u4e86: `int i = 0;`\\n```\\n\\n```C++ [z1-\u793a\u4f8b3\u7684\u4ee3\u7801\u8f93\u51fa]\\n\u521d\u59cb\u5316 i\\\\n\\n```\\n\\n<div style=\\"margin-top: 80px;\\" />\\n\\n\u6b63\u786e\u65b9\u5f0f:\\n\\n1. \u5c3d\u91cf\u63cf\u8ff0\u539f\u56e0:\\n\\n    > \u6bd4\u5982: \u5b66\u957f\u6211\u6253\u7b97xxx, \u7136\u540e\u5b9e\u73b0xxx, \u4f46\u662fxxx\u7684\u65f6\u5019, \u53d8\u6210xxx\u6837\u5b50\u4e86\\n\\n2. \u5373\u4fbf\u4f60\u4e0d\u77e5\u9053\u53d1\u751f\u4e86\u4ec0\u4e48, \u622a\u56fe\u8bf7\u622a\u5168, \u5c3d\u91cf\u5c55\u793a\u66f4\u591a\u7684\u4fe1\u606f, (**\u56e0\u4e3a\u5927\u90e8\u5206\u7684\u65f6\u5019, \u9519\u8bef\u4e0d\u4f1a\u5728\u4f60\u8ba4\u4e3a\u7684\u5730\u65b9\u51fa\u9519, \u4e0d\u7136\u4e3a\u4ec0\u4e48\u4f60\u4e0d\u81ea\u5df1\u89e3\u51b3\u5462?**)\\n\\n    > \u4ee3\u7801, \u8fd0\u884c\u7ed3\u679c, \u7f16\u8bd1\u62a5\u9519\u4fe1\u606f\\n\\n> [!TIP]\\n> **\u671f\u671b\u7684**: \u5c0f\u5b66\u957f\u7b54\u7591, \u4f46\u4e0d\u662f\u5e2e\u4f60\u5199\u5b8c\u4f5c\u4e1a! \u662f\u6559\u4f1a\u4f60\u5b66\u4f5c\u4e1a~\\n\\n\u9644: \u89e3\u51b3\u95ee\u9898\u7684\u4e00\u822c\u601d\u8def (\u7b54\u7591\u7684\u65f6\u5019\u4e5f\u662f\u8fd9\u6837\u601d\u8003\u5faa\u5e8f\u6e10\u8fdb\u7684~)\\n\\n![\u7b54\u7591\u601d\u8def](./\u7b54\u7591\u601d\u8def.drawio.svg)\\n\\n<div style=\\"margin-top: 80px;\\" />\\n\\n### 0.5 \u5077\u5077\u8bf4\u4e00\u4e0b\\n#### 0.5.1 \u3068\u3042\u308b\u79d1\u5b66\u306e\u30a4\u30f3\u30bf\u30fc\u30cd\u30c3\u30c8\u30fb\u30a8\u30ec\u30d9\u30fc\u30bf\u30fc\\n\\n> [!TIP]\\n> \u79d1\u5b66\u4e0a\u7f51, dddd. \u4f60\u8981\u4e0aGithub\u3001\u5404\u79cd\u5305\u4e0b\u8f7d\u3001docker\u955c\u50cf\u4e0b\u8f7d\u6700\u8212\u670d\u5c31\u662f\u76f4\u63a5\u4e0a\u8fd9\u4e2a... \u771f\u7684\u65b9\u4fbf\u5f88\u591a...\\n\\n#### 0.5.2 AI\u306b\u95a2\u3059\u308b\\n\\n\u5b66\u4e60\u7684\u65f6\u5019, AI\u5e94\u8be5\u662f\u4f5c\u4e3a\u4e00\u79cd\u641c\u7d22\u5f15\u64ce\u4f7f\u7528. \u800c\u4e0d\u662f\u8ba9\u5b83\u5e2e\u4f60\u5b8c\u6210\u4efb\u52a1!\\n\\n> \u6bd4\u5982:\\n>\\n> \u4f60\u5728\u5199\u7b97\u6cd5\u9898, \u4f60\u53ef\u4ee5:\\n>\\n> - \u81ea\u5df1\u5199\u4e00\u7248, \u7136\u540e\u8ba9\u5b83\u5e2e\u4f60\u770b\u770b\u6709\u6ca1\u6709\u4ec0\u4e48\u95ee\u9898 (\u6ce8\u610f, \u8ba9\u5b83\u4ec5\u6307\u51fa\u4f60\u7684\u9519\u8bef, \u800c\u4e0d\u662f\u5e2e\u4f60\u4fee\u6539)\\n> - \u8be2\u95ee\u5b83\u8fd9\u79cd\u9898\u76ee\u9700\u8981\u4ec0\u4e48\u77e5\u8bc6\u70b9, \u6211\u4e0d\u4f1a; \u4f46\u6211\u5e94\u8be5\u53bb\u5b66\u4ec0\u4e48. (\u8ba9\u5b83\u544a\u8bc9\u4f60\u77e5\u8bc6\u70b9, \u4f46\u4e0d\u662f\u76f4\u63a5\u7ed9\u4f60\u4ee3\u7801)\\n>\\n> \u4f60\u4e0d\u5e94\u8be5:\\n>\\n> - \u590d\u5236\u9898\u76ee, \u7136\u540e\u76f4\u63a5\u590d\u5236\u7c98\u8d34\u5b83\u7684\u4ee3\u7801!\\n\\n\u4f46\u4e5f\u770b\u4f8b\u5916, \u6bd4\u5982\u4f60\u5df2\u7ecf\u5b8c\u5168\u6e05\u695a\u548c\u7406\u89e3\u4e3a\u4ec0\u4e48\u8fd9\u6837\u505a\u4e86, \u53ea\u662f\u4ee3\u7801\u592a\u7e41\u6742\u4e86, \u4f60\u53ef\u4ee5\u5077\u61d2, \u8ba9\u5b83\u5e2e\u4f60\u5199.\\n\\n#### 0.5.3 Github \u662f\u5b66\u4ee3\u7801\u6700\u597d\u7684\u5b9e\u4f8b\\n\\n- \u5728 Github \u4e0a\u5b66\u4e60\u4ee3\u7801\u6b63\u786e\u7528\u6cd5: \u4ece\u522b\u4eba\u7684\u6e90\u7801\u5b9e\u4f8b\u4e2d\u5b66\u4e60!\\n\\n> \u76f4\u63a5\u5728\u641c\u7d22\u6846\u4e2d\u641c\u7d22\u4f60\u5e0c\u671b\u5b66\u4e60\u7684\u4ee3\u7801, \u7136\u540e\u5207\u6362\u5230\u4ee3\u7801\u89c6\u56fe (\u5177\u4f53\u770b\u6211\u64cd\u4f5c)\\n\\n- \u4ee5\u5b66\u4e60 C++20 \u7684\u65b0\u7279\u6027`std::span<T>` \u4e3a\u4f8b: \u4f60\u4e0d\u77e5\u9053\u4f20\u53c2\u662f\u76f4\u63a5\u6309\u62f7\u8d1d, \u8fd8\u662f\u6309\u5f15\u7528, \u5c31\u53ef\u4ee5\u770b\u770b\u77e5\u540d\u9879\u76ee\u7684\u6e90\u7801~\\n\\n## \u4e00\u3001\u5206\u4eab\\n### 1.1 \u4e2a\u4eba\u535a\u5ba2\\n\\n\u56e0\u4e3a\u7f51\u7edc\u4e0a\u7684\u5185\u5bb9\u826f\u83a0\u4e0d\u9f50, \u5f88\u591a\u90fd\u662fCV, ljAI, \u4e3a\u4e86\u6d41\u91cf\u5199\u4e9b\u6709\u7684\u6ca1\u7684, \u7279\u522b\u662f\u4ee5 `CSDN (\u8d64\u77f3\u3001\u4f4e\u80fd)` \u4e3a\u9996\u7684\u5783\u573e\u5e73\u53f0! ~~\u61d2\u5f97\u8bf4, CSDN\u8f9e\u85fb\u836f\u4e38~~\\n\\n\u56e0\u6b64, \u5efa\u7acb\u81ea\u5df1\u7b14\u8bb0\u4ed3\u5e93\u5c31\u663e\u5f97\u5c24\u4e3a\u91cd\u8981\u4e86~~ \u4e0d\u7136\u4f60\u60f3\u6bcf\u6b21\u90fd\u8d64\u77f3\u5417? \u4f60\u95eeAI\u5b83\u4e0d\u4f1a, \u5b83\u53bb\u641c\u7d22, \u770b\u5230\u53c2\u8003\u94fe\u63a5\u91cc\u9762\u6709CSDN\u7684, \u4e0d\u4e00\u6837\u662fAI\u642c\u77f3? \u8fd8\u7ed9\u4f60\u6253\u5305\u4e2a\u5916\u58f3, \u4f60\u4e0d\u61c2\u8fd8\u770b\u4e0d\u51fa\u6765...\\n\\n\u6211\u5efa\u8bae\u5404\u4f4d\u90fd\u53ef\u4ee5\u5199\u4e00\u4e0b\u535a\u5ba2(\u7b14\u8bb0), \u8bb0\u5f55\u81ea\u5df1\u65e5\u5e38\u5b66\u4e60\u7684\u5185\u5bb9, \u5230\u65f6\u5019\u5199\u7b80\u5386\u4e5f\u53ef\u4ee5\u9644\u4e0a~\\n\\n\u5c31\u50cf\u673a\u54e5\u8bf4\u7684\u4e00\u6837, \u4ed6\u81ea\u5df1\u6709 2\u4e2aT\u7684\u6b63\u7ecf\u7684\u5b66\u4e60\u8d44\u6599, \u8981\u5199\u4ec0\u4e48\u4e1c\u897f, \u76f4\u63a5\u641c\u7d22, \u5c31\u6709\u5f88\u591a\u53ef\u4ee5\u590d\u7528\u7684\u3001\u73b0\u6210\u7684\u4ee3\u7801. \u5b8c\u5168\u4e0d\u9700\u8981\u6211\u4eec\u4ece\u5934\u601d\u8003~\\n\\n> [Heng_Xin\u4e2a\u4eba\u535a\u5ba2](https://hengxin666.github.io/HXLoLi/) (~~\u65e7\u535a\u5ba2\u5df2\u505c\u6b62\u66f4\u65b0, \u5df2\u8fc1\u79fb: [\u65e7\u535a\u5ba2](https://blog.hxloli.com/blog/#/articles)~~)\\n>\\n> \u53ef\u80fdGithub Page\u56fd\u5185\u6709\u70b9\u6162... \u6211\u81ea\u5df1\u4e91\u670d\u52a1\u5668\u4e5f\u53cd\u5411\u4ee3\u7406\u4e86\u4e00\u4e0b https://www.hxloli.com/HXLoLi/ \u5c31\u53ef\u4ee5\u8bbf\u95ee\u4e86~\\n\\n<div style=\\"margin-top: 80px;\\" />\\n\\n### 1.2 \u4e2a\u4eba\u7684\u306a\u5b66\u4e60\u65b9\u6cd5\\n#### 1.2.1 \u5b66\u4e60\u65b9\u6cd5\\n\\n\u5bf9\u4e8e\u89c6\u9891, \u5982Java xxx\u5165\u95e8\u8bfe\u7a0b, \u4f60\u5e94\u8be5\u5b8c\u6574\u7684\u770b\u5b8c\u4e00\u96c6, \u7136\u540e\u5173\u95ed\u89c6\u9891, \u6309\u7167\u81ea\u5df1\u7684\u7406\u89e3\u4e0e\u5370\u8c61, \u628a\u672c\u8282\u8bfe\u7a0b\u7684\u77e5\u8bc6\u70b9\u4f7f\u7528\u4ee3\u7801\u590d\u73b0\u51fa\u6765, \u4e0d\u6c42\u5b8c\u5168\u4e00\u6837, \u4f46\u662f\u9700\u8981\u628a\u5bf9\u5e94\u7684\u77e5\u8bc6\u70b9\u7ed9\u4f7f\u7528\u5230; \u5982\u679c\u6709\u5fd8\u8bb0\u6216\u8005\u4e0d\u786e\u5b9a\u7684, \u53ef\u4ee5\u5148\u6309\u7167\u81ea\u5df1\u7684\u7406\u89e3\u5199, \u53ef\u4ee5\u5199\u6ce8\u91ca\u6807\u8bb0\u4e00\u4e0b; \u5982\u679c\u5b8c\u5168\u4e0d\u4f1a\u7684, \u53ef\u4ee5\u7528\u6ce8\u91ca\u628a\u9700\u8981\u5b9e\u73b0\u7684\u5185\u5bb9\u63cf\u8ff0\u51fa\u6765, \u7136\u540e\u8df3\u8fc7. \u7b49\u5b8c\u6210\u4e00\u8f6e, \u5c31\u53ef\u4ee5\u91cd\u65b0\u6253\u5f00\u89c6\u9891, \u62d6\u52a8\u8fdb\u5ea6\u6761\u8df3\u7740\u770b, \u628a\u4f60\u4e0d\u786e\u5b9a\u7684\u529e\u6cd5\u8fc7\u4e00\u4e0b.\\n\\n> \u5982\u679c\u662f\u8bed\u8a00\u7c7b\u8bfe\u7a0b, \u53ef\u4ee5\u76f4\u63a5\u628a\u7b14\u8bb0\u5199\u5230\u4ee3\u7801\u4e0a\\n>\\n> \u5982\u679c\u662f\u7406\u8bba\u7c7b\u8bfe\u7a0b, \u53ef\u4ee5\u5199\u5230\u7b14\u8bb0\u4e0a (\u7406\u89e3\u7684\u90e8\u5206, \u4f7f\u7528\u81ea\u5df1\u7684\u8bdd\u63cf\u8ff0\u51fa\u6765. \u4e0d\u7406\u89e3\u3001\u5e76\u4e14\u9700\u8981\u8bb0\u5fc6\u7684\u90e8\u5206, \u53ef\u4ee5\u5148\u590d\u5236\u7c98\u8d34 (\u4f46\u662f\u590d\u5236\u7c98\u8d34\u7684\u540c\u65f6, \u9700\u8981\u628a\u77e5\u8bc6\u70b9\u8fc7\u4e00\u904d\u81ea\u5df1\u8111\u5b50!))\\n>\\n> \u6bcf\u5f53\u5b66\u5b8c\u4e00\u4e2a\u5927\u7ae0\u8282, \u53ef\u4ee5\u81ea\u5df1\u5199\u4e00\u4e2a\u5c0f\u9879\u76ee\u4ec0\u4e48\u7684, \u5e76\u4e14\u8fd0\u7528\u5230\u672c\u6b21\u5b66\u8fc7\u7684\u77e5\u8bc6\u70b9, \u4ee5\u5de9\u56fa\u3001\u6d4b\u8bd5\u81ea\u5df1.\\n\\n\u5bf9\u4e8e\u6587\u6863, \u552f\u6709\u591a\u770b + \u591a\u7528 (u1s1, \u6709\u4e9b\u6587\u6863\u662f\u771f\u7684\u5783\u573e)\\n\\n- \u53e6\u5916, \u5982\u679c\u6709\u65f6\u95f4\u7684\u8bdd, \u62cd\u89c6\u9891\u590d\u76d8\u3001\u8bb2\u89e3\u4ee3\u7801\u4e5f\u662f\u4e00\u4e2a\u4e0d\u9519\u7684\u590d\u4e60\u3001\u63d0\u5347, \u5b83\u4e0d\u4ec5\u8003\u9a8c\u4f60\u5bf9\u77e5\u8bc6\u7684\u638c\u63e1, \u8fd8\u53ef\u4ee5\u953b\u70bc\u4f60\u9762\u5bf9\u955c\u5934\u7684\u80fd\u529b. (\u8ddftm\u9762\u8bd5\u4e00\u6837wc)\\n\\n<div style=\\"margin-top: 80px;\\" />\\n\\n#### 1.2.2 \u5b66\u4e60\u8def\u7ebf? (\u5b66\u4e60\u5386\u7a0b)\\n\\n![\u5b66\u4e60\u5386\u7a0b](\u5b66\u4e60\u8def\u7ebf.drawio.svg)\\n\\n### 1.3 C\u8bed\u8a00\u306e\u5206\u4eab\\n\\n\u8bfe\u7a0b: [\u5e26\u4f60\u5b66C\u5e26\u4f60\u98de](https://www.bilibili.com/video/BV17s411N78s)\\n\\n\u5b66\u4e60\u8ba1\u5212 & \u7ec3\u4e60: [C \u8bed\u8a00\u5b66\u4e60\u6307\u5317](https://github.com/HengXin666/DianKongMengXinC)\\n\\n> C\u6ca1\u6709\u5565\u5b50\u4e1c\u897f\u7684, \u4ec5\u4ec5\u662f\u57fa\u7840\u8bed\u6cd5\u7684\u8bdd.\\n\\n\u63d0\u4e00\u4e0b, vs2022 \u4e0d\u652f\u6301\u4e00\u4e9b\u8bf8\u5982VLA\u7684c99\u7684c\u8bed\u8a00\u7684\u7279\u6027:\\n\\n```c\\nint n;\\nscanf(\\"%d\\", &n);\\nint arr[n]; // vs2022\u62a5\u9519\\n```\\n\\n\u4e5f\u4e0d\u63a8\u8350\u4f7f\u7528\u8fd9\u4e2a, \u8fdelinux\u5185\u6838\u90fd\u4e3a\u5728\u4ee3\u7801\u4e2d\u5b8c\u5168\u79fb\u9664VLA\u7684\u4f7f\u7528\u800c\u53d1\u516c\u544a\u5e86\u795d\u3002\\n\\n\u4f60\u5c31\u5e94\u8be5\u77e5\u9053, \u8fd9\u4e0d\u662f\u4e00\u4e2a\u597d\u4e1c\u897f, \u4e5f\u4e0d\u9002\u7528\u4e8e\u4e4b\u540e\u7684cpp\u4ee5\u53cacpp\u7684\u5143\u6a21\u7248\u7f16\u7a0b (\u603b\u4e4b\u4e0d\u5b89\u5168, \u6027\u80fd\u4e5f\u96be\u8bf4)\\n\\n> [!TIP]\\n> \u867d\u7136\u6211\u8bb2\u8fc7\u8fd9\u4e2a\u4e1c\u897f\u4e86... \u4f46\u662f\u4e8b\u5b9e\u8bc1\u660e, \u8fd8\u662f\u4f1a\u6709\u4eba\u6765\u95ee\u8fd9\u4e2a VAL...\\n\\n<div style=\\"margin-top: 80px;\\" />\\n\\n### 1.4 C++\u306e\u5206\u4eab\\n#### 1.4.1 \u4e2a\u4eba\u7b14\u8bb0 & \u914d\u5957\u7b14\u8bb0\u9879\u76ee\\n\\n- ~~[CToCpp By Github](https://github.com/HengXin666/C-To-Cpp) (\u4e8b\u5b9e\u8bc1\u660e, \u8fd9\u4e2a\u53ea\u80fd\u4f5c\u4e3a\u4e00\u79cd\u76ee\u5f55, \u53ea\u5bf9\u4eb2\u624b\u5199\u5b83\u7684\u4eba\u6709\u7528)~~\\n\\n- [Cpp-CMake-Template](https://github.com/HengXin666/Cpp-CMake-Template) (\u8de8\u5e73\u53f0\u7684\u73b0\u4ee3\u7684C++ CMake \u9879\u76ee\u6a21\u7248)\\n\\n- \u5927\u5bb6\u53ef\u4ee5\u628a\u81ea\u5df1\u7684\u5b66\u4e60\u7b14\u8bb0\u3001\u5b9e\u9a8c\u4ee3\u7801\u4ec0\u4e48\u7684, \u53d1\u5230github, \u6709\u5907\u4efd, \u800c\u4e14\u6709\u5386\u53f2\u8bb0\u5f55. \u6bd4\u5982: [HXTest](https://github.com/HengXin666/HXTest)\\n\\n#### 1.4.2 \u5b9d\u85cfUP\u63a8\u8350\\n\\n(\u57fa\u7840\u8bed\u6cd5\u627e\u4e2a\u4f60\u770b\u5f97\u4e0b\u53bb\u7684\u5c31ok, \u53cd\u6b63\u90fd\u4e0d\u662f`\u73b0\u4ee3C++`)\\n\\n- [\u7231\u7f16\u7a0b\u7684\u5927\u4e19](https://space.bilibili.com/147020887): \u901a\u4fd7\u6613\u61c2\u8bb2\u89e3C++\u7684\u4e00\u4e9b\u5165\u95e8\u7684\u4e1c\u897f.\\n\\n    > \u8bb2\u7684\u5f88\u7ec6; \u4f46\u662f\u662fC++11\u9644\u8fd1\u7684\u4e1c\u897f, \u5e76\u4e14\u6ca1\u6709\u8bb2`\u5143\u6a21\u7248\u7f16\u7a0b`, \u9002\u5408\u5165\u95e8, \u5b66\u4e60\u6982\u5ff5.\\n\\n- **\u4e0d** \u9762\u5411\u840c\u65b0\u7684: (\u6b64\u5904\u4e3a`\u73b0\u4ee3C++`, \u5373\u4fbf\u5df2\u7ecf\u5b66\u8fc7\u4e00\u6b21\u8fd9\u4e9b\u77e5\u8bc6, \u4f46\u4f60\u518d\u770b\u4ed6\u4eec\u7684\u89c6\u9891, \u4e00\u6837\u4f1a\u61f5\u903c! \u53d6\u800c\u4ee3\u4e4b\u7684\u662f, nb\u7684\u77e5\u8bc6\u6536\u76ca!!)\\n    \\n    \u8fdb\u9636\u8bed\u6cd5: ((\u5362\u745f\u56fd-\u56fd\u738b)\u767d\u5f8b\u5e08) [mq\u767dcpp](https://space.bilibili.com/1292761396)\\n\\n    \u4f1f\u5927\u65e0\u9700\u591a\u8a00!!! HX\u8ba4\u53efC++\u7b2c\u4e00\u4eba!!! \u5c0f\u5f6d\u8001\u5e08!\\n    - [\u53cc\u7b19\u5b50\u4f6f\u8c2c](https://space.bilibili.com/263032155/)\\n    - \u89c6\u9891\u91cf\u5927\u7ba1\u9971! \u4e00\u4e2a\u5c0f\u65f6\u7684\u89c6\u9891, \u4f60\u4f1a\u572815min\u5de6\u53f3\u5c31\u5f00\u59cb\u61f5\u903c: \u53d1\u751f\u4ec0\u4e48\u4e8b\u4e86?\\n\\n- \u9ad8\u7ea7\u73b0\u4ee3\u5b9e\u8df5: \u53ef\u4ee5\u770b\u770b\u8bf8\u5982`purecpp\u5927\u4f1a`\u4e4b\u7c7b\u7684\u4f1a\u8bae, \u91cc\u9762\u6709\u5f88\u591a\u5927\u4f6c\u5206\u4eab\u524d\u6cbf\u77e5\u8bc6\u3001\u6280\u5de7.\\n\\n<div style=\\"margin-top: 80px;\\" />\\n\\n### 1.5 Java\u306e\u5206\u4eab\\n#### 1.5.1 \u4e2a\u4eba\u9879\u76ee\\n\\n[HX-ANiMe](https://github.com/HengXin666/HX-ANiMe) \u5df2\u7ecf\u5728\u81ea\u6211\u4ecb\u7ecd\u5904\u5199\u4e86, \u8fd9\u91cc\u4e0d\u91cd\u590d. \u4e5f\u4e0d\u7b97\u4ec0\u4e48\u5389\u5bb3\u7684\u4e1c\u897f =-=\\n\\n\u6211\u5012\u662f\u4e3a Java \u5199\u4e86\u4e00\u4e2a\u5e93, \u4e4b\u540e\u7684\u5c0f\u9879\u76ee, \u5e94\u8be5\u53ef\u4ee5\u7528\u4e0a: [HXCin](https://github.com/HengXin666/HXCin), \u53ef\u4ee5\u5b9e\u73b0\u975e\u963b\u585e\u8f93\u5165, \u57fa\u4e8eswing\u76d1\u542c\u952e\u76d8, \u800c\u4e0d\u662f\u624b\u52a8\u63a7\u5236\u53f0\u8f93\u5165! \u8f93\u5165\u65e0\u9700\u56de\u8f66~\\n\\n#### 1.5.2 UP\u63a8\u8350\\n\\n(\u666e\u901a\u7684\u90a3\u4e9b, \u627e\u4e2a\u64ad\u653e\u91cf\u9ad8, \u770b\u5f97\u4e0b\u53bb\u7684\u5c31\u884c), \u4e0b\u9762\u662f\u8fdb\u9636\u7684 (\u5e94\u8be5\u8bf4\u662f **\u540e\u7aef** \u7684\u901a\u7528\u601d\u60f3\u4e86)\\n\\n- [\u6781\u6d77Channel](https://space.bilibili.com/1525355/)\\n\\n    > \u4e13\u6ce8java\u540e\u7aef, \u53ef\u4ee5\u770b\u770b\u4ed6\u7684\u4ee3\u7801review, \u53ef\u4ee5\u5b66\u5230\u5f88\u591a\u4e1c\u897f.\\n    >\\n    > \u8fd8\u6709\u5927\u5382\u7684\u670d\u52a1\u5d29\u6e83\u539f\u56e0\u5206\u6790...\\n\\n- [\u5b66java\u7684\u751f\u751f](https://space.bilibili.com/7968519)\\n\\n    > \u7ebf\u7a0b\u6c60\u3001\u4e92\u65a5\u9501\u7b49\u624b\u5199\u7cfb\u5217, \u8bb2\u7684\u5f88\u7cbe\u7b80\u4f46\u53c8\u5f88\u6709\u6df1\u5ea6, \u9014\u4e2d\u4f1a\u4e00\u6b65\u6b65\u5347\u7ea7\u3001\u4fee\u6539\u4ee3\u7801. \u9002\u5408java\u8001\u54e5\u6df1\u5165\u6e90\u7801~\\n\\n- [\u5b5f\u5c0f\u54e5\u6293\u866bvlog](https://space.bilibili.com/472502549)\\n\\n    > \u4ee5\u732bmeme\u7684\u65b9\u5f0f, \u4e00\u6ce2\u4e09\u6298\u7684\u4ecb\u7ecd\u5c0f\u77e5\u8bc6, \u89c6\u9891\u5f88\u77ed. \u53ef\u4ee5\u5b66\u5230\u4e00\u4e9bbug\u7684de\u7684\u65b9\u6cd5. \u5c24\u5176\u662f\u5982\u679c\u8fd9\u4e2abug\u4f60\u4e4b\u524d\u6709\u9047\u5230\u8fc7, \u8bf4\u4e0d\u5b9a\u5c31\u5728\u8fd9\u91cc\u627e\u5230\u66f4\u597d\u7684\u89e3\u51b3\u65b9\u6848!\\n\\n- [\u968f\u610fOfficial](https://space.bilibili.com/79356601)\\n\\n    > ~~\u8fd9\u4e2a\u6211\u5fd8\u8bb0\u4e86\u6211\u4e3a\u4ec0\u4e48\u5173\u6ce8\u4e86...(\u987a\u4fbf\u4e00\u8d77\u653e\u8fd9\u91cc\u4e86)~~, \u76ee\u524d\u7528\u4e0d\u4e0a\u5b9e\u529b\u4e0d\u591fqwq\\n\\n<div style=\\"margin-top: 80px;\\" />\\n\\n### 1.6 \u7b97\u6cd5\u306e\u5206\u4eab\\n#### 1.6.1 0x3f\\n\\n\u7b97\u6cd5\u6ef4\u795e!!!\\n\\nB\u7ad9: https://space.bilibili.com/206214\\n\\n\u529b\u6263: https://leetcode.cn/u/endlesscheng/\\n\\n\u770b\u770b\u7075\u795e\u9898\u5355! \u529b\u6263\u6ca1\u6709\u7075\u795e, \u76f4\u63a5\u5c31\u7834\u4ea7\u597d\u5427!\\n\\n\u6253\u6253\u529b\u6263\u5468\u8d5b, \u8fdb\u53bb\u7075\u795e\u4ea4\u6d41\u7fa4\u5427, \u91cc\u9762\u5168\u662fdalao! (u1s1, \u6700\u8fd1\u4e00\u5e74\u529b\u6263\u4e3a\u4e86\u9632AI, \u5468\u8d5b\u96be\u5ea6\u6025\u5267\u4e0a\u5347! \u4ee5\u524d T4 \u7684\u96be\u5ea6, \u73b0\u5728 T3 \u90fd\u4e0d\u4e00\u5b9a\u6bd4\u5f97\u4e0a...)\\n\\n#### 1.6.2 \u5b66\u4e60\u65b9\u6cd5 (\u7eaf\u4e2a\u4eba\u89c1\u89e3)\\n\\n\u54b1\u4eec\u4ee5C++\u4e3a\u4f8b, java\u65b9\u6cd5\u540d\u592a\u957f\u4e86, \u6ca1\u6709Tab\u6211\u600e\u4e48\u6d3b...\\n\\n\u65f6\u95f4\u5145\u5206\u60c5\u51b5\u4e0b\\n\\n1. \u7cfb\u7edf\u7684\u5b66\u4e60`\u6570\u636e\u7ed3\u6784\u4e0e\u7b97\u6cd5`, \u5fc5\u987b\u8981\u628a\u8bb2\u5230\u7684\u5185\u5bb9\u90fd\u52a8\u624b\u5b9e\u73b0\u4e00\u6b21!!!\\n\\n\u6700\u597d\u7528C\u8bed\u8a00/C++(\u975eSTL)\u5b9e\u73b0, \u53ef\u4ee5\u8ba9\u4f60\u66f4\u52a0\u660e\u767d\u5e95\u5c42, \u800c\u4e0d\u662f\u88ab\u5404\u79cd\u62bd\u8c61...\\n\\n2. \u5237\u9898, \u6839\u636e\u9898\u5355\u7cfb\u7edf\u7684\u5237, \u800c **\u4e0d\u662f** \u968f\u673a\u5237\u6216\u8005\u72c2\u5237\u7b80\u5355\u9898!\\n\\n\u5728\u8fd9\u4e2a\u8fc7\u7a0b\u4e2d, \u719f\u6089\u5b66\u4e60\u5230\u7684\u6570\u636e\u7ed3\u6784\u7684\u4f18\u70b9\u4e0e\u4f7f\u7528\u573a\u666f (\u6839\u636e\u65f6\u7a7a\u590d\u6742\u5ea6\u5224\u65ad)\\n\\n\u4e00\u5b9a\u7a0b\u5ea6\u4e86, \u53ef\u4ee5\u53c2\u52a0\u529b\u6263\u5468\u8d5b\u4ec0\u4e48\u7684\\n\\n> [!TIP]\\n> (PS \u84dd\u6865\u676f\u5b98\u7f51\u90a3\u4e2a\u5468\u8d5b\u5c31\u662fxx, \u4e3a\u4e86\u5356\u8bfe\u7684yy, \u96be\u5ea6\u8de8\u5ea6\u5f88\u5927.. \u840c\u65b0\u4f1a\u6000\u7591\u4eba\u751f\u7684)\\n>\\n> \u8d85\u60f3\u63d0\u5347\u80fd\u529b\u7684(\u6253acm\u4ec0\u4e48\u7684), \u53bbcf\u5237\u9898, \u90a3\u91cc\u5f88\u591a\u601d\u7ef4\u9898\u3001\u6784\u9020\u9898. ~~(\u4e0d\u8fc7\u73b0\u5728\u624d\u77e5\u9053\u5e94\u8be5\u6709\u70b9\u665a\u4e86\u5427qwq?)~~ \u552f\u4e00\u7684\u95ee\u9898\u5c31\u662fui\u592a\u4e11\u4e86(\u7b80\u7565), \u756a\u9b3c\u4f6c\u8bed(Eglx), \u4ee5\u53ca\u9634\u95f4\u65f6\u95f4.\\n\\n3. \u53ef\u4ee5\u51c6\u5907 **\u81ea\u5df1\u7684\u7b97\u6cd5\u677f\u5b50**, \u8fd9\u7c7b\u4f3c\u4e8e\u81ea\u5df1\u7684\u5f52\u7eb3\u603b\u7ed3!\\n\\n\u84dd\u6865\u676f\u771f\u9898\uff0c\u5237\u5237\u5237(\u8fd9\u4e2a\u597d\u50cf\u5931\u6548\u4e86? \u8fd8\u662f\u670d\u52a1\u5668\u70b8\u4e86?) https://dashoj.com/d/lqbproblem/training/65e4d2a5fd6da41599add473\\n\\n> [!TIP]\\n> \u4e3a\u4ec0\u4e48\u4e0d\u770b: [\u5982\u4f55\u79d1\u5b66\u5237\u9898](https://leetcode.cn/discuss/post/RvFUtj/)\\n\\n#### 1.6.3 \u788e\u788e\u5ff5: \u4ee3\u7801\u89c4\u8303\\n\\n\u5bf9\u4e8e\u4ee3\u7801\u89c4\u8303! \u4e2a\u4eba\u8ba4\u4e3a, \u8be5\u6709\u7684\u7f29\u8fdb, \u4e0d\u80fd\u5c11:\\n\\n```C++ [z2-\u7cdf\u7cd5\u7684\u7801\u98ce]\\n// \u62dc\u6258, \u4f60\u80fd\u4e0d\u80fd\u6253\u4e2a\u7a7a\u683c?!?!\\nint a=b*666+114514;\\nint mid=l+(r-l)/2;\\nif(isFk()){\\n    // todo...\\n}\\nfor(int i=0;i<n;i++){\\n    if(isFk()) continue;\\n    else if(isFkToo()) break;\\n    else cnt++;\\n\\n    if (isAK47()) {\\n        // todo\\n        // tododo\\n    } else break; // \u8fd9\u91cc\u662f\u81ea\u5df1\u53d1\u660e\u4e00\u79cd else break; \u8bed\u6cd5\u5417?\\n}\\n```\\n\\n```C++ [z2-\u683c\u5f0f\u5316\u540e]\\nint a = b * 666 + 114514;\\nint mid = l + (r - l) / 2;\\n\\nif (isFk()) {\\n    // todo...\\n}\\n\\nfor (int i = 0; i < n; ++i) {\\n    if (isFk()) \\n        continue;\\n    else if (isFkToo()) \\n        break;\\n    else \\n        ++cnt;\\n\\n    if (isAK47()) {\\n        // todo\\n        // tododo\\n    } else {\\n        break; // \u8981\u6c42: \u5f53 if \u7684\u4e00\u6bb5\u6709\u4f7f\u7528 {}, \u90a3\u4e48\u6574\u4f53\u90fd\u5e94\u8be5\u4f7f\u7528 {}\\n    }\\n}\\n```\\n\\n```c++ [z2-\u4fe9\u6570\u4e4b\u548c(\u4e71)]\\n#include<bits/stdc++.h>\\nusing namespace std;\\nint main(){\\n    int a,b,c,d[10005],e=0;\\n    cin>>a>>b;\\n    while(a--){\\n        cin>>c;\\n        d[e++]=c;\\n    }\\n    for(int i=0;i<e;i++)\\n    for(int j=i+1;j<e;j++)\\n    if(d[i]+d[j]==b){\\n        cout<<\\"YES\\";\\n        return 0;\\n    }\\n    cout<<\\"NO\\";\\n}\\n```\\n\\n```c++ [z2-\u4fe9\u6570\u4e4b\u548c(\u683c)]\\n#include <iostream>\\n#include <vector>\\n\\nusing namespace std;\\n\\nint main() {\\n    int n, target;\\n    cin >> n >> target;\\n\\n    vector<int> arr(n);\\n    for (int& v : arr)\\n        cin >> v;\\n\\n    if ([&] {\\n        for (int i = 0; i < n; ++i)\\n            for (int j = i + 1; j < n; ++j)\\n                if (arr[i] + arr[j] == target)\\n                    return true;\\n        return false;\\n    } (arr, target)) {\\n        cout << \\"YES\\\\n\\";\\n    } else {\\n        cout << \\"NO\\\\n\\";\\n    }\\n\\n    return 0;\\n}\\n```\\n\\n\u4e2a\u4eba\u8ba4\u4e3a\u8fd9\u4e2a\u662f\u4e00\u4e2a\u7cdf\u7cd5\u7684\u4e60\u60ef!! \u7cdf\u7cd5\u7684\u7801\u98ce!!\\n\\n```katex\\n\u8282\u7ea6\u51e0\u4e2a\u7a7a\u683c, \u4e0d\u4f1a\u8ba9\u4f60\u7684\u65f6\u95f4\u591a\u5bf9\u4e00\u9053\u9898 \\\\\\\\ \\\\ \\\\\\\\ \u4f46\u6392bug\u7684\u65f6\u95f4, \u4f1a\u8ba9\u4f60\u62c9\u4e0b\u51e0\u9053\u9898!\\n```\\n\\n> [!TIP]\\n> \u771f\u6b63\u7684\u5927\u4f6c, \u4f60\u770b\u4ed6\u7684\u4ee3\u7801, \u603b\u662f\u5f88\u7b80\u6d01\u7684!\\n>\\n> \u56e0\u4e3a\u552f\u6709\u5bf9\u9898\u76ee\u7684\u7406\u89e3\u6df1\u523b, \u624d\u53ef\u4ee5\u5199\u51fa\u5982\u6b64\u7b80\u6d01\u7684\u4ee3\u7801.\\n>\\n> \u53cd\u5012\u662f\u4ee3\u7801\u5199\u7684\u4e71\u4e03\u516b\u7cdf\u7684, \u4ed6\u7684\u601d\u7ef4\u4e5f\u5f80\u5f80\u548c\u4ed6\u7684\u4ee3\u7801\u4e00\u6837\u4e71\u4e03\u516b\u7cdf\u7684 (\u56e0\u4e3a\u6539\u6765\u6539\u53bb\u4ec0\u4e48\u7684..)\\n\\n---\\n\\n\u56e0\u6b64, \u6211\u4eec\u770b\u9898\u89e3\u4ec0\u4e48\u7684, \u5e94\u8be5\u5411\u4ed6\u4eec\u5b66\u4e60!\\n\\n\u4e0d\u61c2\u7684\u9898\u76ee, \u6211\u4eec\u5b66\u4ed6\u4eec\u7684\u601d\u8def.\\n\\n\u5199\u51fa\u6765\u7684\u9898\u76ee, \u6211\u4eec\u5b66\u4ed6\u4eec\u7684\u4ee3\u7801!\\n\\n---\\n\\n\u6545\u6b64, \u5982\u679c\u4f60\u4ec5\u4ec5\u662f\u4e3a\u4e86\u5c31\u4e1a, \u90a3\u4e48\u6ca1\u4ec0\u4e48\u597d\u8bf4\u7684, \u76f4\u63a5\u5237\u529b\u6263\u5c31\u5b8c\u7f8e\u4e86\\n\\n\u529b\u6263\u7684\u597d\u5904:\\n\\n1. \u754c\u9762UI\u6f02\u4eae\\n\\n2. \u63a5\u53e3\u5b9e\u73b0\u5f0f\u7f16\u7a0b, \u8fd9\u548c\u4e0a\u73ed\u5199\u4ee3\u7801\u4e00\u6837, `\u5927\u591a\u6570\u65f6\u5019, \u63a5\u53e3\u90fd\u662f\u522b\u4eba\u67b6\u6784\u597d\u7684`, \u53cd\u800c\u4f60\u79c1\u81ea\u6539\u4e86, \u4f60\u5c31\u8981free\u4e86\\n\\n3. \u53cb\u597d\u7684\u8f93\u5165\u8f93\u51fa\u7528\u4f8b\u63d0\u9192. \u4e0d\u50cf`\u6d1b\u8c37`, \u5927\u591a\u6570\u65f6\u5019\u4f60\u9519\u54ea\u91cc\u4f60\u90fd\u4e0d\u77e5\u9053, \u4e5f\u65e0\u6cd5\u6392\u67e5.\\n\\n4. \u9898\u89e3\u8d28\u91cf\u9ad8, \u5982\u679c\u9898\u89e3\u6709`\u7075\u795e`\u5199\u7684, \u90a3\u4f60\u653e\u5fc3, \u5373\u4fbf\u4e0d\u4f1a\u4f60\u4e5f\u80af\u5b9a\u53ef\u4ee5\u4ece\u7075\u795e\u9898\u89e3\u4e2d\u5b66\u5230\u4e1c\u897f! \u53cd\u4e4b, \u67d0\u4e9b\u5783\u573eoj, \u8981\u4e48\u6ca1\u6709\u9898\u89e3, \u8981\u4e48\u9898\u89e3\u90fd\u662f\u522b\u4eba\u7c98\u8d34\u81ea\u5df1\u90a3\u7834\u4ee3\u7801, \u8ddf\u52a0\u4e86\u5bc6\u4e00\u6837, \u4e00\u70b9\u89e3\u91ca\u90fd\u6ca1\u6709, \u8fd9\u79cd\u5f88\u96be\u6709\u63d0\u5347!\\n\\n5. \u73b0\u4ee3, \u652f\u6301\u8bb8\u591a\u8bed\u8a00, \u5e76\u4e14\u652f\u6301\u5f88\u591a\u65b0\u7279\u6027 (\u6bd4\u5982C++23) (\u8981\u77e5\u9053, \u84dd\u6865\u676f\u6bd4\u8d5b\u4f60\u53ef\u4ee5\u4f7f\u7528\u7684\u6700\u9ad8\u6807\u51c6\u662ftm\u7684C++11, \u8fd9\u5df2\u7ecf\u662f14\u5e74\u524d\u7684\u4e1c\u897f\u4e86, \u771f\u4ee5\u4e3a\u5199\u4e2aC++98\u81ea\u5df1\u5c31\u662f985\u554a? \u5e7d\u9ed8\u539f\u59cb\u84dd\u6865\u676f)\\n\\n\u4ec0\u4e48\u4f60\u8bf4\u7b97\u6cd5\u7ade\u8d5b\u8981\u6d1b\u8c37? \u5f97\u4ece\u6d1b\u8c37\u7684\u840c\u65b0\u9898\u5355\u5199\u8d77? \u529b\u6263\u7684\u592a\u7b80\u5355\u4e86?\\n\\n\u4e0d\u662f\u5427\u54e5\u4eec? \u4f60\u968f\u673a\u4e00\u9053\u56f0\u96be\u9898\u53ef\u4ee510\u5206\u949f\u5185\u79d2\u4e86\u5417? \u529b\u6263\u5468\u8d5b\u53ef\u4ee5\u56fd\u670d\u7a33\u524d200\u5417?\\n\\n<b style=\\"color: gold\\"> \u6839\u672c\u4e0d\u9700\u8981\u5565\u4e5f\u4e0d\u61c2\u7136\u540e\u5c31\u542c\u4e00\u4e2a\u6d1b\u8c37\u504f\u7b97\u6cd5, \u5c31\u8dd1\u53bb\u7b97\u6cd5\u5237\u9898. \u5b9e\u9645\u4e0a\u4f60\u8fde\u4f60\u6240\u8c13\u7684\u529b\u6263\u7b80\u5355\u7684\u9898\u90fd\u4e0d\u4f1a\u5199. \u5230\u65f6\u5019\u53ea\u4f1a\u62ff\u4e00\u4e2a\u6ca1\u6709\u63d0\u4ea4, \u6ca1\u6709\u7528\u4f8b, case\u6570\u636e\u4e71\u4e03\u516b\u7cdf\u7684\u5783\u573e\u9898\u5728\u90a3\u91cc\u6d6a\u8d39\u4eba\u751f+\u81ea\u6211\u6000\u7591. </b>\\n\\n\u8fd8\u4e0d\u5982\u5148\u53bb\u65b0\u624b\u6751\u7ec3\u4e60\u5462.\\n\\n\u81f3\u4e8e\u4f60\u8bf4\u7684\u8f93\u5165\u8f93\u51fa, \u4f60\u5230\u65f6\u5019\u968f\u4fbf\u7ec3\u4e2a\u51e0\u5341\u9053\u9898, \u8fd8\u4f1a\u4e0d\u61c2\u5417?\\n\\n> \u7efc\u4e0a, \u5927\u5bb6\u53ef\u4ee5\u5ba1\u89c6\u4e00\u4e0b\u81ea\u5df1\u4f7f\u7528\u7684\u5237\u9898\u5e73\u53f0, \u770b\u770b\u6709\u6ca1\u6709\u8fd9\u4e9b\u6bdb\u75c5? \u7279\u522b\u662f\u90a3\u4e9b\u4f7f\u7528\u5b66\u6821\u7684oj\u7684. \u9664\u975e\u4f60\u662facm oi\u7237, \u4e0d\u7136\u4f60\u5f88\u96be\u5b66\u5230\u4ec0\u4e48\u4e1c\u897f...\\n\\n---\\n\\n\u7279\u522b\u7684, \u5bf9\u4e8e\u4f7f\u7528\u5168\u5c40\u53d8\u91cf\u7684\\n\\n```C++\\n#define ll long long\\n\\nint arr[10005];\\n\\nint main() { /**/ }\\n```\\n\\n\u5e94\u8be5\u91c7\u7528\u66f4\u52a0\u73b0\u4ee3\u7684C++\u5199\u6cd5: (\u4f7f\u7528STL\u5bb9\u5668, \u8fd9\u5728-o2\u4f18\u5316\u4e0b, \u65e0\u6027\u80fd\u635f\u5931!)\\n\\n```C++\\nusing ll = long long;\\n\\nint main() {\\n    int n;\\n    scanf(\\"%d\\", &n);\\n    std::vector<int> arr(n);\\n}\\n```\\n\\n\u56fe\u4e5f\u6ca1\u6709\u5fc5\u8981\u5b66\u4ec0\u4e48\u94fe\u5f0f\u524d\u5411\u661f\u4e86, \u4e0b\u9762\u5c31\u662f\u4e00\u79cd\u7b80\u5355\u7684\u90bb\u63a5\u8868\u4e86\\n\\n```C++\\nvector<vector<int> g(n);\\n\\nwhile (n--) {\\n    cin >> u >> v;\\n    g[u].push_back(v); // u --\x3e v\\n}\\n```\\n\\n\\n<div style=\\"margin-top: 80px;\\" />\\n\\n### 1.7 \u795e\u5947\u7684\u7f51\u7ad9\u5206\u4eab\\n#### 1.7.1 \u516c\u6709\\n\\n- \u5907\u5fd8\u5f55 [Quick Reference](https://github.com/jaywcjlove/reference) -> \u56fd\u5185\u955c\u50cf\u7f51\u7ad9: https://dev.bi/\\n\\n- [OI Wiki](https://github.com/OI-wiki/OI-wiki) \uff08\u67d0\u5927\u578b\u6e38\u620f\u7ebf\u4e0a\u653b\u7565\uff0c\u5185\u542b\u70ab\u9177\u7b97\u672f\u9b54\u6cd5\uff09-> https://oi-wiki.org/\\n\\n#### 1.7.2 C++\\n\\n- C/C++ \u53bb\u4f18\u5316 https://cppinsights.io/ (\u4f1a\u628a\u8bed\u6cd5\u7cd6\u8f6c\u5316\u4e3a\u7f16\u8bd1\u5668\u5b9e\u73b0\u3001\u6c47\u7f16)\\n\\n- C/C++ \u624b\u518c https://zh.cppreference.com/w/%E9%A6%96%E9%A1%B5\\n\\n- \u767d\u5f8b\u5e08\u7684\\n\\t- C++\u73b0\u4ee3\u6a21\u7248\u6559\u7a0b https://mq-b.github.io/Modern-Cpp-templates-tutorial/\\n    - C++\u5e76\u53d1\u7f16\u7a0b https://mq-b.github.io/ModernCpp-ConcurrentProgramming-Tutorial/\\n\\n- \u5c0f\u5f6d\u8001\u5e08\u7684\u7f51\u7ad9 https://142857.red/\\n\\n- \u67e5\u8be2c++\u7b2c\u4e09\u65b9\u5e93\u662f\u5426\u4e3a\u6a21\u5757 https://arewemodulesyet.org/ (\u4e0d\u5e38\u7528)\\n\\n- \u840c\u65b0C++\u7f51\u7ad9 (\u4e3a\u4ec0\u4e48\u4f1a\u5728\u6211\u7684\u6536\u85cf\u91cc\u9762? \u53ef\u80fd\u662f\u6211\u60f3\u8981\u4ed6\u7f51\u7ad9\u7684\u8fd0\u884c\u529f\u80fd...) https://learn-cpp.guyutongxue.site/preface.html\\n\\n#### 1.7.3 Java\\n\\njava\u8001\u54e5\u62b1\u6b49, \u6211\u90fd\u662f\u73b0\u7528\u73b0\u641c\u7d22\u7684... \u76ee\u524d\u6ca1\u6709\u4ec0\u4e48\u597d\u7f51\u7ad9\\n\\n\u4f46\u662fGPT\u4e0d\u9519\u634f..\\n\\n## \u4e8c\u3001\u5c0f\u7ec4\\n### 2.1 \u5c0f\u7ec4\u7684\u7ba1\u7406\\n\u6d3b\u7528`\u7fa4\u516c\u544a`, \u5229\u7528QQ\u7fa4\u673a\u5668\u4eba!\\n\\n### 2.2 \u6253\u5361\u7684\u95ee\u9898 (\u5982\u679c\u6709)\\n\\n\u4e66\u5199\u6253\u5361\u8868\u7684\u683c\u5f0f:\\n\\n||\u7b2cn\u5929<br>\u683c\u5f0f\u4e00|\u7b2cn+1\u5929<br>\u683c\u5f0f\u4e8c|\\n|:-:|:-:|:-:|\\n|Heng_Xin(\u8ba1\u5212)|\u5b66\u4e60C++[\u7c7b\u7684\u865a\u51fd\u6570]|\u5b66\u4e603h|\\n|Heng_Xin(\u5b9e\u9645)|\u5b66\u4e86\u865a\u51fd\u6570\u548c\u7eaf\u865a\u51fd\u6570\u4e0e\u63a5\u53e3, \u5e76\u4e14\u4ee3\u7801\u7ec3\u4e60\u4e86|\u5b66\u4e86\u5b57\u7b26\u4e32\u54c8\u5e0c, \u5237\u4e863\u9053\u529b\u6263\u56f0\u96be\u9898, \u53d1\u73b0\u5b57\u7b26\u4e32\u54c8\u5e0c\u771f\u7684\u662f\u5b57\u7b26\u4e32\u754c\u7684\u6d1b\u5fc5\u8fbe! \u9047\u4e8b\u4e0d\u51b3\u5c31\u662f\u54c8\u5e0c, \u5355\u54c8\u5e0c\u4e0d\u884c\u5c31\u53cc\u54c8\u5e0c! \u53bbtmd\u7684kmp\u3001\u9a6c\u62c9\u8f66\u3001Z\u51fd\u6570, \u8001\u5b50\u5c31\u662f\u54c8, \u6bd4\u54c8\u54c8\u59d0\u8fd8\u80fd\u54c8!~ (\u9700\u8981\u5199\u8be6\u7ec6\u4e00\u70b9)|\\n\\n(\u751a\u81f3\u4f60\u5199\u4e00\u4e2a\u7b80\u5355\u7684\u65e5\u8bb0\u4e5f\u6ca1\u6709\u95ee\u9898)\\n\\n\u9519\u8bef\u7684\u5199\u6cd5: (<span style=\\"color:red\\">\u6211\u8fd9\u8fb9\u4e25\u5389\u6253\u51fb\u55f7</span>, \u4e4b\u540e!)\\n\\n- \u8ba1\u5212: \u5237\u9898; \u5b9e\u9645: \u5237\u9898\\n- \u8ba1\u5212: \u5b66\u4e603h; \u5b9e\u9645: \u5b66\u4e86\\n\\n(<span style=\\"color:gold\\">\u6211\u8ba4\u4e3a\u662f\u65e0\u6548\u6253\u5361, \u76d1\u7763\u5b98\u4e0d\u8981\u8ba9\u8fd9\u79cd\u60c5\u51b5\u51fa\u73b0! \u592a\u6577\u884d\u4e86! \u611f\u89c9\u5c31\u662f\u6ca1\u6709\u5b66\u561b!</span>)\\n\\n- \u5173\u4e8e\u76d1\u7763\u5b98\u786e\u8ba4\\n\\n    > \u53ea\u8981\u4f60\u63d0\u9192\u4e86\u4ed6, \u4f60\u5c31\u53ef\u4ee5\u786e\u8ba4\u4e86, \u8fd9\u91cc\u53ea\u662f\u786e\u4fdd\u662f\u76d1\u7763\u5b98\u5c65\u884c\u4e86\u804c\u8d23~ \u8fd9\u6837\u60e9\u7f5a\u5c31\u53ef\u4ee5\u76f4\u63a5\u60e9\u7f5a\u7ec4\u5458\u4e86~ \u800c\u4e0d\u662f: \u76d1\u7763\u5b98\u6ca1\u63d0\u9192 + \u7ec4\u5458\u6ca1\u6253\u5361\\n\\n### 2.3 \u9879\u76ee\u8003\u6838\u9898\\n\\n\u5ba1\u6838\u6807\u51c6:\\n1. \u5168\u5c40\u53d8\u91cf/\u9759\u6001\u53d8\u91cf(\u53d8\u91cf\u7c7b\u578b/\u53d8\u91cf\u540d) <span style=\\"color:red\\">[\u4e0d\u5141\u8bb8\u4fee\u6539]</span>\\n2. \u51fd\u6570\u58f0\u660e(\u53c2\u6570, \u8fd4\u56de\u503c, \u51fd\u6570\u540d\u6b21) <span style=\\"color:red\\">[\u4e0d\u5141\u8bb8\u4fee\u6539]</span>\\n3. \u51fd\u6570\u7684 **\u4ee3\u7801\u5b9e\u73b0\u903b\u8f91** \u548c **\u529f\u80fd\u63cf\u8ff0** \u8981\u80fd`\u5bf9\u5e94`\u4e0a, \u786e\u4fdd **\u4ee3\u7801\u8d28\u91cf** \u548c **\u53ef\u8bfb\u6027**!\\n\\n- \u9664\u4e86\u6280\u672f\u5b98\u4ee5\u5916\u7684\u540c\u5b66, \u4e0d\u8981\u6c42\u5b9e\u73b0`isWin`\u548c`gameView` ~~(\u4f60\u5b9e\u73b0\u4e86, \u6211\u4e5f\u4e0d\u770b =-=, \u6211\u770b\u4e0d\u8fc7\u6765, \u5b66\u957f\u8fd9\u8fb9\u4e5f\u6709\u5ba1\u6838\u7684)~~\\n- \u6280\u672f\u5b98\u9700\u8981\u53e6\u5916\u63d0\u4ea4\u8fd0\u884c\u622a\u56fe(\u5927\u4e8e\u7b49\u4e8e5\u9897\u843d\u5b50\u7684\u622a\u56fe + \u80dc\u5229\u754c\u9762\u622a\u56fe)\\n\\n### 2.4 \u9879\u76ee\u7684\u51c6\u5907\\n\\n- \u5927\u5bb6\u53ef\u4ee5\u4e00\u8d77\u60f3\u4e00\u4e0b\u8981\u505a\u4ec0\u4e48\u9879\u76ee\u4e86, \u6709\u4e86\u76ee\u6807\u624d\u6709\u52a8\u529b\u5b66\u4e60!\\n\\n- \u7279\u522b\u662f\u611f\u5174\u8da3\u7684\u76ee\u6807!\\n\\n- ... \u5439\u6c34\\n\\n- \u5bfb\u627e\u611f\u5174\u8da3\u7684\u9879\u76ee, \u53ef\u4ee5\u76ee\u6807\u5728\u53ef\u80fd\u53ef\u884c\u7684\u60c5\u51b5\u4e0b\u53ef\u4ee5\u6fc0\u8fdb\u4e00\u70b9, \u6700\u597d\u6709\u4e00\u4e9b\u4eae\u70b9, \u8fd9\u6837\u6536\u83b7\u4f1a\u66f4\u591a;\\n\\n> \u53cd\u6b63\u6700\u540e\u80fd\u4e0d\u80fd\u505a, \u8fd8\u662f\u5c0f\u5b66\u957f\u6765\u51b3\u5b9a...\\n\\n#### 2.4.1 \u7279\u522b\u5f3a\u8c03: \u53ef\u884c\u6027\u5206\u6790\\n\\n\u9884\u544a! <span style=\\"color:red; font-size: 30px\\">\u53ef\u884c\u6027\u5206\u6790, \u5ba1\u6838\u975e\u5e38\u4e25\u5389!</span>\\n\\n- \u5982\u679c\u88ab\u6253\u56de\u53bb $3$ \u6b21, \u90a3\u4e48\u5c31 **\u4e0d\u5141\u8bb8** \u7acb\u9879\u8fd9\u4e2a\u9879\u76ee!!!\\n\\n\u5fc5\u987b\u8981\u597d\u597d\u5b66\u4e60\u53ef\u884c\u6027\u5206\u6790\u7684\u4f1a\u8bae, <span style=\\"color:gold; font-size: 16px\\">\u53ef\u884c\u6027\u6587\u6863\u8981\u6c42\u7684 $\u683c\u5f0f$, $\u5185\u5bb9$, \u5fc5\u987b\u8981\u6709!</span>\\n\\n> \u53e6\u5916, **\u4e0d\u5efa\u8bae** \u753b\u86c7\u6dfb\u8db3!\\n>\\n> \u53ef\u884c\u6027\u5206\u6790\u53ea\u9700\u8981\u628a\u6838\u5fc3\u7684\u6570\u636e\u8bbe\u8ba1\u6309\u7167Java\u8bed\u6cd5\u5199\u51fa\u6765, \u5e76\u4e14\u628a\u6838\u5fc3\u7684\u51fd\u6570\u7684\u529f\u80fd\u63cf\u8ff0\u6e05\u695a\u5373\u53ef!\\n>\\n> <span style=\\"color:red\\">\u5199\u591a\u9519\u591a</span>, \u5373\u4fbf\u4f60\u8fd9\u4e2a\u4e0d\u662f\u4ec0\u4e48\u6838\u5fc3\u7684, \u4f46\u662f\u67d0\u4e2a\u7ec6\u8282\u6709\u95ee\u9898, \u5c31\u53ef\u80fd\u88ab\u9000\u56de!!! \u4e0d\u5199\u8fd9\u4e9b, \u5373\u53ef\u51cf\u5c11 100% \u7684\u98ce\u9669! (\u4f46\u662f\u9879\u76ee\u6574\u4f53\u9700\u8981\u5b8c\u6574!!!)\\n\\n\u5c0f\u5b66\u957f\u4f1a\u4e0a\u538b\u529b! \u4e25\u683c\u62f7\u6253!\\n\\n\u5e76\u4e14\u5728\u7b2c\u4e00\u6b21\u63d0\u4ea4\u4e4b\u524d, \u4e0d\u4f1a\u6709\u660e\u663e\u7684\u601d\u8def\u63d0\u9192, \u9700\u8981\u4f9d\u7167\u5c0f\u7ec4\u7684\u5b9e\u529b, \u81ea\u7acb\u81ea\u5f3a\u5730\u628a\u7b2c\u4e00\u7248\u53ef\u884c\u6027\u5199\u51fa\u6765; \u5982\u679c\u53ea\u662f\u7ec6\u8282\u4e0a\u7684\u95ee\u9898, \u5219\u5c0f\u5b66\u957f\u4f1a\u63d0\u51fa\u6765, \u5e76\u4e14\u4e3e\u4f8b\u4fee\u6539\u7684\u5730\u65b9\u6216\u8005\u601d\u8def. \u7136\u540e\u7b49\u5f85\u7b2c\u4e8c\u6b21\u5ba1\u6838.\\n\\n\u5982\u679c\u7b2c\u4e00\u6b21\u63d0\u4ea4\u5c31\u7f3a\u5c11\u4e86 **\u6838\u5fc3** \u6570\u636e, \u548c **\u5173\u952e** \u51fd\u6570, \u5219\u5927\u6982\u7387\u8981\u6362\u9879\u76ee\u4e86!\\n\\n#### 2.4.2 \u788e\u788e\u5ff5: \u67b6\u6784\\n\\n- \u76ee\u524d\u4f60\u53ea\u9700\u8981\u6ce8\u610f, \u67b6\u6784\u7684\u65f6\u5019\u5fc5\u9700\u8003\u8651\u6e05\u695a\u754c\u9762\u4e4b\u95f4\u5207\u6362\u7684\u4f20\u53c2\\n\\n- \u4e5f\u5c31\u662f\u8bf4, \u4f60\u67b6\u6784\u7684\u51fd\u6570\u5fc5\u987b\u8981\u6709\u5bf9\u5e94\u7684\u53c2\u6570 (\u4e0d\u80fd\u662f\u968f\u4fbf\u7684\u53c2\u6570,<span style=\\"color:red\\"> \u66f4\u4e0d\u80fd\u662f\u4e4b\u540e\u5f00\u53d1\u5728\u51b3\u5b9a!</span>)\\n\\n### 2.5 \u9879\u76ee\u5c55\u793a\\n\\n- 64.0\\n\\n- [C\u548cC++\u6e38\u620f\u8da3\u5473\u7f16\u7a0b](https://www.bilibili.com/video/BV17t4y1Q7D1/) \u770b\u770b\u9879\u76ee\\n\\n## \u4e09\u3001\u592a\u591a\u4e86\\n> rt, \u4e0d\u5199\u4e86; \u4e0a\u538b\u529b\u5c31\u4e0d\u597d\u4e86.. \u7d66\u70b9\u4f53\u9a8c\u554a, \u54e5\u4eec (\u4e0d\u662f\u61d2)\\n\\n\u6709\u4ec0\u4e48\u60f3\u95ee\u7684?"},{"id":"/2025/05/06/001-\u7d42\u308f\u308a","metadata":{"permalink":"/HXLoLi/blog/2025/05/06/001-\u7d42\u308f\u308a","editUrl":"https://github.com/HengXin666/HXLoLi/edit/main/blog/2025/05/06/001-\u7d42\u308f\u308a.md","source":"@site/blog/2025/05/06/001-\u7d42\u308f\u308a.md","title":"\u7d42\u308f\u308a","description":"\u603b\u7ed351","date":"2025-05-06T16:21:22.000Z","tags":[{"inline":false,"label":"\u65e5\u8bb0","permalink":"/HXLoLi/blog/tags/\u65e5\u8bb0","description":"\u305f\u3060\u306e\u65e5\u8a18\u3060 (\u8a08\u753b\u306e\u5b8c\u6210\u72b6\u614b\u3068\u304b\u3053\u3068)"}],"readingTime":0.92,"hasTruncateMarker":true,"authors":[{"name":"Heng_Xin","title":"\u3053\u3053\u304b\u3089\u5148\u306f\u4e00\u65b9\u901a\u884c\u3060!","url":"https://github.com/HengXin666","email":"282000500@qq.com","socials":{"github":"https://github.com/HengXin666","bilibili":"https://space.bilibili.com/478917126"},"imageURL":"https://avatars.githubusercontent.com/u/103022267","key":"Heng_Xin","page":null}],"frontMatter":{"authors":"Heng_Xin","title":"\u7d42\u308f\u308a","date":"2025-05-06T16:21:22.000Z","tags":["\u65e5\u8bb0"]},"unlisted":false,"lastUpdatedAt":1746519997000,"lastUpdatedBy":"Heng_Xin_666","prevItem":{"title":"2025-05-07 \u5c0f\u7076\u5206\u4eab","permalink":"/HXLoLi/blog/2025/05/07/001-\u5c0f\u7076\u5206\u4eab"},"nextItem":{"title":"\u3042\u306a\u305f\u3001\u672c\u5f53\u306b\u6020\u6162\u3067\u3059\u306d","permalink":"/HXLoLi/blog/2025/04/28/02-\u8cb4\u65b9\u672c\u5f53\u306b\u6020\u6162\u3067\u3059\u306d"}},"content":"\u603b\u7ed351\\n\\n\x3c!-- truncate --\x3e\\n\\n\u8ba1\u5212:\\n\\n- [] \u7b97\u6cd5\u9898 * 3 (1/5)\\n\\n- [ ] \u5b66\u4e60 QT QML (\u5047\u671f\u5185\u8fc7\u5b8c) (11/38)\\n\\n- [ ] \u8865\u8ba1\u7f51\u5b66\u4e60\u8fdb\u5ea6 (0/21)\\n\\n- [ ] QT PDF \u9879\u76ee \u91cd\u6784 (\u5047\u671f\u5185) (\u5f85\u5f00\u59cb)\\n\\n\u8981\u6c42:\\n\\n- [ ] \u6bcf\u5929\u665a\u4e0a12:00\u8981\u7761\u89c9, \u4e0d\u665a\u4e8e 12:30 (\u4ec5\u67092\u5929?!)\\n\\n- [ ] \u6bcf\u59298:30\u8d77\u5e8a\u5427?! \u4e00\u671d\u4e4b\u8ba1\u5728\u4e8e\u6668\u554a! (\u4ec5\u67092\u5929?!)\\n\\n\u5b9e\u9645\u4e0a\u5199\u8ba1\u5212\u5c31\u662f\u7528\u6765\u6253\u51fb\u81ea\u5df1\u7684wc...\\n\\n---\\n\\n\u4eca\u5929\u6574\u7406\u535a\u5ba2, \u53d1\u73b0, \u4e4b\u524d\u7684\u4ee3\u7801\u8fd8\u6709\u4e9b\u95ee\u9898... \u4e0d\u77e5\u9053\u4e3a\u4ec0\u4e48\u6709\u4e9b\u94fe\u63a5\u6ca1\u6709\u88ab\u66ff\u6362...\\n\\n\u6700\u8fd1\u4e5f\u662f\u56db\u5904\u88ab\u4e0a\u538b\u529b\u554a =-=, \u611f\u89c9\u5355\u7eaf\u7684\u8be6\u7ec6\u7684\u5199, \u4e0d\u597d... \u5f97\u8df3\u6b65, \u53cd\u6b63\u90fd\u662f\u67e5 \u5b98\u65b9\u6587\u6863 \u7684, \u77e5\u9053\u6709\u8fd9\u4e2a\u4e1c\u897f\u5373\u53ef =-="},{"id":"/2025/04/28/02-\u8cb4\u65b9\u672c\u5f53\u306b\u6020\u6162\u3067\u3059\u306d","metadata":{"permalink":"/HXLoLi/blog/2025/04/28/02-\u8cb4\u65b9\u672c\u5f53\u306b\u6020\u6162\u3067\u3059\u306d","editUrl":"https://github.com/HengXin666/HXLoLi/edit/main/blog/2025/04/28/02-\u8cb4\u65b9\u672c\u5f53\u306b\u6020\u6162\u3067\u3059\u306d.md","source":"@site/blog/2025/04/28/02-\u8cb4\u65b9\u672c\u5f53\u306b\u6020\u6162\u3067\u3059\u306d.md","title":"\u3042\u306a\u305f\u3001\u672c\u5f53\u306b\u6020\u6162\u3067\u3059\u306d","description":"\u3053\u306e\u6587\u7ae0\u306f\u6697\u53f7\u5316\u3057\u305f\u304b\u3089\u3001\u81ea\u5206\u3067\u306a\u3044\u306a\u3089\u3001\u89e3\u8aad\u4e0d\u80fd\u3063\u3066\u3002\u4e00\u822c\u4eba\u306f\u7121\u8996\u3057\u3066\u304f\u3060\u3055\u3044\u3002","date":"2025-04-29T17:20:10.000Z","tags":[{"inline":false,"label":"\u65e5\u5e38","permalink":"/HXLoLi/blog/tags/\u65e5\u5e38","description":"\u4e00\u4e9b\u65e5\u5e38\u7684\u8bb0\u5f55 (\u5927\u591a\u662f\u788e\u788e\u5ff5)"}],"readingTime":1.655,"hasTruncateMarker":true,"authors":[{"name":"Heng_Xin","title":"\u3053\u3053\u304b\u3089\u5148\u306f\u4e00\u65b9\u901a\u884c\u3060!","url":"https://github.com/HengXin666","email":"282000500@qq.com","socials":{"github":"https://github.com/HengXin666","bilibili":"https://space.bilibili.com/478917126"},"imageURL":"https://avatars.githubusercontent.com/u/103022267","key":"Heng_Xin","page":null}],"frontMatter":{"authors":"Heng_Xin","title":"\u3042\u306a\u305f\u3001\u672c\u5f53\u306b\u6020\u6162\u3067\u3059\u306d","date":"2025-04-29T17:20:10.000Z","tags":["\u65e5\u5e38"]},"unlisted":false,"lastUpdatedAt":1746115883000,"lastUpdatedBy":"Heng_Xin_666","prevItem":{"title":"\u7d42\u308f\u308a","permalink":"/HXLoLi/blog/2025/05/06/001-\u7d42\u308f\u308a"},"nextItem":{"title":"\u7b14\u8bb0\u672c\u65e0\u7ebf\u7f51\u5361\u65e0\u7f51\u306e\u6226\u3044","permalink":"/HXLoLi/blog/2025/04/28/01-\u7b14\u8bb0\u672c\u65e0\u7ebf\u7f51\u5361\u65e0\u6cd5\u7f51\u306e\u6226\u3044"}},"content":"\u3053\u306e\u6587\u7ae0\u306f\u6697\u53f7\u5316\u3057\u305f\u304b\u3089\u3001\u81ea\u5206\u3067\u306a\u3044\u306a\u3089\u3001\u89e3\u8aad\u4e0d\u80fd\u3063\u3066\u3002\u4e00\u822c\u4eba\u306f\u7121\u8996\u3057\u3066\u304f\u3060\u3055\u3044\u3002\\n\\n\x3c!-- truncate --\x3e\\n\\n\u3042\u306a\u305f\u3001\u672c\u5f53\u306b\u6020\u6162\u3067\u3059\u306d.\\n\\n\u6700\u8fd1\u3001\u8a55\u5224\u306e\u969b\u3001\u300c\u50d5\u9054\u306f\u65b0\u4eba\u3067\u3042\u308a\u3001\u4e59\u3058\u3083\u306d\u3048\uff01\u3082\u3046\u30fc\u3001\u8a00\u8449\u3092\u5c11\u3057\u3067\u3082\u3082\u3063\u3068\u66f8\u304f\u3067\u3082\u51fa\u6765\u306a\u3047\u306e\uff1f\uff01\u300d\u3068\u8a71\u3059\u306f\u3001\u4e0a\u53f8\u304b\u3089\u4f1d\u3048\u3066\u304f\u308c\u3063\u305f\u3002\\n\\n\u306d\u3048\u3001\u306a\u305c\uff1f\u50d5\u3001\u3053\u3046\u8a00\u3063\u3066\u3001\u3067\u3082\u3044\u3051\u307e\u305b\u3093\u304b\u3044\uff1f\u304a\u3057\u3048\u3066\u3088qwq...\\n\\n\u305d\u3046\u304b\u3082\u3057\u308c\u307e\u305b\u3093\u306d\u3002\u305d\u3046\u3067\u3042\u308d\u3046\u3068\u3001\u305d\u3046\u3060\u3067\u3082\u306a\u308d\u3046\u3068\u3001\u3069\u3046\u3067\u3082\u3044\u3044\u3002\u4f8b\u3048\u672c\u5f53\u306e\u6c17\u6301\u3061\u304c\u3044\u3044\u3068\u3053\u308d\u304b\u3089\u3067\u3082\u3001\u4ed6\u306e\u8ab0\u304b\u304c\u300c\u305d\u3046\u3067\u306f\u3042\u308a\u307e\u305b\u3093\u3088\u3001\u574a\u4e3b\u300d\u3063\u3066\u601d\u3048\u3070\u3001\u50d5\u306e\u3059\u3079\u3066\u3092\u5b8c\u5168\u306b\u5426\u5b9a\u3055\u308c\u3057\u307e\u3044\u307e\u3057\u305f\u3093\u3060\uff01\\n\\n\u514e\u306b\u89d2\u3001\u3053\u308c\u304b\u3089\u3082\u3063\u3068\u6ce8\u610f\u3057\u306a\u304d\u3083\u3002\\n\\n\u307e\u305a\u3001\u57fa\u672c\u7684\u306a\u554f\u984c\u3092\u306f\u3063\u304d\u308a\u89e3\u6c7a\u3057\u3066\u3001\u300c\u5b9f\u8df5\u304b\u3089\u77e5\u8b58\u304c\u751f\u307e\u308c\u308b\u300d\u3068\u304b\u3001\u300c\u3086\u3063\u304f\u308a\u8003\u3048\u3067\u306a\u3051\u308c\u3070\u7406\u89e3\u3067\u304d\u306a\u3044\u300d\u3068\u304b\u3001\u305d\u308c\u306f\u62e1\u5f35\u3060\uff01\u30af\u30bd\\n\\n\u307e\u3063\u305f\u304f\u3001\u4e8c\u5ea6\u3068\u66f8\u304d\u307e\u305b\u3093\uff01N\uff12\u3082\u3046\u308f\u3059\u308c\u3057\u307e\u3044\u307e\u3057\u305f\u3002\u4e94\u304b\u6708\u524d\u52c9\u5f37\u3057\u305f\u306e\u306b\u2026"},{"id":"/2025/04/28/01-\u7b14\u8bb0\u672c\u65e0\u7ebf\u7f51\u5361\u65e0\u6cd5\u7f51\u306e\u6226\u3044","metadata":{"permalink":"/HXLoLi/blog/2025/04/28/01-\u7b14\u8bb0\u672c\u65e0\u7ebf\u7f51\u5361\u65e0\u6cd5\u7f51\u306e\u6226\u3044","editUrl":"https://github.com/HengXin666/HXLoLi/edit/main/blog/2025/04/28/01-\u7b14\u8bb0\u672c\u65e0\u7ebf\u7f51\u5361\u65e0\u6cd5\u7f51\u306e\u6226\u3044.md","source":"@site/blog/2025/04/28/01-\u7b14\u8bb0\u672c\u65e0\u7ebf\u7f51\u5361\u65e0\u6cd5\u7f51\u306e\u6226\u3044.md","title":"\u7b14\u8bb0\u672c\u65e0\u7ebf\u7f51\u5361\u65e0\u7f51\u306e\u6226\u3044","description":"\u4eca\u5929\u53bb\u3068\u3042\u308b\u4e0a\u673a\u5f00\u5377\u671f\u4e2d\u8003. \u53bb\u5230\u73b0\u573a\u53d1\u73b0: \u306a\u306b!!! \u80fd\u8fde\u4e0a\u7f51, \u4f46\u662f\u5374\u6ca1\u6709\u7f51, \u4e0d\u8bba\u662f\u6821\u56ed\u7f51\u8fd8\u662f\u70ed\u70b9, \u90fd\u4e0d\u884c...","date":"2025-04-28T23:43:45.000Z","tags":[{"inline":false,"label":"\u65e5\u5e38","permalink":"/HXLoLi/blog/tags/\u65e5\u5e38","description":"\u4e00\u4e9b\u65e5\u5e38\u7684\u8bb0\u5f55 (\u5927\u591a\u662f\u788e\u788e\u5ff5)"}],"readingTime":3.545,"hasTruncateMarker":true,"authors":[{"name":"Heng_Xin","title":"\u3053\u3053\u304b\u3089\u5148\u306f\u4e00\u65b9\u901a\u884c\u3060!","url":"https://github.com/HengXin666","email":"282000500@qq.com","socials":{"github":"https://github.com/HengXin666","bilibili":"https://space.bilibili.com/478917126"},"imageURL":"https://avatars.githubusercontent.com/u/103022267","key":"Heng_Xin","page":null}],"frontMatter":{"authors":"Heng_Xin","title":"\u7b14\u8bb0\u672c\u65e0\u7ebf\u7f51\u5361\u65e0\u7f51\u306e\u6226\u3044","date":"2025-04-28T23:43:45.000Z","tags":["\u65e5\u5e38"]},"unlisted":false,"lastUpdatedAt":1746115883000,"lastUpdatedBy":"Heng_Xin_666","prevItem":{"title":"\u3042\u306a\u305f\u3001\u672c\u5f53\u306b\u6020\u6162\u3067\u3059\u306d","permalink":"/HXLoLi/blog/2025/04/28/02-\u8cb4\u65b9\u672c\u5f53\u306b\u6020\u6162\u3067\u3059\u306d"},"nextItem":{"title":"Blossom\u8fc1\u79fb\u7b14\u8bb0\u8bb0\u5f55","permalink":"/HXLoLi/blog/2025/04/25/01-Blossom\u8fc1\u79fb\u7b14\u8bb0\u8bb0\u5f55"}},"content":"\u4eca\u5929\u53bb\u3068\u3042\u308b\u4e0a\u673a\u5f00\u5377\u671f\u4e2d\u8003. \u53bb\u5230\u73b0\u573a\u53d1\u73b0: \u306a\u306b!!! \u80fd\u8fde\u4e0a\u7f51, \u4f46\u662f\u5374\u6ca1\u6709\u7f51, \u4e0d\u8bba\u662f\u6821\u56ed\u7f51\u8fd8\u662f\u70ed\u70b9, \u90fd\u4e0d\u884c...\\n\\n\u8fd8\u5c1d\u8bd5\u4e86\u84dd\u7259\u6765\u7740... \u4e5f\u4e0d\u884c... \u597d\u597d\u7684 AI\u4ee3\u7406\u4eba\u8003\u8bd5, \u7ed9\u6211\u73a9\u6210\u95ed\u5377\u4e86 =-= |||, \u54e5\u4eec\u662f\u5b8c\u5168\u59b9\u590d\u4e60\u554a...\\n\\n\u672c\u8d34\u8bb0\u5f55\u65e5\u540e\u4fee\u590d\u8fc7\u7a0b...\\n\\n\x3c!-- truncate --\x3e\\n\\n## \u524d\u8a00\\n\\n\u4f60\u77e5\u9053\u5417? \u672c\u8eab\u662f\u6ca1\u95ee\u9898\u7684, \u51e0\u5341\u5206\u949f\u524d\u8fd8\u5728\u770b\u756a\u5462...\\n\\n\u7ed3\u679c\u5c31\u662f\u6709\u7ebf\u6709\u7f51... \u65e0\u7ebf\u65e0\u7f51...\\n\\n\u662f\u663e\u793a\u4e86\u8fde\u63a5\u4e86\u7f51\u7edc\u54e6, \u4e0d\u662f\u6389\u7f51\u5361... \u6211\u624b\u673a\u4e0a\u90fd\u663e\u793a\u6709\u4e00\u4e2a\u8bbe\u5907\u8fde\u63a5\u4e86\u70ed\u70b9\u54e6...\\n\\n\u91cd\u542f\u4e865\u6b21\u4e86\u4e5f\u6ca1\u6709\u6548\u679c, \u91cd\u7f6e\u7f51\u7edc\u4e5f\u6ca1\u6709\u6548\u679c, \u7981\u7528\u7f51\u5361\u518d\u5f00\u4e5f\u6ca1\u6709\u6548\u679c...\\n\\n## \u539f\u56e0\\n\\n\u6211\u731c\u6d4b\u53ef\u80fd\u662f\u6b63\u786e\u590d\u4e60\u8ba1\u7f51\u7684\u65f6\u5019, \u8fd0\u884c\u4e86\u4e00\u4e2a\u672c\u5e94\u8be5\u5728 **\u865a\u62df\u673a** \u8fd0\u884c\u7684`dos`\u811a\u672c.\\n\\n```shell\\n@echo off\\n\\ndism /Online /Disable-Feature:microsoft-hyper-v-all /NoRestart\\ndism /Online /Disable-Feature:IsolatedUserMode /NoRestart\\ndism /Online /Disable-Feature:Microsoft-Hyper-V-Hypervisor /NoRestart\\ndism /Online /Disable-Feature:Microsoft-Hyper-V-Online /NoRestart\\ndism /Online /Disable-Feature:HypervisorPlatform /NoRestart\\n\\nREM ===========================================\\n\\nmountvol X: /s\\ncopy %WINDIR%\\\\System32\\\\SecConfig.efi X:\\\\EFI\\\\Microsoft\\\\Boot\\\\SecConfig.efi /Y\\nbcdedit /create {0cb3b571-2f2e-4343-a879-d86a476d7215} /d \\"DebugTool\\" /application osloader\\nbcdedit /set {0cb3b571-2f2e-4343-a879-d86a476d7215} path \\"\\\\EFI\\\\Microsoft\\\\Boot\\\\SecConfig.efi\\"\\nbcdedit /set {bootmgr} bootsequence {0cb3b571-2f2e-4343-a879-d86a476d7215}\\nbcdedit /set {0cb3b571-2f2e-4343-a879-d86a476d7215} loadoptions DISABLE-LSA-ISO,DISABLE-VBS\\nbcdedit /set {0cb3b571-2f2e-4343-a879-d86a476d7215} device partition=X:\\nmountvol X: /d\\nbcdedit /set hypervisorlaunchtype off\\n\\necho.\\necho.\\necho.\\necho.\\necho =======================================================\\necho   \u01f0        \u0263         \u0631\u0574\u02f4  \u06b2       \u0523 \u023b       \u013b  \u02be   \u02a3 \xb2     \\npause > nul\\necho.\\necho.\\n```\\n\\n\u7ed3\u679c\u5c31\u662f\u5b9e\u9a8c\u73af\u5883\u4e5f\u59b9\u5b89\u88c5\u6210... (\u597d\u50cf\u5f97win10\u7684\u865a\u62df\u673a?!)\\n\\n> [!TIP]\\n> \u4e0d\u8981\u968f\u4fbf\u8fd0\u884c\u4e0d\u8ba4\u8bc6\u7684\u811a\u672c\u554a!\\n\\n## \u4fee\u590d\u8fc7\u7a0b\\n\\n- [x] \u91cd\u542f\\n- [x] \u91cd\u7f6e\u7f51\u7edc\\n- [x] \u91cd\u542f\u7f51\u5361\\n- [x] \u5347\u7ea7\u7cfb\u7edf (\u5404\u79cd\u4e1c\u897f)\\n- [x] \u95eegpt\u8981\u6062\u590d\u547d\u4ee4\\n- [x] \u91cd\u88c5\u7f51\u5361\u9a71\u52a8\\n\\n\u6839\u672c\u4ec0\u4e48\u90fd\u4e0d\u884c... gpt\u7ed9\u6211\u547d\u4ee4, \u8fd8\u770b\u4ec0\u4e48`\u670d\u52a1`...\u8fd9\u79cd\u4e00\u822c\u90fd\u6b63\u5e38\u7684qwq\\n\\n\u7136\u540e\u53d1\u73b0`ipconfig`\u5c45\u7136\u7f51\u5361\u6ca1\u6709ip?!, \u53ef\u4e4b\u524d\u65e9\u5df2\u7ecf\u786e\u8ba4\u4e86\u662f\u81ea\u52a8\u5206\u914d\u7684=-=\\n\\n\u603b\u4e4b\u6298\u817e\u4e86\u4e00\u4e2a\u5c0f\u65f6... \u6700\u7ec8\u7684\u89e3\u51b3\u65b9\u6848\u662f:\\n\\n\u5378\u8f7d\u7f51\u5361---gpt\u8bf4\u91cd\u542f\u4f1a\u81ea\u52a8\u5b89\u88c5\u4e0a, \u7136\u540e\u5c31\u6ca1\u95ee\u9898\u4e86\\n\\n\u6211\u662f\u91cd\u542f\u7136\u540e\u4e0d\u6253\u5f00win\u4e86, \u6211\u76f4\u63a5\u91cd\u542f\u5230linux, \u6211\u6253\u7b97\u8ba9linux\u4fee\u590d\u7f51\u5361, \u4e0d\u8d70win\u7684\u9ed8\u8ba4\u64cd\u4f5c awa...\\n\\n\u7ed3\u679c\u5c31\u662f`Arch Linux`\u5565\u4e8b\u6ca1\u6709...\\n\\n\u7136\u540e\u6211\u987a\u624b\u6eda\u4e00\u4e0b\u51e0\u4e2a\u6708\u6ca1\u6709\u66f4\u65b0\u7684\u5305, \u9632\u6b62\u592a\u4e45\u59b9\u5b89\u629a\u5979, \u4e0b\u6b21\u53c8\u7d66\u6211\u6eda\u6302\u4e86qwq...\\n\\n\u7136\u540e\u56de\u5230win, \u5c31\u641e\u597d\u4e86 qwq..., \u5999\u624b\u56de\u6625\u554a, gpt\u8fd8\u7ed9\u6211\u626f\u4ec0\u4e48\u4ec0\u4e48\u5e27\u4e4b\u7c7b\u7684, \u6211\u8003\u5b8c\u8ba1\u7f51\u73b0\u5728\u5df2\u7ecf\u5fd8\u8bb0\u5b83\u600e\u4e48\u8bf4\u7684\u4e86qwq\\n\\n\u56e0\u4e3a\u662f\u591a\u53d8\u91cf, \u5bfc\u81f4\u6211\u4e5f\u4e0d\u77e5\u9053\u662f\u4e0d\u662flinux\u7684\u529f\u52b3 (\u6bd4\u8f83\u53cc\u7cfb\u7edf, \u5e94\u8be5\u5171\u7528\u4e00\u4efd\u786c\u4ef6\u5427, \u90a3\u786c\u4ef6\u7684\u5e95\u5c42\u914d\u7f6e\u6587\u4ef6\u4ec0\u4e48\u7684, \u5e94\u8be5\u53ef\u80fd\u662f\u4e00\u6837\u7684\u5427? (\u9876\u5c42\u914d\u7f6e\u6587\u4ef6\u80af\u5b9a\u4e0d\u4e00\u6837, \u56e0\u4e3a\u5b83\u81f3\u5c11\u662f\u64cd\u4f5c\u7cfb\u7edf\u3001\u7528\u6237\u5c42\u9762\u7ba1\u7406\u7684))\\n\\n\u8fd8\u597d\u4fee\u597d\u4e86, \u6b63\u597d\u6821\u56ed\u8dd1\u7136\u540e\u5403\u996d~"},{"id":"/2025/04/25/01-Blossom\u8fc1\u79fb\u7b14\u8bb0\u8bb0\u5f55","metadata":{"permalink":"/HXLoLi/blog/2025/04/25/01-Blossom\u8fc1\u79fb\u7b14\u8bb0\u8bb0\u5f55","editUrl":"https://github.com/HengXin666/HXLoLi/edit/main/blog/2025/04/25/01-Blossom\u8fc1\u79fb\u7b14\u8bb0\u8bb0\u5f55.md","source":"@site/blog/2025/04/25/01-Blossom\u8fc1\u79fb\u7b14\u8bb0\u8bb0\u5f55.md","title":"Blossom\u8fc1\u79fb\u7b14\u8bb0\u8bb0\u5f55","description":"\u672c\u6587\u4e3b\u8981\u8bb0\u5f55\u4e00\u4e0b, \u6211\u4ece Blossom \u8fc1\u79fb\u767e\u4e07\u5b57\u7684\u7b14\u8bb0\u7684\u8fc7\u7a0b... \u4e3b\u8981\u4f7f\u7528\u4e86\u7c7b\u5b57\u5178\u6811\u7684\u601d\u60f3\u7f16\u5199\u4e00\u4e2aPython\u7a0b\u5e8f, \u4ee5\u6784\u5efa\u8def\u5f84, \u4ee5\u53ca\u5904\u7406\u76f8\u5bf9\u8def\u3001\u672c\u5730\u56fe\u7247\u7684\u95ee\u9898...","date":"2025-04-25T20:04:36.000Z","tags":[{"inline":false,"label":"python","permalink":"/HXLoLi/blog/tags/python","description":"\u4e0e python \u76f8\u5173\u7684\u535a\u5ba2\u6587\u7ae0"},{"inline":true,"label":"\u5de5\u5177","permalink":"/HXLoLi/blog/tags/\u5de5\u5177"}],"readingTime":8.795,"hasTruncateMarker":true,"authors":[{"name":"Heng_Xin","title":"\u3053\u3053\u304b\u3089\u5148\u306f\u4e00\u65b9\u901a\u884c\u3060!","url":"https://github.com/HengXin666","email":"282000500@qq.com","socials":{"github":"https://github.com/HengXin666","bilibili":"https://space.bilibili.com/478917126"},"imageURL":"https://avatars.githubusercontent.com/u/103022267","key":"Heng_Xin","page":null}],"frontMatter":{"authors":"Heng_Xin","title":"Blossom\u8fc1\u79fb\u7b14\u8bb0\u8bb0\u5f55","date":"2025-04-25T20:04:36.000Z","tags":["python","\u5de5\u5177"]},"unlisted":false,"lastUpdatedAt":1746115883000,"lastUpdatedBy":"Heng_Xin_666","prevItem":{"title":"\u7b14\u8bb0\u672c\u65e0\u7ebf\u7f51\u5361\u65e0\u7f51\u306e\u6226\u3044","permalink":"/HXLoLi/blog/2025/04/28/01-\u7b14\u8bb0\u672c\u65e0\u7ebf\u7f51\u5361\u65e0\u6cd5\u7f51\u306e\u6226\u3044"},"nextItem":{"title":"VsCode\u535a\u5ba2\u6a21\u7248","permalink":"/HXLoLi/blog/2025/04/22/02-vscode\u535a\u5ba2\u6a21\u7248"}},"content":"\u672c\u6587\u4e3b\u8981\u8bb0\u5f55\u4e00\u4e0b, \u6211\u4ece Blossom \u8fc1\u79fb\u767e\u4e07\u5b57\u7684\u7b14\u8bb0\u7684\u8fc7\u7a0b... \u4e3b\u8981\u4f7f\u7528\u4e86\u7c7b`\u5b57\u5178\u6811`\u7684\u601d\u60f3\u7f16\u5199\u4e00\u4e2aPython\u7a0b\u5e8f, \u4ee5\u6784\u5efa\u8def\u5f84, \u4ee5\u53ca\u5904\u7406\u76f8\u5bf9\u8def\u3001\u672c\u5730\u56fe\u7247\u7684\u95ee\u9898...\\n\\n\x3c!-- truncate --\x3e\\n\\n## \u4e0e AI \u6597\u667a\u6597\u52c7\\n\\n\u6211\u76f4\u63a5\u628a\u9700\u6c42\u6254\u7ed9AI, \u6211\u53ef\u61d2\u5f97\u60f3...\\n\\n\u63d0\u793a\u8bcd:\\n\\n```text\\n\u5e2e\u6211\u7f16\u5199\u4e00\u4e2a\u672c\u5730md\u6574\u7406\u7a0b\u5e8f\\n\\n\u9996\u5148\uff0c\u539f\u672c\u7684md\u6587\u4ef6\u662f\u81ea\u5e26\u6587\u4ef6\u7ed3\u6784\u7684\\n\\n\u4f8b\u5982\\n\\nC++/STL/array.md\\n\\n\u4f60\u9700\u8981\u628a\u4ed6\u4eec\u91cd\u6784\u4e3a\\n\\n001-C++/001-STL/001-array/index.md\\n\u6bd4\u5982 \u6211\u63d0\u4f9b\u7684\u8def\u5f84\u662f /C++/STL/array.md\\n   \u4f60\u5e94\u8be5\u751f\u6210\u4e3a /001-C++/001-STL/001-array/index.md\\n\\n\u7279\u522b\u7684\\n1.\\n\u56fe\u7247\u5168\u90e8\u4ee5\u76f8\u5bf9\u8def\u5f84\u6216\u8005https\u7684\u65b9\u5f0f\u7ed9\u51fa\\n\\n\u5982\u679c\u5b83\u662f\u672c\u5730\u8def\u5f84\uff0c\u90a3\u4e48\u9700\u8981 \u628a\u5bf9\u5e94\u7684\u56fe\u7247 \u62f7\u8d1d\u5230 index.md \u540c\u7ea7\u76ee\u5f55\u4e0b\\n\u5e76\u4e14\u4fee\u6539 md\u7684\u56fe\u7247\u94fe\u63a5\\n\\n2. \u5173\u4e8e \u5e8f\u53f7 001\\n\\n\u6211\u63d0\u4f9b\u4e86\u4e00\u4e2a\u6587\u4ef6\uff0c\u5176\u5185\u5bb9\u683c\u5f0f\u4e3a\\n\\n\u250f\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501 \u2193\u2193 \u6587\u7ae0\u5217\u8868 \u2193\u2193 \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\\n\u2503 \u6392\u5e8f [ID] [\u7248\u672c] [\u65f6\u95f4] \u6587\u7ae0\u8def\u5f84\\n\u2520\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\\n\u2503   1 [20157] [ 47] [2025-04-22 17:17:41] /\u8ba1\u4f6c\u5e38\u8b58/\u6570\u636e\u7ed3\u6784\u4e0e\u7b97\u6cd5/[algorithm]\u76ee\u9332\\n\u2503   2 [20155] [  9] [2025-04-09 16:23:48] /\u8ba1\u4f6c\u5e38\u8b58/\u6570\u636e\u7ed3\u6784\u4e0e\u7b97\u6cd5/[\u5bfc\u8bba]\u57fa\u7840/[\u5f00\u7aef]\u65f6\u7a7a\u590d\u6742\u5ea6\\n\u2503   3 [20156] [ 22] [2025-04-19 20:29:26] /\u8ba1\u4f6c\u5e38\u8b58/\u6570\u636e\u7ed3\u6784\u4e0e\u7b97\u6cd5/[\u6570\u636e\u7ed3\u6784]\u7ebf\u6027\u8868/\u7ebf\u6027\u8868\\n\u2503   4 [20323] [  1] [2025-03-16 17:29:01] /\u8ba1\u4f6c\u5e38\u8b58/\u6570\u636e\u7ed3\u6784\u4e0e\u7b97\u6cd5/[\u6570\u636e\u7ed3\u6784]\u7ebf\u6027\u8868/\u987a\u5e8f\u5b58\u50a8\u7ed3\u6784-\u6570\u7ec4\\n\u2503   5 [20324] [  2] [2025-03-16 17:26:58] /\u8ba1\u4f6c\u5e38\u8b58/\u6570\u636e\u7ed3\u6784\u4e0e\u7b97\u6cd5/[\u6570\u636e\u7ed3\u6784]\u7ebf\u6027\u8868/\u987a\u5e8f\u5b58\u50a8\u7ed3\u6784-\u9759\u6001\u94fe\u8868\\n\u2503   6 [20325] [  1] [2025-03-26 16:48:40] /\u8ba1\u4f6c\u5e38\u8b58/\u6570\u636e\u7ed3\u6784\u4e0e\u7b97\u6cd5/[\u6570\u636e\u7ed3\u6784]\u7ebf\u6027\u8868/\u94fe\u5f0f\u5b58\u50a8\u7ed3\u6784-\u5355\u5411\u94fe\u8868\\n\\n\u4f60\u9700\u8981\u4ee5\u8fd9\u4e2a \u6392\u5e8f\u4e3a \u6392\u5e8f\uff0c\\n\\n\u6ce8\u610f\uff0c\u5bf9\u4e8e\u5355\u4e2a\u6587\u4ef6\u5939\u5185\uff0c\u6587\u4ef6\u548c\u6587\u4ef6\u5939\u5171\u7528\u8fd9\u4e2a\u6392\u5e8f\uff0c\u4e5f\u5c31\u662f\u76ee\u5f55\u4e5f\u662f001-\u8fd9\u79cd\u5f62\u5f0f\\n\\n\u7136\u540e\u6570\u5b57\u4e0d\u662f\u7167\u6284 \u6211\u63d0\u4f9b\u7684\u6587\u4ef6\u7684\uff0c\u800c\u662f\u6bcf\u4e2a\u76ee\u5f55\u90fd\u662f\u4ece001\u5f00\u59cb\uff0c\u72ec\u7acb\u7684\uff0c\uff0c\u53ea\u662f\u6392\u5e8f\u7528\u5230\u4e86\u6211\u63d0\u4f9b\u7684\u6587\u4ef6\\n\\n3. .md\u7684\u6587\u5b57\u6709\u4e9b\u4ee5 https\u5f15\u7528\u6587\u7ae0\uff0c\u4ed6\u4eec\u7684\u683c\u5f0f\u7c7b\u4f3c\uff1a\\n[\u6587\u4ef6\u6d41](https://blog.hxloli.com/blog/#/articles?articleId=20180 \\"##20180##\\")\\n[\u5b57\u7b26\u4e32\u6d41](https://blog.hxloli.com/blog/#/articles?articleId=20183 \\"##20183##\\")\\n\u5176\u4e2d articleId \u5df2\u7ecf\u5728\u6211\u63d0\u4f9b\u6211\u6587\u4ef6\u4e2d\u7ed9\u51fa\u3002\\n\\n\u4f60\u9700\u8981\u66ff\u6362\u4e3a .md\u76f8\u5bf9\u8def\u5f84\uff0c\u800c\u4e0d\u662f https . (\u4ec5\u5bf9\u4e8ehttps://blog.hxloli.com/blog/\u800c\u8a00)\uff0c\u5176\u4ed6\u7684\u53ef\u80fd\u662f\u6b63\u5e38\u7684url\\n\\n\u6ce8\u610f\u8981\u8003\u8651\u65b0\u94fe\u63a5 \u5e94\u8be5\u662f\u5e26\u6709\u6392\u5e8f\u548cindex.md\u7684\uff0c\u5efa\u8bae\u6700\u540e\u518d\u7edf\u4e00\u5904\u7406\uff0c\u5148\u628a\u6587\u4ef6\u76ee\u5f55\u7ed3\u6784\u751f\u6210\u597d\\n```\\n\\n\u7ed3\u679c\u5c31\u662f GPT-4o \u4e71\u56de\u7b54, \u8fde\u6b63\u5219\u8868\u8fbe\u5f0f\u90fd\u5199\u4e0d\u5bf9...\\n\\nds\u4e5f\u5c31\u5199\u5bf9\u4e86\u6b63\u5219\u8868\u8fbe\u5f0f...(\u8fd8\u662f\u6211\u8bf4\u4e86\u597d\u51e0\u6b21\u624d\u6539\u5bf9\u7684 =-=)\\n\\n> \u5b83\u4eec\u4e3b\u8981\u662f\u8fde\u5e8f\u53f7\u90fd\u641e\u5427\u660e\u767d, \u660e\u660e\u8981\u6c42\u662f `\u5355\u72ec`\u6587\u4ef6\u5939\u4e0b, \u5e8f\u53f7\u4ece `001` \u5f00\u59cb...\\n>\\n> \u6839\u672c\u59b9\u4eba\u542c\u61c2...\\n>\\n> \u800c\u4e14GPT\u53c8\u50bb\u53c8\u61d2, \u8bf4\u4e86\u90fd\u4e0d\u6539... \u5fc5\u9700\u4ee5\u5f3a\u786c\u7684\u6001\u5ea6\u9a82\u56fd\u7cb9\u4e86\u624d\u6539... \u4f46\u4f9d\u7136\u662f\u9519\u7684.\\n>\\n> ds \u601d\u8003\u4e86\u5f88\u591a, \u4f46\u662f\u4e0d\u884c...\\n\\n\u56e0\u6b64\u53ea\u597d\u6211\u81ea\u5df1\u6765\u4e86 (\u81f3\u5c11\u70e6\u4eba\u7684\u6b63\u5219\u8868\u8fbe\u5f0f\u6211\u53ef\u4ee5\u76f4\u63a5\u7528...)\\n\\n## Py Md \u5c0f\u5de5\u5177\\n\\n\u56e0\u4e3a\u6211\u6ce8\u610f\u5230, \u5176\u5e8f\u53f7\u5728\u524d\u7684, \u5c31\u662f\u539f\u672c\u6211 Blossom \u4e2d\u6587\u4ef6\u7684\u6392\u5e8f, \u90a3\u95ee\u9898\u5c31\u7b80\u5355\u591a\u4e86\\n\\n\u5f88\u5bb9\u6613\u5c31\u60f3\u5230, \u628a\u4e00\u4e2a Path \u6309\u7167 `/` \u5207\u5206\\n\\n\u5982: `/\u8ba1\u4f6c\u5e38\u8b58/\u6570\u636e\u7ed3\u6784\u4e0e\u7b97\u6cd5/[algorithm]\u76ee\u9332` -> `[\u8ba1\u4f6c\u5e38\u8b58, \u6570\u636e\u7ed3\u6784\u4e0e\u7b97\u6cd5, [algorithm]\u76ee\u9332]`\\n\\n\u6700\u540e \u8865\u4e0a\u4e00\u4e2a `index.md` \u7136\u540e\u628a\u5185\u5bb9\u590d\u5236\u8fc7\u6765\u5373\u53ef.\\n\\n\u7279\u522b\u7684, \u6211\u4eec\u9700\u8981\u5e8f\u53f7\u561b. \u7136\u540e\u6ce8\u610f\u5230, \u5148\u6765\u7684\u5e8f\u53f7\u80af\u5b9a\u662f\u5c0f\u7684, \u7136\u540e\u5c31\u8d2a\u5fc3\u5c31\u597d\u4e86...\\n\\n\u5199\u4e00\u4e2a`\u5b57\u5178\u6811`\u6a21\u62df\u5efa\u9020\u7684\u8fc7\u7a0b, \u540c\u65f6\u8bb0\u5f55\u8fd9\u4e2a\u76ee\u5f55\u662f\u5426\u5df2\u7ecf\u521b\u5efa, \u6709\u5c31\u4e0d`new`, \u65e0\u5c31\u53ef\u4ee5`mkdir`\u4e86\\n\\n> (\u611f\u89c9\u53ef\u4ee5\u4e0d\u7528\u90a3\u4e48\u9ebb\u70e6...)\\n\\n\u5177\u4f53\u4ee3\u7801:\\n\\n```python\\nimport os\\nimport re\\nimport shutil\\n\\ndef fxxkPath(path: str) -> str:\\n    # \u5b9a\u4e49\u975e\u6cd5\u5b57\u7b26\u7684\u6b63\u5219\u6a21\u5f0f (Windows\u4e0b\u7684\u7279\u6b8a\u5b57\u7b26)\\n    illegalChars = r\'[<>:\\"/\\\\\\\\|?*]\'\\n    \\n    # \u7528\u6b63\u5219\u66ff\u6362\u975e\u6cd5\u5b57\u7b26\u4e3a\u5408\u6cd5\u5b57\u7b26\\n    res = re.sub(illegalChars, \'_\', path)\\n    \\n    # \u8fd4\u56de\u5408\u6cd5\u7684\u8def\u5f84\\n    return res\\n\\n# \u7279\u6b8a\u8def\u5f84\u7f13\u5b58\\nmemoPathItem = {}\\n\\n# \u5b57\u5178\u6811, \u8fb9\u6784\u5efa, \u8fb9\u8f93\u51fa\\nclass Node:\\n    def __init__(self):\\n        self.next = {}  # \u5b58\u50a8\u4e0b\u4e00\u7ea7\u8282\u70b9\\n        self.idPath = {}  # \u5b58\u50a8\u8def\u5f84\u6807\u8bc6\\n\\n    def _add(self, s: str, maePath: str):\\n        \\"\\"\\"\u6a21\u62df\u6811\u7ed3\u6784\u7684\u6dfb\u52a0\\"\\"\\"\\n        fkStr = fxxkPath(s)\\n\\n        if (fkStr != s):\\n            memoPathItem[s] = fkStr\\n            s = fkStr\\n\\n        if s in self.next:\\n            return self.next[s], self.idPath[s]\\n        \\n        node = Node()\\n        self.next[s] = node\\n        idPath = f\\"{len(self.next):03d}-{s}\\"\\n        self.idPath[s] = idPath\\n        \\n        os.makedirs(os.path.dirname(f\\"{maePath}/{idPath}/\\"), exist_ok=True)\\n        \\n        return node, idPath\\n\\n\\ndef insert(root: Node, path: str, coutPath: str):\\n    \\"\\"\\"path insert to Tree\\"\\"\\"\\n    list = path.split(\'/\')\\n    node = root\\n\\n    for s in list:\\n        if (len(s) == 0):\\n            continue\\n        node, newPath = node._add(s, coutPath)\\n        coutPath = f\\"{coutPath}/{newPath}\\"\\n\\n    return coutPath\\n\\ndef parse_log(srcRoot, logPath, coutPath):\\n    \\"\\"\\"\u6539\u8fdb\u540e\u7684\u65e5\u5fd7\u89e3\u6790\u51fd\u6570\\"\\"\\"\\n    \\n    root = Node()\\n\\n    # id-mpa: id - (NewPath(\u65b0\u8def\u5f84), \u539f\u8def\u5f84)\\n    idMap = {}\\n    \\n    with open(logPath, \'r\', encoding=\'utf-8\') as f:\\n        for line in f:\\n            line = line.strip()\\n            # \u8df3\u8fc7\u975e\u6570\u636e\u884c\\n            if not line.startswith(\'\u2503\') or line.startswith(\'\u2520\') or \'\u6392\u5e8f [ID]\' in line:\\n                continue\\n            \\n            # \u4f7f\u7528\u66f4\u7cbe\u786e\u7684\u6b63\u5219\u8868\u8fbe\u5f0f\\n            match = re.match(\\n                r\'^\u2503\\\\s+(\\\\d+)\\\\s+\\\\[(\\\\d+)\\\\]\\\\s+\\\\[\\\\s*(\\\\d+)\\\\s*\\\\]\\\\s+\\\\[([^\\\\]]+)\\\\]\\\\s+(.+)$\',\\n                line\\n            )\\n            if not match:\\n                continue\\n            \\n            _, aid, _, _, path = match.groups()\\n\\n            # \u628a path \u7684\u7a7a\u683c\u548c. \u66ff\u6362\u4e3a \'\' (\u7a7a)\\n            path = path.replace(\' \', \'\').replace(\'.\', \'\').replace(\':\', \'\')\\n\\n            path = path.strip()\\n\\n            # \u6b64\u5904\u5fc5\u7136\u521b\u5efa index.md\\n            makeFile = f\\"{insert(root, path, coutPath)}/index.md\\"\\n            srcFile = f\\"{srcRoot}/{path}.md\\"\\n\\n            print(\\"build\\", makeFile)\\n            \\n            if os.path.exists(srcFile):\\n                shutil.copy2(srcFile, makeFile)\\n            else:\\n                print(f\\"Warning: Source file {srcFile} does not exist.\\")\\n            \\n            idMap[aid] = (makeFile, f\\"{srcRoot}/{os.path.dirname(path)}\\")\\n\\n    return idMap\\n\\n\\ndef syoriFile(idMap):\\n    \\"\\"\\"\u5904\u7406\u6587\u4ef6, \u628a\u56fe\u7247\u8fdb\u884c\u590d\u5236, \u628a\u94fe\u63a5\u66ff\u6362\u4e3a\u76f8\u5bf9\u8def\u5f84\\"\\"\\"\\n\\n    # \u5904\u7406\u56fe\u7247 (\u9700\u8981copy\u8fc7\u6765)\\n    def process_image(match, current_dir, oldPath):\\n        alt = match.group(1)\\n        img_path = match.group(2)\\n        \\n        # @todo \u7279\u522b\u7684, \u5982\u679c\u662f\u672c\u5730\u8def\u5f84, \u4f46\u6587\u4ef6\u4e0d\u5b58\u5728, \u5219\u4f1a\u62a5\u9519\u6216\u8005\u7ec8\u6b62!\\n        if not img_path.startswith(\'http\'):\\n            img_name = os.path.basename(img_path)\\n            dest = os.path.join(oldPath, img_path)\\n            if os.path.exists(dest):\\n                shutil.copy(dest, f\\"{current_dir}/{img_name}\\")\\n                print(\\"cp img:\\", img_name)\\n            else:\\n                print(\\"\u56fe\u7247\u4e0d\u5b58\u5728:\\", dest, \\"\u6765\u81ea\\", current_dir, \\"index.md\\")\\n                exit(-1)\\n            return f\'![{alt}](./{img_name})\'\\n        return match.group(0)\\n\\n    # \u5904\u7406\u56fe\u7247\u94fe\u63a5\\n    def replace_link(match, id_map, current_dir):\\n        text = match.group(1)\\n        aid = match.group(2)\\n        \\n        if aid in id_map:\\n            target = id_map[aid][0]\\n            rel_path = os.path.relpath(target, start=current_dir).replace(os.sep, \'/\')\\n            return f\'[{text}]({rel_path})\'\\n        return match.group(0)\\n\\n    for id, path in idMap.items():  # \u4f7f\u7528 .items() \u904d\u5386\u5b57\u5178\\n        print(id, path)\\n\\n        paPath = os.path.dirname(path[0])  # \u83b7\u53d6\u5f53\u524d\u6587\u4ef6\u7684\u7236\u76ee\u5f55\\n\\n        with open(path[0], \'r+\', encoding=\'utf-8\') as f:\\n            content = f.read()\\n            \\n            # \u5904\u7406\u56fe\u7247\\n            content = re.sub(\\n                r\'!\\\\[(.*?)\\\\]\\\\(((?!http).*?)\\\\)\',\\n                lambda m: process_image(m, paPath, path[1]), \\n                content\\n            )\\n            \\n            # \u5904\u7406\u6587\u7ae0\u94fe\u63a5\\n            content = re.sub(\\n                r\'\\\\[(.*?)\\\\]\\\\(https://blog\\\\.hxloli\\\\.com/blog/.*?articleId=(\\\\d+).*?\\\\)\',\\n                lambda m: replace_link(m, idMap, paPath),\\n                content\\n            )\\n            \\n            f.seek(0)\\n            f.write(content)\\n            f.truncate()\\n\\n                \\ndef main(logPath, srcRoot, outputDir):\\n    # \u6807\u51c6\u5316\u8def\u5f84\\n    srcRoot = os.path.normpath(srcRoot)\\n    outputDir = os.path.normpath(outputDir)\\n    \\n    # \u89e3\u6790\u65e5\u5fd7, \u5e76\u4e14\u590d\u5236\u5230\u65b0\u8def\u5f84, \u5e76\u4e14 \u8bb0\u5f55 id - (\u65b0\u8def\u5f84, \u539f\u8def\u5f84), \u7136\u540e\u8fd4\u56de idMap\\n    idMap = parse_log(srcRoot, logPath, outputDir)\\n    \\n    # \u521b\u5efa\u8f93\u51fa\u76ee\u5f55\u7ed3\u6784\u5e76\u590d\u5236\u6587\u4ef6\\n    syoriFile(idMap)\\n\\nif __name__ == \'__main__\':\\n    main(\\n        logPath=\'./cin/BML_1_20250425_143534_243/log.txt\',\\n        srcRoot=\'./cin/BML_1_20250425_143534_243\',\\n        outputDir=\'./cout\'\\n    )\\n```\\n\\n\u8fd8\u662f\u5f88\u7b80\u5355\u7684, \u4f46\u662f\u5728\u8fd9\u533a\u95f4\u8fd8\u662f\u9047\u5230\u5f88\u591a\u95ee\u9898, \u6bd4\u5982 Blossom \u7684\u6587\u4ef6\u662f\u53ef\u4ee5\u547d\u540d `\u7a7a\u683c.:/` \u8fd9\u79cd\u4e1c\u897f\u7684.\\n\\n\u56e0\u4e3a\u7a0b\u5e8f\u5185\u90e8\u4f3c\u4e4e\u6ca1\u6709\u9650\u5236... \u5f53\u521d\u4e5f\u6ca1\u6709\u60f3\u90a3\u4e48\u591a,\\n\\n\u8c01\u77e5\u9053, \u4e00\u5bfc\u51fa\u76f4\u63a5\u70b8\u4e86... `/`\u88ab\u5f3a\u5236\u521b\u5efa\u6587\u4ef6\u5939\u3001`\u7a7a\u683c.:`\u76f4\u63a5\u88ab\u66ff\u6362\u4e3a `\'\'` (\u7a7a), \u5bfc\u81f4\u5f88\u591a\u4e1c\u897f\u90fd\u89e3\u6790\u4e0d\u4e86...\\n\\n\u4ee5\u540e\u547d\u540d\u9700\u8981\u6ce8\u610f\u4e00\u4e0b. (\u4e0d\u8fc7\u5f71\u54cd\u7684\u5185\u5bb9\u4e0d\u591a, \u53ea\u6709\u5c11\u6570\u51e0\u7bc7\u6709\u95ee\u9898.. (\u4f46\u662f`.\u7a7a\u683c`\u8fd9\u79cd, \u56e0\u4e3a\u529b\u6263\u9898\u76ee\u7684\u6807\u9898\u5305\u542b\u8fd9\u4e9b, \u6211\u5c31\u53ea\u597dpy\u5148\u9884\u5904\u7406\u66ff\u6362\u4e86qwq))"},{"id":"/2025/04/22/02-vscode\u535a\u5ba2\u6a21\u7248","metadata":{"permalink":"/HXLoLi/blog/2025/04/22/02-vscode\u535a\u5ba2\u6a21\u7248","editUrl":"https://github.com/HengXin666/HXLoLi/edit/main/blog/2025/04/22/02-vscode\u535a\u5ba2\u6a21\u7248.md","source":"@site/blog/2025/04/22/02-vscode\u535a\u5ba2\u6a21\u7248.md","title":"VsCode\u535a\u5ba2\u6a21\u7248","description":"\u8fd9\u662f\u4e00\u7bc7\u6a21\u7248\u6587\u7ae0, \u6559\u60a8\u5982\u4f55\u7f16\u5199\u535a\u5ba2, \u4ee5\u53ca\u63d0\u4f9b\u4e86VsCode\u7684\u4ee3\u7801\u7247\u6bb5, \u4ee5\u5feb\u901f\u7f16\u5199\u535a\u5ba2!","date":"2025-04-22T01:35:08.000Z","tags":[{"inline":true,"label":"\u6a21\u7248","permalink":"/HXLoLi/blog/tags/\u6a21\u7248"},{"inline":false,"label":"Docusaurus","permalink":"/HXLoLi/blog/tags/docusaurus","description":"\u4e0e Docusaurus \u6846\u67b6\u76f8\u5173\u7684\u535a\u5ba2\u6587\u7ae0"},{"inline":false,"label":"VsCode","permalink":"/HXLoLi/blog/tags/vscode","description":"\u4e0e VsCode \u914d\u7f6e\u76f8\u5173\u7684\u535a\u5ba2\u6587\u7ae0"}],"readingTime":1.23,"hasTruncateMarker":true,"authors":[{"name":"Heng_Xin","title":"\u3053\u3053\u304b\u3089\u5148\u306f\u4e00\u65b9\u901a\u884c\u3060!","url":"https://github.com/HengXin666","email":"282000500@qq.com","socials":{"github":"https://github.com/HengXin666","bilibili":"https://space.bilibili.com/478917126"},"imageURL":"https://avatars.githubusercontent.com/u/103022267","key":"Heng_Xin","page":null}],"frontMatter":{"authors":"Heng_Xin","title":"VsCode\u535a\u5ba2\u6a21\u7248","date":"2025-04-22T01:35:08.000Z","tags":["\u6a21\u7248","docusaurus","vscode"]},"unlisted":false,"lastUpdatedAt":1746115883000,"lastUpdatedBy":"Heng_Xin_666","prevItem":{"title":"Blossom\u8fc1\u79fb\u7b14\u8bb0\u8bb0\u5f55","permalink":"/HXLoLi/blog/2025/04/25/01-Blossom\u8fc1\u79fb\u7b14\u8bb0\u8bb0\u5f55"},"nextItem":{"title":"\u7b2c\u4e00\u7bc7\u6d4b\u8bd5\u6587\u7ae0","permalink":"/HXLoLi/blog/2025/04/22/01-\u6d4b\u8bd5\u535a\u5ba2"}},"content":"\u8fd9\u662f\u4e00\u7bc7\u6a21\u7248\u6587\u7ae0, \u6559\u60a8\u5982\u4f55\u7f16\u5199\u535a\u5ba2, \u4ee5\u53ca\u63d0\u4f9b\u4e86`VsCode`\u7684\u4ee3\u7801\u7247\u6bb5, \u4ee5\u5feb\u901f\u7f16\u5199\u535a\u5ba2!\\n\\n\x3c!-- truncate --\x3e\\n\\n## VsCode \u4ee3\u7801\u7247\u6bb5 \u6a21\u7248\\n\\n\u8bbe\u7f6e -> \u4ee3\u7801\u7247\u6bb5 -> markdown -> \u586b\u5199\u4ee5\u4e0b\u5185\u5bb9: (\u60a8\u9700\u8981\u4fee\u6539\u4e00\u4e0b`authors`\u4e3a\u4f60\u81ea\u5df1\u7684\u540d\u79f0)\\n\\n```json vscode\\n\\"HXLoliHubBlog\u6a21\u7248\\": {\\n    \\"prefix\\": \\"mdBlogBegin\\",\\n    \\"body\\": [\\n        \\"---\\",\\n        \\"authors: Heng_Xin\\",\\n        \\"title: ${1:${TM_FILENAME_BASE}}\\",\\n        \\"date: ${CURRENT_YEAR}-${CURRENT_MONTH}-${CURRENT_DATE} ${CURRENT_HOUR}:${CURRENT_MINUTE}:${CURRENT_SECOND}\\",\\n        \\"tags:\\",\\n        \\"    - ${2:\u6807\u7b7e}\\",\\n        \\"---\\",\\n        \\"\\",\\n        \\"${3:\u7b80\u4ecb}\\",\\n        \\"\\",\\n        \\"\x3c!-- truncate --\x3e\\",\\n    ],\\n    \\"description\\": \\"HXLoliHub Blog\u6a21\u7248\\"\\n}\\n```\\n\\n\u7136\u540e\u5c1d\u8bd5\u5728`.md`\u4e2d\u6253`mdBlogBegin`, \u7406\u8bba\u4e0a\u5c31\u4f1a\u51fa\u73b0\u8fd9\u4e2a\u6a21\u7248.\\n\\n\u5982\u679c\u8fde\u4ee3\u7801\u63d0\u793a\u90fd\u6ca1\u6709, \u90a3\u4e48\u53ef\u4ee5\u5c1d\u8bd5:\\n\\n\u70b9\u51fb:\\n\\n![\u6b65\u9aa41](PixPin_2025-04-22_02-14-41.png)\\n\\n\u7136\u540e\u4f1a\u51fa\u73b0:\\n\\n![\u6b65\u9aa42](PixPin_2025-04-22_02-15-08.png)\\n\\n\u7136\u540e\u5c31\u4f1a\u8df3\u8f6c\u5230\u914d\u7f6e\u6587\u4ef6:\\n\\n```json vscode\\n\\"[markdown]\\": {\\n    // \u7c98\u8d34\u4e0b\u9762\u5185\u5bb9\\n    \\"editor.wordWrap\\": \\"on\\",\\n    \\"editor.quickSuggestions\\": {\\n        \\"other\\": \\"on\\",\\n        \\"comments\\": \\"off\\",\\n        \\"strings\\": \\"on\\"\\n    },\\n    // \u4e0b\u9762\u8fd9\u4e2a\u662f\u4e00\u4e2a\u63d2\u4ef6, \u4f60\u53ef\u4ee5\u53bb\u4e0b\u8f7d\u4e00\u4e0b, \u5f88\u65b9\u4fbf\u7684, \u76f4\u63a5\u5728 vscode \u62d3\u5c55\u4e2d\u641c\u7d22: Markdown All in One \u5373\u53ef\\n    \\"editor.defaultFormatter\\": \\"yzhang.markdown-all-in-one\\"\\n},\\n```\\n\\n\u7136\u540e\u56de\u7b54`.md`\u6587\u4ef6, \u5e94\u8be5\u5c31\u6709\u4ee3\u7801\u63d0\u793a\u4e86~"},{"id":"/2025/04/22/01-\u6d4b\u8bd5\u535a\u5ba2","metadata":{"permalink":"/HXLoLi/blog/2025/04/22/01-\u6d4b\u8bd5\u535a\u5ba2","editUrl":"https://github.com/HengXin666/HXLoLi/edit/main/blog/2025/04/22/01-\u6d4b\u8bd5\u535a\u5ba2.md","source":"@site/blog/2025/04/22/01-\u6d4b\u8bd5\u535a\u5ba2.md","title":"\u7b2c\u4e00\u7bc7\u6d4b\u8bd5\u6587\u7ae0","description":"\u8fd9\u662f\u4e00\u4e2a\u6d4b\u8bd5\u535a\u5ba2\u6587\u7ae0.","date":"2025-04-22T01:35:01.000Z","tags":[{"inline":true,"label":"\u6d4b\u8bd5","permalink":"/HXLoLi/blog/tags/\u6d4b\u8bd5"},{"inline":true,"label":"demo","permalink":"/HXLoLi/blog/tags/demo"},{"inline":false,"label":"Docusaurus","permalink":"/HXLoLi/blog/tags/docusaurus","description":"\u4e0e Docusaurus \u6846\u67b6\u76f8\u5173\u7684\u535a\u5ba2\u6587\u7ae0"}],"readingTime":0.45,"hasTruncateMarker":true,"authors":[{"name":"Heng_Xin","title":"\u3053\u3053\u304b\u3089\u5148\u306f\u4e00\u65b9\u901a\u884c\u3060!","url":"https://github.com/HengXin666","email":"282000500@qq.com","socials":{"github":"https://github.com/HengXin666","bilibili":"https://space.bilibili.com/478917126"},"imageURL":"https://avatars.githubusercontent.com/u/103022267","key":"Heng_Xin","page":null}],"frontMatter":{"authors":"Heng_Xin","title":"\u7b2c\u4e00\u7bc7\u6d4b\u8bd5\u6587\u7ae0","date":"2025-04-22T01:35:01.000Z","tags":["\u6d4b\u8bd5","demo","docusaurus"]},"unlisted":false,"lastUpdatedAt":1746115883000,"lastUpdatedBy":"Heng_Xin_666","prevItem":{"title":"VsCode\u535a\u5ba2\u6a21\u7248","permalink":"/HXLoLi/blog/2025/04/22/02-vscode\u535a\u5ba2\u6a21\u7248"}},"content":"\u8fd9\u662f\u4e00\u4e2a\u6d4b\u8bd5\u535a\u5ba2\u6587\u7ae0.\\n\\n```cpp\\n#include <cstdio>\\n\\n[]{printf(\\"Hello HXLoLiHub!\\\\n\\");}();\\n```\\n\\n\x3c!-- truncate --\x3e\\n\\n> [!TIP]\\n> \u4e0a\u9762\u662f\u6458\u8981. `\u5916\u9762`\u770b\u4e0d\u89c1\u4e0b\u9762\u7684\u5185\u5bb9.\\n\\n## \u4f9d\u65e7\u652f\u6301 vscode \u7f16\u8f91\u5668\\n\\n```cpp vscode\\n/*\\n    \u5982\u4f60\u6240\u89c1, \u8fd9\u4e2a\u662f\u6d4b\u8bd5\u535a\u5ba2\\n*/\\n```\\n\\n## \u4f9d\u65e7\u652f\u6301 LeetCode \u7ec4\u5408\u4ee3\u7801\u5757\\n\\n```cpp [g1-c++]\\nint main() {\\n    return 0;\\n}\\n```\\n\\n```cpp [g1-CPP]\\nauto __main __ = [] {\\n    return 0;\\n}();\\n```"}]}}')}}]);