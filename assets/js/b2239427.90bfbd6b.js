"use strict";(self.webpackChunkhx_loli=self.webpackChunkhx_loli||[]).push([[36288],{25509:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>m,contentTitle:()=>r,default:()=>Q,frontMatter:()=>s,metadata:()=>o,toc:()=>c});const o=JSON.parse('{"id":"\u7a0b\u5e8f\u8bed\u8a00/C++/C++\u7b2c\u4e09\u65b9\u5e93/QT\u3010\u5b66\u4e60\u81ea\u5927\u4e19\u3011/QT\u57fa\u7840/Qt\u4e2d\u7684\u57fa\u7840\u6570\u636e\u7c7b\u578b/\u516d\u3001\u65e5\u671f\u548c\u65f6\u95f4/index","title":"\u516d\u3001\u65e5\u671f\u548c\u65f6\u95f4","description":"6.1 QDate","source":"@site/docs/002-\u7a0b\u5e8f\u8bed\u8a00/001-C++/005-C++\u7b2c\u4e09\u65b9\u5e93/003-QT\u3010\u5b66\u4e60\u81ea\u5927\u4e19\u3011/002-QT\u57fa\u7840/002-Qt\u4e2d\u7684\u57fa\u7840\u6570\u636e\u7c7b\u578b/006-\u516d\u3001\u65e5\u671f\u548c\u65f6\u95f4/index.md","sourceDirName":"002-\u7a0b\u5e8f\u8bed\u8a00/001-C++/005-C++\u7b2c\u4e09\u65b9\u5e93/003-QT\u3010\u5b66\u4e60\u81ea\u5927\u4e19\u3011/002-QT\u57fa\u7840/002-Qt\u4e2d\u7684\u57fa\u7840\u6570\u636e\u7c7b\u578b/006-\u516d\u3001\u65e5\u671f\u548c\u65f6\u95f4","slug":"/\u7a0b\u5e8f\u8bed\u8a00/C++/C++\u7b2c\u4e09\u65b9\u5e93/QT\u3010\u5b66\u4e60\u81ea\u5927\u4e19\u3011/QT\u57fa\u7840/Qt\u4e2d\u7684\u57fa\u7840\u6570\u636e\u7c7b\u578b/\u516d\u3001\u65e5\u671f\u548c\u65f6\u95f4/","permalink":"/HXLoLi/docs/\u7a0b\u5e8f\u8bed\u8a00/C++/C++\u7b2c\u4e09\u65b9\u5e93/QT\u3010\u5b66\u4e60\u81ea\u5927\u4e19\u3011/QT\u57fa\u7840/Qt\u4e2d\u7684\u57fa\u7840\u6570\u636e\u7c7b\u578b/\u516d\u3001\u65e5\u671f\u548c\u65f6\u95f4/","draft":false,"unlisted":false,"editUrl":"https://github.com/HengXin666/HXLoLi/edit/main/docs/002-\u7a0b\u5e8f\u8bed\u8a00/001-C++/005-C++\u7b2c\u4e09\u65b9\u5e93/003-QT\u3010\u5b66\u4e60\u81ea\u5927\u4e19\u3011/002-QT\u57fa\u7840/002-Qt\u4e2d\u7684\u57fa\u7840\u6570\u636e\u7c7b\u578b/006-\u516d\u3001\u65e5\u671f\u548c\u65f6\u95f4/index.md","tags":[],"version":"current","lastUpdatedBy":"Heng_Xin_666","lastUpdatedAt":1745851959000,"frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"\u4e94\u3001\u4f4d\u7f6e\u548c\u5c3a\u5bf8","permalink":"/HXLoLi/docs/\u7a0b\u5e8f\u8bed\u8a00/C++/C++\u7b2c\u4e09\u65b9\u5e93/QT\u3010\u5b66\u4e60\u81ea\u5927\u4e19\u3011/QT\u57fa\u7840/Qt\u4e2d\u7684\u57fa\u7840\u6570\u636e\u7c7b\u578b/\u4e94\u3001\u4f4d\u7f6e\u548c\u5c3a\u5bf8/"},"next":{"title":"\u4e00\u3001Qt\u4e2d\u7684\u4fe1\u53f7\u69fd","permalink":"/HXLoLi/docs/\u7a0b\u5e8f\u8bed\u8a00/C++/C++\u7b2c\u4e09\u65b9\u5e93/QT\u3010\u5b66\u4e60\u81ea\u5927\u4e19\u3011/QT\u57fa\u7840/QT\u4fe1\u53f7\u69fd/\u4e00\u3001Qt\u4e2d\u7684\u4fe1\u53f7\u69fd/"}}');var i=n(74848),a=n(28453);const s={},r="\u516d\u3001\u65e5\u671f\u548c\u65f6\u95f4",m={},c=[{value:"6.1 QDate",id:"61-qdate",level:2},{value:"6.2 QTime",id:"62-qtime",level:2},{value:"6.3 QDateTime",id:"63-qdatetime",level:2}];function d(e){const t={code:"code",h1:"h1",h2:"h2",header:"header",p:"p",pre:"pre",...(0,a.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(t.header,{children:(0,i.jsx)(t.h1,{id:"\u516d\u65e5\u671f\u548c\u65f6\u95f4",children:"\u516d\u3001\u65e5\u671f\u548c\u65f6\u95f4"})}),"\n",(0,i.jsx)(t.h2,{id:"61-qdate",children:"6.1 QDate"}),"\n",(0,i.jsx)(t.p,{children:"QDate\u7c7b\u53ef\u4ee5\u5c01\u88c5\u65e5\u671f\u4fe1\u606f\u4e5f\u53ef\u4ee5\u901a\u8fc7\u8fd9\u4e2a\u7c7b\u5f97\u5230\u65e5\u671f\u76f8\u5173\u7684\u4fe1\u606f, \u5305\u62ec: \u5e74, \u6708, \u65e5"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-C++",children:"// \u6784\u9020\u51fd\u6570\nQDate::QDate();\nQDate::QDate(int y, int m, int d);\n\n// \u516c\u5171\u6210\u5458\u51fd\u6570\n// \u91cd\u65b0\u8bbe\u7f6e\u65e5\u671f\u5bf9\u8c61\u4e2d\u7684\u65e5\u671f\nbool QDate::setDate(int year, int month, int day);\n// \u7ed9\u65e5\u671f\u5bf9\u8c61\u6dfb\u52a0 ndays \u5929\nQDate QDate::addDays(qint64 ndays) const;\n// \u7ed9\u65e5\u671f\u5bf9\u8c61\u6dfb\u52a0 nmonths \u6708\nQDate QDate::addMonths(int nmonths) const;\n// \u7ed9\u65e5\u671f\u5bf9\u8c61\u6dfb\u52a0 nyears \u6708\nQDate QDate::addYears(int nyears) const;\n\n// \u5f97\u5230\u65e5\u671f\u5bf9\u8c61\u4e2d\u7684\u5e74/\u6708/\u65e5\nint QDate::year() const;\nint QDate::month() const;\nint QDate::day() const;\nvoid QDate::getDate(int *year, int *month, int *day) const;\n\n// \u65e5\u671f\u5bf9\u8c61\u683c\u5f0f\u5316\n/*\n    d    - The day as a number without a leading zero (1 to 31)\n    dd   - The day as a number with a leading zero (01 to 31)\n    ddd     - The abbreviated localized day name (e.g. 'Mon' to 'Sun'). Uses the system locale to localize the name, i.e. QLocale::system().\n    dddd - The long localized day name (e.g. 'Monday' to 'Sunday'). Uses the system locale to localize the name, i.e. QLocale::system().\n    M    - The month as a number without a leading zero (1 to 12)\n    MM   - The month as a number with a leading zero (01 to 12)\n    MMM     - The abbreviated localized month name (e.g. 'Jan' to 'Dec'). Uses the system locale to localize the name, i.e. QLocale::system().\n    MMMM - The long localized month name (e.g. 'January' to 'December'). Uses the system locale to localize the name, i.e. QLocale::system().\n    yy   - The year as a two digit number (00 to 99)\n    yyyy - The year as a four digit number. If the year is negative, a minus sign is prepended, making five characters.\n*/\nQString QDate::toString(const QString &format) const;\n\n// \u64cd\u4f5c\u7b26\u91cd\u8f7d ==> \u65e5\u671f\u6bd4\u8f83\nbool QDate::operator!=(const QDate &d) const;\nbool QDate::operator<(const QDate &d) const;\nbool QDate::operator<=(const QDate &d) const;\nbool QDate::operator==(const QDate &d) const;\nbool QDate::operator>(const QDate &d) const;\nbool QDate::operator>=(const QDate &d) const;\n\n// \u9759\u6001\u51fd\u6570 -> \u5f97\u5230\u672c\u5730\u7684\u5f53\u524d\u65e5\u671f\n[static] QDate QDate::currentDate();\n"})}),"\n",(0,i.jsx)(t.h2,{id:"62-qtime",children:"6.2 QTime"}),"\n",(0,i.jsx)(t.p,{children:"QTime\u7c7b\u53ef\u4ee5\u5c01\u88c5\u65f6\u95f4\u4fe1\u606f\u4e5f\u53ef\u4ee5\u901a\u8fc7\u8fd9\u4e2a\u7c7b\u5f97\u5230\u65f6\u95f4\u76f8\u5173\u7684\u4fe1\u606f, \u5305\u62ec: \u65f6, \u5206, \u79d2, \u6beb\u79d2"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-C++",children:"// \u6784\u9020\u51fd\u6570\nQTime::QTime();\n/*\n    h         ==> \u53d6\u503c\u8303\u56f4\uff1a 0 ~ 23\n    m and s     ==> \u53d6\u503c\u8303\u56f4\uff1a 0 ~ 59\n    ms         ==> \u53d6\u503c\u8303\u56f4\uff1a 0 ~ 999\n*/ \nQTime::QTime(int h, int m, int s = 0, int ms = 0);\n\n// \u516c\u5171\u6210\u5458\u51fd\u6570\n// Returns true if the set time is valid; otherwise returns false.\nbool QTime::setHMS(int h, int m, int s, int ms = 0);\nQTime QTime::addSecs(int s) const;\nQTime QTime::addMSecs(int ms) const;\n\n// \u793a\u4f8b\u4ee3\u7801\n  QTime n(14, 0, 0);                // n == 14:00:00\n  QTime t;\n  t = n.addSecs(70);                // t == 14:01:10\n  t = n.addSecs(-70);               // t == 13:58:50\n  t = n.addSecs(10 * 60 * 60 + 5);  // t == 00:00:05\n  t = n.addSecs(-15 * 60 * 60);     // t == 23:00:00\n\n// \u4ece\u65f6\u95f4\u5bf9\u8c61\u4e2d\u53d6\u51fa \u65f6/\u5206/\u79d2/\u6beb\u79d2\n// Returns the hour part (0 to 23) of the time. Returns -1 if the time is invalid.\nint QTime::hour() const;\n// Returns the minute part (0 to 59) of the time. Returns -1 if the time is invalid.\nint QTime::minute() const;\n// Returns the second part (0 to 59) of the time. Returns -1 if the time is invalid.\nint QTime::second() const;\n// Returns the millisecond part (0 to 999) of the time. Returns -1 if the time is invalid.\nint QTime::msec() const;\n\n\n// \u65f6\u95f4\u683c\u5f0f\u5316\n/*\n    -- \u65f6 --\n    h    ==>    The hour without a leading zero (0 to 23 or 1 to 12 if AM/PM display)\n    hh    ==>    The hour with a leading zero (00 to 23 or 01 to 12 if AM/PM display)\n    H    ==>    The hour without a leading zero (0 to 23, even with AM/PM display)\n    HH    ==>    The hour with a leading zero (00 to 23, even with AM/PM display)\n    -- \u5206 --\n    m    ==>    The minute without a leading zero (0 to 59)\n    mm    ==>    The minute with a leading zero (00 to 59)\n    -- \u79d2 --\n    s    ==>    The whole second, without any leading zero (0 to 59)\n    ss    ==>    The whole second, with a leading zero where applicable (00 to 59)\n    -- \u6beb\u79d2 --\n    zzz    ==>    The fractional part of the second, to millisecond precision, \n            including trailing zeroes where applicable (000 to 999).\n    -- \u4e0a\u5348\u6216\u8005\u4e0b\u5348 (\u7528\u8fd9\u4e2a\u7684\u8bdd, \u5c0f\u65f6\u4e3a12\u5c0f\u65f6\u5236 \u5566\u54c7~)\n    AP or A    ==>    \u4f7f\u7528AM/PM(\u5927\u5199) \u63cf\u8ff0\u4e0a\u4e0b\u5348, \u4e2d\u6587\u7cfb\u7edf\u663e\u793a\u6c49\u5b57\n    ap or a    ==>    \u4f7f\u7528am/pm(\u5c0f\u5199) \u63cf\u8ff0\u4e0a\u4e0b\u5348, \u4e2d\u6587\u7cfb\u7edf\u663e\u793a\u6c49\u5b57\n*/\nQString QTime::toString(const QString &format) const;\n\n// \u9636\u6bb5\u6027\u8ba1\u65f6\n// [\u8fc7\u65f6]\u7684API\u51fd\u6570\n// \u5f00\u59cb\u8ba1\u65f6\nvoid QTime::start();\n// \u8ba1\u65f6\u7ed3\u675f\nint QTime::elapsed() const;\n// \u91cd\u65b0\u8ba1\u65f6\nint QTime::restart();\n\n// \u63a8\u8350\u4f7f\u7528\u7684API\u51fd\u6570 (~~\u4e0d\u5982STL\u7684 \u563f\u563f~~)\n// QElapsedTimer \u7c7b\nvoid QElapsedTimer::start();\nqint64 QElapsedTimer::restart();\nqint64 QElapsedTimer::elapsed() const;\n\n\n// \u64cd\u4f5c\u7b26\u91cd\u8f7d ==> \u65f6\u95f4\u6bd4\u8f83\nbool QTime::operator!=(const QTime &t) const;\nbool QTime::operator<(const QTime &t) const;\nbool QTime::operator<=(const QTime &t) const;\nbool QTime::operator==(const QTime &t) const;\nbool QTime::operator>(const QTime &t) const;\nbool QTime::operator>=(const QTime &t) const;\n\n// \u9759\u6001\u51fd\u6570 -> \u5f97\u5230\u5f53\u524d\u65f6\u95f4\n[static] QTime QTime::currentTime();\n"})}),"\n",(0,i.jsx)(t.h2,{id:"63-qdatetime",children:"6.3 QDateTime"}),"\n",(0,i.jsx)(t.p,{children:"QDateTime\u7c7b\u53ef\u4ee5\u5c01\u88c5\u65e5\u671f\u548c\u65f6\u95f4\u4fe1\u606f\u4e5f\u53ef\u4ee5\u901a\u8fc7\u8fd9\u4e2a\u7c7b\u5f97\u5230\u65e5\u671f\u548c\u65f6\u95f4\u76f8\u5173\u7684\u4fe1\u606f, \u5305\u62ec:\u5e74, \u6708, \u65e5, \u65f6, \u5206, \u79d2, \u6beb\u79d2\u3002\u5176\u5b9e\u8fd9\u4e2a\u7c7b\u5c31\u662fQDate \u548c QTime \u8fd9\u4e24\u4e2a\u7c7b\u7684\u7ed3\u5408\u4f53\u3002"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-C++",children:"// \u6784\u9020\u51fd\u6570\nQDateTime::QDateTime();\nQDateTime::QDateTime(const QDate &date, const QTime &time, Qt::TimeSpec spec = Qt::LocalTime);\n\n// \u516c\u5171\u6210\u5458\u51fd\u6570\n// \u8bbe\u7f6e\u65e5\u671f\nvoid QDateTime::setDate(const QDate &date);\n// \u8bbe\u7f6e\u65f6\u95f4\nvoid QDateTime::setTime(const QTime &time);\n// \u7ed9\u5f53\u524d\u65e5\u671f\u5bf9\u8c61\u8ffd\u52a0 \u5e74/\u6708/\u65e5/\u79d2/\u6beb\u79d2, \u53c2\u6570\u53ef\u4ee5\u662f\u8d1f\u6570\nQDateTime QDateTime::addYears(int nyears) const;\nQDateTime QDateTime::addMonths(int nmonths) const;\nQDateTime QDateTime::addDays(qint64 ndays) const;\nQDateTime QDateTime::addSecs(qint64 s) const;\nQDateTime QDateTime::addMSecs(qint64 msecs) const;\n\n// \u5f97\u5230\u5bf9\u8c61\u4e2d\u7684\u65e5\u671f\nQDate QDateTime::date() const;\n// \u5f97\u5230\u5bf9\u8c61\u4e2d\u7684\u65f6\u95f4\nQTime QDateTime::time() const;\n\n// \u65e5\u671f\u548c\u65f6\u95f4\u683c\u5f0f, \u683c\u5f0f\u5b57\u7b26\u53c2\u8003QDate \u548c QTime \u7c7b\u7684 toString() \u51fd\u6570\nQString QDateTime::toString(const QString &format) const;\n\n\n// \u64cd\u4f5c\u7b26\u91cd\u8f7d ==> \u65e5\u671f\u65f6\u95f4\u5bf9\u8c61\u7684\u6bd4\u8f83\nbool QDateTime::operator!=(const QDateTime &other) const;\nbool QDateTime::operator<(const QDateTime &other) const;\nbool QDateTime::operator<=(const QDateTime &other) const;\nbool QDateTime::operator==(const QDateTime &other) const;\nbool QDateTime::operator>(const QDateTime &other) const;\nbool QDateTime::operator>=(const QDateTime &other) const;\n\n// \u9759\u6001\u51fd\u6570\n// \u5f97\u5230\u5f53\u524d\u65f6\u533a\u7684\u65e5\u671f\u548c\u65f6\u95f4(\u672c\u5730\u8bbe\u7f6e\u7684\u65f6\u533a\u5bf9\u5e94\u7684\u65e5\u671f\u548c\u65f6\u95f4)\n[static] QDateTime QDateTime::currentDateTime();\n"})}),"\n",(0,i.jsx)(t.p,{children:"\u793a\u4f8b:"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-C++",children:"auto now = QDateTime::currentDateTime();\nqDebug() << now.toString(\"yyyy-MM-dd hh:mm:ss.ms\") << '\\n';\n"})})]})}function Q(e={}){const{wrapper:t}={...(0,a.R)(),...e.components};return t?(0,i.jsx)(t,{...e,children:(0,i.jsx)(d,{...e})}):d(e)}},28453:(e,t,n)=>{n.d(t,{R:()=>s,x:()=>r});var o=n(96540);const i={},a=o.createContext(i);function s(e){const t=o.useContext(a);return o.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function r(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:s(e.components),o.createElement(a.Provider,{value:t},e.children)}}}]);