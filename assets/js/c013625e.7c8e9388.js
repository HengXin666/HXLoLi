"use strict";(self.webpackChunkhx_loli=self.webpackChunkhx_loli||[]).push([[2280],{28453:(n,e,t)=>{t.d(e,{R:()=>s,x:()=>o});var r=t(96540);const i={},a=r.createContext(i);function s(n){const e=r.useContext(a);return r.useMemo((function(){return"function"==typeof n?n(e):{...e,...n}}),[e,n])}function o(n){let e;return e=n.disableParentContext?"function"==typeof n.components?n.components(i):n.components||i:s(n.components),r.createElement(a.Provider,{value:e},n.children)}},32974:(n,e,t)=>{t.r(e),t.d(e,{assets:()=>l,contentTitle:()=>o,default:()=>p,frontMatter:()=>s,metadata:()=>r,toc:()=>d});var r=t(83735),i=t(74848),a=t(28453);const s={authors:"Heng_Xin",title:"\u590d\u4e60\u5feb\u6392\u5e76\u6a21\u7248\u5316",date:new Date("2025-05-19T23:59:59.000Z"),tags:["C++"]},o=void 0,l={authorsImageUrls:[void 0]},d=[];function c(n){const e={a:"a",code:"code",li:"li",p:"p",pre:"pre",ul:"ul",...(0,a.R)(),...n.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(e.p,{children:"\u590d\u4e60\u5feb\u6392, \u5e76\u4e14\u5b9e\u73b0\u4e86\u652f\u6301\u8c13\u8bcd\u548c\u4ec5\u524d\u5411\u81ea\u589e\u8fed\u4ee3\u5668\u7684\u6a21\u7248\u7684\u5feb\u6392"}),"\n",(0,i.jsxs)(e.p,{children:["\u672c\u8282\u7684\u539f\u7406: ",(0,i.jsx)(e.a,{href:"https://hengxin666.github.io/HXLoLi/docs/%E8%AE%A1%E4%BD%AC%E5%B8%B8%E8%AD%98/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/%E3%80%90%E7%AE%97%E6%B3%95%E3%80%91%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/%E4%BA%A4%E6%8D%A2%E6%8E%92%E5%BA%8F",children:"\u4ea4\u6362\u6392\u5e8f -> \u5feb\u901f\u6392\u5e8f"})]}),"\n",(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsxs)(e.li,{children:["\u53cc\u8fb9\u5feb\u6392 (\u4ece ",(0,i.jsx)(e.code,{children:"arr[begin]"})," \u4f5c\u4e3a\u57fa\u51c6)"]}),"\n"]}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-cpp",metastring:"[z1-\u53cc\u8fb9\u5feb\u6392]",children:"struct Sorter {\n    void sort(int begin, int end) {\n        if (begin >= end) {\n            return;\n        }\n        auto l = begin, r = end;\n        auto t = std::move(arr[l]);\n        bool runLight = false;\n        while (l < r) {\n            if (runLight) {\n                if (arr[l] > t) {\n                    std::swap(arr[l], arr[r]);\n                    runLight ^= 1;\n                } else {\n                    ++l;\n                }\n            } else {\n                if (arr[r] < t) {\n                    std::swap(arr[l], arr[r]);\n                    runLight ^= 1;\n                } else {\n                    --r;\n                }\n            }\n        }\n        arr[l] = std::move(t);\n        sort(begin, l - 1);\n        sort(l + 1, end);\n    }\n    std::vector<int>& arr;\n};\n"})}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-cpp",metastring:"[z1-\u4f18\u5316\u7684\u53cc\u8fb9\u5feb\u6392]",children:"struct Sorter {\n    void sort(int begin, int end) {\n        if (begin >= end) {\n            return;\n        }\n        auto l = begin, r = end;\n        auto t = std::move(arr[l]);\n        while (l < r) {\n            while (l < r && arr[r] >= t) // \u53cd\u4eba\u7c7b\u7684\u4ece r \u5f00\u59cb\n                --r;\n            while (l < r && arr[l] <= t) \n                ++l;\n            if (l < r)\n                std::swap(arr[l], arr[r]);\n        }\n        std::swap(arr[begin], arr[l]);\n        sort(begin, l - 1);\n        sort(l + 1, end);\n    }\n    std::vector<int>& arr;\n};\n"})}),"\n",(0,i.jsxs)(e.p,{children:["\u4f46\u662f\u8fd8\u662f\u592a\u590d\u6742\u4e86, \u6709",(0,i.jsx)(e.code,{children:"if else"}),"\u7684\u4e0d\u4f18\u96c5, \u6ca1\u7684, \u53c8\u4e0d\u987a\u773c (",(0,i.jsx)(e.code,{children:"\u4ecer\u5f00\u59cb"}),")"]}),"\n",(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsx)(e.li,{children:"\u6240\u4ee5\u5199\u4e86\u5355\u8fb9\u5faa\u73af\u7684:"}),"\n"]}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-cpp",metastring:"[z2-\u5355\u8fb9\u5feb\u6392]",children:"struct Sorter {\n    // \u5355\u8fb9\u5faa\u73af\u6cd5, \u4ea4\u6362\u6b21\u6570\u66f4\u5c11, \u4e5f\u66f4\u7b80\u5355\n    void sort(int begin, int end) {\n        if (begin >= end) {\n            return;\n        }\n        auto j = begin;\n        auto& t = arr[j];\n        for (auto i = begin + 1; i <= end; ++i) {\n            if (arr[i] < t)\n                std::swap(arr[++j], arr[i]);\n        }\n        std::swap(arr[begin], arr[j]);\n        sort(begin, j - 1);\n        sort(j + 1, end);\n    }\n    std::vector<int>& arr;\n};\n"})}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-cpp",metastring:"[z2-\u652f\u6301\u8fed\u4ee3\u5668]",children:"template <typename T>\nstruct Sorter {\n    // \u652f\u6301\u8fed\u4ee3\u5668 (\u6b64\u65f6 end \u662f\u5f00\u533a\u95f4, \u56e0\u4e3a end \u4e0d\u80fd\u89e3\u5f15\u7528!)\n    template <typename It>\n    void sort(const It begin, const It end) {\n        if (std::distance(begin, end) <= 1) { // \u6ce8\u610f std::distance \u53ef\u80fd\u662f O(n) \u7684\n            return;\n        }\n        auto j = begin;\n        auto& t = *j;\n        for (auto i = begin + 1; i != end; ++i) {\n            if (*i < t)\n                std::swap(*++j, *i);\n        }\n        std::swap(*begin, *j);\n        sort(begin, j);\n        sort(j + 1, end);\n    }\n    T& arr;\n};\n"})}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-cpp",metastring:"[z2-\u652f\u6301\u8c13\u8bcd\u548c\u4ec5\u524d\u5411\u81ea\u589e\u8fed\u4ee3\u5668]",children:"namespace internal{\ntemplate <typename T, typename Func>\nstruct Sorter {\n    // \u652f\u6301\u8c13\u8bcd \u548c \u751a\u81f3 std::forward_list \u7684 \u4ec5\u524d\u5411\u81ea\u589e\u8fed\u4ee3\u5668\n    template <typename It>\n    void sort(const It begin, const It end) {\n        if (begin == end) {\n            return;\n        }\n        auto j = begin;\n        auto& t = *j;\n        for (auto i = [&] { auto res = begin; return ++res; }(); i != end; ++i) {\n            if (func(*i, t))\n                std::swap(*++j, *i);\n        }\n        std::swap(*begin, *j);\n        sort(begin, j);\n        sort(++j, end);\n    }\n    T& arr;\n    const Func& func;\n};\n} // namespace internal\n\ntemplate <typename T, typename Func>\nauto sort(T& arr, const Func& func) -> decltype(\n    arr.begin(), arr.end(),\n    std::is_same_v<bool, decltype(func(*arr.begin(), *arr.begin()))>, void()\n) {\n    internal::Sorter {arr, func}.sort(arr.begin(), arr.end());\n}\n\ntemplate <typename T>\nauto sort(T& arr) -> decltype(\n    *arr.begin() < *arr.begin(), void()\n) {\n    using Type = std::decay_t<decltype(*arr.begin())>;\n    internal::Sorter {arr, [](const Type& i, const Type& j) {\n        return i < j;\n    }}.sort(arr.begin(), arr.end());\n}\n\n// \u8c03\u7528: (\u4e0a\u9762\u5185\u5bb9\u662f\u5c01\u88c5\u5728hx\u4f5c\u7528\u57df\u7684)\nint main() {\n    std::forward_list<int> arr{1, 4, 3, 3, 2, 2, 3};\n    HX::print::println(arr);\n    hx::sort(arr, [](int i, int j) {\n        return i > j;\n    });\n    HX::print::println(arr);\n    hx::sort(arr);\n    HX::print::println(arr);\n    return 0;\n}\n"})})]})}function p(n={}){const{wrapper:e}={...(0,a.R)(),...n.components};return e?(0,i.jsx)(e,{...n,children:(0,i.jsx)(c,{...n})}):c(n)}},83735:n=>{n.exports=JSON.parse('{"permalink":"/HXLoLi/blog/2025/05/19/01-\u590d\u4e60\u5feb\u6392\u5e76\u6a21\u7248\u5316","editUrl":"https://github.com/HengXin666/HXLoLi/edit/main/blog/2025/05/19/01-\u590d\u4e60\u5feb\u6392\u5e76\u6a21\u7248\u5316.md","source":"@site/blog/2025/05/19/01-\u590d\u4e60\u5feb\u6392\u5e76\u6a21\u7248\u5316.md","title":"\u590d\u4e60\u5feb\u6392\u5e76\u6a21\u7248\u5316","description":"\u590d\u4e60\u5feb\u6392, \u5e76\u4e14\u5b9e\u73b0\u4e86\u652f\u6301\u8c13\u8bcd\u548c\u4ec5\u524d\u5411\u81ea\u589e\u8fed\u4ee3\u5668\u7684\u6a21\u7248\u7684\u5feb\u6392","date":"2025-05-19T23:59:59.000Z","tags":[{"inline":false,"label":"C++","permalink":"/HXLoLi/blog/tags/C++","description":"C++\u5c0f\u77e5\u8bc6"}],"readingTime":3.365,"hasTruncateMarker":true,"authors":[{"name":"Heng_Xin","title":"\u3053\u3053\u304b\u3089\u5148\u306f\u4e00\u65b9\u901a\u884c\u3060!","url":"https://github.com/HengXin666","email":"282000500@qq.com","socials":{"github":"https://github.com/HengXin666","bilibili":"https://space.bilibili.com/478917126"},"imageURL":"https://avatars.githubusercontent.com/u/103022267","key":"Heng_Xin","page":null}],"frontMatter":{"authors":"Heng_Xin","title":"\u590d\u4e60\u5feb\u6392\u5e76\u6a21\u7248\u5316","date":"2025-05-19T23:59:59.000Z","tags":["C++"]},"unlisted":false,"lastUpdatedAt":1747724233000,"lastUpdatedBy":"Heng_Xin_666","prevItem":{"title":"\u8d77\u731b\u4e86, \u5c45\u7136\u6709\u9762\u8bd5\u4e86","permalink":"/HXLoLi/blog/2025/05/24/01-\u6709\u9762\u8bd5\u4e86"},"nextItem":{"title":"\u4eca\u65e5\u8da3\u95fb\uff1a\u5356\u8bfe\u7684\u6765\u5566","permalink":"/HXLoLi/blog/2025/05/16/01-\u4eca\u65e5\u8da3\u95fb\uff1a\u5356\u8bfe\u7684\u6765\u5566"}}')}}]);