"use strict";(self.webpackChunkhx_loli=self.webpackChunkhx_loli||[]).push([[29942],{28453:(n,e,t)=>{t.d(e,{R:()=>r,x:()=>a});var s=t(96540);const i={},d=s.createContext(i);function r(n){const e=s.useContext(d);return s.useMemo((function(){return"function"==typeof n?n(e):{...e,...n}}),[e,n])}function a(n){let e;return e=n.disableParentContext?"function"==typeof n.components?n.components(i):n.components||i:r(n.components),s.createElement(d.Provider,{value:e},n.children)}},50198:(n,e,t)=>{t.r(e),t.d(e,{assets:()=>o,contentTitle:()=>a,default:()=>m,frontMatter:()=>r,metadata:()=>s,toc:()=>l});const s=JSON.parse('{"id":"\u7a0b\u5e8f\u8bed\u8a00/C++/\u5927\u9879\u76ee/\u5927\u9879\u76ee/\u5f00\u53d1\u7b14\u8bb0/SMS\u3001Mail\u3001PDF/index","title":"\u4e00\u3001SMS","description":"\u6ce8\u518c\u592a\u592a\u592a\u9ebb\u70e6\u4e86, \u8fd8\u9700\u8981\u624b\u6301\u8eab\u4efd\u8bc1?! ...\u8279","source":"@site/docs/002-\u7a0b\u5e8f\u8bed\u8a00/001-C++/008-\u5927\u9879\u76ee/001-\u5927\u9879\u76ee/001-\u5f00\u53d1\u7b14\u8bb0/008-SMS\u3001Mail\u3001PDF/index.md","sourceDirName":"002-\u7a0b\u5e8f\u8bed\u8a00/001-C++/008-\u5927\u9879\u76ee/001-\u5927\u9879\u76ee/001-\u5f00\u53d1\u7b14\u8bb0/008-SMS\u3001Mail\u3001PDF","slug":"/\u7a0b\u5e8f\u8bed\u8a00/C++/\u5927\u9879\u76ee/\u5927\u9879\u76ee/\u5f00\u53d1\u7b14\u8bb0/SMS\u3001Mail\u3001PDF/","permalink":"/HXLoLi/docs/\u7a0b\u5e8f\u8bed\u8a00/C++/\u5927\u9879\u76ee/\u5927\u9879\u76ee/\u5f00\u53d1\u7b14\u8bb0/SMS\u3001Mail\u3001PDF/","draft":false,"unlisted":false,"editUrl":"https://github.com/HengXin666/HXLoLi/edit/main/docs/002-\u7a0b\u5e8f\u8bed\u8a00/001-C++/008-\u5927\u9879\u76ee/001-\u5927\u9879\u76ee/001-\u5f00\u53d1\u7b14\u8bb0/008-SMS\u3001Mail\u3001PDF/index.md","tags":[],"version":"current","lastUpdatedBy":"Heng_Xin_666","lastUpdatedAt":1745851959000,"frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"MongoDB\u3001Redis\u3001C++\u8de8\u5e73\u53f0\u7f16\u8bd1","permalink":"/HXLoLi/docs/\u7a0b\u5e8f\u8bed\u8a00/C++/\u5927\u9879\u76ee/\u5927\u9879\u76ee/\u5f00\u53d1\u7b14\u8bb0/MongoDB\u3001Redis\u3001C++\u8de8\u5e73\u53f0\u7f16\u8bd1/"},"next":{"title":"\u3010\u8865\u5145\u3011MySql\u6570\u636e\u5e93\u5de5\u5177\u7c7b","permalink":"/HXLoLi/docs/\u7a0b\u5e8f\u8bed\u8a00/C++/\u5927\u9879\u76ee/\u5927\u9879\u76ee/\u5f00\u53d1\u7b14\u8bb0/\u3010\u8865\u5145\u3011MySql\u6570\u636e\u5e93\u5de5\u5177\u7c7b/"}}');var i=t(74848),d=t(28453);const r={},a="\u4e00\u3001SMS",o={},l=[{value:"1.1 \u5927\u81ea\u7136\u7684\u9988\u8d60: <code>AliSmsSender.h</code>",id:"11-\u5927\u81ea\u7136\u7684\u9988\u8d60-alismssenderh",level:2},{value:"1.2 \u793a\u4f8b",id:"12-\u793a\u4f8b",level:2},{value:"1.2.1 \u5355\u6761\u53d1\u9001",id:"121-\u5355\u6761\u53d1\u9001",level:3},{value:"1.2.2 \u591a\u6761\u53d1\u9001",id:"122-\u591a\u6761\u53d1\u9001",level:3},{value:"2.1 \u5927\u81ea\u7136\u7684\u9988\u8d60: <code>EmailSender.h</code>",id:"21-\u5927\u81ea\u7136\u7684\u9988\u8d60-emailsenderh",level:2},{value:"2.2 \u914d\u7f6e\u597d\u4f60\u7684 Nacos !",id:"22-\u914d\u7f6e\u597d\u4f60\u7684-nacos-",level:2},{value:"2.3 \u793a\u4f8b",id:"23-\u793a\u4f8b",level:2},{value:"2.3.1 \u521b\u5efa\u5ba2\u6237\u7aef\u7ba1\u7406\u7c7b",id:"231-\u521b\u5efa\u5ba2\u6237\u7aef\u7ba1\u7406\u7c7b",level:3},{value:"2.3.2 \u53d1\u9001\u6587\u672c\u5185\u5bb9",id:"232-\u53d1\u9001\u6587\u672c\u5185\u5bb9",level:3},{value:"2.3.3 \u53d1\u9001Html\u5185\u5bb9",id:"233-\u53d1\u9001html\u5185\u5bb9",level:3},{value:"2.3.4 \u53d1\u9001\u9644\u4ef6",id:"234-\u53d1\u9001\u9644\u4ef6",level:3},{value:"3.1 \u5927\u81ea\u7136\u7684\u9988\u8d60: <code>PdfComponent.h</code>",id:"31-\u5927\u81ea\u7136\u7684\u9988\u8d60-pdfcomponenth",level:2},{value:"3.2 \u793a\u4f8b",id:"32-\u793a\u4f8b",level:2},{value:"3.2.1 \u6e32\u67d3\u6587\u5b57\u754c\u9762",id:"321-\u6e32\u67d3\u6587\u5b57\u754c\u9762",level:3},{value:"3.2.2 \u6e32\u67d3\u6761\u5f62\u7801\u754c\u9762",id:"322-\u6e32\u67d3\u6761\u5f62\u7801\u754c\u9762",level:3}];function c(n){const e={code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",pre:"pre",ul:"ul",...(0,d.R)(),...n.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(e.header,{children:(0,i.jsx)(e.h1,{id:"\u4e00sms",children:"\u4e00\u3001SMS"})}),"\n",(0,i.jsx)(e.p,{children:"\u6ce8\u518c\u592a\u592a\u592a\u9ebb\u70e6\u4e86, \u8fd8\u9700\u8981\u624b\u6301\u8eab\u4efd\u8bc1?! ...\u8279"}),"\n",(0,i.jsx)(e.p,{style:{textAlign:"center"},children:"!!! \u4f7f\u7528\u53ea\u80fd\u5728Linux\u73af\u5883\u4e0b !!!"}),"\n",(0,i.jsxs)(e.h2,{id:"11-\u5927\u81ea\u7136\u7684\u9988\u8d60-alismssenderh",children:["1.1 \u5927\u81ea\u7136\u7684\u9988\u8d60: ",(0,i.jsx)(e.code,{children:"AliSmsSender.h"})]}),"\n",(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsx)(e.li,{children:(0,i.jsx)(e.code,{children:"zero-one-08mes\\mes-cpp\\lib-common\\include\\sms\\aliyun\\AliSmsSender.h"})}),"\n"]}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-C++",children:'/**\n * \u4e66\u5199\u4e00\u4e2a\u77ed\u4fe1\u53d1\u9001\u7ec4\u4ef6\n * \u6ce8\u610f\uff1a\n * 1\u3001\u6b64\u7ec4\u4ef6\u4e0d\u652f\u6301Windows\u5e73\u53f0\uff0c\u8981\u4f7f\u7528\u6b64\u7ec4\u4ef6\u8bf7\u5728Linux\u73af\u5883\u4e0b\u9762\u4f7f\u7528\n * 2\u3001\u4f7f\u7528\u7684\u65f6\u5019\u9700\u8981\u5b9a\u4e49AliKeyConfig\u7c7b\u76f8\u5173\u6210\u5458\u53d8\u91cf\u548c\u6210\u5458\u51fd\u6570\uff0c\u7528\u4e8e\u6307\u5b9aak\u548csk\u76f8\u5173\u503c\n */\nclass AliSmsSender\n{\npublic:\n    //************************************\n    // Method:    AliSmsSender\n    // FullName:  AliSmsSender::AliSmsSender\n    // Access:    public \n    // Returns:   \n    // Description: \u6784\u9020\u521d\u59cb\u5316\n    // Parameter: const std::string& keyfilename key\u914d\u7f6e\u6587\u4ef6\u540d\u79f0\n    // Parameter: const std::string& prefix \u914d\u7f6e\u8bfb\u53d6\u524d\u7f00\n    //************************************\n    AliSmsSender(const std::string& keyfilename = "key-config.yaml", const std::string& prefix = "aliyun.sms");\n    // \u6790\u6784\n    ~AliSmsSender();\n    //************************************\n    // Method:    sendSms\n    // FullName:  AliSmsSender::sendSms\n    // Access:    public \n    // Returns:   std::shared_ptr<AliSmsResult> \u53d1\u9001\u7ed3\u679c\n    // Description: \u53d1\u9001\u5355\u6761\u4fe1\u606f\n    // Parameter: const std::string& phoneNumber \u624b\u673a\u53f7\u7801\n    // Parameter: const std::string& signName \u7b7e\u540d\u540d\u79f0\u3002\u5982\uff1a\u963f\u91cc\u4e91\u77ed\u4fe1\u6d4b\u8bd5\n    // Parameter: const std::string& templateCode \u77ed\u4fe1\u6a21\u677fCODE\u3002\u5982\uff1aSMS_15******\n    // Parameter: const std::string& templateParams \u6a21\u677f\u53c2\u6570\u503c\uff0cjson\u6570\u636e\u683c\u5f0f\u3002\u5982\uff1a{"code":"996007"}\n    //************************************\n    std::shared_ptr<AliSmsResult> sendSms(\n        const std::string& phoneNumber,\n        const std::string& signName,\n        const std::string& templateCode,\n        const std::string& templateParams);\n    //************************************\n    // Method:    sendSmsBatch\n    // FullName:  AliSmsSender::sendSmsBatch\n    // Access:    public \n    // Returns:   std::shared_ptr<AliSmsResult>\n    // Description: \u6279\u91cf\u53d1\u9001\u77ed\u4fe1\uff0c\u8be5\u63a5\u53e3\u5355\u6b21\u6700\u591a\u652f\u6301100\u4e2a\u53f7\u7801\u3002\u6ce8\u610f\u6279\u91cf\u53d1\u9001\u6240\u6709\u53c2\u6570\u683c\u5f0f\u90fd\u662fjson\u683c\u5f0f\u5b57\u7b26\u4e32\n    // Parameter: const std::string & phoneNumbers \u624b\u673a\u53f7\u7801\u5217\u8868\u3002\u5982\uff1a["132xxxxxxx","159xxxxxxx"]\n    // Parameter: const std::string & signNames \u77ed\u4fe1\u7b7e\u540d\u540d\u79f0\uff0c\u77ed\u4fe1\u7b7e\u540d\u7684\u4e2a\u6570\u5fc5\u987b\u4e0e\u624b\u673a\u53f7\u7801\u7684\u4e2a\u6570\u76f8\u540c\u3001\u5185\u5bb9\u4e00\u4e00\u5bf9\u5e94\u3002\n    //                                                 \u5982\uff1a["\u7b7e\u540d1","\u7b7e\u540d2"]\n    // Parameter: const std::string & templateCode \u77ed\u4fe1\u6a21\u677fCODE\u3002\u5982\uff1aSMS_15******\n    // Parameter: const std::string & templateParams \u77ed\u4fe1\u6a21\u677f\u53d8\u91cf\u5bf9\u5e94\u7684\u5b9e\u9645\u503c\uff0c\u6a21\u677f\u53d8\u91cf\u503c\u7684\u4e2a\u6570\u5fc5\u987b\u4e0e\u624b\u673a\u53f7\u7801\u3001\u7b7e\u540d\u7684\u4e2a\u6570\u76f8\u540c\u3001\u5185\u5bb9\u4e00\u4e00\u5bf9\u5e94\uff0c\u8868\u793a\u5411\u6307\u5b9a\u624b\u673a\u53f7\u7801\u4e2d\u53d1\u5bf9\u5e94\u7b7e\u540d\u7684\u77ed\u4fe1\uff0c\u4e14\u77ed\u4fe1\u6a21\u677f\u4e2d\u7684\u53d8\u91cf\u53c2\u6570\u66ff\u6362\u4e3a\u5bf9\u5e94\u7684\u503c\u3002\n    //                                                 \u5982\uff1a[{"code":"996007"},{"code":"857857"}]\n    //************************************\n    std::shared_ptr<AliSmsResult> sendSmsBatch(\n        const std::string& phoneNumbers,\n        const std::string& signNames,\n        const std::string& templateCode,\n        const std::string& templateParams);\n};\n'})}),"\n",(0,i.jsx)(e.h2,{id:"12-\u793a\u4f8b",children:"1.2 \u793a\u4f8b"}),"\n",(0,i.jsx)(e.h3,{id:"121-\u5355\u6761\u53d1\u9001",children:"1.2.1 \u5355\u6761\u53d1\u9001"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-C++",children:'// \u6d4b\u8bd5\u5355\u6761\u53d1\u9001\nTEST(AliSmsTest, SendOne) {\n    AliSmsSender sender;\n    // \u6ce8\u610f\uff1a\u56e0\u4e3a\u53c2\u6570\u4e2d\u6709\u4e2d\u6587\u5b57\u7b26\uff0c\u6240\u4ee5\u6240\u6709\u4e2d\u6587\u5b57\u4ece\u4e2d\u6587\u8bcd\u5178\u4e2d\u83b7\u53d6\uff0c\u4e0d\u7136\u4f1a\u53d1\u9001\u77ed\u4fe1\u5931\u8d25\n    std::shared_ptr<AliSmsResult> res = sender.sendSms("\u7535\u8bdd\u53f7\u7801", "\u963f\u91cc\u4e91\u77ed\u4fe1\u6d4b\u8bd5", "SMS_154950909", "{\\"code\\":\\"996007\\"}");\n    ASSERT_EQ(res->Code(), "OK");\n    std::cout\n        << "code:  " << res->Code() << std::endl\n        << "msg:   " << res->Message() << std::endl\n        << "bizid: " << res->BizId() << std::endl\n        << "reqid: " << res->RequestId() << std::endl;\n}\n'})}),"\n",(0,i.jsx)(e.h3,{id:"122-\u591a\u6761\u53d1\u9001",children:"1.2.2 \u591a\u6761\u53d1\u9001"}),"\n",(0,i.jsx)(e.p,{children:"\u53ef\u80fd\u6709\u5931\u8d25\u7684\u98ce\u9669(\u514d\u8d39\u7684\u53ef\u80fd\u4e0d\u652f\u6301\u54e6~)"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-C++",children:'// \u6d4b\u8bd5\u591a\u6761\u53d1\u9001\nTEST(AliSmsTest, SendBatch)\n{\n    AliSmsSender sender;\n    // \u6ce8\u610f\uff1a\u56e0\u4e3a\u53c2\u6570\u4e2d\u6709\u4e2d\u6587\u5b57\u7b26\uff0c\u6240\u4ee5\u6240\u6709\u4e2d\u6587\u5b57\u4ece\u4e2d\u6587\u8bcd\u5178\u4e2d\u83b7\u53d6\uff0c\u4e0d\u7136\u4f1a\u53d1\u9001\u77ed\u4fe1\u5931\u8d25\n    std::shared_ptr<AliSmsResult> res = sender.sendSmsBatch("[\\"\u53f7\u78011\\",\\"\u53f7\u78012\\"]", "[\\"\u7b7e\u540d1\\",\\"\u7b7e\u540d2\\"]", "SMS_********", "[{\\"code\\":\\"996007\\"},{\\"code\\":\\"857857\\"}]");\n    ASSERT_EQ(res->Code(), "OK");\n    std::cout\n        << "code:  " << res->Code() << std::endl\n        << "msg:   " << res->Message() << std::endl\n        << "bizid: " << res->BizId() << std::endl\n        << "reqid: " << res->RequestId() << std::endl;\n}\n'})}),"\n",(0,i.jsx)(e.p,{children:"\u8c03\u7528API\u4f60\u5e94\u8be5\u4f1a\u7684\u5427\u3088\u306d"}),"\n",(0,i.jsx)(e.h1,{id:"\u4e8cmail",children:"\u4e8c\u3001Mail"}),"\n",(0,i.jsxs)(e.h2,{id:"21-\u5927\u81ea\u7136\u7684\u9988\u8d60-emailsenderh",children:["2.1 \u5927\u81ea\u7136\u7684\u9988\u8d60: ",(0,i.jsx)(e.code,{children:"EmailSender.h"})]}),"\n",(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsx)(e.li,{children:(0,i.jsx)(e.code,{children:"zero-one-08mes\\mes-cpp\\lib-common\\include\\EmailSender.h"})}),"\n"]}),"\n",(0,i.jsx)(e.p,{children:"\u90ae\u4ef6\u53d1\u9001\u5de5\u5177\u7c7b"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-C++",children:'/**\n * \u4e66\u5199\u4e00\u4e2a\u90ae\u4ef6\u53d1\u9001\u5de5\u5177\u7c7b\n */\nclass EmailSender\n{\npublic:\n    //************************************\n    // Method:    EmailSender\n    // FullName:  EmailSender::EmailSender\n    // Access:    public \n    // Returns:   \n    // Description: \u6784\u9020\u521d\u59cb\u5316\n    // Parameter: const std::string& smtp_server \u90ae\u4ef6\u670d\u52a1\u5668\uff0c\u5982smtp.163.com\n    // Parameter: const int smtp_port \u670d\u52a1\u5668\u7aef\u53e3\uff0c\u598225\n    // Parameter: const std::string& password \u6388\u6743\u5bc6\u7801\n    // Parameter: const std::string& from_email \u90ae\u4ef6\u53d1\u9001\u4eba\u90ae\u7bb1\u5730\u5740\n    // Parameter: const std::string& from_name  \u90ae\u4ef6\u53d1\u9001\u4eba\u540d\u79f0\uff0c\u9ed8\u8ba4\u503cNo-Reply\n    // Parameter: const std::string& charset \u5185\u5bb9\u7f16\u7801\uff0c\u9ed8\u8ba4\u503cgb2312\n    //************************************\n    EmailSender(\n        const std::string& smtp_server,\n        const int smtp_port,\n        const std::string& password,\n        const std::string& from_email,\n        const std::string& from_name = "No-Reply",\n        const std::string& charset = "gb2312");\n    ~EmailSender();\n    // \u8bbe\u7f6e\u90ae\u4ef6\u4e3b\u9898\u548c\u5185\u5bb9\uff0c\u53ef\u4ee5\u662fHTML\u683c\u5f0f\u6216\u7eaf\u6587\u672c\n    void setEmailContent(const std::string& subject = "", const std::string& body = "");\n    // \u6dfb\u52a0\u90ae\u4ef6\u63a5\u6536\u4eba\n    void addRecvEmailAddr(const std::string& email_addr, const std::string& name = "");\n    // \u6dfb\u52a0\u90ae\u4ef6\u6284\u9001\u4eba\n    void addCcEmailAddr(const std::string& email_addr, const std::string& name = "");\n    // \u6dfb\u52a0\u9644\u4ef6\n    void addAttachment(const std::string& filename);\n    // \u6267\u884c\u53d1\u9001\n    bool send();\n    // \u83b7\u53d6\u7f16\u7801\n    std::string getCharset() const;\n    // \u8bbe\u7f6e\u7f16\u7801\n    void setCharset(std::string val);\n    // \u542f\u7528SSL\u534f\u8bae\n    void enableSSL();\n    // \u7981\u7528SSL\u534f\u8bae\n    void disableSSL();\nprivate:\n    // smtp\u670d\u52a1\u5668\n    std::string m_smtp_url;\n    // \u5185\u5bb9\u7f16\u7801\uff0c\u9ed8\u8ba4gb2312\n    std::string m_charset;\n    // \u90ae\u4ef6\u53d1\u9001\u4eba key \u90ae\u4ef6\u5730\u5740 val \u53d1\u9001\u4eba\u540d\u79f0\n    std::pair<std::string, std::string> m_from;\n    // \u90ae\u4ef6\u670d\u52a1\u5668\u6388\u6743\u5bc6\u7801\n    std::string m_password;\n    // \u90ae\u4ef6\u63a5\u6536\u4eba key \u90ae\u4ef6\u5730\u5740 val \u63a5\u6536\u4eba\u540d\u79f0\n    std::vector<std::pair<std::string, std::string>> m_recvs;\n    // \u90ae\u4ef6\u6284\u9001\u4eba key \u90ae\u4ef6\u5730\u5740 val \u6284\u9001\u4eba\u540d\u79f0\n    std::vector<std::pair<std::string, std::string>> m_ccs;\n    // \u90ae\u4ef6\u4e3b\u9898\n    std::string m_email_subject;\n    // \u90ae\u4ef6\u5185\u5bb9\n    std::string m_email_body;\n    // \u90ae\u4ef6\u9644\u4ef6\u6587\u4ef6\u5217\u8868\uff08\u6587\u4ef6\u7684\u7edd\u5bf9\u6216\u76f8\u5bf9\u8def\u5f84\uff09\n    std::vector<std::string> m_attachments;\n    // \u56de\u8c03\u51fd\u6570\uff0c\u5c06MIME\u534f\u8bae\u7684\u62fc\u63a5\u7684\u5b57\u7b26\u4e32\u7531libcurl\u53d1\u51fa\n    static size_t payloadSource(void* ptr, size_t size, size_t nmemb, void* stream);\n    // \u521b\u5efa\u90ae\u4ef6MIME\u5185\u5bb9\n    std::string generateMimeMessage();\n    // \u83b7\u53d6\u9644\u4ef6\u6587\u4ef6\u540d\n    void getFileName(const std::string& path, std::string& filename);\n    // \u83b7\u53d6\u9644\u4ef6\u6587\u4ef6\u7c7b\u578b  \n    void getFileContentType(const std::string& path, std::string& contentType);\n};\n'})}),"\n",(0,i.jsx)(e.h2,{id:"22-\u914d\u7f6e\u597d\u4f60\u7684-nacos-",children:"2.2 \u914d\u7f6e\u597d\u4f60\u7684 Nacos !"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-C++",children:'/** \u5b9a\u4e49\u4e00\u4e2aNacos\u5ba2\u6237\u7aef\u5bf9\u8c61\uff0c\u7528\u4e8e\u83b7\u53d6\u914d\u7f6e ip:\u7aef\u53e3, \u547d\u540d\u7a7a\u95f4 (\u5fc5\u987b\u8981\u5f00\u4e00\u4e2a\u547d\u540d\u7a7a\u95f4!)*/\nNacosClient _ns("192.168.213.88:8848", "ed997686-a122-40ca-9b3c-15dda460fcaf");\n'})}),"\n",(0,i.jsx)(e.h2,{id:"23-\u793a\u4f8b",children:"2.3 \u793a\u4f8b"}),"\n",(0,i.jsx)(e.h3,{id:"231-\u521b\u5efa\u5ba2\u6237\u7aef\u7ba1\u7406\u7c7b",children:"2.3.1 \u521b\u5efa\u5ba2\u6237\u7aef\u7ba1\u7406\u7c7b"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-C++",children:'/**\n * \u5b9a\u4e49\u4e00\u4e2a\u6d4b\u8bd5\u5939\u5177\u7c7b\uff0c\u7528\u4e8e\u7ba1\u7406\u90ae\u4ef6\u53d1\u9001\u5bf9\u8c61\u521b\u5efa\n */\nclass MailTest : public testing::Test {\nprotected:\n    void SetUp() override\n    {\n        /** \u5b9a\u4e49\u4e00\u4e2aNacos\u5ba2\u6237\u7aef\u5bf9\u8c61\uff0c\u7528\u4e8e\u83b7\u53d6\u914d\u7f6e */\n        NacosClient _ns("192.168.213.88:8848", "ed997686-a122-40ca-9b3c-15dda460fcaf");\n        /** \u8bfb\u53d6\u914d\u7f6e\u6570\u636e\u8282\u70b9 */\n        auto _keyConfig = _ns.getConfig("key-config.yaml");\n        /** \u5b9a\u4e49\u5ba2\u6237\u7aef\u5bf9\u8c61 */\n        YamlHelper _yh;\n        this->emailSender = new EmailSender(\n            _yh.getString(&_keyConfig, "spring.mail.host"),\n            std::stoi(_yh.getString(&_keyConfig, "spring.mail.port")),\n            _yh.getString(&_keyConfig, "spring.mail.password"),\n            _yh.getString(&_keyConfig, "spring.mail.username"),\n            _yh.getString(&_keyConfig, "spring.mail.properties.name"));\n        this->emailSender->setCharset("utf8");\n    }\n    void TearDown() override\n    {\n        if (emailSender)\n        {\n            delete emailSender;\n            emailSender = nullptr;\n        }\n    }\n    // \u90ae\u4ef6\u53d1\u9001\u5ba2\u6237\u7aef\u5bf9\u8c61\n    EmailSender* emailSender = nullptr;\n    // \u6d4b\u8bd5\u90ae\u4ef6\u4e3b\u9898\n    std::string topic = ZH_WORDS_GETTER("mail.topic");\n};\n'})}),"\n",(0,i.jsx)(e.h3,{id:"232-\u53d1\u9001\u6587\u672c\u5185\u5bb9",children:"2.3.2 \u53d1\u9001\u6587\u672c\u5185\u5bb9"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-C++",children:'// \u6d4b\u8bd5\u53d1\u9001\u6587\u672c\u5185\u5bb9\nTEST_F(MailTest, SendText) {\n    std::string body = ZH_WORDS_GETTER("mail.body2"); // \u53d1\u9001\u7684\u6b63\u6587\n    emailSender->addRecvEmailAddr("282000500@qq.com", "Heng_Xin"); // \u6536\u4ef6\u4eba\u90ae\u7bb1, \u6536\u4ef6\u4eba\u540d\u79f0\n    emailSender->setEmailContent(topic, body);\n    emailSender->addCcEmailAddr("282000500@qq.com", "loli"); // \u6dfb\u52a0\u6284\u9001\u4eba\n    ASSERT_EQ(emailSender->send(), true);\n}\n'})}),"\n",(0,i.jsx)(e.h3,{id:"233-\u53d1\u9001html\u5185\u5bb9",children:"2.3.3 \u53d1\u9001Html\u5185\u5bb9"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-C++",children:'// \u6d4b\u8bd5\u53d1\u9001Html\u5185\u5bb9\nTEST_F(MailTest, SendHtml) {\n    std::string body = ZH_WORDS_GETTER("mail.body1");\n    emailSender->addRecvEmailAddr("282000500@qq.com", "Heng_Xin");\n    emailSender->setEmailContent(topic, body);\n    ASSERT_EQ(emailSender->send(), true);\n}\n'})}),"\n",(0,i.jsx)(e.h3,{id:"234-\u53d1\u9001\u9644\u4ef6",children:"2.3.4 \u53d1\u9001\u9644\u4ef6"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-C++",children:'// \u6d4b\u8bd5\u53d1\u9001\u9644\u4ef6\nTEST_F(MailTest, SendAttach) {\n    std::string body = ZH_WORDS_GETTER("mail.body1");\n    emailSender->addRecvEmailAddr("282000500@qq.com", "Heng_Xin");\n    emailSender->setEmailContent(topic, body);\n    emailSender->addAttachment("/root/dockerApp/dfsFile/Dockerfile");\n    ASSERT_EQ(emailSender->send(), true);\n}\n'})}),"\n",(0,i.jsx)(e.h1,{id:"\u4e09pdf--\u4e8c\u7ef4\u7801--\u6761\u5f62\u7801",children:"\u4e09\u3001PDF & \u4e8c\u7ef4\u7801 / \u6761\u5f62\u7801"}),"\n",(0,i.jsxs)(e.h2,{id:"31-\u5927\u81ea\u7136\u7684\u9988\u8d60-pdfcomponenth",children:["3.1 \u5927\u81ea\u7136\u7684\u9988\u8d60: ",(0,i.jsx)(e.code,{children:"PdfComponent.h"})]}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-C++",children:'class PdfComponent;\n// \u5b9a\u4e49\u4e00\u4e2a\u6a21\u677f\u6e32\u67d3\u51fd\u6570\nusing PdfTplRenderCf = void(*)(YAML::Node*, PdfComponent*, void* realData);\n\n/**\n * \u4e66\u5199\u4e00\u4e2aPDF\u7ec4\u4ef6\uff0c\u7528\u4e8e\u5c01\u88c5libharu\u5e93\u5e38\u7528\u64cd\u4f5c\n * \u6ce8\u610f\uff1alibharu\u5750\u6807\u7cfb\u662f\u539f\u70b9\u5728\u5de6\u4e0b\u89d2\u4e0d\u662f\u5de6\u4e0a\u89d2\n */\nclass PdfComponent final\n{\nprivate:\n    // \u6587\u6863\u53e5\u67c4\n    HPDF_Doc _doc;\n    // \u5f53\u524d\u9875\u9762\u53e5\u67c4\n    HPDF_Page _currPage;\n    // \u8bb0\u5f55\u6ce8\u518c\u7684\u6e32\u67d3\u6a21\u677f\n    static std::map<std::string, PdfTplRenderCf> tplRender;\npublic:\n    // \u6784\u9020\u521d\u59cb\u5316\n    PdfComponent();\n    // \u6790\u6784\u91ca\u653e\u8d44\u6e90\n    ~PdfComponent();\n    // \u83b7\u53d6\u6587\u6863\u53e5\u67c4\n    HPDF_Doc getDoc() const;\n    // \u83b7\u53d6\u5f53\u524d\u9875\u9762\u53e5\u67c4\n    HPDF_Page getCurrPage() const;\n    //************************************\n    // Method:    getBase14Font\n    // FullName:  PdfComponent::getBase14Font\n    // Access:    public \n    // Returns:   HPDF_Font\n    // Description: \u83b7\u53d6PDF\u5185\u7f6ePBase14\u5b57\u4f53\u53e5\u67c4\uff0c\u66f4\u591a\u53c2\u8003\uff1ahttps://github.com/libharu/libharu/wiki/Fonts\n    // Parameter: const std::string& name \u5b57\u4f53\u540d\u79f0\n    //************************************\n    HPDF_Font getBase14Font(const std::string& name);\n    //************************************\n    // Method:    getCnSFont\n    // FullName:  PdfComponent::getCnSFont\n    // Access:    public \n    // Returns:   HPDF_Font\n    // Description: \u83b7\u53d6Haru\u5185\u7f6e\u4e2d\u6587\u7b80\u4f53\u5b57\u4f53\u53e5\u67c4\n    // Parameter: const std::string& name \u5b57\u4f53\u540d\u79f0\uff0c\u76ee\u524d\u652f\u6301\uff1aSimSun, SimHei\n    // Parameter: bool isVertical \u662f\u5426\u7eb5\u5411\u663e\u793a\n    //************************************\n    HPDF_Font getCnSFont(const std::string& name, bool isVertical = false);\n    //************************************\n    // Method:    getCnTFont\n    // FullName:  PdfComponent::getCnTFont\n    // Access:    public \n    // Returns:   HPDF_Font\n    // Description: \u83b7\u53d6Haru\u5185\u7f6e\u4e2d\u6587\u7e41\u4f53\u5b57\u4f53\u53e5\u67c4\uff0c\u76ee\u524d\u53ea\u652f\u6301\u4e00\u79cd\uff1aMingLiU\n    // Parameter: bool isVertical \u662f\u5426\u7eb5\u5411\u663e\u793a\n    //************************************\n    HPDF_Font getCnTFont(bool isVertical = false);\n    //************************************\n    // Method:    getTtFont\n    // FullName:  PdfComponent::getTtFont\n    // Access:    public \n    // Returns:   HPDF_Font\n    // Description: \u83b7\u53d6TTF\u5b57\u4f53\n    // Parameter: const std::string& fontPath \u5b57\u4f53\u6587\u4ef6\u5168\u8def\u5f84\n    // Parameter: const std::string& encoding \u7f16\u7801\u540d\u79f0\uff0c\u9ed8\u8ba4\u4e3aCP1252\n    //************************************\n    HPDF_Font getTtFont(const std::string& fontPath, const std::string& encoding = "CP1252");\n    //************************************\n    // Method:    getNewPage\n    // FullName:  PdfComponent::getNewPage\n    // Access:    public \n    // Returns:   HPDF_Page\n    // Description: \u83b7\u53d6\u4e00\u4e2a\u65b0\u7684\u9875\u9762\n    // Parameter: HPDF_PageSizes pageSize \u9875\u9762\u5927\u5c0f\uff0c\u9ed8\u8ba4A4\n    // Parameter: HPDF_PageDirection direction \u9875\u9762\u65b9\u5411\uff0c\u9ed8\u8ba4\u7eb5\u5411\n    //************************************\n    HPDF_Page getNewPage(HPDF_PageSizes pageSize = HPDF_PageSizes::HPDF_PAGE_SIZE_A4, HPDF_PageDirection direction = HPDF_PageDirection::HPDF_PAGE_PORTRAIT);\n    //************************************\n    // Method:    drawText\n    // FullName:  PdfComponent::drawText\n    // Access:    public \n    // Returns:   void\n    // Description: \u7ed8\u5236\u6587\u5b57\n    // Parameter: const std::string& text \u6587\u5b57\u5185\u5bb9\n    // Parameter: HPDF_REAL posx x\u5750\u6807\n    // Parameter: HPDF_REAL posy y\u5750\u6807\n    // Parameter: HPDF_Page page \u9875\u9762\u53e5\u67c4\uff0c\u9ed8\u8ba4\u503c\u4e3a\u5f53\u524d\u9875\u9762\u53e5\u67c4\n    //************************************\n    void drawText(const std::string& text, HPDF_REAL posx, HPDF_REAL posy, HPDF_Page page = 0);\n    //************************************\n    // Method:    drawTextCenter\n    // FullName:  PdfComponent::drawTextCenter\n    // Access:    public \n    // Returns:   void\n    // Description: \u7ed8\u5236\u6587\u5b57\uff0c\u6587\u5b57\u5728\u9875\u9762\u4e2d\u5c45\u4e2d\u663e\u793a\n    // Parameter: const std::string& text \u6587\u5b57\u5185\u5bb9\n    // Parameter: HPDF_Page page \u9875\u9762\u53e5\u67c4\uff0c\u9ed8\u8ba4\u503c\u4e3a\u5f53\u524d\u9875\u9762\u53e5\u67c4\n    //************************************\n    void drawTextCenter(const std::string& text, HPDF_Page page = 0);\n    //************************************\n    // Method:    drawTextCenterH\n    // FullName:  PdfComponent::drawTextCenterH\n    // Access:    public \n    // Returns:   void\n    // Description: \u7ed8\u5236\u6587\u5b57\uff0c\u8ba9\u6587\u5b57\u6c34\u5e73\u5c45\u4e2d\u663e\u793a\n    // Parameter: const std::string& text \u6587\u5b57\u5185\u5bb9\n    // Parameter: HPDF_REAL posy y\u5750\u6807\n    // Parameter: HPDF_Page page \u9875\u9762\u53e5\u67c4\uff0c\u9ed8\u8ba4\u503c\u4e3a\u5f53\u524d\u9875\u9762\u53e5\u67c4\n    //************************************\n    void drawTextCenterH(const std::string& text, HPDF_REAL posy, HPDF_Page page = 0);\n    //************************************\n    // Method:    drawTextCenterV\n    // FullName:  PdfComponent::drawTextCenterV\n    // Access:    public \n    // Returns:   void\n    // Description: \u7ed8\u5236\u6587\u5b57\uff0c\u8ba9\u6587\u5b57\u5782\u76f4\u5c45\u4e2d\u663e\u793a\n    // Parameter: const std::string& text \u6587\u5b57\u5185\u5bb9\n    // Parameter: HPDF_REAL posx x\u5750\u6807\n    // Parameter: HPDF_Page page \u9875\u9762\u53e5\u67c4\uff0c\u9ed8\u8ba4\u503c\u4e3a\u5f53\u524d\u9875\u9762\u53e5\u67c4\n    //************************************\n    void drawTextCenterV(const std::string& text, HPDF_REAL posx, HPDF_Page page = 0);\n    //************************************\n    // Method:    registerTplRender\n    // FullName:  PdfComponent::registerTplRender\n    // Access:    public static \n    // Returns:   void\n    // Description: \u6ce8\u518c\u6e32\u67d3\u6a21\u677f\n    // Parameter: const std::string& tplName \u6a21\u677f\u540d\u79f0\n    // Parameter: PdfTplRenderCf cf \u6e32\u67d3\u56de\u8c03\u51fd\u6570\n    //************************************\n    static void registerTplRender(const std::string& tplName, PdfTplRenderCf cf);\n    //************************************\n    // Method:    drawWithTemplate\n    // FullName:  PdfComponent::drawWithTemplate\n    // Access:    public \n    // Returns:   void\n    // Description: \u901a\u8fc7\u6a21\u677f\u7ed8\u5236\n    // Parameter: const std::string& tplPath \u6a21\u677f\u914d\u7f6e\u6587\u4ef6\n    // Parameter: const std::string& tplName \u6a21\u677f\u540d\u79f0\n    // Parameter: void* realData \u5b9e\u65f6\u8fd0\u884c\u6570\u636e\uff0c\u7528\u4e8e\u4f20\u9012\u52a8\u6001\u6570\u636e\n    //************************************\n    void drawWithTemplate(const std::string& tplPath, const std::string& tplName, void* realData);\n    //************************************\n    // Method:    saveDocToFile\n    // FullName:  PdfComponent::saveDocToFile\n    // Access:    public \n    // Returns:   bool \u4fdd\u5b58\u6210\u529f\u8fd4\u56detrue\n    // Description: \u4fdd\u5b58\u6587\u6863\u5230\u6587\u4ef6\n    // Parameter: const std::string& fullPath \u6587\u4ef6\u5168\u8def\u5f84\n    //************************************\n    bool saveDocToFile(const std::string& fullPath);\n};\n'})}),"\n",(0,i.jsx)(e.h2,{id:"32-\u793a\u4f8b",children:"3.2 \u793a\u4f8b"}),"\n",(0,i.jsx)(e.h3,{id:"321-\u6e32\u67d3\u6587\u5b57\u754c\u9762",children:"3.2.1 \u6e32\u67d3\u6587\u5b57\u754c\u9762"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-C++",children:'TEST(PdfTest, TestText) {\n    PdfComponent pdf;\n    // \u521b\u5efa\u4e00\u4e2a\u9875\u9762\n    HPDF_Page newPage = pdf.getNewPage();\n    // \u8bbe\u7f6e\u9875\u9762\u5b57\u4f53\n    HPDF_Page_SetFontAndSize(newPage, pdf.getCnSFont("SimSun"), 20);\n    // \u7ed8\u5236\u5b57\u4f53\n    pdf.drawTextCenterH(ZH_WORDS_GETTER("pdf.title"), HPDF_Page_GetHeight(newPage) - 20);\n    pdf.drawTextCenter(ZH_WORDS_GETTER("pdf.content"));\n    pdf.drawTextCenterH(ZH_WORDS_GETTER("pdf.foot"), 20);\n    // \u4fdd\u5b58\u5230\u6587\u4ef6\n    ASSERT_EQ(pdf.saveDocToFile("test-text.pdf"), true);\n}\n'})}),"\n",(0,i.jsx)(e.h3,{id:"322-\u6e32\u67d3\u6761\u5f62\u7801\u754c\u9762",children:"3.2.2 \u6e32\u67d3\u6761\u5f62\u7801\u754c\u9762"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-C++",children:'// \u5b9e\u73b0\u4e00\u4e2a\u4fdd\u5b58\u6761\u5f62\u7801\u7684\u51fd\u6570\n// \u6761\u5f62\u7801\u5728\u7ebf\u9884\u89c8 https://zxing-cpp.github.io/zxing-cpp/demo_writer.html\nvoid addBarCodeToPdf(PdfComponent* pdf) {\n    // \u8bbe\u7f6e\u6761\u7801\u7ed8\u5236\u76f8\u5173\u53c2\u6570\n    int width = 200, height = 20; // \u957f\u5bbd\n    int margin = 10; // \u95f4\u8ddd\n    int eccLevel = 0; // ecc\u7b49\u7ea70 -10\n    CharacterSet encoding = CharacterSet::UTF8; // \u7f16\u7801\n    BarcodeFormat format = BarcodeFormatFromString("Code93"); //\u683c\u5f0f\u5316\u7c7b\u578b\n    // \u5b9a\u4e49\u6761\u7801\u4e2d\u7684\u5185\u5bb9\n    std::string input = "11111111";\n    // \u6761\u7801\u4e34\u65f6\u4fdd\u5b58\u4f4d\u7f6e\n    std::string filepath = "tmp.jpg";\n    try {\n        // \u751f\u6210\u56fe\u5f62\n        auto writer = MultiFormatWriter(format).setMargin(margin).setEncoding(encoding).setEccLevel(eccLevel);\n        BitMatrix matrix = writer.encode(input, width, height);\n        auto bitmap = ToMatrix<uint8_t>(matrix);\n        // \u4fdd\u5b58\u5230\u6587\u4ef6\n        int success = stbi_write_jpg(filepath.c_str(), bitmap.width(), bitmap.height(), 1, bitmap.data(), 0);\n        // \u7ed8\u5236\u5230PDF\n        if (success) {\n            // \u52a0\u8f7d\u56fe\u7247\u6587\u4ef6\n            HPDF_Image image = HPDF_LoadJpegImageFromFile(pdf->getDoc(), filepath.c_str());\n            // \u7ed8\u5236\u56fe\u7247\u5230PDF\u4e2d\n            HPDF_UINT iw = HPDF_Image_GetWidth(image);\n            HPDF_UINT ih = HPDF_Image_GetHeight(image);\n            HPDF_Page_DrawImage(pdf->getCurrPage(), image, 30, 70, iw, ih);\n        }\n    } catch (const std::exception& e) {\n        std::cerr << e.what() << std::endl;\n    }\n}\n\nTEST(PdfTest, TestTpl) {\n    // \u6d4b\u8bd5\u6ce8\u518c\u6e32\u67d3\u6a21\u677f\n    PdfComponent::registerTplRender("test", [](YAML::Node* node, PdfComponent* pdf, void* realData) {\n        // \u521b\u5efa\u4e00\u4e2a\u9875\u9762\n        HPDF_Page newPage = pdf->getNewPage();\n        // \u8bbe\u7f6e\u9875\u9762\u5b57\u4f53\n        HPDF_Page_SetFontAndSize(newPage, pdf->getCnSFont("SimSun"), 20);\n        // \u7ed8\u5236\u9759\u6001\u6570\u636e\n        auto title = (*node)["t"].as<std::string>();\n        auto foot = (*node)["f"].as<std::string>();\n        pdf->drawTextCenterH(title, HPDF_Page_GetHeight(newPage) - 20);\n        pdf->drawTextCenterH(foot, 20);\n        // \u7ed8\u5236\u52a8\u6001\u6570\u636e\n        std::string content = static_cast<std::string*>(realData)->c_str();\n        pdf->drawTextCenter(content);\n        // \u7ed8\u5236\u4e00\u4e2a\u6761\u7801\n        addBarCodeToPdf(pdf);\n        // \u4fdd\u5b58\u5230\u6587\u4ef6\n        pdf->saveDocToFile("test-tpl.pdf");\n    });\n\n    // \u6d4b\u8bd5\u7ed8\u5236\n    PdfComponent pdf;\n    auto content = ZH_WORDS_GETTER("pdf.content");\n    pdf.drawWithTemplate("tpl/test.yaml", "test", &content);\n}\n'})}),"\n",(0,i.jsx)(e.p,{children:"\u672c\u8d28\u4e0a\u662f\u4fdd\u5b58\u4e00\u4e2a\u6761\u5f62\u7801\u56fe\u7247, \u518d\u628a\u8fd9\u4e2a\u56fe\u7247\u8bfb\u53d6\u5e76\u5199\u5230pdf\u4e2d, \u6545\u540c\u7406\u4f60\u4e5f\u53ef\u4ee5\u7ed8\u5236\u56fe\u7247\u4e86"}),"\n",(0,i.jsx)(e.p,{children:"\u5269\u4e0b\u7684\u5c31\u662fAPI\u7ed8\u5236\u90a3\u4e9b\u4e86, \u6ca1\u6709\u4ec0\u4e48\u597d\u6559\u7684\u4e86.."})]})}function m(n={}){const{wrapper:e}={...(0,d.R)(),...n.components};return e?(0,i.jsx)(e,{...n,children:(0,i.jsx)(c,{...n})}):c(n)}}}]);