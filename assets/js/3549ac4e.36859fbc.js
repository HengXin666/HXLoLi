"use strict";(self.webpackChunkhx_loli=self.webpackChunkhx_loli||[]).push([[39687],{22609:(n,e,i)=>{i.r(e),i.d(e,{assets:()=>c,contentTitle:()=>l,default:()=>g,frontMatter:()=>s,metadata:()=>t,toc:()=>o});const t=JSON.parse('{"id":"\u7a0b\u5e8f\u8bed\u8a00/C++/C++\u7b2c\u4e09\u65b9\u5e93/TagLib/TagLib\u5143\u6570\u636e\u89e3\u6790/index","title":"TagLib","description":"[!TIP]","source":"@site/docs/002-\u7a0b\u5e8f\u8bed\u8a00/001-C++/005-C++\u7b2c\u4e09\u65b9\u5e93/005-TagLib/001-TagLib\u5143\u6570\u636e\u89e3\u6790/index.md","sourceDirName":"002-\u7a0b\u5e8f\u8bed\u8a00/001-C++/005-C++\u7b2c\u4e09\u65b9\u5e93/005-TagLib/001-TagLib\u5143\u6570\u636e\u89e3\u6790","slug":"/\u7a0b\u5e8f\u8bed\u8a00/C++/C++\u7b2c\u4e09\u65b9\u5e93/TagLib/TagLib\u5143\u6570\u636e\u89e3\u6790/","permalink":"/HXLoLi/docs/\u7a0b\u5e8f\u8bed\u8a00/C++/C++\u7b2c\u4e09\u65b9\u5e93/TagLib/TagLib\u5143\u6570\u636e\u89e3\u6790/","draft":false,"unlisted":false,"editUrl":"https://github.com/HengXin666/HXLoLi/edit/main/docs/002-\u7a0b\u5e8f\u8bed\u8a00/001-C++/005-C++\u7b2c\u4e09\u65b9\u5e93/005-TagLib/001-TagLib\u5143\u6570\u636e\u89e3\u6790/index.md","tags":[],"version":"current","lastUpdatedBy":"Heng_Xin_666","lastUpdatedAt":1745851959000,"frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"\u521d\u59cb&\u7f16\u8bd1","permalink":"/HXLoLi/docs/\u7a0b\u5e8f\u8bed\u8a00/C++/C++\u7b2c\u4e09\u65b9\u5e93/\u4e36Zip\u3010pzip\u3001LZMA\u4e36SDK\u3011/\u521d\u59cb&\u7f16\u8bd1/"},"next":{"title":"\u5165\u95e8\u5e38\u7528api","permalink":"/HXLoLi/docs/\u7a0b\u5e8f\u8bed\u8a00/C++/C++\u7b2c\u4e09\u65b9\u5e93/MuPdf/\u5165\u95e8\u5e38\u7528api/"}}');var a=i(74848),r=i(28453);const s={},l="TagLib",c={},o=[];function p(n){const e={a:"a",code:"code",div:"div",h1:"h1",header:"header",hr:"hr",p:"p",pre:"pre",span:"span",...(0,r.R)(),...n.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(e.header,{children:(0,a.jsx)(e.h1,{id:"taglib",children:"TagLib"})}),"\n",(0,a.jsxs)(e.div,{className:"markdown-alert markdown-alert-tip",children:["\n",(0,a.jsxs)(e.p,{className:"markdown-alert-title",children:[(0,a.jsx)(e.span,{className:"octicon octicon-tip",style:{"--oct-icon":"url(\"data:image/svg+xml;utf8,%3Csvg xmlns='http://www.w3.org/2000/svg' class='octicon octicon-light-bulb mr-2' viewBox='0 0 16 16' version='1.1' width='16' height='16' aria-hidden='true'%3E%3Cpath d='M8 1.5c-2.363 0-4 1.69-4 3.75 0 .984.424 1.625.984 2.304l.214.253c.223.264.47.556.673.848.284.411.537.896.621 1.49a.75.75 0 0 1-1.484.211c-.04-.282-.163-.547-.37-.847a8.456 8.456 0 0 0-.542-.68c-.084-.1-.173-.205-.268-.32C3.201 7.75 2.5 6.766 2.5 5.25 2.5 2.31 4.863 0 8 0s5.5 2.31 5.5 5.25c0 1.516-.701 2.5-1.328 3.259-.095.115-.184.22-.268.319-.207.245-.383.453-.541.681-.208.3-.33.565-.37.847a.751.751 0 0 1-1.485-.212c.084-.593.337-1.078.621-1.489.203-.292.45-.584.673-.848.075-.088.147-.173.213-.253.561-.679.985-1.32.985-2.304 0-2.06-1.637-3.75-4-3.75ZM5.75 12h4.5a.75.75 0 0 1 0 1.5h-4.5a.75.75 0 0 1 0-1.5ZM6 15.25a.75.75 0 0 1 .75-.75h2.5a.75.75 0 0 1 0 1.5h-2.5a.75.75 0 0 1-.75-.75Z'%3E%3C/path%3E%3C/svg%3E\")"}}),"Tip"]}),"\n",(0,a.jsx)(e.p,{children:"\u5927\u591a\u6570 Linux \u53d1\u884c\u7248\u90fd\u9884\u88c5\u4e86 TagLib"}),"\n"]}),"\n",(0,a.jsx)(e.p,{children:(0,a.jsx)(e.a,{href:"https://github.com/taglib/taglib",children:"[Github] taglib"})}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-sh",children:"sudo pacman -S taglib\n"})}),"\n",(0,a.jsx)(e.hr,{}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-C++",children:'#include <taglib/fileref.h>\n#include <taglib/tag.h>\n#include <taglib/audioproperties.h>\n\n#include <taglib/mpegfile.h>\n\n#include <taglib/id3v2tag.h>\n#include <taglib/attachedpictureframe.h>\n\n#include <taglib/flacfile.h>\n#include <taglib/flacpicture.h>\n\n#include <taglib/mp4file.h>\n#include <taglib/mp4tag.h>\n#include <taglib/mp4item.h>\n#include <taglib/mp4coverart.h>\n\n#include <taglib/asffile.h>\n#include <taglib/asftag.h>\n\n#include <QFileInfo>\n#include <QPixmap>\n\n#include <utils/FileInfo.hpp>\n\nnamespace HX {\n\nnamespace internal {\n\n/**\n * @brief \u652f\u6301\u7684\u6587\u4ef6\u7c7b\u578b\n */\ninline static const QSet<QString> extensionSet {\n    "mp3",\n    "wav",\n    "flac",\n    "ogg",\n    "mpc",\n    "spx",\n    "wv",\n    "tta",\n    "aiff",\n    "aif",\n    "mp4",\n    "ape",\n    "asf",\n    "dsf",\n    "dff",\n    "acc",\n};\n\n} // namespace internal\n\nclass MusicInfo {\npublic:\n    explicit MusicInfo(QFileInfo const& fileInfo)\n        : _fileInfo(fileInfo)\n        , _byteArr(QFile::encodeName(_fileInfo.canonicalFilePath()))\n        , mpegFile(_byteArr.constData())\n    {}\n\n    /**\n     * @brief \u662f\u5426\u4e0d\u652f\u6301\u8be5\u683c\u5f0f\n     * @param fileInfo \n     * @return true \u662f\u4e0d\u652f\u6301\n     * @return false \u4e0d\u662f\u4e0d\u652f\u6301\n     */\n    inline static bool isNotSupport(QFileInfo const& fileInfo) {\n        return internal::extensionSet.find(fileInfo.suffix().toLower()) \n            == internal::extensionSet.end();\n    }\n\n    /**\n     * @brief \u83b7\u53d6\u97f3\u9891\u6807\u9898\n     * @return QString `\u83b7\u53d6\u5931\u8d25`\u5219\u8fd4\u56de\u6587\u4ef6\u540d\n     */\n    QString getTitle() const {\n        if (mpegFile.isNull() || !mpegFile.tag()) {\n            return _fileInfo.fileName();\n        }\n        auto res = QString::fromStdString(mpegFile.tag()->title().to8Bit(true));\n        return res.isEmpty() \n            ? _fileInfo.fileName() \n            : res;\n    }\n\n    /**\n     * @brief \u83b7\u53d6\u97f3\u9891\u6b4c\u624b\u4fe1\u606f\n     * @param errRes \u83b7\u53d6\u5931\u8d25\u8fd4\u56de\u7684\u503c\n     * @return QString \n     */\n    QString getArtist(QString&& errRes = "") const {\n        if (mpegFile.isNull() || !mpegFile.tag()) {\n            return errRes;\n        }\n        return QString::fromStdString(mpegFile.tag()->artist().to8Bit(true));\n    }\n\n    /**\n     * @brief \u83b7\u53d6\u97f3\u9891\u4e13\u8f91\u4fe1\u606f\n     * @param errRes \u83b7\u53d6\u5931\u8d25\u8fd4\u56de\u7684\u503c\n     * @return QString \n     */\n    QString getAlbum(QString&& errRes = "") const {\n        if (mpegFile.isNull() || !mpegFile.tag()) {\n            return errRes;\n        }\n        return QString::fromStdString(mpegFile.tag()->album().to8Bit(true));\n    }\n\n    /**\n     * @brief \u683c\u5f0f\u5316\u97f3\u9891\u65f6\u957f\u4e3a`HH:MM:SS`\u683c\u5f0f, \u5982`3:14`(\u4e0d\u542b\u524d\u5bfc0)\n     * @param errRes \u83b7\u53d6\u5931\u8d25\u8fd4\u56de\u7684\u503c\n     * @return QString \n     */\n    QString formatTimeLengthToHHMMSS(QString&& errRes = "") const {\n        if (mpegFile.isNull() || !mpegFile.audioProperties()) {\n            return errRes;\n        }\n        TagLib::AudioProperties* properties = mpegFile.audioProperties();\n        int time = properties->lengthInSeconds();\n        int hTime = time / 3600;\n        return QString{"%1%2:%3"}\n            .arg(hTime \n                    ? QString{"%1:"}.arg(hTime) \n                    : "")\n            .arg(time / 60 % 60)\n            .arg(time % 60);\n    }\n\n    // \u9ad8\u6027\u80fd\u83b7\u53d6\u4e13\u8f91\u56fe\u7247\u51fd\u6570\uff0c\u652f\u6301 MP3\u3001FLAC\u3001MP4/M4A \u683c\u5f0f\n    QPixmap getAlbumArtAdvanced() {\n        QPixmap pixmap;\n        QString ext = _fileInfo.suffix().toLower();\n\n        // 1. MP3\uff08\u53ca\u90e8\u5206 AAC \u5c01\u88c5\u5728 MP3 \u5bb9\u5668\u4e2d\uff09\u5904\u7406: \u4f7f\u7528 ID3v2\n        // \u5904\u7406 MP3 \u6587\u4ef6\u7684\u4e13\u8f91\u56fe\u7247\n        if (ext == "mp3" || ext == "aac") {\n            TagLib::MPEG::File mpegFile{_byteArr.constData()};\n            TagLib::ID3v2::Tag *id3v2Tag = mpegFile.ID3v2Tag(true);\n            if (id3v2Tag) {\n                // \u5148\u67e5\u627eAPIC\u5e27\n                TagLib::ID3v2::FrameList frames = id3v2Tag->frameList("APIC");\n                // \u5982\u679cAPIC\u5e27\u4e3a\u7a7a\uff0c\u518d\u5c1d\u8bd5PIC\u5e27\uff08ID3v2.2\u7684\u60c5\u51b5\uff09\n                if (frames.isEmpty())\n                    frames = id3v2Tag->frameList("PIC");\n                if (!frames.isEmpty()) {\n                    // \u53d6\u7b2c\u4e00\u4e2a\u5e27\u7684\u6570\u636e\n                    TagLib::ID3v2::AttachedPictureFrame *picFrame =\n                        dynamic_cast<TagLib::ID3v2::AttachedPictureFrame*>(frames.front());\n                    if (picFrame) {\n                        const TagLib::ByteVector& pictureData = picFrame->picture();\n                        QByteArray ba(pictureData.data(), static_cast<int>(pictureData.size()));\n                        QPixmap pixmap;\n                        pixmap.loadFromData(ba);\n                        return pixmap;\n                    }\n                }\n            }\n        }\n        // 2. FLAC\u5904\u7406\n        else if (ext == "flac") {\n            TagLib::FLAC::File flacFile(_byteArr.constData());\n            if (flacFile.isValid() && !flacFile.pictureList().isEmpty()) {\n                const TagLib::FLAC::Picture *pic = flacFile.pictureList().front();\n                if (pic) {\n                    const TagLib::ByteVector& bv = pic->data();\n                    QByteArray ba(bv.data(), static_cast<int>(bv.size()));\n                    pixmap.loadFromData(ba);\n                    return pixmap;\n                }\n            }\n        }\n        // 3. MP4/M4A\u5904\u7406\n        else if (ext == "mp4" || ext == "m4a") {\n            TagLib::MP4::File mp4File(_byteArr.constData());\n            if (mp4File.isValid() && mp4File.tag()) {\n                TagLib::MP4::Tag *mp4Tag = mp4File.tag();\n                TagLib::MP4::ItemMap items = mp4Tag->itemMap();\n                if (items.contains("covr")) {\n                    TagLib::MP4::CoverArtList coverList = items["covr"].toCoverArtList();\n                    if (!coverList.isEmpty()) {\n                        TagLib::MP4::CoverArt cover = coverList.front();\n                        const TagLib::ByteVector& bv = cover.data();\n                        QByteArray ba(bv.data(), static_cast<int>(bv.size()));\n                        pixmap.loadFromData(ba);\n                        return pixmap;\n                    }\n                }\n            }\n        }\n        // \u5176\u4ed6\u683c\u5f0f\u6682\u672a\u5b9e\u73b0\u6216\u6ca1\u6709\u5d4c\u5165\u4e13\u8f91\u56fe\u7247\uff0c\u8fd4\u56de\u7a7aQPixmap\n        return pixmap;\n    }\n\nprivate:\n    QFileInfo const& _fileInfo;\n    QByteArray _byteArr;\n    TagLib::FileRef mpegFile;\n};\n\n} // namespace HX\n'})})]})}function g(n={}){const{wrapper:e}={...(0,r.R)(),...n.components};return e?(0,a.jsx)(e,{...n,children:(0,a.jsx)(p,{...n})}):p(n)}},28453:(n,e,i)=>{i.d(e,{R:()=>s,x:()=>l});var t=i(96540);const a={},r=t.createContext(a);function s(n){const e=t.useContext(r);return t.useMemo((function(){return"function"==typeof n?n(e):{...e,...n}}),[e,n])}function l(n){let e;return e=n.disableParentContext?"function"==typeof n.components?n.components(a):n.components||a:s(n.components),t.createElement(r.Provider,{value:e},n.children)}}}]);