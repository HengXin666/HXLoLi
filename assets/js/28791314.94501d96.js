"use strict";(self.webpackChunkhx_loli=self.webpackChunkhx_loli||[]).push([[42054],{24310:(n,e,r)=>{r.r(e),r.d(e,{assets:()=>a,contentTitle:()=>l,default:()=>p,frontMatter:()=>i,metadata:()=>t,toc:()=>R});const t=JSON.parse('{"id":"\u8ba1\u4f6c\u5e38\u8b58/\u6570\u636e\u7ed3\u6784\u4e0e\u7b97\u6cd5/\u3010\u6570\u636e\u7ed3\u6784\u3011\u9ad8\u9636\u641c\u7d22\u6811/\u7ea2\u9ed1\u6811/\u7ea2\u9ed1\u6811\u4ee3\u7801\u5b9e\u73b0/index","title":"\u624b\u6495\u7ea2\u9ed1\u6811","description":"\u6570\u636e\u7ed3\u6784","source":"@site/docs/001-\u8ba1\u4f6c\u5e38\u8b58/001-\u6570\u636e\u7ed3\u6784\u4e0e\u7b97\u6cd5/008-\u3010\u6570\u636e\u7ed3\u6784\u3011\u9ad8\u9636\u641c\u7d22\u6811/002-\u7ea2\u9ed1\u6811/002-\u7ea2\u9ed1\u6811\u4ee3\u7801\u5b9e\u73b0/index.md","sourceDirName":"001-\u8ba1\u4f6c\u5e38\u8b58/001-\u6570\u636e\u7ed3\u6784\u4e0e\u7b97\u6cd5/008-\u3010\u6570\u636e\u7ed3\u6784\u3011\u9ad8\u9636\u641c\u7d22\u6811/002-\u7ea2\u9ed1\u6811/002-\u7ea2\u9ed1\u6811\u4ee3\u7801\u5b9e\u73b0","slug":"/\u8ba1\u4f6c\u5e38\u8b58/\u6570\u636e\u7ed3\u6784\u4e0e\u7b97\u6cd5/\u3010\u6570\u636e\u7ed3\u6784\u3011\u9ad8\u9636\u641c\u7d22\u6811/\u7ea2\u9ed1\u6811/\u7ea2\u9ed1\u6811\u4ee3\u7801\u5b9e\u73b0/","permalink":"/HXLoLi/docs/\u8ba1\u4f6c\u5e38\u8b58/\u6570\u636e\u7ed3\u6784\u4e0e\u7b97\u6cd5/\u3010\u6570\u636e\u7ed3\u6784\u3011\u9ad8\u9636\u641c\u7d22\u6811/\u7ea2\u9ed1\u6811/\u7ea2\u9ed1\u6811\u4ee3\u7801\u5b9e\u73b0/","draft":false,"unlisted":false,"editUrl":"https://github.com/HengXin666/HXLoLi/edit/main/docs/001-\u8ba1\u4f6c\u5e38\u8b58/001-\u6570\u636e\u7ed3\u6784\u4e0e\u7b97\u6cd5/008-\u3010\u6570\u636e\u7ed3\u6784\u3011\u9ad8\u9636\u641c\u7d22\u6811/002-\u7ea2\u9ed1\u6811/002-\u7ea2\u9ed1\u6811\u4ee3\u7801\u5b9e\u73b0/index.md","tags":[],"version":"current","lastUpdatedBy":"Heng_Xin_666","lastUpdatedAt":1745851959000,"frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"\u7ea2\u9ed1\u6811\u4e36","permalink":"/HXLoLi/docs/\u8ba1\u4f6c\u5e38\u8b58/\u6570\u636e\u7ed3\u6784\u4e0e\u7b97\u6cd5/\u3010\u6570\u636e\u7ed3\u6784\u3011\u9ad8\u9636\u641c\u7d22\u6811/\u7ea2\u9ed1\u6811/\u7ea2\u9ed1\u6811\u4e36/"},"next":{"title":"B\u6811\u4e36","permalink":"/HXLoLi/docs/\u8ba1\u4f6c\u5e38\u8b58/\u6570\u636e\u7ed3\u6784\u4e0e\u7b97\u6cd5/\u3010\u6570\u636e\u7ed3\u6784\u3011\u9ad8\u9636\u641c\u7d22\u6811/B\u6811/B\u6811\u4e36/"}}');var o=r(74848),d=r(28453);const i={},l="\u624b\u6495\u7ea2\u9ed1\u6811",a={},R=[{value:"\u6570\u636e\u7ed3\u6784",id:"\u6570\u636e\u7ed3\u6784",level:2},{value:"\u6d89\u53ca\u7684\u65b9\u6cd5",id:"\u6d89\u53ca\u7684\u65b9\u6cd5",level:2},{value:"\u5b8c\u6574\u4ee3\u7801",id:"\u5b8c\u6574\u4ee3\u7801",level:2}];function c(n){const e={code:"code",h1:"h1",h2:"h2",header:"header",p:"p",pre:"pre",sup:"sup",...(0,d.R)(),...n.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(e.header,{children:(0,o.jsx)(e.h1,{id:"\u624b\u6495\u7ea2\u9ed1\u6811",children:"\u624b\u6495\u7ea2\u9ed1\u6811"})}),"\n",(0,o.jsx)(e.h2,{id:"\u6570\u636e\u7ed3\u6784",children:"\u6570\u636e\u7ed3\u6784"}),"\n",(0,o.jsx)(e.p,{children:"\u9996\u5148\u6211\u4eec\u9700\u8981\u8bbe\u8ba1\u4e00\u4e9b\u6570\u636e\u7ed3\u6784"}),"\n",(0,o.jsx)(e.p,{children:"\u56e0\u4e3a\u662f\u4e8c\u53c9\u6811\u7684\u4e00\u79cd, \u90a3\u80af\u5b9a\u662f\u8981\u6709\u5de6\u53f3\u5b50\u6811\u7684."}),"\n",(0,o.jsxs)(e.p,{children:["\u53c8\u56e0\u4e3a\u7ea2\u9ed1\u6811\u6d89\u53ca\u65cb\u8f6c, \u67d3\u8272\u64cd\u4f5c, \u7ecf\u5e38\u9700\u8981\u5207\u6362\u5230\u7236\u8282\u70b9/\u53d4\u8282\u70b9/\u7956\u5148\u7ed3\u70b9\u7b49, \u5982\u679c\u662f\u4f7f\u7528\u9012\u5f52\u56de\u6eaf\u7684\u8bdd, \u53ef\u80fd\u4f1a\u4f7f\u5f97\u5e73\u8861\u64cd\u4f5c\u53d8\u5f97\u66f4\u52a0\u590d\u6742\u548c\u4f4e\u6548",(0,o.jsx)(e.sup,{children:"[By GPT-3.5]"}),", \u56e0\u6b64\u8fd8\u9700\u8981\u8bbe\u8ba1\u7236\u8282\u70b9."]}),"\n",(0,o.jsxs)(e.p,{children:["\u90a3\u4e48",(0,o.jsx)(e.code,{children:"struct"}),"\u7684\u96cf\u5f62\u5df2\u7ecf\u51fa\u73b0\u4e86, \u7136\u540e\u5c31\u662f\u663e\u7136:"]}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-C",children:"typedef int keyType;\ntypedef int RBcolor;\n\nenum RBcolor {\n    RED,\n    BLACK\n};\n\ntypedef struct _rbNode {\n    keyType key;            // \u5173\u952e\u5b57\n    struct _rbNode *left;   // \u5de6\u5b50\u6811\n    struct _rbNode *right;  // \u53f3\u5b50\u6811\n    struct _rbNode *parent; // \u7236\u7ed3\u70b9\n    RBcolor color;          // \u989c\u8272\n} RBNode;                   // \u7ea2\u9ed1\u6811\u4e00\u4e2a\u8282\u70b9\n\ntypedef struct {\n    RBNode *root;           // \u6839\n    int count;              // \u8282\u70b9\u6570\n} RBTree;                   // \u7ea2\u9ed1\u6811\u8868\u5934\n"})}),"\n",(0,o.jsx)(e.h2,{id:"\u6d89\u53ca\u7684\u65b9\u6cd5",children:"\u6d89\u53ca\u7684\u65b9\u6cd5"}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-C",children:"RBTree *initRBTree(void);                               // \u521d\u59cb\u5316\u7ea2\u9ed1\u6811\nvoid insertRBNode(RBTree *tree, keyType key);           // \u7ea2\u9ed1\u6811\u63d2\u5165\u8282\u70b9\nvoid deleteRBTree(RBTree *tree, keyType key);           // \u5220\u9664\u7ea2\u9ed1\u6811\u8282\u70b9\nvoid freeRBTree(RBTree *T);                             // \u91ca\u653e\u7ea2\u9ed1\u6811\n\n// \u62d3\u5c55\nvoid putRBTree(const RBTree *Tree);                     // \u6253\u5370\u7ea2\u9ed1\u6811\n\n// \u5973\u751f\u81ea\u7528\u4e5d\u4e5d\u65b0\u51fd\u6570 (static)\nvoid RBTreeLeftRotate(RBTree* tree, RBNode* y);         // \u7ea2\u9ed1\u6811\u5de6\u65cb\nvoid RBTreeRightRotate(RBTree* tree, RBNode* y);        // \u7ea2\u9ed1\u6811\u53f3\u65cb\n"})}),"\n",(0,o.jsx)(e.h2,{id:"\u5b8c\u6574\u4ee3\u7801",children:"\u5b8c\u6574\u4ee3\u7801"}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-C",children:'#include <stdio.h>\n#include <stdlib.h>\n#include <time.h>\n#include <string.h>\n\ntypedef int keyType;\n\ntypedef int RBcolor;\n\nenum RBcolor {RED, BLACK};\n\ntypedef struct _rbNode\n{\n    keyType key;            // \u5173\u952e\u5b57\n    struct _rbNode *left;   // \u5de6\u5b50\u6811\n    struct _rbNode *right;  // \u53f3\u5b50\u6811\n    struct _rbNode *parent; // \u7236\u7ed3\u70b9\n    RBcolor color;          // \u989c\u8272\n} RBNode;                   // \u7ea2\u9ed1\u6811\u4e00\u4e2a\u8282\u70b9\n\ntypedef struct\n{\n    RBNode *root;           // \u6839\n    int count;              // \u8282\u70b9\u6570\n} RBTree;                   // \u7ea2\u9ed1\u6811\u8868\u5934\n\nRBTree *initRBTree(void);                               // \u521d\u59cb\u5316\u7ea2\u9ed1\u6811\nvoid insertRBNode(RBTree *tree, keyType key);           // \u7ea2\u9ed1\u6811\u63d2\u5165\u8282\u70b9\nvoid deleteRBTree(RBTree *tree, keyType key);           // \u5220\u9664\u7ea2\u9ed1\u6811\u8282\u70b9\nvoid RBTreeLeftRotate(RBTree* tree, RBNode* y);         // \u7ea2\u9ed1\u6811\u5de6\u65cb\nvoid RBTreeRightRotate(RBTree* tree, RBNode* y);        // \u7ea2\u9ed1\u6811\u53f3\u65cb\nvoid putRBTree(const RBTree *Tree);                     // \u6253\u5370\u7ea2\u9ed1\u6811\nvoid freeRBTree(RBTree *T);                             // \u91ca\u653e\u7ea2\u9ed1\u6811\n\nstatic void *errorPrint(const char *str);               // \u8f93\u51fa\u9519\u8bef\u7684\u5973\u751f\u81ea\u7528\u51fd\u6570\n\nstatic void *errorPrint(const char *str)\n{\n    printf(str);\n    return NULL;\n}\n\nRBTree *initRBTree(void)\n{\n    RBTree *T = (RBTree *)malloc(sizeof(RBTree));\n    if (!T)\n        return errorPrint("Malloc RBTree Error!\\n");\n\n    T->count = 0;\n    T->root = NULL;\n\n    return T;\n}\n\n// \u521d\u59cb\u5316\u7ed3\u70b9 \u5e76\u4e14\u7740\u8272\u4e3a\u7ea2\nstatic RBNode *_initRBNode(keyType key)\n{\n    RBNode *node = (RBNode *)malloc(sizeof(RBNode));\n    if (!node)\n        return errorPrint("Malloc RBNode Error!\\n");\n    \n    node->key = key;\n    node->color = RED;  // \u63d2\u5165\u90fd\u662f\u7ea2\u8272\u7684\n    node->left = NULL;\n    node->right = NULL;\n    node->parent = NULL;\n\n    return node;\n}\n\n// \u8c03\u6574\u7ea2\u9ed1\u6811\n/**\n * 1. \u5224\u65ad\u662f\u5426\u51fa\u73b0[\u7ea2\u7ea2]\n *      1.1 \u5426 --\x3e \u7ed3\u675f\n *      1.2 \u662f --\x3e 2.\n * \n * 2. \u5224\u65ad\u63d2\u5165\u8282\u70b9\u7684\u53d4\u53d4\u8282\u70b9\u7684\u7740\u8272\n *      2.1 \u7740\u8272\u4e3a\u7ea2\n *          \u4fee\u6539\u7740\u8272\u5373\u53ef: <\u7236, \u53d4>\u8282\u70b9\u7740\u8272\u4e3a\u9ed1, <\u7956\u5148>\u8282\u70b9\u7740\u8272\u4e3a\u7ea2\n *      2.2 \u7740\u8272\u4e3a\u9ed1\n *          >> \u5224\u65ad\u5931\u8861\u7c7b\u578b << \n *          LL: \u5bf9\u7956\u5148\u8282\u70b9\u53f3\u65cb\n *          LR: \u5bf9\u7236\u4eb2\u7ed3\u70b9\u5de6\u65cb, \u7136\u540e\u662fxp\u4ea4\u6362, \u5c31\u662fLL\n *          RR: \u5bf9\u7956\u5148\u7ed3\u70b9\u5de6\u65cb\n *          RL: \u5bf9\u7236\u4eb2\u7ed3\u70b9\u53f3\u65cb, \u7136\u540e\u662fxp\u4ea4\u6362, \u5c31\u662fRR\n */\nstatic void _adjustRBTree(RBTree* tree, RBNode *node)\n{\n    RBNode *parent = node->parent;\n    RBNode *uncle;\n    RBNode *grandfather;\n    RBNode *tmp = NULL;\n\n    // \u7ea2\u7ea2\n    while (parent && parent->color == RED)\n    {\n        grandfather = parent->parent;\n        uncle = (grandfather->left == parent) ? grandfather->right : grandfather->left;\n        \n        // \u53d4\u53d4\u8282\u70b9\u4e3a\u7ea2 (\u6ce8\u610f\u8981\u8003\u8651\u53ef\u80fd\u53d4\u53d4\u662fNUL)\n        if (uncle && uncle->color == RED)\n        {\n            // \u66f4\u6539\u7740\u8272\n            parent->color = BLACK;\n            uncle->color = BLACK;\n            grandfather->color = RED;\n\n            // \u66f4\u65b0\u8282\u70b9\n            node = grandfather;\n            parent = grandfather->parent;\n            continue;\n        }\n\n        // \u53d4\u53d4\u8282\u70b9\u4e3a\u9ed1\n        // \u5224\u65ad\u5931\u8861\u7c7b\u578b\n        if (grandfather->left == parent)    // L\n        {\n            if (parent->right == node)      // R\n            {\n                RBTreeLeftRotate(tree, parent);\n                // xp\u4ea4\u6362\n                tmp = node;\n                node = parent;\n                parent = tmp;\n            }\n            RBTreeRightRotate(tree, grandfather);\n            // \u7740\u8272\n            grandfather->color = RED;\n            parent->color = BLACK;\n        }\n        else                                // R\n        {\n            if (parent->left == node)       // L\n            {\n                RBTreeRightRotate(tree, parent);\n                // xp\u4ea4\u6362\n                tmp = node;\n                node = parent;\n                parent = tmp;\n            }\n            RBTreeLeftRotate(tree, grandfather);\n            // \u7740\u8272\n            grandfather->color = RED;\n            parent->color = BLACK;\n        }\n        // node = grandfather;\n        break;  // \u65cb\u8f6c\u4e0d\u4f1awhile\u4e86! (\u4e0d\u7528\u9012\u5f52\u5224\u65ad)\n    }\n\n    if (node == tree->root)\n    {\n        node->color = BLACK;\n        node->parent = NULL;\n    }\n}\n\nvoid insertRBNode(RBTree *tree, keyType key)\n{\n    // 1. \u751f\u6210\u8282\u70b9\n    RBNode *node = _initRBNode(key);\n\n    // 2. \u63d2\u5165\u8282\u70b9 (\u540c\u4e8c\u53c9\u641c\u7d22\u6811)\n    RBNode *cur = tree->root;\n    RBNode *tmp = NULL;\n    while (cur)\n    {\n        tmp = cur;\n\n        // \u5de6\u5c0f\u53f3\u5927\n        if (key < cur->key)\n        {\n            cur = cur->left;\n        }\n        else if (key > cur->key)\n        {\n            cur = cur->right;\n        }\n        else\n        {\n            printf("ERROR: Var is onaji!\\n");\n            return;\n        }\n    }\n    // cur\u4e3a\u7a7a, \u8bf4\u660e\u5f53\u524d\u5c31\u662f\u9700\u8981\u63d2\u5165\u7684\u4f4d\u7f6e!\n\n    if (tmp)\n    {\n        if (key < tmp->key)\n        {\n            tmp->left = node;\n        }\n        else\n        {\n            tmp->right = node;\n        }\n        node->parent = tmp;\n    }\n    else\n    {\n        tree->root = node;\n        node->color = BLACK;\n        node->parent = NULL;\n    }\n\n    // 3. \u8c03\u6574\u8282\u70b9\n    _adjustRBTree(tree, node);\n\n    ++tree->count;\n}\n\nstatic RBNode *_searchRBNode(RBTree *tree, keyType key)\n{\n    RBNode *node = tree->root;\n    while (node)\n    {\n        if (key < node->key)\n        {\n            node = node->left;\n        }\n        else if (key > node->key)\n        {\n            node = node->right;\n        }\n        else\n        {\n            // \u627e\u5230\u4e86\n            return node;\n        }\n    }\n\n    printf("\u6ca1\u6709\u627e\u5230: %d\\n", key);\n    return NULL;\n}\n\nstatic void _fixupRBTree(RBTree *tree, RBNode *y, RBNode *x)\n{\n    while (1)\n    {\n        RBNode *parent = y->parent;\n        RBNode *w = NULL;\n        // \u5224\u65adL \u8fd8\u662f R\n        if (parent->right == y)  // L (\u5220\u9664\u4e86R\u4fa7)\n        {\n            w = parent->left;\n            if ((w->left && w->left->color == BLACK) && (w->right && w->right->color == RED)) // LR\n            {\n                RBTreeLeftRotate(tree, w);\n                // \u540cxp\u4ea4\u6362 (\u6307\u9488\u6307\u5411\u6539\u53d8, \u56e0\u4e3a\u65cb\u8f6c\u4e86, \u6240\u4ee5\u5b9e\u9645\u4e0a\u8f88\u5206\u5df2\u7ecf\u53d8\u4e86)\n                w = w->parent;\n                // \u67d3\u8272\n                w->color = BLACK;\n                w->left->color = RED;\n            }\n\n            if (w->left && w->left->color == RED)\n            {\n                // LL\n                w->left->color = w->color;\n                w->color = parent->color;\n                RBTreeRightRotate(tree, parent);\n                parent->color = BLACK;\n            }\n            else if (w->color == BLACK)\n            {\n                // x\u7684\u5144\u5f1f\u4e3a\u9ed1\u8282\u70b9\n                w->color = RED;\n                // \u5f80\u4e0a\u5224\u65ad, \u76f4\u5230\u53d1\u73b0\u4e00\u4e2a\u7236\u7ed3\u70b9\u4e3a\u7ea2, \u6216\u8005\u6839\u8282\u70b9\n                while (parent)\n                {\n                    if (parent->color == RED)\n                    {\n                        // \u7ec8\u6b62\u5faa\u73af\n                        parent->color = BLACK;\n                        parent->left->color = RED;\n                        break;\n                    }\n                    else\n                    {\n                        parent->left->color = RED;\n                    }\n                    parent = parent->parent;\n                }\n            }\n            else\n            {\n                // x\u7684\u5144\u5f1f\u4e3a\u7ea2\u8282\u70b9 (\u5728\u5de6\u8fb9)\n                // \u67d3\u8272\n                w->color = BLACK;\n                parent->color = RED;\n                // \u53f3\u65cb\u7236\u8282\u70b9\n                RBTreeRightRotate(tree, parent);\n                // \u53d8\u4e3a\u4e4b\u524d\u7684\u60c5\u51b5\n                continue;\n            }\n        }\n        else                    // R (\u5220\u9664\u4e86L\u4fa7)\n        {\n            w = parent->right;\n            if ((w->right && w->right->color == BLACK) && (w->left && w->left->color == RED)) // RL\n            {\n                RBTreeRightRotate(tree, w);\n                // \u540cxp\u4ea4\u6362 (\u6307\u9488\u6307\u5411\u6539\u53d8, \u56e0\u4e3a\u65cb\u8f6c\u4e86, \u6240\u4ee5\u5b9e\u9645\u4e0a\u8f88\u5206\u5df2\u7ecf\u53d8\u4e86)\n                w = w->parent;\n                // \u67d3\u8272\n                w->color = BLACK;\n                w->right->color = RED;\n            }\n\n            if (w->right && w->right->color == RED) // RR\n            {\n                // RR\n                w->right->color = w->color;\n                w->color = parent->color;\n                RBTreeLeftRotate(tree, parent);\n                parent->color = BLACK;\n            }\n            else if (w->color == BLACK)\n            {\n                // x\u7684\u5144\u5f1f\u4e3a\u9ed1\u8282\u70b9\n                w->color = RED;\n                while (parent)\n                {\n                    if (parent->color == RED)\n                    {\n                        // \u7ec8\u6b62\u5faa\u73af\n                        parent->color = BLACK;\n                        parent->right->color = RED;\n                        break;\n                    }\n                    else\n                    {\n                        parent->right->color = RED;\n                    }\n                    parent = parent->parent;\n                }\n            }\n            else\n            {\n                // x\u7684\u5144\u5f1f\u4e3a\u7ea2\u8282\u70b9 (\u5728\u53f3\u8fb9)\n                // \u67d3\u8272\n                w->color = BLACK;\n                parent->color = RED;\n                // \u5de6\u65cb\u7236\u8282\u70b9\n                RBTreeLeftRotate(tree, parent);\n                // \u53d8\u4e3a\u4e4b\u524d\u7684\u60c5\u51b5\n                continue;\n            }\n        }\n        break;\n    }\n}\n\nstatic void _deleteRBNode(RBTree *tree, RBNode *node)\n{\n    RBNode *y = node;   // \u5f85\u5220\u9664\n    RBNode *x = NULL;   // \u7528\u4e8e\u66ff\u6362\n\n    // \u5982\u679c\u8fd9\u4e2a\u8282\u70b9\u5ea6\u4e3a\u4e8c, \u90a3\u4e48\u4e0e\u8be5\u8282\u70b9\u540e\u7ee7\u8282\u70b9\u8fdb\u884c\u503c\u4ea4\u6362, \u7136\u540e node \u662f\u6307\u5411\u540e\u7ee7\u8282\u70b9\u7684\u6307\u9488\n    if (node->left && node->right)\n    {\n        // \u5ea6\u4e3a\u4e8c\n        y = node->right;\n        while (y->left)\n        {\n            y = y->left;\n        }\n        node->key = y->key;\n    }\n    \n    // \u56e0\u4e3a y\u5ea6\u4e3a\u4e00\n    x = y->left ? y->left : y->right;\n\n    // \u5ea6\u4e3a\u4e00\n    // \u5224\u65ad x, y\u8282\u70b9\u662f\u5426\u6709\u4e00\u4e2a\u662f\u7ea2, \u6ce8\u610f: x\u9700\u8981\u5b58\u5728\u54e6~, \u53e6\u5916\u8fd8\u6709\u4e00\u79cd\u60c5\u51b5\u662f: y\u662f\u6839, \u5e76\u4e14\u5ea6\u4e3a0\n    if (y->color == RED || (x && x->color == RED) || (tree->root == y && !x))\n    {\n        // [\u7b80\u5355\u60c5\u51b5]\n        // \u66ff\u6362\u4e0e\u7740\u8272\u4e3a\u9ed1\u5373\u53ef\n        if (x)\n            x->parent = y->parent;\n\n        if (y->parent)\n        {\n            if (y->parent->left == y)\n            {\n                y->parent->left = x;\n            }\n            else\n            {\n                y->parent->right = x;\n            }\n        }\n        else\n        {\n            // y\u4e3a\u6839\u8282\u70b9\n            if (x)\n            {\n                tree->root = x;\n                x->color = BLACK;\n            }\n            else\n                tree->root = NULL;\n        }\n    }\n    else    // \u4e3a\u53cc\u9ed1\u8282\u70b9\n    {\n        // [\u590d\u6742\u60c5\u51b5]\n        // \u5224\u65ad y \u662f\u4e0d\u662f\u6839\u8282\u70b9 <tm\u7684\u8fd9\u79cd\u60c5\u51b5\u4e0b, \u6839\u672c\u4e0d\u53ef\u80fd\u51fa\u73b0 y \u4e3a\u6839\u8282\u70b9>\n        _fixupRBTree(tree, y, x);\n        if (y->parent->left == y)\n        {\n            y->parent->left = x;\n        }\n        else\n        {\n            y->parent->right = x;\n        }\n    }\n    \n    free(y);\n}\n\nvoid deleteRBTree(RBTree *tree, keyType key)\n{\n    // 1. \u5bfb\u627e\u9700\u8981\u5220\u9664\u7684\u8282\u70b9\n    RBNode *node = _searchRBNode(tree, key);\n\n    // 2. \u5220\u9664\u8be5\u8282\u70b9\n    if (node)\n    {\n        _deleteRBNode(tree, node);\n    }\n\n    --tree->count;\n}\n\n/** \u5de6\u65cb <\u53d4\u53d4\u4e3a\u9ed1> // \u5c06y\u8fdb\u884c\u5de6\u65cb\n *          py                      py\n *          |                       |\n *          y                       x\n *         / \\          --\x3e        / \\\n *        ly  x                   y   rx\n *           / \\                 / \\\n *          lx  rx              ly  lx\n */\nvoid RBTreeLeftRotate(RBTree* tree, RBNode* y)\n{\n    RBNode* x = y->right;\n    x->parent = y->parent;\n    y->right = x->left;\n    if (x->left)\n    {\n        x->left->parent = y;\n    }\n    x->left = y;\n    \n    if (y->parent)\n    {\n        if (y->parent->left == y)\n        {\n            y->parent->left = x;\n        }\n        else\n        {\n            y->parent->right = x;\n        }\n    }\n    else\n    {\n        tree->root = x;\n    }\n    y->parent = x;\n}\n\n/** \u53f3\u65cb <\u53d4\u53d4\u4e3a\u9ed1> // \u5c06y\u8fdb\u884c\u53f3\u65cb\n *          py                      py\n *          |                       |\n *          y                       x\n *         / \\          --\x3e        / \\\n *        x   ry                  lx  y\n *       / \\                         / \\\n *      lx  rx                      rx  ry\n */\nvoid RBTreeRightRotate(RBTree* tree, RBNode* y)\n{\n    RBNode *x = y->left;\n    x->parent = y->parent;\n    y->left = x->right;\n\n    // \u8bb0\u5f97 rx \u7684\u7236\u4e5f\u53d8\u4e86, \u6240\u4ee5 parent \u8981\u6539, \u4f46\u662f\u524d\u63d0\u662f rx != NULL\n    if (y->left)\n    {\n        y->left->parent = y;\n    }\n\n    // \u5982\u679c y\u539f\u672c\u662f\u6839, \u90a3\u4e48x\u7684\u5730\u4f4d\u8981\u53d8\n    if (y->parent)\n    {\n        // \u975e\u7a7a, \u90a3\u4e48\u8981\u66f4\u65b0 \u5230\u5e95\u662f\u8c01\u6307\u5411\u7684x, \u5de6\u8fd8\u662f\u53f3\n        /**       \n         *       /         \\\n         *      pl          pr\n         *     /      \u8fd8\u662f    \\\n         *    y                y\n         *      \u4e0a\u5934\u7684 p->left \u6216\u8005 p->right \u662f\u9700\u8981\u66f4\u65b0\u7684!, \u4e0d\u7136\u5c31\u8fd8\u662f\u6307\u5411\u539f\u6765\u7684y\u4e86\n         */\n        if (y->parent->left == y)   // \u5de6\n        {\n            y->parent->left = x;\n        }\n        else                        // \u53f3\n        {\n            y->parent->right = x;\n        }\n    }\n    else\n    {\n        // \u4e3a\u7a7a, \u8bf4\u660e\u662f\u6839\n        tree->root = x;\n    }\n    x->right = y;\n    y->parent = x;\n}\n\nstatic void _putRBNode(RBNode *node, keyType parentKey, int tag)\n{\n    if (!node)\n        return;\n    printf("%d<%s> \u662f %d \u7684 %s\\n", node->key, (node->color == RED) ? "\u7ea2\u8272" : "\u9ed1\u8272", parentKey, (tag == 1) ? "\u53f3\u513f\u5b50" : (tag == -1) ? "\u5de6\u513f\u5b50" : "\u6839\u7ed3\u70b9");\n    _putRBNode(node->left, node->key, -1);\n    _putRBNode(node->right, node->key, 1);\n}\n\nvoid putRBTree(const RBTree *Tree)\n{\n    RBNode *p = Tree->root;\n    printf("The RB-Tree Node Num: %d\\n", Tree->count);\n    _putRBNode(Tree->root, -1, 0);\n}\n\nint main(void)\n{\n    // \u9ad8\u9636\u641c\u7d22\u6811 - \u7ea2\u9ed1\u6811 - \u5df2\u5b8c\u5584\u5220\u9664\u7684(b, c)\u60c5\u51b5\n    RBTree *RB_Tree = initRBTree();\n\n    for (int i = 10; i <= 180; i += 10)\n        insertRBNode(RB_Tree, i);\n\n    putRBTree(RB_Tree);\n\n    deleteRBTree(RB_Tree, 10);  // \u60c5\u51b5(b)\n    deleteRBTree(RB_Tree, 150); // \u60c5\u51b5(a)\n    deleteRBTree(RB_Tree, 130); // \u60c5\u51b5(c)\n    printf("------\\n");\n    putRBTree(RB_Tree);\n\n    getchar();\n    return 0;\n}\n'})})]})}function p(n={}){const{wrapper:e}={...(0,d.R)(),...n.components};return e?(0,o.jsx)(e,{...n,children:(0,o.jsx)(c,{...n})}):c(n)}},28453:(n,e,r)=>{r.d(e,{R:()=>i,x:()=>l});var t=r(96540);const o={},d=t.createContext(o);function i(n){const e=t.useContext(d);return t.useMemo((function(){return"function"==typeof n?n(e):{...e,...n}}),[e,n])}function l(n){let e;return e=n.disableParentContext?"function"==typeof n.components?n.components(o):n.components||o:i(n.components),t.createElement(d.Provider,{value:e},n.children)}}}]);