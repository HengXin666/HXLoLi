"use strict";(self.webpackChunkhx_loli=self.webpackChunkhx_loli||[]).push([[10584],{28453:(n,e,t)=>{t.d(e,{R:()=>s,x:()=>a});var i=t(96540);const r={},c=i.createContext(r);function s(n){const e=i.useContext(c);return i.useMemo((function(){return"function"==typeof n?n(e):{...e,...n}}),[e,n])}function a(n){let e;return e=n.disableParentContext?"function"==typeof n.components?n.components(r):n.components||r:s(n.components),i.createElement(c.Provider,{value:e},n.children)}},92592:(n,e,t)=>{t.r(e),t.d(e,{assets:()=>L,contentTitle:()=>a,default:()=>o,frontMatter:()=>s,metadata:()=>i,toc:()=>d});const i=JSON.parse('{"id":"\u8ba1\u4f6c\u5e38\u8b58/\u6570\u636e\u7ed3\u6784\u4e0e\u7b97\u6cd5/\u3010\u6570\u636e\u7ed3\u6784\u3011\u7ebf\u6027\u8868/\u94fe\u5f0f\u5b58\u50a8\u7ed3\u6784\u4e36\u53cc\u5411\u5faa\u73af\u94fe\u8868/index","title":"\u94fe\u5f0f\u5b58\u50a8\u7ed3\u6784-\u53cc\u5411\u5faa\u73af\u94fe\u8868","description":"\u4ee3\u7801\u5b9e\u73b0","source":"@site/docs/001-\u8ba1\u4f6c\u5e38\u8b58/001-\u6570\u636e\u7ed3\u6784\u4e0e\u7b97\u6cd5/003-\u3010\u6570\u636e\u7ed3\u6784\u3011\u7ebf\u6027\u8868/007-\u94fe\u5f0f\u5b58\u50a8\u7ed3\u6784\u4e36\u53cc\u5411\u5faa\u73af\u94fe\u8868/index.md","sourceDirName":"001-\u8ba1\u4f6c\u5e38\u8b58/001-\u6570\u636e\u7ed3\u6784\u4e0e\u7b97\u6cd5/003-\u3010\u6570\u636e\u7ed3\u6784\u3011\u7ebf\u6027\u8868/007-\u94fe\u5f0f\u5b58\u50a8\u7ed3\u6784\u4e36\u53cc\u5411\u5faa\u73af\u94fe\u8868","slug":"/\u8ba1\u4f6c\u5e38\u8b58/\u6570\u636e\u7ed3\u6784\u4e0e\u7b97\u6cd5/\u3010\u6570\u636e\u7ed3\u6784\u3011\u7ebf\u6027\u8868/\u94fe\u5f0f\u5b58\u50a8\u7ed3\u6784\u4e36\u53cc\u5411\u5faa\u73af\u94fe\u8868/","permalink":"/HXLoLi/docs/\u8ba1\u4f6c\u5e38\u8b58/\u6570\u636e\u7ed3\u6784\u4e0e\u7b97\u6cd5/\u3010\u6570\u636e\u7ed3\u6784\u3011\u7ebf\u6027\u8868/\u94fe\u5f0f\u5b58\u50a8\u7ed3\u6784\u4e36\u53cc\u5411\u5faa\u73af\u94fe\u8868/","draft":false,"unlisted":false,"editUrl":"https://github.com/HengXin666/HXLoLi/edit/main/docs/001-\u8ba1\u4f6c\u5e38\u8b58/001-\u6570\u636e\u7ed3\u6784\u4e0e\u7b97\u6cd5/003-\u3010\u6570\u636e\u7ed3\u6784\u3011\u7ebf\u6027\u8868/007-\u94fe\u5f0f\u5b58\u50a8\u7ed3\u6784\u4e36\u53cc\u5411\u5faa\u73af\u94fe\u8868/index.md","tags":[],"version":"current","lastUpdatedBy":"Heng_Xin_666","lastUpdatedAt":1745851959000,"frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"\u94fe\u5f0f\u5b58\u50a8\u7ed3\u6784\u4e36\u5faa\u73af\u94fe\u8868\u3010\u6539\u3011","permalink":"/HXLoLi/docs/\u8ba1\u4f6c\u5e38\u8b58/\u6570\u636e\u7ed3\u6784\u4e0e\u7b97\u6cd5/\u3010\u6570\u636e\u7ed3\u6784\u3011\u7ebf\u6027\u8868/\u94fe\u5f0f\u5b58\u50a8\u7ed3\u6784\u4e36\u5faa\u73af\u94fe\u8868\u3010\u6539\u3011/"},"next":{"title":"\u7ebf\u6027\u8868\u4e36\u8bfe\u540e\u4e60\u9898code","permalink":"/HXLoLi/docs/\u8ba1\u4f6c\u5e38\u8b58/\u6570\u636e\u7ed3\u6784\u4e0e\u7b97\u6cd5/\u3010\u6570\u636e\u7ed3\u6784\u3011\u7ebf\u6027\u8868/\u7ebf\u6027\u8868\u4e36\u8bfe\u540e\u4e60\u9898code/"}}');var r=t(74848),c=t(28453);const s={},a="\u94fe\u5f0f\u5b58\u50a8\u7ed3\u6784-\u53cc\u5411\u5faa\u73af\u94fe\u8868",L={},d=[{value:"\u4ee3\u7801\u5b9e\u73b0",id:"\u4ee3\u7801\u5b9e\u73b0",level:2}];function l(n){const e={code:"code",h1:"h1",h2:"h2",header:"header",pre:"pre",...(0,c.R)(),...n.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(e.header,{children:(0,r.jsx)(e.h1,{id:"\u94fe\u5f0f\u5b58\u50a8\u7ed3\u6784-\u53cc\u5411\u5faa\u73af\u94fe\u8868",children:"\u94fe\u5f0f\u5b58\u50a8\u7ed3\u6784-\u53cc\u5411\u5faa\u73af\u94fe\u8868"})}),"\n",(0,r.jsx)(e.h2,{id:"\u4ee3\u7801\u5b9e\u73b0",children:"\u4ee3\u7801\u5b9e\u73b0"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-C",children:'#include <stdio.h>\n#include <stdlib.h>\n\n#define OK 1    // \u7a0b\u5e8f\u6b63\u5e38\u8fd0\u884c\n#define ERROR 0 // \u7a0b\u5e8f\u8fd0\u884c\u62a5\u9519\n#define TRUE 1  //\n#define FALSE 0 //\n\ntypedef int ElemType;\ntypedef struct DualNobe\n{\n    ElemType data;\n    struct DualNobe *prior; // \u524d\u9a71\u7ed3\u70b9\n    struct DualNobe *next;  // \u540e\u7ee7\u7ed3\u70b9\n} DualNobe, *DuLinkList;\n\nint initList(DuLinkList *L);                      // \u521d\u59cb\u5316\u64cd\u4f5c, \u5efa\u7acb\u4e00\u4e2a\u7a7a\u7684\u7ebf\u6027\u8868 \u548c \u5934\u8282\u70b9\nint listInsert(DuLinkList *L, int i, int e);      // \u5728\u7ebf\u6027\u8868L\u4e2d\u7b2ci\u4e2a\u4f4d\u7f6e\u63d2\u5165\u65b0\u5143\u7d20e\nint listDelete(DuLinkList *L, int i, int *e);     // \u5220\u9664\u7ebf\u6027\u8868L\u4e2d\u7b2ci\u4e2a\u4f4d\u7f6e\u7684\u5143\u7d20, \u5e76\u8fd4\u56de\u5176\u503c\u7ed9e\n\nint listFree(DuLinkList *L);                      // \u91ca\u653e\u7ebf\u6027\u8868\nint listAdd(DuLinkList *L, int e);                // \u5728\u7ebf\u6027\u8868\u5c3e\u90e8\u6dfb\u52a0\u5143\u7d20\nint listPrint(DuLinkList L);                      // \u6253\u5370\u5355\u94fe\u8868\n\nint initList(DuLinkList *L)\n{\n    // \u521d\u59cb\u5316\u7a7a\u7ed3\u6784\u4f53\u6307\u9488\u4e3a\u53ea\u6709\u5934\u8282\u70b9\u7684\u53cc\u5411\u5faa\u73af\u94fe\u8868\n    if (!*L)\n    {\n        DuLinkList p;\n        p = (DuLinkList)malloc(sizeof(DualNobe));\n        if (!p)\n        {\n            return ERROR;\n        }\n        *L = p;\n        p->next = p;\n        p->prior = p;\n        return OK;\n    }\n    else\n    {\n        return ERROR;\n    }\n}\n\nint listAdd(DuLinkList *L, int e)\n{\n    // \u5c3e\u63d2\u6cd5 \u63d2\u5165\n    if (!*L)\n    {\n        return ERROR;\n    }\n\n    DuLinkList p, cecha = (*L)->prior;\n    p = (DuLinkList)malloc(sizeof(DualNobe));\n    if (!p)\n    {\n        return ERROR;\n    }\n    p->data = e;\n\n    cecha->next = p;\n    p->next = *L;\n    (*L)->prior = p;\n    p->prior = cecha;\n}\n\nint listPrint(DuLinkList L)\n{\n    // \u6253\u5370\u5355\u94fe\u8868\n    DuLinkList p = L->next;\n    while (p != L)\n    {\n        printf("%d ", p->data);\n        p = p->next;\n    }\n    putchar(\'\\n\');\n    return OK;\n}\n\nint listInsert(DuLinkList *L, int i, int e)\n{\n    // \u5728\u7ebf\u6027\u8868L\u4e2d\u7b2ci\u4e2a\u4f4d\u7f6e\u63d2\u5165\u65b0\u5143\u7d20e, \u5982\u679ci\u5927\u4e8e\u94fe\u8868\u957f\u5ea6,\u5219\u53ea\u5728\u6700\u540e\u7684\u4f4d\u7f6e\u63d2\u5165\n    if (i < 1)\n    {\n        return ERROR;\n    }\n\n    DuLinkList p, cecha = *L;\n    p = (DuLinkList)malloc(sizeof(DualNobe));\n    if (!p)\n    {\n        return ERROR;\n    }\n\n    p->data = e;\n    int j = 1;\n    while (cecha->next != *L && j < i)\n    {\n        cecha = cecha->next;\n        ++j;\n    }// \u5bfb\u627e\u63d2\u5165\u4f4d\u7f6e\u7684\u524d\u9a71\n\n    cecha->next->prior = p;\n    p->next = cecha->next;\n    cecha->next = p;\n    p->prior = cecha;\n    \n    return OK;\n}\n\nint listDelete(DuLinkList *L, int i, int *e)\n{\n    // \u5220\u9664\u7ebf\u6027\u8868L\u4e2d\u7b2ci\u4e2a\u4f4d\u7f6e\u7684\u5143\u7d20, \u5e76\u8fd4\u56de\u5176\u503c\u7ed9e\n    if (i < 1)\n    {\n        return ERROR;\n    }\n\n    DuLinkList cecha = *L, p_free = NULL;\n\n    int j = 1;\n    while (cecha->next != *L && j < i)\n    {\n        cecha = cecha->next;\n        ++j;\n    }// \u5bfb\u627e\u5220\u9664\u4f4d\u7f6e\u7684\u524d\u9a71\n\n    if (cecha->next == *L)\n    {\n        return ERROR;\n    }\n\n    *e = cecha->next->data;\n    p_free = cecha->next;\n    cecha->next = cecha->next->next;\n    cecha->next->next->prior = cecha;\n    free(p_free);\n\n    return OK;\n}\n\nint listFree(DuLinkList *L)\n{\n    // \u91ca\u653e\u7ebf\u6027\u8868\n    DuLinkList cecha = (*L)->next, p_free = NULL;\n\n    while (cecha != *L)\n    {\n        p_free = cecha;\n        cecha = cecha->next;\n        free(p_free);\n    }\n    \n    p_free = cecha;\n    *L = NULL;\n    free(p_free);\n\n    return OK;\n}\n\nint main(void)\n{\n    // \u53cc\u5411\u5faa\u73af\u94fe\u8868 + \u5e26\u5934\u8282\u70b9\n    DuLinkList head = NULL;\n    int e;\n    initList(&head);\n    listAdd(&head, 1);\n    listAdd(&head, 2);\n    listAdd(&head, 3);\n    listAdd(&head, 4);\n    listInsert(&head, 1, 666);\n    listDelete(&head, 5, &e);\n    printf("\u5220\u9664 %d\\n", e);\n    listPrint(head);\n    listFree(&head);\n\n    return 0;\n}\n'})})]})}function o(n={}){const{wrapper:e}={...(0,c.R)(),...n.components};return e?(0,r.jsx)(e,{...n,children:(0,r.jsx)(l,{...n})}):l(n)}}}]);