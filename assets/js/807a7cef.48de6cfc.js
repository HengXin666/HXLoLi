"use strict";(self.webpackChunkhx_loli=self.webpackChunkhx_loli||[]).push([[55016],{28453:(n,e,r)=>{r.d(e,{R:()=>i,x:()=>c});var s=r(96540);const t={},o=s.createContext(t);function i(n){const e=s.useContext(o);return s.useMemo((function(){return"function"==typeof n?n(e):{...e,...n}}),[e,n])}function c(n){let e;return e=n.disableParentContext?"function"==typeof n.components?n.components(t):n.components||t:i(n.components),s.createElement(o.Provider,{value:e},n.children)}},75524:(n,e,r)=>{r.r(e),r.d(e,{assets:()=>d,contentTitle:()=>c,default:()=>a,frontMatter:()=>i,metadata:()=>s,toc:()=>f});const s=JSON.parse('{"id":"\u7a0b\u5e8f\u8bed\u8a00/C++/tmp\u4e36C++\u4e36memo/C++\u7f51\u7edc\u7f16\u7a0b/\u5b9e\u8df5\u7248\u672c/\u5bf9\u5e38\u7528\u64cd\u4f5c\u8fdb\u884c\u7c7b\u5c01\u88c5/index","title":"\u7c7b\u5c01\u88c5","description":"\u5934\u6587\u4ef6","source":"@site/docs/002-\u7a0b\u5e8f\u8bed\u8a00/001-C++/002-tmp\u4e36C++\u4e36memo/004-C++\u7f51\u7edc\u7f16\u7a0b/001-\u5b9e\u8df5\u7248\u672c/006-\u5bf9\u5e38\u7528\u64cd\u4f5c\u8fdb\u884c\u7c7b\u5c01\u88c5/index.md","sourceDirName":"002-\u7a0b\u5e8f\u8bed\u8a00/001-C++/002-tmp\u4e36C++\u4e36memo/004-C++\u7f51\u7edc\u7f16\u7a0b/001-\u5b9e\u8df5\u7248\u672c/006-\u5bf9\u5e38\u7528\u64cd\u4f5c\u8fdb\u884c\u7c7b\u5c01\u88c5","slug":"/\u7a0b\u5e8f\u8bed\u8a00/C++/tmp\u4e36C++\u4e36memo/C++\u7f51\u7edc\u7f16\u7a0b/\u5b9e\u8df5\u7248\u672c/\u5bf9\u5e38\u7528\u64cd\u4f5c\u8fdb\u884c\u7c7b\u5c01\u88c5/","permalink":"/HXLoLi/docs/\u7a0b\u5e8f\u8bed\u8a00/C++/tmp\u4e36C++\u4e36memo/C++\u7f51\u7edc\u7f16\u7a0b/\u5b9e\u8df5\u7248\u672c/\u5bf9\u5e38\u7528\u64cd\u4f5c\u8fdb\u884c\u7c7b\u5c01\u88c5/","draft":false,"unlisted":false,"editUrl":"https://github.com/HengXin666/HXLoLi/edit/main/docs/002-\u7a0b\u5e8f\u8bed\u8a00/001-C++/002-tmp\u4e36C++\u4e36memo/004-C++\u7f51\u7edc\u7f16\u7a0b/001-\u5b9e\u8df5\u7248\u672c/006-\u5bf9\u5e38\u7528\u64cd\u4f5c\u8fdb\u884c\u7c7b\u5c01\u88c5/index.md","tags":[],"version":"current","lastUpdatedBy":"Heng_Xin_666","lastUpdatedAt":1745851959000,"frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"\u5957\u63a5\u5b57\u7684\u5e38\u7528\u5c5e\u6027","permalink":"/HXLoLi/docs/\u7a0b\u5e8f\u8bed\u8a00/C++/tmp\u4e36C++\u4e36memo/C++\u7f51\u7edc\u7f16\u7a0b/\u5b9e\u8df5\u7248\u672c/\u5957\u63a5\u5b57\u7684\u5e38\u7528\u5c5e\u6027/"},"next":{"title":"\u591a\u8def\u590d\u7528IO","permalink":"/HXLoLi/docs/\u7a0b\u5e8f\u8bed\u8a00/C++/tmp\u4e36C++\u4e36memo/C++\u7f51\u7edc\u7f16\u7a0b/\u5b9e\u8df5\u7248\u672c/\u591a\u8def\u590d\u7528IO/"}}');var t=r(74848),o=r(28453);const i={},c="\u7c7b\u5c01\u88c5",d={},f=[{value:"\u5934\u6587\u4ef6",id:"\u5934\u6587\u4ef6",level:2},{value:"\u5ba2\u6237\u7aef\u4ee3\u7801 &amp; \u670d\u52a1\u7aef\u4ee3\u7801",id:"\u5ba2\u6237\u7aef\u4ee3\u7801--\u670d\u52a1\u7aef\u4ee3\u7801",level:2},{value:"\u5ba2\u6237\u7aef",id:"\u5ba2\u6237\u7aef",level:3},{value:"\u670d\u52a1\u7aef",id:"\u670d\u52a1\u7aef",level:3}];function l(n){const e={code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",p:"p",pre:"pre",...(0,o.R)(),...n.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(e.header,{children:(0,t.jsx)(e.h1,{id:"\u7c7b\u5c01\u88c5",children:"\u7c7b\u5c01\u88c5"})}),"\n",(0,t.jsx)(e.h2,{id:"\u5934\u6587\u4ef6",children:"\u5934\u6587\u4ef6"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-C++",children:"//\n// Created by Heng_Xin on 2024/1/13.\n//\n#ifndef C_WI_FI_SERVER_H\n#define C_WI_FI_SERVER_H\n\n#include <cstring>\n#include <sys/socket.h>\n#include <netinet/in.h>\n#include <arpa/inet.h>\n#include <unistd.h>\n#include <fcntl.h>\n#include <string>\n\nusing std::string;\n\nnamespace hx\n{\n    namespace server\n    {\n        class HXSockfd\n        {\n        public:\n            HXSockfd();                               // \u521b\u5efa\u4e00\u4e2a\u5957\u63a5\u5b57\n            HXSockfd(int connfd);                     // \u521b\u5efa\u4e00\u4e2a\n            ~HXSockfd();                              // \u5173\u95ed\u670d\u52a1\u5668(\u6790\u6784\u51fd\u6570)\n            void close();                             // \u5173\u95ed\u670d\u52a1\u5668\n\n            bool connect(const string &ip, int port); // \u5ba2\u6237\u7aef: \u8fde\u63a5\u670d\u52a1\u5668\n            bool bind(const string &ip, int port);    // \u521b\u5efa\u670d\u52a1\u5668\n            bool listen(int number);                  // \u76d1\u89c6\u670d\u52a1\u5668\n\n            int accept();                             // \u7528\u4e8e\u670d\u52a1\u7aef\u63a5\u53d7\u5ba2\u6237\u7aef\u8fde\u63a5\u8bf7\u6c42, \u5e76\u521b\u5efa\u4e00\u4e2a\u65b0\u7684\u8fde\u63a5\u5957\u63a5\u5b57(\u8fd4\u56de\u503c)\u6765\u5904\u7406\u8be5\u8fde\u63a5\n            ssize_t recv(char *buff, size_t len);\n            ssize_t send(const char *buff, size_t len);\n\n            // ---\u8bbe\u7f6e\u5c5e\u6027---\n            bool set_non_blocking();                    // \u8bbe\u7f6e\u4e3a \u975e\u963b\u585e IO\n            bool set_send_buffer(int size);             // \u8bbe\u7f6e\u53d1\u9001\u7f13\u51b2\u533a\n            bool set_recv_buffer(int size);             // \u8bbe\u7f6e\u63a5\u6536\u7f13\u51b2\u533a\n            bool set_linger(bool active, int seconds);  // \u8bbe\u7f6e\u51fd\u6570close()\u5173\u95edTCP\u8fde\u63a5\u65f6\u7684\u884c\u4e3a\n            bool set_keepalive();                       // \u81ea\u52a8\u5728\u89c4\u5b9a\u65f6\u95f4\u5185\u5411\u5bf9\u65b9\u53d1\u9001\u5fc3\u8df3\u5305, \u53e6\u4e00\u65b9\u5728\u6536\u5230\u5fc3\u8df3\u5305\u540e\u5c31\u4f1a\u81ea\u52a8\u56de\u590d, \u4ee5\u544a\u8bc9\u5bf9\u65b9\u6211\u4ecd\u7136\u5728\u7ebf\n            bool set_reuseaddr();                       // \u5141\u8bb8\u670d\u52a1\u5668\u7ed1\u5b9a\u4e00\u4e2a\u5730\u5740\uff0c\u5373\u4f7f\u8fd9\u4e2a\u5730\u5740\u5f53\u524d\u5df2\u7ecf\u5b58\u5728\u5df2\u5efa\u7acb\u7684\u8fde\u63a5\n        private:\n            string s_ip;  // ip\u5730\u5740\n            int s_port;   // \u7aef\u53e3\n            int s_sockfd; // \u5957\u63a5\u5b57\n        };\n    };\n};\n#endif //C_WI_FI_SERVER_H\n"})}),"\n",(0,t.jsx)(e.p,{children:".cpp"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-C++",children:'//\n// Created by Heng_Xin on 2024/1/13.\n//\n\n#include "./HXsocket.h"\n\nusing namespace hx::server;\n\nHXSockfd::HXSockfd() : s_ip(""), s_port(0), s_sockfd(0)\n{\n    this->s_sockfd = ::socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);\n    if (this->s_sockfd < 0) {\n        printf("ERROR: socket fun error: errno = %d, errmsg = %s\\n", errno, strerror(errno));\n        return;\n    }\n    printf("INFO: socket fun ok!\\n");\n}\n\nHXSockfd::HXSockfd(int connfd) : s_ip(""), s_port(0), s_sockfd(connfd)\n{\n\n}\n\nHXSockfd::~HXSockfd()\n{\n    if (this->s_sockfd)\n    {\n        ::close(this->s_sockfd);\n        printf("INFO: Free Server!\\n");\n    }\n}\n\nbool HXSockfd::bind(const string &ip, int port)\n{\n    this->s_ip = ip;\n    this->s_port = port;\n\n    struct sockaddr_in sockaddr;\n    std::memset(&sockaddr, 0, sizeof(sockaddr));        // \u521d\u59cb\u5316\u7ed3\u6784\u4f53 \u5148\u5c06\u7ed3\u6784\u4f53\u5bf9\u8c61\u586b\u5145\u4e3a0\n    sockaddr.sin_family = AF_INET;                      // \u8bbe\u7f6e\u5730\u5740\u65cf\u4e3aIPv4\n    sockaddr.sin_addr.s_addr = inet_addr(ip.c_str());   // \u5c06\u5b57\u7b26\u4e32\u5f62\u5f0f\u7684IP\u5730\u5740\u8f6c\u6362\u4e3a\u7f51\u7edc\u5b57\u8282\u5e8f\u7684\u4e8c\u8fdb\u5236IP\u5730\u5740\n    sockaddr.sin_port = htons(port);                    // \u5c06\u4e3b\u673a\u5b57\u8282\u5e8f\u7684\u7aef\u53e3\u53f7\u8f6c\u6362\u4e3a\u7f51\u7edc\u5b57\u8282\u5e8f\n\n    if (::bind(this->s_sockfd, (struct sockaddr *)&sockaddr, sizeof(sockaddr)) < 0)\n    {\n        printf("ERROR: socket bind error: errno=%d, errmsg=%s\\n", errno, strerror(errno));\n        return 0;\n    }\n    else\n    {\n        printf("INOF: socket bind success: ip = %s port = %d\\n", ip.c_str(), port);\n        return 1;\n    }\n}\n\nbool HXSockfd::connect(const string &ip, int port)\n{\n    this->s_ip = ip;\n    this->s_port = port;\n\n    struct sockaddr_in sockaddr;\n    std::memset(&sockaddr, 0, sizeof(sockaddr));        // \u521d\u59cb\u5316\u7ed3\u6784\u4f53 \u5148\u5c06\u7ed3\u6784\u4f53\u5bf9\u8c61\u586b\u5145\u4e3a0\n    sockaddr.sin_family = AF_INET;                      // \u8bbe\u7f6e\u5730\u5740\u65cf\u4e3aIPv4\n    sockaddr.sin_addr.s_addr = inet_addr(ip.c_str());   // \u5c06\u5b57\u7b26\u4e32\u5f62\u5f0f\u7684IP\u5730\u5740\u8f6c\u6362\u4e3a\u7f51\u7edc\u5b57\u8282\u5e8f\u7684\u4e8c\u8fdb\u5236IP\u5730\u5740\n    sockaddr.sin_port = htons(port);                    // \u5c06\u4e3b\u673a\u5b57\u8282\u5e8f\u7684\u7aef\u53e3\u53f7\u8f6c\u6362\u4e3a\u7f51\u7edc\u5b57\u8282\u5e8f\n\n    if (::connect(this->s_sockfd, (struct sockaddr *)&sockaddr, sizeof(sockaddr)) < 0)\n    {\n        printf("ERROR: socket connect error: errno=%d, errmsg=%s\\n", errno, strerror(errno));\n        return 0;\n    }\n    else\n    {\n        printf("INOF: socket connect success: ip = %s port = %d\\n", ip.c_str(), port);\n        return 1;\n    }\n}\n\nbool HXSockfd::listen(int number)\n{\n    if (::listen(this->s_sockfd, number) < 0)\n    {\n        printf("ERROR: socket listen error: errno=%d errmsg=%s\\n", errno, strerror(errno));\n        return 0;\n    }\n    else\n    {\n        printf("INOF: socket listen ...\\n");\n        return 1;\n    }\n}\n\nint HXSockfd::accept()\n{\n    return ::accept(this->s_sockfd, nullptr, nullptr);\n}\n\nssize_t HXSockfd::recv(char *buff, size_t len)\n{\n    return ::recv(this->s_sockfd, buff, len, 0);\n}\n\nssize_t HXSockfd::send(const char *buff, size_t len)\n{\n    return ::send(this->s_sockfd, buff, len, 0);\n}\n\nvoid HXSockfd::close()\n{\n    if (this->s_sockfd)\n    {\n        ::close(this->s_sockfd);\n        printf("INFO: Free Server!\\n");\n        this->s_sockfd = 0;\n    }\n}\n\nbool HXSockfd::set_non_blocking()\n{\n    int flags = fcntl(this->s_sockfd, F_GETFL, 0); // \u83b7\u53d6\u5c5e\u6027\n    if (flags < 0)\n    {\n        printf("ERROR: socket set_non_blocking error: errno = %d, errmsg = %s", errno, strerror(errno));\n        return false;\n    }\n\n    flags |= O_NONBLOCK; // \u6dfb\u52a0\u4e00\u4e2a\u5c5e\u6027\n    if (fcntl(this->s_sockfd, F_SETFL, flags) < 0)\n    {\n        printf("ERROR: socket fcntl error: errno = %d, errmsg = %s", errno, strerror(errno));\n        return false;\n    }\n    return true;\n}\n\nbool HXSockfd::set_send_buffer(int size)\n{\n    int buff_size = size;\n    if (setsockopt(this->s_sockfd, SOL_SOCKET, SO_SNDBUF, &buff_size, sizeof(buff_size)) < 0)\n    {\n        printf("ERROR: socket set_send_buffer error: errno = %d, errmsg = %s", errno, strerror(errno));\n        return false;\n    }\n    return true;\n}\n\nbool HXSockfd::set_recv_buffer(int size)\n{\n    int buff_size = size;\n    if (setsockopt(this->s_sockfd, SOL_SOCKET, SO_RCVBUF, &buff_size, sizeof(buff_size)) < 0)\n    {\n        printf("ERROR: socket set_recv_buffer error: errno = %d, errmsg = %s", errno, strerror(errno));\n        return false;\n    }\n    return true;\n}\n\nbool HXSockfd::set_linger(bool active, int seconds)\n{\n    struct linger l;\n    std::memset(&l, 0, sizeof(l));\n    l.l_onoff = active ? 1 : 0;\n    l.l_linger = seconds;\n    if (setsockopt(this->s_sockfd, SOL_SOCKET, SO_LINGER, &l, sizeof(l)) < 0)\n    {\n        printf("ERROR: socket set_linger error: errno = %d, errmsg = %s", errno, strerror(errno));\n        return false;\n    }\n    return true;\n}\n\nbool HXSockfd::set_keepalive()\n{\n    int flag = 1;\n    if (setsockopt(this->s_sockfd, SOL_SOCKET, SO_KEEPALIVE, &flag, sizeof(flag)) < 0)\n    {\n        printf("ERROR: socket set_keepalive error: errno = %d, errmsg = %s", errno, strerror(errno));\n        return false;\n    }\n    return true;\n}\n\nbool HXSockfd::set_reuseaddr()\n{\n    int flag = 1;\n    if (setsockopt(this->s_sockfd, SOL_SOCKET, SO_KEEPALIVE, &flag, sizeof(flag)) < 0)\n    {\n        printf("ERROR: socket set_keepalive error: errno = %d, errmsg = %s", errno, strerror(errno));\n        return false;\n    }\n    return true;\n}\n'})}),"\n",(0,t.jsx)(e.h2,{id:"\u5ba2\u6237\u7aef\u4ee3\u7801--\u670d\u52a1\u7aef\u4ee3\u7801",children:"\u5ba2\u6237\u7aef\u4ee3\u7801 & \u670d\u52a1\u7aef\u4ee3\u7801"}),"\n",(0,t.jsx)(e.h3,{id:"\u5ba2\u6237\u7aef",children:"\u5ba2\u6237\u7aef"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-C++",children:'//\n// Created by Heng_Xin on 2024/1/13.\n//\n#include <iostream>\n#include <stdio.h>\n#include "./HX/HXsocket.h"\n\nusing namespace hx::server;\nusing std::string;\n\nint main()\n{\n    // 1. \u521b\u5efa socket\n    HXSockfd server{};\n\n    // 2. \u8fde\u63a5\u670d\u52a1\u7aef\n\n    server.connect("127.0.0.1", 8080);\n\n    // 3. \u5411\u670d\u52a1\u7aef\u53d1\u9001\u6570\u636e\n\n    string data = "hello world";\n    server.send(data.c_str(), data.size());\n  \n    // 4. \u63a5\u6536\u670d\u52a1\u7aef\u7684\u6570\u636e\n    char buf[1024] = {0};\n    server.recv(buf, sizeof(buf));\n\n    printf("\u5df2\u53d1\u9001! \u6536\u5230\u56de\u590d: %s\\n", buf);\n\n    // 5. \u5173\u95ed socket\n    server.close();\n\n    return 0;\n}\n'})}),"\n",(0,t.jsx)(e.h3,{id:"\u670d\u52a1\u7aef",children:"\u670d\u52a1\u7aef"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-C++",children:'#include <iostream>\n\n#include <cstring>\n#include <string>\n\n#include "./HX/HXsocket.h"\n\nusing std::string;\nusing namespace hx::server;\n// cmd :\n// netstat -ano | findstr :8080\n\nint main()\n{\n    // 1. \u521b\u5efa socket\n\n    // \u521b\u5efa\u4e00\u4e2a\u5957\u63a5\u5b57\uff0c\u6307\u5b9a\u534f\u8bae\u65cf\u4e3aAF_INET\uff08IPv4\u7f51\u7edc\u534f\u8bae\uff09\uff0c\u7c7b\u578b\u4e3aSOCK_STREAM\uff08\u9762\u5411\u8fde\u63a5\u7684TCP\u5957\u63a5\u5b57\uff09\uff0c\u5e76\u6307\u5b9a\u534f\u8bae\u4e3aIPPROTO_TCP\u3002\n    HXSockfd server{};\n\n\n    // 2. \u7ed1\u5b9a socket\n    // \u5b9a\u4e49\u670d\u52a1\u5668\u76d1\u542c\u7684IP\u5730\u5740\u548c\u7aef\u53e3\u53f7\n    server.bind("127.0.0.1", 8080);\n    // \u521b\u5efa\u4e00\u4e2a sockaddr_in \u7ed3\u6784\u4f53\u5bf9\u8c61\uff0c\u5e76\u8fdb\u884c\u521d\u59cb\u5316\n\n\n    // 3. \u76d1\u542c socket\n    server.listen(1024);\n\n    while (true)\n    {\n        // 4. \u63a5\u6536\u5ba2\u6237\u7aef\u8fde\u63a5\n        int connfd = server.accept();\n        if (connfd < 0)\n        {\n            printf("ERROE: accept error!\\n");\n            return -1;\n        }\n\n        HXSockfd client(connfd);\n        char buf[1024] = {0};\n\n        // 5. \u63a5\u6536\u5ba2\u6237\u7aef\u7684\u6570\u636e\n        size_t len = client.recv(buf, sizeof(buf));\n        printf("recv: conn=%d msg=%s\\n", connfd, buf);\n\n        // 6. \u5411\u5ba2\u670d\u7aef\u53d1\u9001\u6570\u636e\n        client.send(buf, len);\n\n        // #. \u6ce8\u610f: \u4e0a\u9762\u7684\u5199\u6cd5\u662f\u63a5\u53d7\u5230\u4e00\u6761\u6d88\u606f\u5e76\u4e14\u56de\u590d\u540e\u5c31\u65ad\u5f00\u8fde\u63a5\u4e86! (client\u88ab\u6790\u6784\u4e86)\n    }\n\n    // 7. \u5173\u95ed socket\n    server.close();\n    return 0;\n}\n'})})]})}function a(n={}){const{wrapper:e}={...(0,o.R)(),...n.components};return e?(0,t.jsx)(e,{...n,children:(0,t.jsx)(l,{...n})}):l(n)}}}]);