"use strict";(self.webpackChunkhx_loli=self.webpackChunkhx_loli||[]).push([[86139],{28453:(n,t,e)=>{e.d(t,{R:()=>a,x:()=>d});var i=e(96540);const r={},s=i.createContext(r);function a(n){const t=i.useContext(s);return i.useMemo((function(){return"function"==typeof n?n(t):{...t,...n}}),[t,n])}function d(n){let t;return t=n.disableParentContext?"function"==typeof n.components?n.components(r):n.components||r:a(n.components),i.createElement(s.Provider,{value:t},n.children)}},71114:(n,t,e)=>{e.r(t),e.d(t,{assets:()=>m,contentTitle:()=>d,default:()=>c,frontMatter:()=>a,metadata:()=>i,toc:()=>j});const i=JSON.parse('{"id":"\u5237\u9898\u65e5\u5fd7/\u529b\u6263/\u672a\u5206\u7c7b\u9898\u89e3/\u57fa\u4e8e\u9648\u8ff0\u7edf\u8ba1\u6700\u591a\u597d\u4eba\u6570/index","title":"2151. \u57fa\u4e8e\u9648\u8ff0\u7edf\u8ba1\u6700\u591a\u597d\u4eba\u6570","description":"\u7b2c 277 \u573a\u5468\u8d5b","source":"@site/docs/007-\u5237\u9898\u65e5\u5fd7/002-\u529b\u6263/003-\u672a\u5206\u7c7b\u9898\u89e3/022-\u57fa\u4e8e\u9648\u8ff0\u7edf\u8ba1\u6700\u591a\u597d\u4eba\u6570/index.md","sourceDirName":"007-\u5237\u9898\u65e5\u5fd7/002-\u529b\u6263/003-\u672a\u5206\u7c7b\u9898\u89e3/022-\u57fa\u4e8e\u9648\u8ff0\u7edf\u8ba1\u6700\u591a\u597d\u4eba\u6570","slug":"/\u5237\u9898\u65e5\u5fd7/\u529b\u6263/\u672a\u5206\u7c7b\u9898\u89e3/\u57fa\u4e8e\u9648\u8ff0\u7edf\u8ba1\u6700\u591a\u597d\u4eba\u6570/","permalink":"/HXLoLi/docs/\u5237\u9898\u65e5\u5fd7/\u529b\u6263/\u672a\u5206\u7c7b\u9898\u89e3/\u57fa\u4e8e\u9648\u8ff0\u7edf\u8ba1\u6700\u591a\u597d\u4eba\u6570/","draft":false,"unlisted":false,"editUrl":"https://github.com/HengXin666/HXLoLi/edit/main/docs/007-\u5237\u9898\u65e5\u5fd7/002-\u529b\u6263/003-\u672a\u5206\u7c7b\u9898\u89e3/022-\u57fa\u4e8e\u9648\u8ff0\u7edf\u8ba1\u6700\u591a\u597d\u4eba\u6570/index.md","tags":[],"version":"current","lastUpdatedBy":"Heng_Xin_666","lastUpdatedAt":1745851959000,"frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"\u4f7f\u6570\u7ec4\u8fde\u7eed\u7684\u6700\u5c11\u64cd\u4f5c\u6570","permalink":"/HXLoLi/docs/\u5237\u9898\u65e5\u5fd7/\u529b\u6263/\u672a\u5206\u7c7b\u9898\u89e3/\u4f7f\u6570\u7ec4\u8fde\u7eed\u7684\u6700\u5c11\u64cd\u4f5c\u6570/"},"next":{"title":"\u5356\u6728\u5934\u5757","permalink":"/HXLoLi/docs/\u5237\u9898\u65e5\u5fd7/\u529b\u6263/\u672a\u5206\u7c7b\u9898\u89e3/\u5356\u6728\u5934\u5757/"}}');var r=e(74848),s=e(28453);const a={},d="2151. \u57fa\u4e8e\u9648\u8ff0\u7edf\u8ba1\u6700\u591a\u597d\u4eba\u6570",m={},j=[{value:"\u793a\u4f8b 1\uff1a",id:"\u793a\u4f8b-1",level:2},{value:"\u793a\u4f8b 2\uff1a",id:"\u793a\u4f8b-2",level:2},{value:"\u6211\u7684\u4ee3\u7801",id:"\u6211\u7684\u4ee3\u7801",level:2}];function o(n){const t={br:"br",code:"code",h1:"h1",h2:"h2",header:"header",li:"li",p:"p",pre:"pre",ul:"ul",...(0,s.R)(),...n.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(t.header,{children:(0,r.jsx)(t.h1,{id:"2151-\u57fa\u4e8e\u9648\u8ff0\u7edf\u8ba1\u6700\u591a\u597d\u4eba\u6570",children:"2151. \u57fa\u4e8e\u9648\u8ff0\u7edf\u8ba1\u6700\u591a\u597d\u4eba\u6570"})}),"\n",(0,r.jsx)(t.p,{children:"\u7b2c 277 \u573a\u5468\u8d5b\nQ4\n1980 \u56f0\u96be"}),"\n",(0,r.jsx)(t.p,{children:"\u6e38\u620f\u4e2d\u5b58\u5728\u4e24\u79cd\u89d2\u8272\uff1a"}),"\n",(0,r.jsxs)(t.ul,{children:["\n",(0,r.jsxs)(t.li,{children:["\n",(0,r.jsx)(t.p,{children:"\u597d\u4eba\uff1a\u8be5\u89d2\u8272\u53ea\u8bf4\u771f\u8bdd\u3002"}),"\n"]}),"\n",(0,r.jsxs)(t.li,{children:["\n",(0,r.jsx)(t.p,{children:"\u574f\u4eba\uff1a\u8be5\u89d2\u8272\u53ef\u80fd\u8bf4\u771f\u8bdd\uff0c\u4e5f\u53ef\u80fd\u8bf4\u5047\u8bdd\u3002"}),"\n"]}),"\n",(0,r.jsxs)(t.li,{children:["\n",(0,r.jsx)(t.p,{children:"\u7ed9\u4f60\u4e00\u4e2a\u4e0b\u6807\u4ece 0 \u5f00\u59cb\u7684\u4e8c\u7ef4\u6574\u6570\u6570\u7ec4 statements \uff0c\u5927\u5c0f\u4e3a n x n \uff0c\u8868\u793a n \u4e2a\u73a9\u5bb6\u5bf9\u5f7c\u6b64\u89d2\u8272\u7684\u9648\u8ff0\u3002\u5177\u4f53\u6765\u8bf4\uff0cstatements[i][j] \u53ef\u4ee5\u662f\u4e0b\u8ff0\u503c\u4e4b\u4e00\uff1a"}),"\n"]}),"\n",(0,r.jsxs)(t.li,{children:["\n",(0,r.jsx)(t.p,{children:"0 \u8868\u793a i \u7684\u9648\u8ff0\u8ba4\u4e3a j \u662f \u574f\u4eba \u3002"}),"\n"]}),"\n",(0,r.jsxs)(t.li,{children:["\n",(0,r.jsx)(t.p,{children:"1 \u8868\u793a i \u7684\u9648\u8ff0\u8ba4\u4e3a j \u662f \u597d\u4eba \u3002"}),"\n"]}),"\n",(0,r.jsxs)(t.li,{children:["\n",(0,r.jsx)(t.p,{children:"2 \u8868\u793a i \u6ca1\u6709\u5bf9 j \u4f5c\u51fa\u9648\u8ff0\u3002\n\u53e6\u5916\uff0c\u73a9\u5bb6\u4e0d\u4f1a\u5bf9\u81ea\u5df1\u8fdb\u884c\u9648\u8ff0\u3002\u5f62\u5f0f\u4e0a\uff0c\u5bf9\u6240\u6709 0 <= i < n \uff0c\u90fd\u6709 statements[i][i] = 2 \u3002"}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(t.p,{children:"\u6839\u636e\u8fd9 n \u4e2a\u73a9\u5bb6\u7684\u9648\u8ff0\uff0c\u8fd4\u56de\u53ef\u4ee5\u8ba4\u4e3a\u662f \u597d\u4eba \u7684 \u6700\u5927 \u6570\u76ee\u3002"}),"\n",(0,r.jsx)(t.h2,{id:"\u793a\u4f8b-1",children:"\u793a\u4f8b 1\uff1a"}),"\n",(0,r.jsxs)(t.p,{children:["\u8f93\u5165\uff1astatements = [[2,1,2],[1,2,2],[2,0,2]]",(0,r.jsx)(t.br,{}),"\n\u8f93\u51fa\uff1a2",(0,r.jsx)(t.br,{}),"\n\u89e3\u91ca\uff1a\u6bcf\u4e2a\u4eba\u90fd\u505a\u4e00\u6761\u9648\u8ff0\u3002",(0,r.jsx)(t.br,{})]}),"\n",(0,r.jsxs)(t.ul,{children:["\n",(0,r.jsx)(t.li,{children:"0 \u8ba4\u4e3a 1 \u662f\u597d\u4eba\u3002"}),"\n",(0,r.jsx)(t.li,{children:"1 \u8ba4\u4e3a 0 \u662f\u597d\u4eba\u3002"}),"\n",(0,r.jsx)(t.li,{children:"2 \u8ba4\u4e3a 1 \u662f\u574f\u4eba\u3002\n\u4ee5 2 \u4e3a\u7a81\u7834\u70b9\u3002"}),"\n",(0,r.jsxs)(t.li,{children:["\u5047\u8bbe 2 \u662f\u4e00\u4e2a\u597d\u4eba\uff1a\n",(0,r.jsxs)(t.ul,{children:["\n",(0,r.jsx)(t.li,{children:"\u57fa\u4e8e 2 \u7684\u9648\u8ff0\uff0c1 \u662f\u574f\u4eba\u3002"}),"\n",(0,r.jsx)(t.li,{children:"\u90a3\u4e48\u53ef\u4ee5\u786e\u8ba4 1 \u662f\u574f\u4eba\uff0c2 \u662f\u597d\u4eba\u3002"}),"\n",(0,r.jsxs)(t.li,{children:["\u57fa\u4e8e 1 \u7684\u9648\u8ff0\uff0c\u7531\u4e8e 1 \u662f\u574f\u4eba\uff0c\u90a3\u4e48\u4ed6\u5728\u9648\u8ff0\u65f6\u53ef\u80fd\uff1a\n",(0,r.jsxs)(t.ul,{children:["\n",(0,r.jsx)(t.li,{children:"\u8bf4\u771f\u8bdd\u3002\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\u4f1a\u51fa\u73b0\u77db\u76fe\uff0c\u6240\u4ee5\u5047\u8bbe\u65e0\u6548\u3002"}),"\n",(0,r.jsx)(t.li,{children:"\u8bf4\u5047\u8bdd\u3002\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c0 \u4e5f\u662f\u574f\u4eba\u5e76\u4e14\u5728\u9648\u8ff0\u65f6\u8bf4\u5047\u8bdd\u3002"}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(t.li,{children:"\u5728\u8ba4\u4e3a 2 \u662f\u597d\u4eba\u7684\u60c5\u51b5\u4e0b\uff0c\u8fd9\u7ec4\u73a9\u5bb6\u4e2d\u53ea\u6709\u4e00\u4e2a\u597d\u4eba\u3002"}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(t.li,{children:["\u5047\u8bbe 2 \u662f\u4e00\u4e2a\u574f\u4eba\uff1a\n",(0,r.jsxs)(t.ul,{children:["\n",(0,r.jsxs)(t.li,{children:["\u57fa\u4e8e 2 \u7684\u9648\u8ff0\uff0c\u7531\u4e8e 2 \u662f\u574f\u4eba\uff0c\u90a3\u4e48\u4ed6\u5728\u9648\u8ff0\u65f6\u53ef\u80fd\uff1a\n",(0,r.jsxs)(t.ul,{children:["\n",(0,r.jsxs)(t.li,{children:["\u8bf4\u771f\u8bdd\u3002\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c0 \u548c 1 \u90fd\u662f\u574f\u4eba\u3002\n",(0,r.jsxs)(t.ul,{children:["\n",(0,r.jsx)(t.li,{children:"\u5728\u8ba4\u4e3a 2 \u662f\u574f\u4eba\u4f46\u8bf4\u771f\u8bdd\u7684\u60c5\u51b5\u4e0b\uff0c\u8fd9\u7ec4\u73a9\u5bb6\u4e2d\u6ca1\u6709\u4e00\u4e2a\u597d\u4eba\u3002"}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(t.li,{children:["\u8bf4\u5047\u8bdd\u3002\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c1 \u662f\u597d\u4eba\u3002\n",(0,r.jsxs)(t.ul,{children:["\n",(0,r.jsx)(t.li,{children:"\u7531\u4e8e 1 \u662f\u597d\u4eba\uff0c0 \u4e5f\u662f\u597d\u4eba\u3002"}),"\n",(0,r.jsxs)(t.li,{children:["\u5728\u8ba4\u4e3a 2 \u662f\u574f\u4eba\u4e14\u8bf4\u5047\u8bdd\u7684\u60c5\u51b5\u4e0b\uff0c\u8fd9\u7ec4\u73a9\u5bb6\u4e2d\u6709\u4e24\u4e2a\u597d\u4eba\u3002\n\u5728\u6700\u4f73\u60c5\u51b5\u4e0b\uff0c\u81f3\u591a\u6709\u4e24\u4e2a\u597d\u4eba\uff0c\u6240\u4ee5\u8fd4\u56de 2 \u3002",(0,r.jsx)(t.br,{}),"\n\u6ce8\u610f\uff0c\u80fd\u5f97\u5230\u6b64\u7ed3\u8bba\u7684\u65b9\u6cd5\u4e0d\u6b62\u4e00\u79cd\u3002",(0,r.jsx)(t.br,{})]}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(t.h2,{id:"\u793a\u4f8b-2",children:"\u793a\u4f8b 2\uff1a"}),"\n",(0,r.jsxs)(t.p,{children:["\u8f93\u5165\uff1astatements = [[2,0],[0,2]]",(0,r.jsx)(t.br,{}),"\n\u8f93\u51fa\uff1a1",(0,r.jsx)(t.br,{}),"\n\u89e3\u91ca\uff1a\u6bcf\u4e2a\u4eba\u90fd\u505a\u4e00\u6761\u9648\u8ff0\u3002",(0,r.jsx)(t.br,{})]}),"\n",(0,r.jsxs)(t.ul,{children:["\n",(0,r.jsx)(t.li,{children:"0 \u8ba4\u4e3a 1 \u662f\u574f\u4eba\u3002"}),"\n",(0,r.jsx)(t.li,{children:"1 \u8ba4\u4e3a 0 \u662f\u574f\u4eba\u3002\n\u4ee5 0 \u4e3a\u7a81\u7834\u70b9\u3002"}),"\n",(0,r.jsxs)(t.li,{children:["\u5047\u8bbe 0 \u662f\u4e00\u4e2a\u597d\u4eba\uff1a\n",(0,r.jsxs)(t.ul,{children:["\n",(0,r.jsx)(t.li,{children:"\u57fa\u4e8e\u4e0e 0 \u7684\u9648\u8ff0\uff0c1 \u662f\u574f\u4eba\u5e76\u8bf4\u5047\u8bdd\u3002"}),"\n",(0,r.jsx)(t.li,{children:"\u5728\u8ba4\u4e3a 0 \u662f\u597d\u4eba\u7684\u60c5\u51b5\u4e0b\uff0c\u8fd9\u7ec4\u73a9\u5bb6\u4e2d\u53ea\u6709\u4e00\u4e2a\u597d\u4eba\u3002"}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(t.li,{children:["\u5047\u8bbe 0 \u662f\u4e00\u4e2a\u574f\u4eba\uff1a\n",(0,r.jsxs)(t.ul,{children:["\n",(0,r.jsxs)(t.li,{children:["\u57fa\u4e8e 0 \u7684\u9648\u8ff0\uff0c\u7531\u4e8e 0 \u662f\u574f\u4eba\uff0c\u90a3\u4e48\u4ed6\u5728\u9648\u8ff0\u65f6\u53ef\u80fd\uff1a\n",(0,r.jsxs)(t.ul,{children:["\n",(0,r.jsxs)(t.li,{children:["\u8bf4\u771f\u8bdd\u3002\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c0 \u548c 1 \u90fd\u662f\u574f\u4eba\u3002\n",(0,r.jsxs)(t.ul,{children:["\n",(0,r.jsx)(t.li,{children:"\u5728\u8ba4\u4e3a 0 \u662f\u574f\u4eba\u4f46\u8bf4\u771f\u8bdd\u7684\u60c5\u51b5\u4e0b\uff0c\u8fd9\u7ec4\u73a9\u5bb6\u4e2d\u6ca1\u6709\u4e00\u4e2a\u597d\u4eba\u3002"}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(t.li,{children:["\u8bf4\u5047\u8bdd\u3002\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c1 \u662f\u597d\u4eba\u3002\n",(0,r.jsxs)(t.ul,{children:["\n",(0,r.jsxs)(t.li,{children:["\u5728\u8ba4\u4e3a 0 \u662f\u574f\u4eba\u4e14\u8bf4\u5047\u8bdd\u7684\u60c5\u51b5\u4e0b\uff0c\u8fd9\u7ec4\u73a9\u5bb6\u4e2d\u53ea\u6709\u4e00\u4e2a\u597d\u4eba\u3002\n\u5728\u6700\u4f73\u60c5\u51b5\u4e0b\uff0c\u81f3\u591a\u6709\u4e00\u4e2a\u597d\u4eba\uff0c\u6240\u4ee5\u8fd4\u56de 1 \u3002 ",(0,r.jsx)(t.br,{}),"\n\u6ce8\u610f\uff0c\u80fd\u5f97\u5230\u6b64\u7ed3\u8bba\u7684\u65b9\u6cd5\u4e0d\u6b62\u4e00\u79cd\u3002",(0,r.jsx)(t.br,{})]}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(t.h1,{id:"\u9898\u89e3",children:"\u9898\u89e3"}),"\n",(0,r.jsx)(t.h2,{id:"\u6211\u7684\u4ee3\u7801",children:"\u6211\u7684\u4ee3\u7801"}),"\n",(0,r.jsx)(t.p,{children:"\u603b\u662f\u5dee\u70b9..."}),"\n",(0,r.jsx)(t.p,{children:"\u6709\u7a7a\u518d\u5199qwq.."}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-C++",children:"class Solution {\npublic:\n    // \u4e0d\u80fd\u8d2a\u5fc3\u5417? \u4e0d\u80fd \u56e0\u4e3a\u90fd\u8bf4\u574f\u4eba\u7684\u60c5\u51b5\u4e0b, \u81f3\u5c11\u4f1a\u67091\u4e2a\u597d\u4eba, \u56e0\u4e3a\u6c42\u7684\u662f\u597d\u4eba\u7684\u6700\u5927\u6570\u91cf\n    int maximumGood(vector<vector<int>>& statements) { // 0\u574f 1\u597d 2\u7565\n        int res = 0;\n        int tmp_max = 0;\n\n        // \u5047\u8bbe\u662fi\u597d\u4eba / \u5047\u8bbe\u662f\u574f\u4eba\n        map<int, int> arr;  // \u4eba - \u5f53\u524d\u5c5e\u6027\n                            // \u5982\u679c\u4e0d\u7b26\u903b\u8f91\u5c31return\u56de\u6eaf\n        function<void(int, int)> dfs =\n        [&](int i, int tag) {\n            if (i >= (int)statements.size()) {\n                res = max(tmp_max, res);\n                return;\n            }\n\n            // i \u662f\u597d\u4eba\n            arr.insert(make_pair(i + 1, 1)); // 0\u574f 1\u597d\n            map<int, int> tmp_map = arr;\n            // \u628ai\u89c2\u70b9\u4e0b\u7684\u5168\u90e8\u5185\u5bb9\u8fdb\u884c\u6dfb\u52a0\n            // \u5982\u679c\u662f\u597d\u4eba, \u8981\u4fdd\u8bc1\u4e4b\u524d\u8bf4\u7684\u4e5f\u662f\u597d\u4eba\n            // \u5982\u679c\u662f\u574f\u4eba, \u4e4b\u524d\u4e0d\u80fd\u88ab\u8ba4\u4e3a\u662f\u597d\u4eba\n            if (i >= 0)\n            for (int j = 0; j < statements[i].size(); ++j) {\n                if (statements[i][j] == 2)\n                    continue;\n                \n                auto it = arr.find(j);\n                // \u4e0d\u7b26\u5408\u903b\u8f91:\n                // 1. \u597d\u4eba\u8bf4 j \u662f \u574f\u4eba, \u4f46\u524d\u9762\u5047\u8bbe\u5b83\u662f\u597d\u4eba\n                // 2. \u597d\u4eba\u8bf4 j \u662f \u597d\u4eba, \u4f46\u524d\u9762\u5047\u8bbe\u5b83\u662f\u574f\u4eba\n                if (it == arr.end()) {\n                    // \u89c2\u70b9\u4e0d\u5b58\u5728, \u6dfb\u52a0\u89c2\u70b9\n                    tmp_map.insert(make_pair(j, statements[i][j]));\n                }\n                else\n                    if (it->second != statements[i][j]) { // !0\n                        // \u5b83\u8bf4it\u662f\u574f\u4eba, \u4f46\u662f\u4e4b\u524d\u5df2\u7ecf\u5047\u8bbeit\u662f\u597d\u4eba\u4e86\n                        // \u6240\u4ee5\u4e0d\u6210\u7acb\n                        return;\n                    }\n            }\n            tmp_map.swap(arr);\n            ++tmp_max;\n            dfs(i + 1, 1);\n            --tmp_max;\n            tmp_map.swap(arr);\n            arr.erase(i + 1);\n\n            // i \u662f\u574f\u4eba\n            arr.insert(make_pair(i + 1, 0)); // 0\u574f 1\u597d\n            dfs(i + 1, 0);\n            arr.erase(i + 1);\n        };\n\n        dfs(-1, -1);\n\n        return res;\n    }\n};\n"})}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-C++",children:"class Solution {\n    bool findVector(vector<bool>& runed) {\n        int n = runed.size();\n        for (int i = 0; i < n; ++i)\n            if (!runed[i])\n                return false;\n        return true;\n    }\n\n    // void fun(int i, map<int, int>& arr, vector<vector<int>>& statements, vector<bool>& runed, function<void(int, int)>& dfs) {\n    //         // \u5047\u8bbe i \u662f \u597d\u4eba\n    //         map<int, int> tmp_map = arr;\n    //         arr.insert(make_pair(i, 1)); // i \u662f\u597d\u4eba\n    //         runed[i] = 1;\n    //         for (int j = 0; j < statements[i].size(); ++j) {\n    //             if (statements[i][j] == 2 || arr.find(j) == arr.end())\n    //                 continue;\n\n    //             arr.insert(make_pair(j, statements[i][j]));\n    //         }\n\n    //         for (int j = 0; j < statements[i].size(); ++j) {\n    //             if (runed[j])\n    //                 continue;\n\n    //             auto it = arr.find(j);\n    //             if (it != arr.end()) {\n    //                 do { // \u5047\u8bbe i \u662f\u597d\u4eba\n    //                     if (statements[i][j] != 2 && it->second != statements[i][j])\n    //                         return; // \u4e0d\u7b26\u5408\u903b\u8f91\n\n    //                     tmp_max += it->second;\n    //                     runed[j] = 1;\n    //                     dfs(j, it->second);\n    //                     runed[j] = 0;\n    //                     tmp_max -= it->second;\n    //                 } while (0);\n\n    //                 // i \u662f\u574f\u4eba\n    //                 tmp_max += it->second;\n    //                 runed[j] = 1;\n    //                 dfs(j, it->second);\n    //                 runed[j] = 0;\n    //                 tmp_max -= it->second;\n    //             } else {\n    //                 fun(j, arr, statements, runed, dfs);\n    //             }\n    //         }\n    //         runed[i] = 0;\n    //         arr.swap(tmp_map);\n    //     };\n\npublic:\n    // \u4e0d\u80fd\u8d2a\u5fc3\u5417? \u4e0d\u80fd \u56e0\u4e3a\u90fd\u8bf4\u574f\u4eba\u7684\u60c5\u51b5\u4e0b, \u81f3\u5c11\u4f1a\u67091\u4e2a\u597d\u4eba, \u56e0\u4e3a\u6c42\u7684\u662f\u597d\u4eba\u7684\u6700\u5927\u6570\u91cf\n    int maximumGood(vector<vector<int>>& statements) { // 0\u574f 1\u597d 2\u7565\n        int res = 0;\n        int tmp_max = 0;\n\n        vector<bool> runed(statements.size());\n        // \u5047\u8bbe\u662fi\u597d\u4eba / \u5047\u8bbe\u662f\u574f\u4eba\n        map<int, int> arr;  // \u4eba - \u5f53\u524d\u5c5e\u6027\n                            // \u5982\u679c\u4e0d\u7b26\u903b\u8f91\u5c31return\u56de\u6eaf\n        function<void(int, int)> dfs =\n        [&](int i, int tag) {\n            if ( findVector(runed) ) {\n                res = max(tmp_max, res);\n                return;\n            }\n            \n            for (int j = 0; j < statements[i].size(); ++j) {\n                if (runed[j])\n                    continue;\n\n                auto it = arr.find(j);\n                if (it != arr.end()) {\n                    if (tag && statements[i][j] != 2 && it->second != statements[i][j])\n                        return; // \u4e0d\u7b26\u5408\u903b\u8f91\n\n                    tmp_max += it->second;\n                    runed[j] = 1;\n                    dfs(j, it->second);\n                    runed[j] = 0;\n                    tmp_max -= it->second;\n                } else {\n                    // fun(j, arr, statements, runed, dfs);\n                    runed[j] = 1;\n                    tmp_max += 1;\n                    arr.insert(make_pair(j, 1));\n                    dfs(j, 1);\n                    arr.erase(j);\n                    tmp_max -= 1;\n                    dfs(j, 0);\n                    runed[j] = 0;\n                    return;\n                }\n            }\n            \n        };\n\n        [&]() {\n            for (int i = 0; i < statements.size(); ++i) {\n                arr = map<int, int>();\n                arr.insert(make_pair(i, 1)); // i \u662f\u597d\u4eba\n                runed[i] = 1;\n                for (int j = 0; j < statements[i].size(); ++j) {\n                    if (statements[i][j] == 2)\n                        continue;\n\n                    arr.insert(make_pair(j, statements[i][j]));\n                }\n\n                for (int j = 0; j < statements[i].size(); ++j) {\n                    if (runed[j])\n                        continue;\n\n                    tmp_max += arr.find(j)->second;\n                    dfs(j, arr.find(j)->second);\n                    tmp_max -= arr.find(j)->second;\n                }\n                runed[i] = 0;\n            }\n        }();\n\n        return res;\n    }\n};\n"})}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-C++",children:'class Solution {\n    bool findVector(vector<bool>& runed) {\n        int n = runed.size();\n        for (int i = 0; i < n; ++i)\n            if (!runed[i])\n                return false;\n        return true;\n    }\n// [[2,2,2],[2,2,2],[2,2,2]]\npublic:\n    // \u4e0d\u80fd\u8d2a\u5fc3\u5417? \u4e0d\u80fd \u56e0\u4e3a\u90fd\u8bf4\u574f\u4eba\u7684\u60c5\u51b5\u4e0b, \u81f3\u5c11\u4f1a\u67091\u4e2a\u597d\u4eba, \u56e0\u4e3a\u6c42\u7684\u662f\u597d\u4eba\u7684\u6700\u5927\u6570\u91cf\n    int maximumGood(vector<vector<int>>& statements) { // 0\u574f 1\u597d 2\u7565\n        int res = 0;\n        int tmp_max = 0;\n\n        vector<bool> runed(statements.size());\n        // \u5047\u8bbe\u662fi\u597d\u4eba / \u5047\u8bbe\u662f\u574f\u4eba\n        map<int, int> arr;  // \u4eba - \u5f53\u524d\u5c5e\u6027\n                            // \u5982\u679c\u4e0d\u7b26\u903b\u8f91\u5c31return\u56de\u6eaf\n        function<void(int, int)> dfs =\n        [&](int i, int tag) {\n            function<void(int)> fun =\n            [&](int j) {\n                if (j >= (int)statements.size())\n                    return;\n                printf(">>> j: %d |  %d\\n", j, tmp_max);\n                // \u5047\u8bbe j \u662f \u597d\u4eba\n                map<int, int> tmp_map = arr;\n                for (int k = 0; k < statements[j].size(); ++k) {\n                    if (statements[j][k] == 2)\n                        continue;\n                    \n                    auto it = arr.find(k);\n                    if (it != arr.end() && it->second != statements[j][k])\n                        goto B; // \u4e0d\u7b26\u5408\u903b\u8f91\n\n                    arr.insert(make_pair(j, statements[j][k]));         \n                }\n\n                for (int k = 0; k < statements[j].size(); ++k) {\n                    if (runed[k])\n                        continue;\n\n                    auto it = arr.find(k);\n                    if (it != arr.end()) {\n                        runed[k] = 1;\n                        tmp_max += it->second;\n                        dfs(k, it->second);\n                        tmp_max -= it->second;\n                        runed[k] = 0;\n                    }\n                    else {\n                        runed[k] = 1;\n                        fun(k);\n                        runed[k] = 0;\n                    }\n                }\n\n                B:\n                arr.swap(tmp_map);\n                for (int k = 0; k < statements[j].size(); ++k) {\n                    if (runed[k])\n                        continue;\n                    \n                    runed[k] = 1;\n                    dfs(k, 0);\n                    runed[k] = 0;\n                }\n                printf("j: %d |  %d\\n", j, tmp_max);\n            };\n////////////////////////////////////////////////////////////////////\n            if ( findVector(runed) ) {\n                res = max(tmp_max, res);\n                return;\n            }\n            printf("i: %d  |  %d\\n", i, tmp_max);\n            for (int j = 0; j < statements[i].size(); ++j) {\n                if (runed[j])\n                    continue;\n\n                auto it = arr.find(j);\n                if (it != arr.end()) {\n                    if (tag && statements[i][j] != 2 && it->second != statements[i][j])\n                        return; // \u4e0d\u7b26\u5408\u903b\u8f91\n\n                    tmp_max += it->second;\n                    runed[j] = 1;\n                    printf("++++");\n                    int op = it->second;\n                    dfs(j, op);\n                    runed[j] = 0;\n                    printf("HHHH");\n                    tmp_max -= op;\n                    printf("$$$$");\n                }\n                else {\n                    runed[j] = 1;\n                    fun(j);\n                    runed[j] = 0;\n                }\n            }\n\n            printf("///");\n        };\n\n        [&]() {\n            for (int i = 0; i < statements.size(); ++i) {\n                arr = map<int, int>();\n                arr.insert(make_pair(i, 1)); // i \u662f\u597d\u4eba\n                runed[i] = 1;\n                tmp_max += 1;\n                for (int j = 0; j < statements[i].size(); ++j) {\n                    if (statements[i][j] == 2)\n                        continue;\n\n                    arr.insert(make_pair(j, statements[i][j]));\n                }\n\n                for (int j = 0; j < statements[i].size(); ++j) {\n                    if (runed[j])\n                        continue;\n\n                    printf("----");\n                    tmp_max += arr.find(j)->second;\n                    dfs(j, arr.find(j)->second);\n                    tmp_max -= arr.find(j)->second;\n                    printf("!!!");\n                }\n                tmp_max -= 1;\n                runed[i] = 0;\n            }\n        }();\n\n        return res;\n    }\n};\n'})}),"\n",(0,r.jsx)(t.p,{children:"\u5c31\u5dee\u8be5\u6b7b\u7684 2 \u7684\u60c5\u51b5!"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-C++",children:'class Solution {\n    bool findVector(vector<bool>& runed) {\n        int n = runed.size();\n        for (int i = 0; i < n; ++i)\n            if (!runed[i])\n                return false;\n        return true;\n    }\n// [[2,2,2],[2,2,2],[2,2,2]]\npublic:\n    // \u4e0d\u80fd\u8d2a\u5fc3\u5417? \u4e0d\u80fd \u56e0\u4e3a\u90fd\u8bf4\u574f\u4eba\u7684\u60c5\u51b5\u4e0b, \u81f3\u5c11\u4f1a\u67091\u4e2a\u597d\u4eba, \u56e0\u4e3a\u6c42\u7684\u662f\u597d\u4eba\u7684\u6700\u5927\u6570\u91cf\n    int maximumGood(vector<vector<int>>& statements) { // 0\u574f 1\u597d 2\u7565\n        int res = 0;\n        int tmp_max = 0;\n\n        vector<bool> runed(statements.size());\n        // \u5047\u8bbe\u662fi\u597d\u4eba / \u5047\u8bbe\u662f\u574f\u4eba\n        map<int, int> arr;  // \u4eba - \u5f53\u524d\u5c5e\u6027\n                            // \u5982\u679c\u4e0d\u7b26\u903b\u8f91\u5c31return\u56de\u6eaf\n        function<void(int, int)> dfs =\n        [&](int i, int tag) {\n            function<void(int)> fun =\n            [&](int j) {\n                \n                printf(">>> j: %d |  %d\\n", j, tmp_max);\n                // \u5047\u8bbe j \u662f \u597d\u4eba\n                map<int, int> tmp_map = arr;\n                arr.insert(make_pair(j, 1)); // j \u662f\u597d\u4eba\n                tmp_max += 1;\n                for (int k = 0; k < statements[j].size(); ++k) {\n                    if (statements[j][k] == 2)\n                        continue;\n                    \n                    auto it = arr.find(k);\n                    if (it != arr.end() && it->second != statements[j][k])\n                        goto B; // \u4e0d\u7b26\u5408\u903b\u8f91\n\n                    arr.insert(make_pair(k, statements[j][k]));         \n                }\n\n                for (int k = 0; k < statements[j].size(); ++k) {\n                    if (runed[k])\n                        continue;\n\n                    auto it = arr.find(k);\n                    if (it != arr.end()) {\n                        runed[k] = 1;\n                        tmp_max += it->second;\n                        dfs(k, it->second);\n                        tmp_max -= it->second;\n                        runed[k] = 0;\n                    }\n                    else {\n                        runed[k] = 1;\n                        fun(k);\n                        runed[k] = 0;\n                    }\n                }\n\n                B: // \u574f\u4eba\n                tmp_max -= 1;\n                arr.swap(tmp_map);\n                for (int k = 0; k < statements[j].size(); ++k) {\n                    if (runed[k])\n                        continue;\n                    \n                    runed[k] = 1;\n                    dfs(k, 0);\n                    runed[k] = 0;\n                }\n                printf("j: %d |  %d\\n", j, tmp_max);\n            };\n////////////////////////////////////////////////////////////////////\n            if ( findVector(runed) ) {\n                res = max(tmp_max, res);\n                return;\n            }\n            printf("i: %d  |  %d\\n", i, tmp_max);\n            for (int j = 0; j < statements[i].size(); ++j) {\n                if (runed[j])\n                    continue;\n\n                auto it = arr.find(j);\n                if (it != arr.end()) {\n                    if (tag && statements[i][j] != 2 && it->second != statements[i][j])\n                        return; // \u4e0d\u7b26\u5408\u903b\u8f91\n\n                    tmp_max += it->second;\n                    runed[j] = 1;\n                    // printf("++++");\n                    int op = it->second;\n                    dfs(j, op);\n                    runed[j] = 0;\n                    // printf("HHHH");\n                    tmp_max -= op;\n                    // printf("$$$$");\n                }\n                else {\n                    runed[j] = 1;\n                    fun(j);\n                    runed[j] = 0;\n                }\n            }\n\n            // printf("///");\n        };\n\n        [&]() {\n            for (int i = 0; i < statements.size(); ++i) {\n                arr = map<int, int>();\n                arr.insert(make_pair(i, 1)); // i \u662f\u597d\u4eba\n                runed[i] = 1;\n                tmp_max += 1;\n                for (int j = 0; j < statements[i].size(); ++j) {\n                    if (statements[i][j] == 2)\n                        continue;\n\n                    arr.insert(make_pair(j, statements[i][j]));\n                }\n\n                for (int j = 0; j < statements[i].size(); ++j) {\n                    if (runed[j])\n                        continue;\n\n                    // printf("----");\n                    tmp_max += arr.find(j)->second;\n                    dfs(j, arr.find(j)->second);\n                    tmp_max -= arr.find(j)->second;\n                    // printf("!!!");\n                }\n                tmp_max -= 1;\n                runed[i] = 0;\n            }\n        }();\n\n        return res;\n    }\n};\n'})}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-C++",children:"class Solution {\n    bool findVector(vector<bool>& runed) {\n        for (int i = 0; i < runed.size(); ++i)\n            if (!runed[i])\n                return false;\n        return true;\n    }\npublic:\n    int maximumGood(vector<vector<int>>& statements) {\n        vector<int> arr;\n        vector<bool> runed(statements.size());\n        int res = 0;\n        int tmp_max = 0;\n\n        function<void(int, int)> dfs =\n        [&](int i, int tag) {\n            if ( findVector(runed) ) {\n                // res = max(res, tmp_max);\n                int _tmp = 0;\n                for (int& it : arr)\n                    if (it == 1)\n                        ++_tmp;\n                res = max(res, _tmp);\n                return;\n            }\n\n            if (tag == 1 || tag == 2) { // \u597d\u4eba\n                for (int j = 0; j < statements[i].size(); ++j) {\n                    if (runed[j] || i == j)\n                        continue;\n                    \n                    // \u4e0d\u662f\u672a\u77e5, \u4e14 \u89c2\u70b9\u4e0d\u7b26\u5408\u903b\u8f91\n                    if (statements[i][j] != 2 && arr[j] != statements[i][j]) {\n                        return;\n                    }\n\n                    runed[j] = true;\n                    // int tmp = arr[j];\n                    // arr[j] = (statements[i][j] == 2 ? 1 : statements[i][j]);\n                    dfs(j, (statements[i][j] == 2 ? 1 : statements[i][j]));\n                    // arr[j] = tmp;\n                    runed[j] = false;\n                }\n            }\n\n            if (tag == 0 || tag == 2) { // \u574f\u4eba\n                return;\n            }\n        };\n\n        for (int i = 0; i < statements.size(); ++i) {\n            arr = vector<int>(statements.size());\n            for (int j = 0; j < statements[i].size(); ++j)\n                arr[j] = statements[i][j];\n            arr[i] = 1;\n            \n            runed[i] = true;\n            dfs(i, 1);\n            runed[i] = false;\n        }\n\n        return res;\n    }\n};\n"})})]})}function c(n={}){const{wrapper:t}={...(0,s.R)(),...n.components};return t?(0,r.jsx)(t,{...n,children:(0,r.jsx)(o,{...n})}):o(n)}}}]);