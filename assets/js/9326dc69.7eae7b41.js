"use strict";(self.webpackChunkhx_loli=self.webpackChunkhx_loli||[]).push([[59135],{28453:(n,e,t)=>{t.d(e,{R:()=>d,x:()=>a});var s=t(96540);const r={},i=s.createContext(r);function d(n){const e=s.useContext(i);return s.useMemo((function(){return"function"==typeof n?n(e):{...e,...n}}),[e,n])}function a(n){let e;return e=n.disableParentContext?"function"==typeof n.components?n.components(r):n.components||r:d(n.components),s.createElement(i.Provider,{value:e},n.children)}},93116:(n,e,t)=>{t.r(e),t.d(e,{assets:()=>o,contentTitle:()=>a,default:()=>u,frontMatter:()=>d,metadata:()=>s,toc:()=>c});const s=JSON.parse('{"id":"\u7a0b\u5e8f\u8bed\u8a00/C++/\u73b0\u4ee3C++/\u73b0\u4ee3C++\u9879\u76ee\u5b9e\u6218/\u4ec0\u4e48\u60c5\u51b5\u4e0b\u9700\u8981\u5c01\u88c5get\u548cset/index","title":"\u4ec0\u4e48\u60c5\u51b5\u4e0b\u9700\u8981\u5c01\u88c5get/set","description":"\u4e4b\u524d\u6211\u4eec\u5728\u4e8c\u3001RAII\u4e0e\u667a\u80fd\u6307\u9488\u306e\u300e2.2.1.2 \u4e0d\u53d8\u6027: \u8bf7\u52ff\u6ee5\u7528\u5c01\u88c5\u300f\u4e2d\u63d0\u5230\u4ec5\u5f53\u51fa\u73b0\u201c\u4fee\u6539\u4e00\u4e2a\u6210\u5458\u65f6\uff0c\u5176\u4ed6\u4e5f\u6210\u5458\u8981\u88ab\u4fee\u6539\uff0c\u5426\u5219\u51fa\u9519\u201d\u7684\u73b0\u8c61\u65f6\uff0c\u624d\u9700\u8981getter/setter\u5c01\u88c5\u3002","source":"@site/docs/002-\u7a0b\u5e8f\u8bed\u8a00/001-C++/003-\u73b0\u4ee3C++/003-\u73b0\u4ee3C++\u9879\u76ee\u5b9e\u6218/001-\u4ec0\u4e48\u60c5\u51b5\u4e0b\u9700\u8981\u5c01\u88c5get\u548cset/index.md","sourceDirName":"002-\u7a0b\u5e8f\u8bed\u8a00/001-C++/003-\u73b0\u4ee3C++/003-\u73b0\u4ee3C++\u9879\u76ee\u5b9e\u6218/001-\u4ec0\u4e48\u60c5\u51b5\u4e0b\u9700\u8981\u5c01\u88c5get\u548cset","slug":"/\u7a0b\u5e8f\u8bed\u8a00/C++/\u73b0\u4ee3C++/\u73b0\u4ee3C++\u9879\u76ee\u5b9e\u6218/\u4ec0\u4e48\u60c5\u51b5\u4e0b\u9700\u8981\u5c01\u88c5get\u548cset/","permalink":"/HXLoLi/docs/\u7a0b\u5e8f\u8bed\u8a00/C++/\u73b0\u4ee3C++/\u73b0\u4ee3C++\u9879\u76ee\u5b9e\u6218/\u4ec0\u4e48\u60c5\u51b5\u4e0b\u9700\u8981\u5c01\u88c5get\u548cset/","draft":false,"unlisted":false,"editUrl":"https://github.com/HengXin666/HXLoLi/edit/main/docs/002-\u7a0b\u5e8f\u8bed\u8a00/001-C++/003-\u73b0\u4ee3C++/003-\u73b0\u4ee3C++\u9879\u76ee\u5b9e\u6218/001-\u4ec0\u4e48\u60c5\u51b5\u4e0b\u9700\u8981\u5c01\u88c5get\u548cset/index.md","tags":[],"version":"current","lastUpdatedBy":"Heng_Xin_666","lastUpdatedAt":1745851959000,"frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"\u516d\u3001\u7406\u89e3\u5e38\u7528\u5e76\u884c\u7b97\u6cd5\u53ca\u5176\u5b9e\u73b0\u539f\u7406","permalink":"/HXLoLi/docs/\u7a0b\u5e8f\u8bed\u8a00/C++/\u73b0\u4ee3C++/\u9ad8\u6027\u80fd\u5e76\u884c\u7f16\u7a0b\u4e0e\u4f18\u5316/\u516d\u3001\u7406\u89e3\u5e38\u7528\u5e76\u884c\u7b97\u6cd5\u53ca\u5176\u5b9e\u73b0\u539f\u7406/"},"next":{"title":"\u5b9e\u73b0\u4e00\u4e2aJSON\u89e3\u6790\u5668","permalink":"/HXLoLi/docs/\u7a0b\u5e8f\u8bed\u8a00/C++/\u73b0\u4ee3C++/\u73b0\u4ee3C++\u9879\u76ee\u5b9e\u6218/\u5b9e\u73b0\u4e00\u4e2aJSON\u89e3\u6790\u5668/"}}');var r=t(74848),i=t(28453);const d={},a="\u4ec0\u4e48\u60c5\u51b5\u4e0b\u9700\u8981\u5c01\u88c5get/set",o={},c=[{value:"\u4e00\u3001\u5c01\u88c5get/set\u7684\u5fc5\u8981\u6027\u548c\u5e94\u7528\u573a\u666f",id:"\u4e00\u5c01\u88c5getset\u7684\u5fc5\u8981\u6027\u548c\u5e94\u7528\u573a\u666f",level:2},{value:"\u4e8c\u3001\u4e00\u6b65\u4e00\u6b65\u4f7f\u7528\u5efa\u9020\u8005\u6a21\u5f0f\u5904\u7406\u8d85\u957f\u7684\u6784\u9020\u51fd\u6570\u53c2\u6570\u5217\u8868",id:"\u4e8c\u4e00\u6b65\u4e00\u6b65\u4f7f\u7528\u5efa\u9020\u8005\u6a21\u5f0f\u5904\u7406\u8d85\u957f\u7684\u6784\u9020\u51fd\u6570\u53c2\u6570\u5217\u8868",level:2},{value:"2.1 \u6848\u4f8b",id:"21-\u6848\u4f8b",level:3},{value:"2.2 \u4f7f\u7528<code>\u5efa\u9020\u8005\u6a21\u5f0f</code>",id:"22-\u4f7f\u7528\u5efa\u9020\u8005\u6a21\u5f0f",level:3},{value:"2.3 \u4e3a\u7ba1\u7406\u8d44\u6e90\u7684\u66f4\u9ad8\u6548\u7684Builder\u6a21\u5f0f",id:"23-\u4e3a\u7ba1\u7406\u8d44\u6e90\u7684\u66f4\u9ad8\u6548\u7684builder\u6a21\u5f0f",level:3},{value:"\u4e09\u3001\u865a\u51fd\u6570\u5230\u8bbf\u95ee\u8005\u6a21\u5f0f",id:"\u4e09\u865a\u51fd\u6570\u5230\u8bbf\u95ee\u8005\u6a21\u5f0f",level:2},{value:"3.1 \u6848\u4f8b",id:"31-\u6848\u4f8b",level:3},{value:"3.2 \u91cd\u65b0\u62bd\u8c61",id:"32-\u91cd\u65b0\u62bd\u8c61",level:3},{value:"3.3 \u8bbf\u95ee\u8005\u6a21\u5f0f",id:"33-\u8bbf\u95ee\u8005\u6a21\u5f0f",level:3}];function l(n){const e={a:"a",blockquote:"blockquote",code:"code",del:"del",div:"div",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",pre:"pre",span:"span",strong:"strong",ul:"ul",...(0,i.R)(),...n.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(e.header,{children:(0,r.jsx)(e.h1,{id:"\u4ec0\u4e48\u60c5\u51b5\u4e0b\u9700\u8981\u5c01\u88c5getset",children:"\u4ec0\u4e48\u60c5\u51b5\u4e0b\u9700\u8981\u5c01\u88c5get/set"})}),"\n",(0,r.jsxs)(e.blockquote,{children:["\n",(0,r.jsxs)(e.p,{children:["\u4e4b\u524d\u6211\u4eec\u5728",(0,r.jsx)(e.a,{href:"/HXLoLi/docs/%E7%A8%8B%E5%BA%8F%E8%AF%AD%E8%A8%80/C++/%E7%8E%B0%E4%BB%A3C++/%E9%AB%98%E6%80%A7%E8%83%BD%E5%B9%B6%E8%A1%8C%E7%BC%96%E7%A8%8B%E4%B8%8E%E4%BC%98%E5%8C%96/%E4%BA%8C%E3%80%81RAII%E4%B8%8E%E6%99%BA%E8%83%BD%E6%8C%87%E9%92%88/",children:"\u4e8c\u3001RAII\u4e0e\u667a\u80fd\u6307\u9488"}),"\u306e\u300e2.2.1.2 \u4e0d\u53d8\u6027: \u8bf7\u52ff\u6ee5\u7528\u5c01\u88c5\u300f\u4e2d\u63d0\u5230",(0,r.jsx)(e.code,{children:"\u4ec5\u5f53\u51fa\u73b0\u201c\u4fee\u6539\u4e00\u4e2a\u6210\u5458\u65f6\uff0c\u5176\u4ed6\u4e5f\u6210\u5458\u8981\u88ab\u4fee\u6539\uff0c\u5426\u5219\u51fa\u9519\u201d"}),"\u7684\u73b0\u8c61\u65f6\uff0c\u624d\u9700\u8981getter/setter\u5c01\u88c5\u3002"]}),"\n"]}),"\n",(0,r.jsx)(e.p,{children:(0,r.jsx)(e.del,{children:"\u5982\u679c\u4f60\u5b66\u8fc7java, \u90a3\u4e48\u4f60\u80af\u5b9a\u7591\u60d1\u5f97\u4e0d\u5f97\u4e86, \u4f3c\u4e4e\u88ab\u5f53\u6210\u50bb\u5b50\u4e86"})}),"\n",(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.a,{href:"https://www.bilibili.com/video/BV1Sm421G7P9/",children:"\u3010C/C++\u3011\u4ec0\u4e48\u60c5\u51b5\u4e0b\u9700\u8981\u5c01\u88c5get/set"})," \u7684\u5b66\u4e60\u7b14\u8bb0!"]}),"\n"]}),"\n",(0,r.jsx)(e.p,{children:"\u5c0f\u5f6d\u8001\u5e08\u6307\u51fa\uff0c\u9762\u5411\u5bf9\u8c61\u5c01\u88c5\u7684\u610f\u4e49\u5728\u4e8e\u7ef4\u62a4\u201c\u4e0d\u53d8\u91cf\u201d\u3002get/set\u5c31\u662f\u4fdd\u8bc1\u5728\u8bbe\u7f6e\u4e00\u4e2a\u6210\u5458\u7684\u540c\u65f6\uff0c\u53e6\u4e00\u4e2a\u4e0e\u4e4b\u6709\u4f9d\u8d56\u7684\u6210\u5458\u4e5f\u80fd\u66f4\u65b0\uff0c\u76f8\u5f53\u4e8e\u5bf9set\u64cd\u4f5c\u505a\u4e86\u4e2ahook\u3002\u5982\u679c\u4f60\u7684\u7ed3\u6784\u4f53\u5b8c\u5168\u662f\u5e73\u51e1\u7c7b\u578b\uff0c\u6bcf\u4e2a\u6210\u5458\u90fd\u80fd\u968f\u610f\u5355\u72ec\u53d6\u503c\uff0c\u8bbe\u503c\uff0c\u4e92\u4e0d\u5e72\u6270\u3002\u90a3\u5c31\u6ca1\u5fc5\u8981\u8bbe\u7f6egetter/setter\u4e86\uff0c\u76f4\u63a5public\u66b4\u9732\u51fa\u6765\u5373\u53ef\u3002"}),"\n",(0,r.jsxs)(e.p,{children:["\u8fd8\u987a\u4fbf\u4ecb\u7ecd\u4e86\u6784\u9020\u51fd\u6570\u53c2\u6570\u975e\u5e38\u591a\u65f6\u7684\u89e3\u51b3\u65b9\u6848: builder\u6a21\u5f0f(",(0,r.jsx)(e.a,{href:"/HXLoLi/docs/%E8%AE%A1%E4%BD%AC%E5%B8%B8%E8%AD%98/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E5%88%9B%E5%BB%BA%E5%9E%8B%E6%A8%A1%E5%BC%8F/%E5%BB%BA%E9%80%A0%E8%80%85%E6%A8%A1%E5%BC%8F/",children:"\u5efa\u9020\u8005\u6a21\u5f0f"}),")\uff0c\u4ee5\u53caC++20\u7684\u6307\u5b9a\u521d\u59cb\u5316\u8bed\u6cd5\u3002"]}),"\n",(0,r.jsx)(e.p,{children:"\u4e5f\u4ecb\u7ecd\u4e86\u63a5\u53e3\u81c3\u80bf\u7684\u89e3\u51b3\u65b9\u6848: \u63a5\u53e3\u591a\u7ee7\u627f\u3002\u591a\u7ee7\u627f\u542b\u6709\u6210\u5458\u7684\u666e\u901a\u7c7b\u662f\u9519\u8bef\u7684\uff0c\u7cdf\u7cd5\u7684\u8bbe\u8ba1\u3002\u4f46\u662f\u63a5\u53e3\u5b8c\u5168\u53ef\u4ee5\u591a\u91cd\u7ee7\u627f\uff0c\u5373\u4f7f\u662f\u7981\u6b62\u7c7b\u591a\u7ee7\u627f\u7684Java\u4e5f\u652f\u6301\u63a5\u53e3\u7684\u591a\u7ee7\u627f\u3002\u540c\u4e00\u4e2a\u7c7b\u5f53\u7136\u53ef\u4ee5\u652f\u6301\u591a\u79cd\u63a5\u53e3\uff0c\u6bd4\u5982iostream\u5c31\u540c\u65f6\u652f\u6301istream\u548costream\u63a5\u53e3\u3002"}),"\n",(0,r.jsxs)(e.p,{children:["\u6700\u540e\uff0c\u4e5f\u4ecb\u7ecd\u4e86\u5f53\u4e00\u4e2a\u53c2\u6570\u9700\u8981\u53ef\u9009\u7684\u591a\u4e2a\u63a5\u53e3\u65f6\u7684\u89e3\u51b3\u65b9\u6848: \u5b9a\u4e49\u5171\u540c\u7684\u57fa\u7c7b\u7136\u540e",(0,r.jsx)(e.code,{children:"dynamic_cast"}),"\uff0c\u8fd8\u63d0\u51fa\u4e86",(0,r.jsx)(e.code,{children:"dynamic_cast"}),"\u7684\u66ff\u4ee3\u65b9\u6848: ",(0,r.jsx)(e.code,{children:"toDerived()"}),"\uff0c\u5728\u300a\u4ee5\u6492\u7684\u7ed3\u5408\u300b\u4e2d\u5c31\u7528\u4e86\u8fd9\u79cd\u65b9\u6848\uff0c\u4f8b\u5982",(0,r.jsx)(e.code,{children:"Entity"}),"\u662f\u5b9e\u4f53\u7c7b\uff0c\u53ef\u4ee5\u901a\u8fc7",(0,r.jsx)(e.code,{children:"Entity:toPlayer()"}),"\u83b7\u53d6\u73a9\u5bb6\u5b50\u7c7b\uff0c\u5982\u679c\u4e0d\u662f\u73a9\u5bb6\u7c7b\u5219\u8fd4\u56de",(0,r.jsx)(e.code,{children:"null"}),"\u3002\u6700\u540e\uff0c\u8fd8\u5b9e\u73b0\u4e86\u7ecf\u5178\u7684",(0,r.jsx)(e.strong,{children:"\u8bbf\u95ee\u8005\u6a21\u5f0f"}),"\uff0c\u89e3\u51b3",(0,r.jsx)(e.code,{children:"dynamic_cast"}),"\u548c",(0,r.jsx)(e.code,{children:"toDerived()"}),"\u6d41\u6d3e",(0,r.jsx)(e.strong,{children:"\u4e0d\u7b26\u5408\u5f00\u95ed\u539f\u5219"}),"\u7684\u95ee\u9898\uff0c\u8fd9\u4e0b\u5bf9\u5473\u4e86\u3002"]}),"\n",(0,r.jsx)(e.h2,{id:"\u4e00\u5c01\u88c5getset\u7684\u5fc5\u8981\u6027\u548c\u5e94\u7528\u573a\u666f",children:"\u4e00\u3001\u5c01\u88c5get/set\u7684\u5fc5\u8981\u6027\u548c\u5e94\u7528\u573a\u666f"}),"\n",(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsxs)(e.li,{children:["\n",(0,r.jsxs)(e.p,{children:["\u5bf9\u4e8e",(0,r.jsx)(e.strong,{children:"\u5e73\u51e1\u7c7b\u578b"}),"\uff0c\u53ef\u4ee5\u76f4\u63a5\u8bbf\u95ee\u6210\u5458\u800c ",(0,r.jsx)(e.strong,{children:"\u4e0d\u9700\u8981"})," get/set."]}),"\n"]}),"\n",(0,r.jsxs)(e.li,{children:["\n",(0,r.jsxs)(e.p,{children:["\u4f46\u662f\u5bf9\u4e8e",(0,r.jsx)(e.strong,{children:"\u975e\u5e73\u51e1\u7c7b\u578b"}),"\uff0c\u4fee\u6539\u4e00\u4e2a\u6210\u5458\u4f1a\u5f71\u54cd\u53e6\u4e00\u4e2a\u6210\u5458\uff0c\u9700\u8981\u4f7f\u7528get/set\u6765",(0,r.jsx)(e.strong,{children:"\u907f\u514d\u4ee3\u7801\u5197\u4f59\u548c\u975e\u6cd5\u72b6\u6001"}),"\u3002"]}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(e.p,{children:["\u5c01\u88c5get/set\u53ef\u4ee5\u4f7f\u7c7b\u7684\u72b6\u6001\u4fdd\u6301\u5408\u6cd5\u540c\u65f6\u907f\u514d\u7528\u6237\u7ed5\u8fc7set\u51fd\u6570\u5355\u72ec\u8bbe\u7f6e\u6210\u5458\u5bfc\u81f4\u51fa\u9519\u3002\u540c\u65f6\uff0c\u5bf9\u4e8e\u53ef\u80fd\u8fdb\u5165",(0,r.jsx)(e.strong,{children:"\u975e\u6cd5\u72b6\u6001"}),"\u7684\u64cd\u4f5c\uff0c\u5e94\u8be5\u5c01\u88c5\u4e3a",(0,r.jsx)(e.code,{children:"private"}),"\uff0c\u907f\u514d\u7528\u6237\u76f4\u63a5\u8c03\u7528\u3002"]}),"\n",(0,r.jsx)(e.p,{children:"\u4f8b\u5982\u4e0b\u9762\u4ee3\u7801:"}),"\n",(0,r.jsxs)(e.p,{children:["\u6211\u4eec\u4fee\u6539vector\u7684\u5927\u5c0f(setSize), \u5176",(0,r.jsx)(e.code,{children:".data()"}),"(\u5b58\u653e\u6570\u636e\u7684\u6307\u9488)\u4e5f\u4f1a\u8ddf\u7740\u6539\u53d8"]}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-C++",children:'#include <print> // C++20\n#include <vector>\n\nint main() {\n    std::vector<int> v;\n    std::println("{} {}", (void *)v.data(), v.size()); // v.getData(), v.getSize()\n    v.resize(14); // v.setSize(14)\n    std::println("{} {}", (void *)v.data(), v.size()); // v.getData(), v.getSize()\n    v.resize(16); // v.setSize(16)\n    std::println("{} {}", (void *)v.data(), v.size()); // v.getData(), v.getSize()\n    return 0;\n}\n'})}),"\n",(0,r.jsx)(e.p,{children:"\u90a3\u4e48\u5047\u5982\u6211\u4eec\u81ea\u5df1\u5b9e\u73b0\u4e00\u4e2avector\u7c7b: \u5982\u679c\u6bcf\u6b21\u4fee\u6539\u5176\u5185\u5bb9, \u90fd\u8981delete\u518dnew, \u90a3\u8fd9\u6837\u5c82\u4e0d\u662f\u5f88\u9ebb\u70e6?"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-C++",children:"struct Vector {\n    int *data;\n    size_t size;\n\n    Vector() : m_data(new int[4]), m_size(4) \n    {}\n};\n\nvoid main() {\n    Vector v;\n    v.size = 16;\n    delete[] v.data;\n    v.data = new int[16]; // \u5b9e\u9645\u4e0a\u8fd8\u662f\u9700\u8981\u62f7\u8d1d\u539f\u6765\u7684\u6570\u636e, \u8fd9\u91cc\u7701\u7565\u4e86\n}\n"})}),"\n",(0,r.jsx)(e.p,{children:"\u56e0\u6b64\u6211\u4eec\u53ef\u4ee5\u5c06\u5176\u5c01\u88c5\u8d77\u6765:"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-C++",children:"struct Vector {\nprivate:\n    int *m_data;\n    size_t m_size;\n\npublic:\n    Vector() : m_data(new int[4]), m_size(4) \n    {}\n\n    void setSize(size_t newSize) noexcept /* \u7981\u6b62\u629b\u51fa\u5f02\u5e38 */ {\n        m_size = newSize;\n        delete[] m_data;\n        m_data = new int[newSize];\n    }\n\n    int *data() const {\n        return m_data;\n    }\n\n    size_t size() const {\n        return m_size;\n    }\n};\n\nint main() {\n    Vector v;\n    v.setSize(14);\n    v.setSize(11);\n    return 0;\n}\n"})}),"\n",(0,r.jsxs)(e.p,{children:["\u5bf9\u4e8e\u4e0a\u9762\u4e3a\u4ec0\u4e48\u4f7f\u7528",(0,r.jsx)(e.code,{children:"private"}),", \u662f\u56e0\u4e3a\u5982\u679c\u4e0d\u8fd9\u6837, \u90a3\u4e48\u4f7f\u7528\u8fd9\u4e2a\u7c7b\u7684\u4eba\u4f9d\u7136\u53ef\u4ee5\u901a\u8fc7",(0,r.jsx)(e.code,{children:"v.size = 721"}),"\u6765\u4fee\u6539\u5176\u5927\u5c0f, \u800c\u5b9e\u9645\u4e0a\u7684\u6307\u9488\u5374\u6ca1\u6709\u6307\u5411\u65b0\u7684\u6269\u5bb9\u7684\u7a7a\u95f4, \u663e\u7136\u662f\u6709\u95ee\u9898\u7684, \u6545\u9700\u8981",(0,r.jsx)(e.code,{children:"private"}),"\u4fdd\u62a4\u8d77\u6765!"]}),"\n",(0,r.jsxs)(e.div,{className:"markdown-alert markdown-alert-tip",children:["\n",(0,r.jsxs)(e.p,{className:"markdown-alert-title",children:[(0,r.jsx)(e.span,{className:"octicon octicon-tip",style:{"--oct-icon":"url(\"data:image/svg+xml;utf8,%3Csvg xmlns='http://www.w3.org/2000/svg' class='octicon octicon-light-bulb mr-2' viewBox='0 0 16 16' version='1.1' width='16' height='16' aria-hidden='true'%3E%3Cpath d='M8 1.5c-2.363 0-4 1.69-4 3.75 0 .984.424 1.625.984 2.304l.214.253c.223.264.47.556.673.848.284.411.537.896.621 1.49a.75.75 0 0 1-1.484.211c-.04-.282-.163-.547-.37-.847a8.456 8.456 0 0 0-.542-.68c-.084-.1-.173-.205-.268-.32C3.201 7.75 2.5 6.766 2.5 5.25 2.5 2.31 4.863 0 8 0s5.5 2.31 5.5 5.25c0 1.516-.701 2.5-1.328 3.259-.095.115-.184.22-.268.319-.207.245-.383.453-.541.681-.208.3-.33.565-.37.847a.751.751 0 0 1-1.485-.212c.084-.593.337-1.078.621-1.489.203-.292.45-.584.673-.848.075-.088.147-.173.213-.253.561-.679.985-1.32.985-2.304 0-2.06-1.637-3.75-4-3.75ZM5.75 12h4.5a.75.75 0 0 1 0 1.5h-4.5a.75.75 0 0 1 0-1.5ZM6 15.25a.75.75 0 0 1 .75-.75h2.5a.75.75 0 0 1 0 1.5h-2.5a.75.75 0 0 1-.75-.75Z'%3E%3C/path%3E%3C/svg%3E\")"}}),"Tip"]}),"\n",(0,r.jsx)(e.p,{children:"\u4e00\u4e2a\u597d\u7684\u7c7b\u8bbe\u8ba1\u5e94\u8be5\u4f7f\u5b83\u4efb\u610f\u7684\u64cd\u4f5c, \u90fd\u4e0d\u4f1a\u4f7f\u5b83\u8fdb\u5165\u975e\u6cd5\u72b6\u6001."}),"\n",(0,r.jsxs)(e.blockquote,{children:["\n",(0,r.jsxs)(e.p,{children:["\u7c7b\u7684\u72b6\u6001\u6709",(0,r.jsx)(e.code,{children:"\u4e2d\u95f4\u72b6\u6001"}),"\u548c",(0,r.jsx)(e.code,{children:"\u5408\u6cd5\u72b6\u6001"})]}),"\n",(0,r.jsxs)(e.p,{children:["\u6bd4\u5982\u4f60\u8fdb\u5165\u5230",(0,r.jsx)(e.code,{children:"setSize"}),"\u91cc\u9762, \u6267\u884c\u5230",(0,r.jsx)(e.code,{children:"m_size = newSize;"}),"\u8bed\u53e5\u7684\u65f6\u5019\u662f\u4e2d\u95f4\u72b6\u6001(\u975e\u6cd5\u72b6\u6001), \u7b49\u5230\u4f60\u6267\u884c\u5b8c",(0,r.jsx)(e.code,{children:"setSize"}),"\u540e, \u7c7b\u624d\u53d8\u4e3a\u5408\u6cd5\u72b6\u6001."]}),"\n",(0,r.jsxs)(e.p,{children:["\u53c8\u6bd4\u5982\u8fd9\u4e2a\u7c7b\u5b83\u663e\u7136\u662f\u7ebf\u7a0b\u4e0d\u5b89\u5168\u7684: \u4e00\u4e2a\u7ebf\u7a0b",(0,r.jsx)(e.code,{children:"delete[] m_data;"}),"\u65f6, m_data\u5df2\u7ecf\u662f\u91ce\u6307\u9488\u4e86, \u5728\u5b83",(0,r.jsx)(e.code,{children:"m_data = new int[newSize];"}),"\u4e4b\u524d, \u5176\u4ed6\u7ebf\u7a0b\u5982\u679c\u5bf9\u5b83\u64cd\u4f5c, \u90a3\u4e48\u90fd\u662f\u975e\u6cd5\u7684!"]}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(e.p,{children:["\u901a\u8fc7\u4e0a\u9762\u7684\u5b66\u4e60, \u6211\u4eec\u5c31\u77e5\u9053, \u5bf9\u4e8e\u4e0b\u9762\u8fd9\u79cd \u5e73\u51e1\u7c7b\u578b, \u76f4\u63a5",(0,r.jsx)(e.code,{children:"pubilc"}),"\u5373\u53ef:"]}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-C++",children:'#include <print> // C++20\n\nstruct Point {\n    double x;\n    double y;\n\n    Point operator+(Point const &other) const {\n        return Point(x + other.x, y + other.y);\n    }\n};\n\nint main() {                           // \u805a\u5408\u521d\u59cb\u5316\n    Point a = Point{ .x = 1, .y = 2 }; // \u7b49\u4ef7\u4e8e Point{1, 2}\n    Point b = Point{ .x = 2, .y = 3 }; // \u7b49\u4ef7\u4e8e Point{2, 3}\n    Point c = a + b;\n    std::println("{} {}", c.x, c.y);\n    c.x = 1;\n    return 0;\n}\n'})}),"\n",(0,r.jsx)(e.h2,{id:"\u4e8c\u4e00\u6b65\u4e00\u6b65\u4f7f\u7528\u5efa\u9020\u8005\u6a21\u5f0f\u5904\u7406\u8d85\u957f\u7684\u6784\u9020\u51fd\u6570\u53c2\u6570\u5217\u8868",children:"\u4e8c\u3001\u4e00\u6b65\u4e00\u6b65\u4f7f\u7528\u5efa\u9020\u8005\u6a21\u5f0f\u5904\u7406\u8d85\u957f\u7684\u6784\u9020\u51fd\u6570\u53c2\u6570\u5217\u8868"}),"\n",(0,r.jsx)(e.h3,{id:"21-\u6848\u4f8b",children:"2.1 \u6848\u4f8b"}),"\n",(0,r.jsxs)(e.p,{children:["\u6bd4\u5982\u73b0\u5728\u6211\u4eec\u6709\u4e00\u4e2a\u67d0\u6587\u4ef6\u6570\u636e\u5e93/\u603b\u4e4b\u662f\u7f51\u7edc\u73af\u8282, \u9700\u8981\u6709\u4e00\u4e2a\u6587\u4ef6\u6307\u9488",(0,r.jsx)(e.code,{children:"fd"}),"/\u6216\u8005\u8bf4\u662f\u5957\u63a5\u5b57, \u7136\u540e\u9700\u8981\u6307\u5b9a\u4e00\u5806\u53c2\u6570, \u4ec0\u4e48ip, \u7aef\u53e3, \u7528\u6237\u540d, \u5bc6\u7801...:"]}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-C++",children:'#include <print>\n#include <chrono>\n#include <string>\n\nusing namespace std::chrono_literals;\n\nstruct Connection {\n    int fd;\n\n    Connection( // \u8d85\u591a\u53c2\u6570\u7684\u6784\u9020\u51fd\u6570\n        std::string serverAddress,\n        int port,\n        bool useSSH,\n        std::string sshCertPath,\n        std::string sshPKeyPath,\n        std::string sshCAFilePath,\n        std::string username,\n        std::string password,\n        bool enableFastTCPOpen,\n        int tlsVersion,\n        std::chrono::seconds connectTimeout,\n        std::chrono::seconds readTimeout) {\n        // code...\n    }\n};\n\nConnection cnn("114.514.0.721", 2233, true, "xxx/yyy.pem", "xxx/zzz.pem", ...);\n'})}),"\n",(0,r.jsx)(e.p,{children:"\u6bcf\u6b21\u7528\u90fd\u5199\u8fd9\u4e48\u4e00\u5927\u4e32, \u70e6\u4e5f\u70e6\u6b7b\u4e86..."}),"\n",(0,r.jsx)(e.p,{children:"\u5373\u4fbf\u4ed6\u4eec\u6709\u9ed8\u8ba4\u53c2\u6570, \u800c\u6211\u4eec\u9700\u8981\u4fee\u6539\u5176\u4e2d\u4e00\u4e2a\u503c, \u5c31\u8981\u628a\u6574\u4e2a\u8be5\u6b7b\u7684\u6784\u9020\u51fd\u6570\u7ed9\u6284\u4e0b\u6765, \u90a3\u70e6\u4e5f\u70e6\u6b7b\u4e86..."}),"\n",(0,r.jsx)(e.p,{children:"\u6709\u4e00\u4e2a\u89e3\u51b3\u65b9\u6848\u5c31\u662f, \u628a\u8fd9\u4e9b\u6b7b\u4eba\u53c2\u6570\u63d0\u5347\u4e3a:"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-C++",children:'struct ConnectionBuilderBase {\n    std::string serverAddress;\n    int port;\n    bool useSSH = false;\n    std::string sshCertPath = "";\n    std::string sshPKeyPath = "";\n    std::string sshCAFilePath = "";\n    std::string username = "admin";\n    std::string password = "password";\n    bool enableFastTCPOpen = true;\n    int tlsVersion = 1;\n    std::chrono::seconds connectTimeout = 10s;\n    std::chrono::seconds readTimeout = 5s;\n    std::vector<std::string> args;\n};\n\nstruct Connection {\n    int fd;\n\n    Connection(ConnectionBuilderBase params) {\n        // code...\n    }\n};\n\nConnection cnn( ConnectionBuilderBase {\n    .port = 23333,\n    .username = "Heng_Xin",\n})\n'})}),"\n",(0,r.jsxs)(e.p,{children:["\u90a3\u73b0\u5728\u5982\u679c\u8981\u5b9e\u73b0: \u5982\u679c",(0,r.jsx)(e.code,{children:"useSSH"}),"\u4e3a",(0,r.jsx)(e.code,{children:"true"}),"\u90a3\u4e48\u9700\u8981\u6307\u5b9a",(0,r.jsx)(e.code,{children:"sshCertPath"}),"&",(0,r.jsx)(e.code,{children:"sshPKeyPath"}),"&",(0,r.jsx)(e.code,{children:"sshCAFilePath"}),", \u800c\u4e3a",(0,r.jsx)(e.code,{children:"useSSH"}),"\u4e3a",(0,r.jsx)(e.code,{children:"false"}),"\u5219\u4e0d\u9700\u8981\u6307\u5b9a\u3002"]}),"\n",(0,r.jsxs)(e.p,{children:["\u5982\u679c\u6309\u7167\u4e0a\u9762\u7684\u4ee3\u7801, \u90a3\u4e48\u5982\u679c\u4f7f\u7528\u8005\u4e0d\u77e5\u9053\u6709\u8fd9\u4e2a\u8981\u6c42, \u8bbe\u7f6e\u4e3a",(0,r.jsx)(e.code,{children:"true"}),", \u53c8\u6ca1\u6709\u6307\u5b9aPath, \u7136\u540e\u5185\u90e8\u62a5\u9519/\u629b\u51fa\u5f02\u5e38, \u90a3\u4e48\u4f7f\u7528\u8005\u5c31\u4f1a\u53fd\u53fd\u6b6a\u6b6a\u4f60\u8fd9\u4e2a\u7c7b\u4e5f\u592a\u96be\u7528\u4e86, \u8bbe\u8ba1\u5f97\u597d\u9a9a\u8111\u554a~\u6211\u600e\u4e48\u77e5\u9053..."]}),"\n",(0,r.jsxs)(e.p,{children:["\u4ea6\u6216\u8005, \u4f7f\u7528\u4e86\u4e0a\u9762\u8fd9\u79cd\u521d\u59cb\u5316\u65b9\u5f0f, \u4f46\u662f\u4ee5\u540e\u53c8\u6709\u65b0\u9700\u6c42\u4e86, \u65b0\u589e\u4e86\u4e00\u4e2a",(0,r.jsx)(e.code,{children:"sshHXFilePath"}),", \u5982\u4f55\u8ba9\u7528\u6237\u611f\u77e5\u5230\u5462?"]}),"\n",(0,r.jsx)(e.p,{children:"\u4e00\u79cd\u65b9\u6cd5\u662f:"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-C++",children:'#include <optional>\n\nstruct ConnectionBuilderBase {\n    std::string serverAddress;\n    int port;\n    struct SSHParams {\n        std::string sshCertPath = "";\n        std::string sshPKeyPath = "";\n        std::string sshCAFilePath = "";\n    };\n    std::optional<SSHParams> userSSH = std::nullopt; // \u4f7f\u7528\u5219\u6307\u5b9a SSHParams, \u4e0d\u4f7f\u7528\u5219\u8fd9\u6837\n    std::string username = "admin";\n    std::string password = "password";\n    bool enableFastTCPOpen = true;\n    int tlsVersion = 1;\n    std::chrono::seconds connectTimeout = 10s;\n    std::chrono::seconds readTimeout = 5s;\n    std::vector<std::string> args;\n};\n'})}),"\n",(0,r.jsx)(e.p,{children:"\u5f53\u7136, \u8fd9\u6837\u8fd8\u662f\u4e0d\u80fd\u8ba9\u7528\u6237\u611f\u77e5\u5230\u65b0\u589e\u53d8\u91cf.."}),"\n",(0,r.jsx)(e.p,{children:"\u90a3\u4e48\u5c31\u53ef\u4ee5\u4f7f\u7528\u8fd9\u79cd\u7ec8\u6781\u65b9\u6cd5, \u6211\u4e0d\u8981\u6784\u9020\u51fd\u6570\u4e86~!"}),"\n",(0,r.jsxs)(e.h3,{id:"22-\u4f7f\u7528\u5efa\u9020\u8005\u6a21\u5f0f",children:["2.2 \u4f7f\u7528",(0,r.jsx)(e.code,{children:"\u5efa\u9020\u8005\u6a21\u5f0f"})]}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-C++",children:'struct Connection {\n    int fd;\n\n    explicit Connection(int fd_) : fd(fd_) {\n    }\n\n    Connection &read();\n};\n\nstruct ConnectionBuilderBase {\n    std::string serverAddress;\n    int port;\n    bool useSSH = false;\n    std::string sshCertPath = "";\n    std::string sshPKeyPath = "";\n    std::string sshCAFilePath = "";\n    std::string username = "admin";\n    std::string password = "password";\n    bool enableFastTCPOpen = true;\n    int tlsVersion = 1;\n    std::chrono::seconds connectTimeout = 10s;\n    std::chrono::seconds readTimeout = 5s;\n    std::vector<std::string> args;\n};\n\nstruct ConnectionBuilder : ConnectionBuilderBase {\n    ConnectionBuilder &withAddress(const std::string& addr) {\n        serverAddress = addr;\n        return *this;\n    }\n\n    ConnectionBuilder &withPort(int p) {\n        port = p;\n        return *this;\n    }\n\n    ConnectionBuilde &withAddressAndPort(const std::string& addr) {\n        auto pos = addr.find(\':\');\n        serverAddress = addr.substr(0, pos);\n        port = std::stoi(addr.substr(pos + 1));\n        return *this;\n    }\n\n    ConnectionBuilder &withSSH(const std::string& cert, const std::string& pkey, const std::string& caf = "asas") {\n        useSSH = true;\n        sshCertPath = cert;\n        sshPKeyPath = pkey;\n        sshCAFilePath = caf;\n        return *this;\n    }\n\n    ConnectionBuilder &addArg(const std::string& arg) {\n        args.push_back(arg);\n        return *this;\n    }\n\n    Connection connect() {\n        static_assert(Ready, "\u4f60\u5fc5\u987b\u6307\u5b9a addr \u53c2\u6570\uff01");\n        int fd = 0;\n        // fd = open(serverAddress, port);\n        return Connection(fd);\n    }\n};\n\nConnection c = ConnectionBuilder()\n    .withSSH("1", "2") // \u5982\u679c\u65b0\u589e\u53c2\u6570, \u90a3\u4e48\u8fd9\u91cc\u5c31\u53ef\u4ee5\u62a5\u9519\n    .addArg("asas")\n    .addArg("bsbs")\n    .withAddressAndPort("localhost:8080")\n    .addArg("baba")\n    .connect();\n'})}),"\n",(0,r.jsx)(e.h3,{id:"23-\u4e3a\u7ba1\u7406\u8d44\u6e90\u7684\u66f4\u9ad8\u6548\u7684builder\u6a21\u5f0f",children:"2.3 \u4e3a\u7ba1\u7406\u8d44\u6e90\u7684\u66f4\u9ad8\u6548\u7684Builder\u6a21\u5f0f"}),"\n",(0,r.jsx)(e.p,{children:"\u4e3e\u4e2a\u4f8b\u5b50, \u5bf9\u4e8e\u8981\u7ba1\u7406\u8d44\u6e90\u7684\u7c7b, \u4e00\u822c\u90fd\u662f\u4f7f\u7528\u79fb\u52a8, \u800c\u4e0d\u662f\u62f7\u8d1d."}),"\n",(0,r.jsx)(e.p,{children:"\u5176\u4e2d:"}),"\n",(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsxs)(e.li,{children:["\n",(0,r.jsxs)(e.p,{children:[(0,r.jsx)(e.code,{children:"[[nodiscard]]"}),"\u8868\u793a\u5982\u679c\u8fd4\u56de\u540e\u6ca1\u6709\u63a5\u6536, \u5219\u7f16\u8bd1\u5668\u4f1a\u8b66\u544a (C++17)"]}),"\n"]}),"\n",(0,r.jsxs)(e.li,{children:["\n",(0,r.jsxs)(e.p,{children:[(0,r.jsx)(e.code,{children:"returnType Fun() && {}"}),"\u7684",(0,r.jsx)(e.code,{children:"&&"}),"\u8868\u793a\u8fd9\u4e2a\u5bf9\u8c61\u662f\u4ee5\u53f3\u503c\u7684\u5f62\u5f0f\u8c03\u7528\u7684.(\u8be5\u6210\u5458\u51fd\u6570\u53ea\u80fd\u5bf9\u53f3\u503c\u8c03\u7528)"]}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-C++",children:"struct [[nodiscard]] Cake {\n    int handle;\n\n    Cake() {}\n\n    [[nodiscard]] Cake &&setOrig() && {\n        // \u6784\u9020\u539f\u5473\u86cb\u7cd5\n        handle = 0;\n        return std::move(*this);\n    }\n\n    [[nodiscard]] Cake &&setChoco(double range) && {\n        // \u6784\u9020\u5de7\u514b\u529b\u86cb\u7cd5\n        handle = (int)range;\n        return std::move(*this);\n    }\n\n    [[nodiscard]] Cake &&setMoca(int flavor) && {\n        // \u6784\u9020\u62b9\u8336\u5473\u86cb\u7cd5\n        handle = flavor;\n        return std::move(*this);\n    }\n\n    Cake(Cake &&) = default;\n    Cake(Cake const &) = delete; // \u5220\u9664\u62f7\u8d1d\n};\n\n// \u58f0\u660e\u4e86\u4e24\u4e2a\u91cd\u8f7d\u51fd\u6570, \u79fb\u52a8\u4f1a\u8ddf\u9ad8\u6548\u4e9b.\nvoid func(Cake &&c);\nvoid func(Cake const &c);\n\nCake origCake = Cake().setOrig().setChoco(1.0);\nCake chocoCake = Cake().setChoco(1.0);\nCake matchaCake = Cake().setMoca(1);\n\nint main() {\n    Cake c;\n    Cake().setOrig();\n    func(std::move(c)); // \u4f7f\u7528\u79fb\u52a8\n}\n"})}),"\n",(0,r.jsx)(e.p,{children:"\u7efc\u4e0a\u4f8b\u5b50, \u5c31\u53ef\u4ee5\u5b8c\u5584\u5982\u4e0b:"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-C++",children:'using namespace std::chrono_literals;\n\nstruct Connection {\n    int fd;\n\n    explicit Connection(int fd_) : fd(fd_) {\n    }\n\n    Connection &read();\n};\n\nstruct ConnectionBuilderBase {\n    std::string serverAddress;\n    int port;\n    bool useSSH = false;\n    std::string sshCertPath = "";\n    std::string sshPKeyPath = "";\n    std::string sshCAFilePath = "";\n    std::string username = "admin";\n    std::string password = "password";\n    bool enableFastTCPOpen = true;\n    int tlsVersion = 1;\n    std::chrono::seconds connectTimeout = 10s;\n    std::chrono::seconds readTimeout = 5s;\n    std::vector<std::string> args;\n};\n\ntemplate <bool Ready = false>\nstruct [[nodiscard]] ConnectionBuilder : ConnectionBuilderBase {\n    [[nodiscard]] ConnectionBuilder<true> &&withAddress(std::string addr) && {\n        serverAddress = addr;\n        return static_cast<ConnectionBuilder<true> &&>(static_cast<ConnectionBuilderBase &&>(*this));\n    }\n\n    [[nodiscard]] ConnectionBuilder &&withPort(int p) {\n        port = p;\n        return *this;\n    }\n\n    [[nodiscard]] ConnectionBuilder<true> &&withAddressAndPort(std::string addr) && {\n        auto pos = addr.find(\':\');\n        serverAddress = addr.substr(0, pos);\n        port = std::stoi(addr.substr(pos + 1));\n        return static_cast<ConnectionBuilder<true> &&>(static_cast<ConnectionBuilderBase &&>(*this));\n    }\n\n    [[nodiscard]] ConnectionBuilder &&withSSH(std::string cert, std::string pkey, std::string caf) && {\n        useSSH = true;\n        sshCertPath = cert;\n        sshPKeyPath = pkey;\n        sshCAFilePath = caf;\n        return *this;\n    }\n\n    [[nodiscard]] ConnectionBuilder &&addArg(std::string arg) && {\n        args.push_back(arg);\n        return *this;\n    }\n\n    [[nodiscard]] Connection &&connect() && {\n        static_assert(Ready, "\u4f60\u5fc5\u987b\u6307\u5b9a addr \u53c2\u6570\uff01"); // \u901a\u8fc7\u4e0d\u540c\u7684\u6a21\u7248, \u6765\u4fdd\u8bc1\u67d0\u4e9b\u4e1c\u897f\u7684\u6b63\u786e\u6027, \u4e8e\u7f16\u8bd1\u671f\u4e14\u662f\u5efa\u9020\u8005\u6a21\u5f0f\n        int fd = 0;\n        // fd = open(serverAddress, port);\n        return Connection(fd);\n    }\n};\n'})}),"\n",(0,r.jsx)(e.h2,{id:"\u4e09\u865a\u51fd\u6570\u5230\u8bbf\u95ee\u8005\u6a21\u5f0f",children:"\u4e09\u3001\u865a\u51fd\u6570\u5230\u8bbf\u95ee\u8005\u6a21\u5f0f"}),"\n",(0,r.jsx)(e.h3,{id:"31-\u6848\u4f8b",children:"3.1 \u6848\u4f8b"}),"\n",(0,r.jsx)(e.p,{children:"\u73b0\u5728\u6709\u4ee5\u4e0b\u4ee3\u7801, \u6709\u7684\u53ef\u4ee5\u5403\u6709\u7684\u53ef\u4ee5\u559d\u8fd8\u6709\u7684\u90fd\u53ef\u4ee5:"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-C++",children:"#include <cstdio>\n\nstruct EatParams {\n    int amount;\n    int speed;\n};\n\nstruct DrinkParams {\n    int volume;\n    int temperature;\n};\n\nstruct Food {\n    virtual void eat(EatParams eatParams) = 0;\n    virtual void drink(DrinkParams drinkParams) = 0;\n};\n\nstruct Cake : Food {\n    void eat(EatParams eatParams) override {\n        // \u5403\u86cb\u7cd5\n    }\n\n    void drink(DrinkParams drinkParams) override {\n        // \u4e0d\u80fd\u559d\u86cb\u7cd5\n    }\n};\n\nstruct Milk : Food {\n    void eat(EatParams eatParams) override {\n        // \u4e0d\u80fd\u5403\u725b\u5976\n    }\n\n    void drink(DrinkParams drinkParams) override {\n        // \u559d\u725b\u5976\n    }\n};\n\nstruct Pudding : Food {\n    void eat(EatParams eatParams) override {\n        // \u5403\u5e03\u4e01\n    }\n\n    void drink(DrinkParams drinkParams) override {\n        // \u559d\u5e03\u4e01\n    }\n};\n\nvoid dailyRun(Food& food) {\n    food.eat({1, 2});\n    food.drink({3, 4});\n}\n\nint main() {\n    Cake cake;\n    Milk milk;\n    Pudding pudding;\n    dailyRun(cake);\n    dailyRun(milk);\n    dailyRun(pudding);\n    return 0;\n}\n"})}),"\n",(0,r.jsxs)(e.p,{children:["\u8fd9\u6837\u4e0d\u662f\u5f88\u9ebb\u70e6\u5417? \u5982\u679c\u6211\u4ee5\u540e\u8981\u589e\u52a0\u4e00\u4e2a\u529f\u80fd\u53eb\u505a",(0,r.jsx)(e.code,{children:"lay(\u62c9)"}),"\u7ed9Food(\u63a5\u53e3(\u7eaf\u865a\u7c7b)), \u90a3\u4e48 Cake, Milk, Pudding\u8981\u4e0d\u8981\u652f\u6301\u5462?"]}),"\n",(0,r.jsxs)(e.p,{children:["\u5982\u679c\u652f\u6301\u7684\u8bdd\u4e0d\u5c31\u8fdd\u80cc\u4e86",(0,r.jsx)(e.a,{href:"/HXLoLi/docs/%E8%AE%A1%E4%BD%AC%E5%B8%B8%E8%AD%98/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E8%AE%BE%E8%AE%A1%E5%8E%9F%E5%88%99/%E8%AE%BE%E8%AE%A1%E5%8E%9F%E5%88%99/%E3%80%90SOLID%E3%80%91%E5%BC%80%E9%97%AD%E5%8E%9F%E5%88%99/",children:"[SOLID]\u5f00\u95ed\u539f\u5219"}),"\u4e86\u5417? \u6dfb\u52a0\u65b0\u7684\u4ee3\u7801, \u4e0d\u9700\u8981\u4fee\u6539\u4e4b\u524d\u7684\u4ee3\u7801\u554a (\u5bf9\u62d3\u5c55\u5f00\u653e, \u5bf9\u4fee\u6539\u5c01\u95ed)~"]}),"\n",(0,r.jsx)(e.h3,{id:"32-\u91cd\u65b0\u62bd\u8c61",children:"3.2 \u91cd\u65b0\u62bd\u8c61"}),"\n",(0,r.jsxs)(e.p,{children:["\u6b63\u786e\u7684\u5e94\u8be5\u5c06\u4ed6\u4eec\u62bd\u8c61\u6210\u8fd9\u6837: \u800c\u4e0d\u662f\u7b3c\u7edf\u7684\u4e00\u4e2aFood~~, \u677e\u5f1f\u4f60\u8981\u8fd9\u6837\u4e71\u62bd\u8c61\u600e\u4e48\u4e0d\u5199\u6210\u662f\u6240\u6709\u4e1c\u897f\u90fd\u7ee7\u627f",(0,r.jsx)(e.code,{children:"\u4e1c\u897f\u7c7b"}),"\u5462?~~"]}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-C++",children:"struct Eatble {\n    virtual void eat(EatParams eatParams) = 0;\n};\n\nstruct Drinkble {\n    virtual void drink(DrinkParams drinkParams) = 0;\n};\n\nstruct Cake : Eatble {\n    void eat(EatParams eatParams) override {\n        // \u5403\u86cb\u7cd5\n    }\n};\n\nstruct Milk : Drinkble {\n    void drink(DrinkParams drinkParams) override {\n        // \u559d\u725b\u5976\n    }\n};\n\nstruct Pudding : Eatble, Drinkble { // \u4e0d\u662f\u4e0d\u80fd\u591a\u7ee7\u627f, \u63a5\u53e3\u7684\u591a\u7ee7\u627f\u662f\u5141\u8bb8\u7684\n                                    // \u5c31\u8fdeJava\u90fd\u53ef\u4ee5\u63a5\u53e3\u7684\u591a\u7ee7\u627f,\n                                    // \u4e0d\u5141\u8bb8\u7684\u662f\u5e26\u6709\u6210\u5458\u53d8\u91cf\u7684\u591a\u7ee7\u627f, \u56e0\u4e3a\u8fd9\u6837\u5c31\u5206\u4e0d\u6e05\u540c\u540d\u53d8\u91cf\u4e86, (\u4ee5\u53ca\u83f1\u5f62\u7ee7\u627f, \u5c31\u8981\u4f7f\u7528\u865a\u7ee7\u627f\u4e86..)\n    void eat(EatParams eatParams) override {\n        // \u5403\u5e03\u4e01\n    }\n\n    void drink(DrinkParams drinkParams) override {\n        // \u559d\u5e03\u4e01\n    }\n};\n\n// \u4f7f\u7528\u91cd\u8f7d\u51b3\u5b9a\u4f7f\u7528\u54ea\u4e2a\u7c7b(\u529f\u80fd)\nvoid dailyRun(Eatble& food) {\n    food.eat({1, 2});\n}\n\nvoid dailyRun(Drinkble& food) {\n    food.drink({3, 4});\n}\n\nint main() {\n    Cake cake;\n    Milk milk;\n    Pudding pudding;\n    dailyRun(cake);\n    dailyRun(milk);\n    dailyRun(static_cast<Eatble &>(pudding));\n    dailyRun(static_cast<Drinkble &>(pudding));\n    return 0;\n}\n"})}),"\n",(0,r.jsx)(e.p,{children:"\u5982\u679c\u4f60\u4e0d\u60f3\u4f7f\u7528\u4e0a\u9762\u8fd9\u79cd, \u91cd\u8f7d\u8c03\u7528\u7684\u8bdd, \u5c31\u5e0c\u671b\u4e00\u8d77\u8c03\u7528, \u4e5f\u53ef\u4ee5\u8fd9\u6837:"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-C++",children:"struct Food {\n    virtual ~Food() = default; // \u5982\u679c\u6ca1\u6709\u865a\u51fd\u6570\u5c31\u4e0d\u4f1a\u751f\u6210\u4e00\u4e2atypeid\u6765\u52a8\u6001\u7c7b\u578b\u67e5\u627e\n    // \u6240\u4ee5\u58f0\u660e\u4e00\u4e2a\u865a\u6790\u6784\u6765\u4f7f\u5f97\u5b83\u53d8\u6210\u4e00\u4e2a\u63a5\u53e3\u7c7b\n};\n\n\nstruct Eatble : virtual Food { // \u63a5\u53e3\u7684\u7ee7\u627f\u6700\u597d\u4f7f\u7528\u865a\u7ee7\u627f\n    virtual void eat(EatParams eatParams) = 0;\n};\n\nstruct Drinkble : virtual Food {\n    virtual void drink(DrinkParams drinkParams) = 0;\n};\n\nstruct Cake : Eatble {\n    void eat(EatParams eatParams) override {\n        // \u5403\u86cb\u7cd5\n    }\n};\n\nstruct Milk : Drinkble {\n    void drink(DrinkParams drinkParams) override {\n        // \u559d\u725b\u5976\n    }\n};\n\nstruct Pudding : Eatble, Drinkble {\n    void eat(EatParams eatParams) override {\n        // \u5403\u5e03\u4e01\n    }\n\n    void drink(DrinkParams drinkParams) override {\n        // \u559d\u5e03\u4e01\n    }\n};\n\nvoid dailyRun(Food* food) {\n    if (auto eat = dynamic_cast<Eatble *>(food); eat) { // dynamic_cast \u8f6c\u5316\u7c7b\u578b\u8bc6\u522b\u8fd4\u56de 0 \u6216\u8005\u53eb\u505a (void *)0\n        eat->eat({1, 2});\n    }\n    // \u5982\u679c\u53ea\u662f\u5224\u65ad\u5e03\u5c14\u503c, \u90a3\u4e48\u53ef\u4ee5\u7701\u7565\u540e\u9762\u7684 \u53d8\u91cf, \u5373 if (auto it = getIt(); it) \u7684\u540e\u9762\u7684 it, \u53ef\u4ee5\u7701\u7565\n    if (auto drink = dynamic_cast<Drinkble *>(food)) { // <-- \u50cf\u8fd9\u6837\n        drink->drink({3, 4});\n    }\n}\n\nint main() {\n    Cake cake;\n    Milk milk;\n    Pudding pudding;\n    dailyRun(&cake);\n    dailyRun(&milk);\n    dailyRun(&pudding);\n    return 0;\n}\n"})}),"\n",(0,r.jsxs)(e.p,{children:["\u8fd9\u91cc\u53ef\u4ee5\u7a0d\u5fae\u8bf4\u660e\u4e00\u4e0b",(0,r.jsx)(e.code,{children:"dynamic_cast"}),"\u7684\u539f\u7406:"]}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-C++",children:"// \u524d\u5411\u58f0\u660e\nstruct Eatble;\nstruct Drinkble;\n\nstruct Food {\n    virtual ~Food() = default;\n\n    virtual Eatble *toEatble() {\n        return nullptr;\n    }\n\n    virtual Drinkble *toDrinkble() {\n        return nullptr;\n    }\n};\n\nstruct Eatble : virtual Food {\n    virtual void eat(EatParams eatParams) = 0;\n\n    virtual Eatble *toEatble() override {\n        return this;\n    }\n};\n\nstruct Drinkble : virtual Food {\n    virtual void drink(DrinkParams drinkParams) = 0;\n\n    virtual Drinkble *toDrinkble() override {\n        return this;\n    }\n};\n\nvoid dailyRun(Food* food) {\n    if (auto eat = food->toEatble(); eat) {\n        eat->eat({1, 2});\n    }\n    if (auto drink = food->toDrinkble()) {\n        drink->drink({3, 4});\n    }\n}\n"})}),"\n",(0,r.jsxs)(e.p,{children:["\u5f53\u7136\u4e0a\u9762\u7684\u8fd8\u662f\u8fdd\u80cc\u4e86",(0,r.jsx)(e.code,{children:"\u5f00\u95ed\u539f\u5219"}),"\u7684, \u56e0\u4e3a\u65b0\u589e\u529f\u80fd, \u4f60\u5c31\u53ef\u80fd\u8981\u4fee\u6539",(0,r.jsx)(e.code,{children:"dailyRun"}),"\u5e76\u589e\u52a0\u4e00\u4e2a",(0,r.jsx)(e.code,{children:"if"}),"\u5224\u65ad..."]}),"\n",(0,r.jsxs)(e.h3,{id:"33-\u8bbf\u95ee\u8005\u6a21\u5f0f",children:["3.3 ",(0,r.jsx)(e.a,{href:"/HXLoLi/docs/%E8%AE%A1%E4%BD%AC%E5%B8%B8%E8%AD%98/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E8%A1%8C%E4%B8%BA%E5%9E%8B%E6%A8%A1%E5%BC%8F/%E8%AE%BF%E9%97%AE%E8%80%85%E6%A8%A1%E5%BC%8F/",children:"\u8bbf\u95ee\u8005\u6a21\u5f0f"})]}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-C++",children:'#include <print>\n\nstruct EatParams {\n    int amount;\n    int speed;\n};\n\nstruct DrinkParams {\n    int volume;\n    int temperature;\n};\n\n// !================================================!\n// \u58f0\u660e\u4e00\u4e2a\u98df\u7269\u8bbf\u95ee\u8005\u57fa\u7c7b\nstruct FoodVisitor {\n    // \u524d\u5411\u58f0\u660e, \u4f46\u53ef\u4ee5\u8fd9\u6837\u5199\n    virtual void visit(struct /* <-- */ Eatable *eat) {}\n    virtual void visit(struct Drinkable *drink) {} // \u8fd9\u4e9b\u662f\u7a7a\u5b9e\u73b0, \u8ba9\u9700\u8981\u8fd9\u4e2a\u529f\u80fd\u7684\u5b50\u7c7b\u8986\u76d6\n    virtual ~FoodVisitor() = default;\n};\n\n// !================================================!\n\nstruct Food {\n    // !================================================!\n    virtual void accept(FoodVisitor *visitor) = 0; // \u4f20\u5165\u98df\u7269\u8bbf\u95ee\u8005\u7ed9\u98df\u7269 (\u5012\u53cd\u5929\u7f61)\n    // !================================================!\n    virtual ~Food() = default;\n};\n\n// !================================================!\n// \u4e00\u4e2a\u5b8f\n#define DEF_FOOD_ACCEPT \\\nvoid accept(FoodVisitor *visitor) override { \\\n    visitor->visit(this); \\ // \u4f20\u5165\u7684this\u662fFood\u53ca\u5176\u5b50\u7c7b, \n}                           // \u7136\u540e\u8ba9\u8bbf\u95ee\u8005\u91cd\u8f7d, goto PengUser; (\u5177\u4f53\u8bbf\u95ee\u8005)\n// !================================================!\n\nstruct Drinkable : virtual Food {\n    virtual void drink(DrinkParams drinkParams) = 0;\n\n    // \u8ba9\'\u559d\'\u6765\u8bbf\u95ee\'\u98df\u7269\'\n    DEF_FOOD_ACCEPT\n};\n\nstruct Eatable : virtual Food {\n    virtual void eat(EatParams eatParams) = 0;\n\n    // \u8ba9\'\u5403\'\u6765\u8bbf\u95ee\'\u98df\u7269\'\n    DEF_FOOD_ACCEPT\n};\n\nstruct Cake : Eatable {\n    void eat(EatParams eatParams) override {\n        std::println("Eating cake...");\n        std::println("Amount: {}", eatParams.amount);\n        std::println("Speed: {}", eatParams.speed);\n    }\n};\n\nstruct Milk : Drinkable {\n    void drink(DrinkParams drinkParams) override {\n        std::println("Drinking milk...");\n        std::println("Volume: {}", drinkParams.volume);\n        std::println("Temperature: {}", drinkParams.temperature);\n    }\n};\n\nstruct Pudding : Eatable, Drinkable {\n    void eat(EatParams eatParams) override {\n        std::println("Eating pudding...");\n        std::println("Amount: {}", eatParams.amount);\n        std::println("Speed: {}", eatParams.speed);\n    }\n\n    void drink(DrinkParams drinkParams) override {\n        std::println("Drinking pudding...");\n        std::println("Volume: {}", drinkParams.volume);\n        std::println("Temperature: {}", drinkParams.temperature);\n    }\n\n    // \u65e2\u8981\u5403 \u53c8\u8981\u559d\n    void accept(FoodVisitor *visitor) override {\n        Eatable::accept(visitor);\n        Drinkable::accept(visitor);\n    }\n};\n\n// !================================================!\n// \u5177\u4f53\u8bbf\u95ee\u8005\u7684\u5b9e\u73b0\nstruct PengUser : FoodVisitor {\n    void visit(Eatable *eat) override {\n        eat->eat({5, 10});\n    }\n\n    void visit(Drinkable *drink) override {\n        drink->drink({10, 20});\n    }\n};\n// !================================================!\n\nvoid pengEat(Food *food) { // \u5403\u4e09\u6b21\n    PengUser user;\n    food->accept(&user);\n    food->accept(&user);\n    food->accept(&user);\n}\n\nint main() {\n    Cake cake;\n    Milk milk;\n    Pudding pudding;\n    pengEat(&cake);\n    pengEat(&milk);\n    pengEat(&pudding);\n    return 0;\n}\n'})}),"\n",(0,r.jsx)(e.p,{children:"\u6240\u4ee5, \u4f60\u5728QT\u554a, \u4ec0\u4e48\u7684\u5730\u65b9, \u8981\u6c42\u4f60\u5b9a\u4e49\u4e00\u4e2a\u5b8f, \u53ef\u80fd\u539f\u7406\u5c31\u662f\u8fd9\u6837.."})]})}function u(n={}){const{wrapper:e}={...(0,i.R)(),...n.components};return e?(0,r.jsx)(e,{...n,children:(0,r.jsx)(l,{...n})}):l(n)}}}]);