"use strict";(self.webpackChunkhx_loli=self.webpackChunkhx_loli||[]).push([[72628],{28453:(n,e,i)=>{i.d(e,{R:()=>s,x:()=>c});var t=i(96540);const d={},a=t.createContext(d);function s(n){const e=t.useContext(a);return t.useMemo((function(){return"function"==typeof n?n(e):{...e,...n}}),[e,n])}function c(n){let e;return e=n.disableParentContext?"function"==typeof n.components?n.components(d):n.components||d:s(n.components),t.createElement(a.Provider,{value:e},n.children)}},49607:(n,e,i)=>{i.d(e,{A:()=>t});const t=i.p+"assets/images/Clip_2024-02-12_11-17-52-e0320f3c4e283d2f5a75b206b69c45d6.png"},63417:(n,e,i)=>{i.d(e,{A:()=>t});const t=i.p+"assets/images/Clip_2024-02-12_11-39-32-df506efa38333cd2bd63ca8e1f66c094.png"},75055:(n,e,i)=>{i.d(e,{A:()=>t});const t=i.p+"assets/images/Clip_2024-02-12_11-23-24-f5f85f780e441c4d70e664bb8666e228.png"},94768:(n,e,i)=>{i.r(e),i.d(e,{assets:()=>r,contentTitle:()=>c,default:()=>A,frontMatter:()=>s,metadata:()=>t,toc:()=>l});const t=JSON.parse('{"id":"\u8ba1\u4f6c\u5e38\u8b58/\u6570\u636e\u7ed3\u6784\u4e0e\u7b97\u6cd5/\u3010\u6570\u636e\u7ed3\u6784\u3011\u56fe/\u5173\u952e\u8def\u5f84/index","title":"\u5173\u952e\u8def\u5f84","description":"\u4e00\u3001\u57fa\u672c\u6982\u5ff5","source":"@site/docs/001-\u8ba1\u4f6c\u5e38\u8b58/001-\u6570\u636e\u7ed3\u6784\u4e0e\u7b97\u6cd5/005-\u3010\u6570\u636e\u7ed3\u6784\u3011\u56fe/008-\u5173\u952e\u8def\u5f84/index.md","sourceDirName":"001-\u8ba1\u4f6c\u5e38\u8b58/001-\u6570\u636e\u7ed3\u6784\u4e0e\u7b97\u6cd5/005-\u3010\u6570\u636e\u7ed3\u6784\u3011\u56fe/008-\u5173\u952e\u8def\u5f84","slug":"/\u8ba1\u4f6c\u5e38\u8b58/\u6570\u636e\u7ed3\u6784\u4e0e\u7b97\u6cd5/\u3010\u6570\u636e\u7ed3\u6784\u3011\u56fe/\u5173\u952e\u8def\u5f84/","permalink":"/HXLoLi/docs/\u8ba1\u4f6c\u5e38\u8b58/\u6570\u636e\u7ed3\u6784\u4e0e\u7b97\u6cd5/\u3010\u6570\u636e\u7ed3\u6784\u3011\u56fe/\u5173\u952e\u8def\u5f84/","draft":false,"unlisted":false,"editUrl":"https://github.com/HengXin666/HXLoLi/edit/main/docs/001-\u8ba1\u4f6c\u5e38\u8b58/001-\u6570\u636e\u7ed3\u6784\u4e0e\u7b97\u6cd5/005-\u3010\u6570\u636e\u7ed3\u6784\u3011\u56fe/008-\u5173\u952e\u8def\u5f84/index.md","tags":[],"version":"current","lastUpdatedBy":"Heng_Xin_666","lastUpdatedAt":1745851959000,"frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"\u62d3\u6251\u6392\u5e8f","permalink":"/HXLoLi/docs/\u8ba1\u4f6c\u5e38\u8b58/\u6570\u636e\u7ed3\u6784\u4e0e\u7b97\u6cd5/\u3010\u6570\u636e\u7ed3\u6784\u3011\u56fe/\u62d3\u6251\u6392\u5e8f/"},"next":{"title":"Tarjan\u7b97\u6cd5","permalink":"/HXLoLi/docs/\u8ba1\u4f6c\u5e38\u8b58/\u6570\u636e\u7ed3\u6784\u4e0e\u7b97\u6cd5/\u3010\u6570\u636e\u7ed3\u6784\u3011\u56fe/Tarjan\u7b97\u6cd5/"}}');var d=i(74848),a=i(28453);const s={},c="\u5173\u952e\u8def\u5f84",r={},l=[{value:"\u4e00\u3001\u57fa\u672c\u6982\u5ff5",id:"\u4e00\u57fa\u672c\u6982\u5ff5",level:2},{value:"1.\u4ec0\u4e48\u662fAOE\u7f51",id:"1\u4ec0\u4e48\u662faoe\u7f51",level:3},{value:"2.AOE\u7f51\u7684\u6e90\u70b9\u548c\u6c47\u70b9",id:"2aoe\u7f51\u7684\u6e90\u70b9\u548c\u6c47\u70b9",level:3},{value:"3.\u4ec0\u4e48\u662f\u5173\u952e\u8def\u5f84",id:"3\u4ec0\u4e48\u662f\u5173\u952e\u8def\u5f84",level:3},{value:"4.\u4ec0\u4e48\u662fETV",id:"4\u4ec0\u4e48\u662fetv",level:3},{value:"5.\u4ec0\u4e48\u662fLTV",id:"5\u4ec0\u4e48\u662fltv",level:3},{value:"6.\u4ec0\u4e48\u662fETE",id:"6\u4ec0\u4e48\u662fete",level:3},{value:"7.\u4ec0\u4e48\u662fLTE",id:"7\u4ec0\u4e48\u662flte",level:3},{value:"\u4e8c\u3001\u5173\u952e\u8def\u5f84\u7b97\u6cd5",id:"\u4e8c\u5173\u952e\u8def\u5f84\u7b97\u6cd5",level:2},{value:"\u4e09\u3001\u4ee3\u7801",id:"\u4e09\u4ee3\u7801",level:2},{value:"\u7ade\u8d5b\u7248",id:"\u7ade\u8d5b\u7248",level:3},{value:"\u5b66\u4e60\u7248",id:"\u5b66\u4e60\u7248",level:3}];function o(n){const e={code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",img:"img",p:"p",pre:"pre",span:"span",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",...(0,a.R)(),...n.components};return(0,d.jsxs)(d.Fragment,{children:[(0,d.jsx)(e.header,{children:(0,d.jsx)(e.h1,{id:"\u5173\u952e\u8def\u5f84",children:"\u5173\u952e\u8def\u5f84"})}),"\n",(0,d.jsx)(e.h2,{id:"\u4e00\u57fa\u672c\u6982\u5ff5",children:"\u4e00\u3001\u57fa\u672c\u6982\u5ff5"}),"\n",(0,d.jsx)(e.h3,{id:"1\u4ec0\u4e48\u662faoe\u7f51",children:"1.\u4ec0\u4e48\u662fAOE\u7f51"}),"\n",(0,d.jsx)(e.p,{children:(0,d.jsxs)(e.span,{style:{marginLeft:"30px"},children:[(0,d.jsx)(e.strong,{children:"AOE\u7f51(ActivityOnEdg)"})," \u5373\u8fb9\u8868\u793a\u6d3b\u52a8\u7684\u7f51\uff0c\u662f\u4e0eAOV\u7f51\uff08\u9876\u70b9\u8868\u793a\u6d3b\u52a8\uff09\u76f8\u5bf9\u5e94\u7684\u4e00\u4e2a\u6982\u5ff5\u3002\u800c\u62d3\u6251\u6392\u5e8f\u6070\u6070\u5c31\u662f\u5728AOV\u7f51\u4e0a\u8fdb\u884c\u7684\uff0c\u8fd9\u662f\u62d3\u6251\u6392\u5e8f\u4e0e\u5173\u952e\u8def\u5f84\u6700\u76f4\u89c2\u7684\u8054\u7cfb\u3002AOE\u7f51\u662f\u4e00\u4e2a\u5e26\u6743\u7684\u6709\u5411\u65e0\u73af\u56fe\uff0c\u5176\u4e2d\u9876\u70b9\u8868\u793a\u4e8b\u4ef6\uff08Event\uff09\uff0c\u5f27\u8868\u793a\u6d3b\u52a8\uff0c\u6743\u8868\u793a\u6d3b\u52a8\u6301\u7eed\u7684\u65f6\u95f4\u3002\u4e0b\u9762\u7684\u5c31\u662f\u4e00\u4e2aAOE\u7f51\uff1a"]})}),"\n\n\n\n\n\n\n\n\n\n\n\n",(0,d.jsxs)(e.table,{children:[(0,d.jsx)(e.thead,{children:(0,d.jsx)(e.tr,{children:(0,d.jsx)(e.th,{style:{textAlign:"center"},children:"##container##"})})}),(0,d.jsx)(e.tbody,{children:(0,d.jsx)(e.tr,{children:(0,d.jsx)(e.td,{style:{textAlign:"center"},children:(0,d.jsx)(e.img,{alt:"Clip_2024-02-12_11-17-52.png ##w700##",src:i(49607).A+"",width:"1033",height:"478"})})})})]}),"\n",(0,d.jsx)(e.p,{children:(0,d.jsx)(e.span,{style:{marginLeft:"30px"},children:"\u5176\u4e2dv0\uff0cV1\uff0cV2...V8\u8868\u793a\u4e8b\u4ef6\uff0ca1...a11\u8868\u793a\u6d3b\u52a8\uff0c\u6d3b\u52a8\u7684\u53d6\u503c\u8868\u793a\u5b8c\u6210\u8be5\u6d3b\u52a8\u6240\u9700\u8981\u7684\u65f6\u95f4\uff0c\u5982a1=6\u8868\u793a\u5b8c\u6210\u6d3b\u52a8a1\u6240\u9700\u8981\u7684\u65f6\u95f4\u4e3a6\u5929\u3002\u6b64\u5916\uff0c\u6bcf\u4e00\u4e8b\u4ef6Vi\u8868\u793a\u5728\u5b83\u4e4b\u524d\u7684\u6d3b\u52a8\u5df2\u7ecf\u5b8c\u6210\uff0c\u5728\u5b83\u4e4b\u540e\u7684\u6d3b\u52a8\u53ef\u4ee5\u5f00\u59cb\uff0c\u5982V4\u8868\u793a\u6d3b\u52a8a4\u548ca5\u5df2\u7ecf\u5b8c\u6210\uff0c\u6d3b\u52a8a7\u548ca8\u53ef\u4ee5\u5f00\u59cb\u4e86\u3002"})}),"\n",(0,d.jsx)(e.h3,{id:"2aoe\u7f51\u7684\u6e90\u70b9\u548c\u6c47\u70b9",children:"2.AOE\u7f51\u7684\u6e90\u70b9\u548c\u6c47\u70b9"}),"\n",(0,d.jsx)(e.p,{children:(0,d.jsxs)(e.span,{style:{marginLeft:"30px"},children:["\u7531\u4e8e\u4e00\u4e2a\u5de5\u7a0b\u4e2d\u53ea\u6709\u4e00\u4e2a\u5f00\u59cb\u70b9\u548c\u4e00\u4e2a\u5b8c\u6210\u70b9\uff0c\u6545\u5c06AOE\u7f51\u4e2d",(0,d.jsx)(e.strong,{children:"\u5165\u5ea6\u4e3a\u96f6\u7684\u70b9\u79f0\u4e3a\u6e90\u70b9"}),"\uff0c\u5c06",(0,d.jsx)(e.strong,{children:"\u51fa\u5ea6\u4e3a\u96f6\u7684\u70b9\u79f0\u4e3a\u6c47\u70b9"}),"\u3002"]})}),"\n",(0,d.jsx)(e.p,{children:(0,d.jsx)(e.span,{style:{marginLeft:"30px"},children:"\u6253\u4e2a\u6bd4\u65b9\uff0c\u6211\u4eec\u73b0\u5728\u6709\u4e00\u4e2a\u5de5\u7a0b\uff0c\u5c31\u662f\u5c06\u5927\u8c61\u88c5\u8fdb\u51b0\u7bb1\uff0c\u90a3\u4e48\u6e90\u70b9\u5c31\u76f8\u5f53\u4e8e\u6211\u4eec\u73b0\u5728\u63a5\u5230\u8fd9\u6837\u4e00\u4e2a\u4efb\u52a1\uff0c\u800c\u6c47\u70b9\u5219\u8868\u793a\u6211\u4eec\u5b8c\u6210\u4e86\u8fd9\u4e2a\u4efb\u52a1\u3002\u90a3\u4e48\u6211\u4eec\u4e4b\u524d\u6240\u8bb2\u7684\u6253\u5f00\u51b0\u7bb1\u95e8\uff0c\u5c06\u5927\u8c61\u88c5\u8fdb\u53bb\uff0c\u5173\u4e0a\u51b0\u7bb1\u95e8\u5c31\u5c5e\u4e8e\u6d3b\u52a8\u672c\u8eab\uff08\u5373a1....a11\u6240\u8868\u793a\u7684\u4fe1\u606f\uff09\uff0c\u6253\u5f00\u51b0\u7bb1\u95e8\u6240\u9700\u8981\u7684\u65f6\u95f4\u5c31\u662f\u6d3b\u52a8\u6240\u9700\u8981\u7684\u65f6\u95f4\uff0c\u800c\u5b8c\u6210\u67d0\u4e00\u4e2a\u6d3b\u52a8\u6240\u5230\u8fbe\u7684\u9876\u70b9\u5c31\u8868\u793a\u4e00\u4e2a\u4e8b\u4ef6\uff08\u51b0\u7bb1\u95e8\u6253\u5f00\uff09\u3002\u4e0a\u56fe\u4e2d\u7684\u9876\u70b9V0\u8868\u793a\u6e90\u70b9\uff0cV8\u8868\u793a\u6c47\u70b9\u3002"})}),"\n",(0,d.jsx)(e.h3,{id:"3\u4ec0\u4e48\u662f\u5173\u952e\u8def\u5f84",children:"3.\u4ec0\u4e48\u662f\u5173\u952e\u8def\u5f84"}),"\n",(0,d.jsx)(e.p,{children:(0,d.jsx)(e.span,{style:{marginLeft:"30px"},children:"\u5510\u50e7\u5e08\u5f92\u4ece\u957f\u5b89\u51fa\u53d1\u53bb\u897f\u5929\u53d6\u7ecf\uff0c\u4f5b\u7956\u89c4\u5b9a\u53ea\u6709\u56db\u4eba\u4e00\u8d77\u5230\u8fbe\u897f\u5929\u65b9\u80fd\u53d6\u5f97\u771f\u7ecf\u3002\u5047\u5982\u5e08\u5f92\u56db\u4eba\u5206\u522b\u4ece\u957f\u5b89\u51fa\u53d1\uff0c\u8d70\u4e0d\u540c\u7684\u8def\u53bb\u897f\u5929\uff1a\u5b59\u609f\u7a7a\u4e00\u4e2a\u7b4b\u6597\u4e91\u5341\u4e07\u516b\u5343\u91cc\uff0c\u4e00\u76cf\u8336\u7684\u529f\u592b\u5c31\u5230\u4e86\uff1b\u516b\u6212\u548c\u6c99\u548c\u5c1a\u7a0d\u6162\u70b9\u4e5f\u5c31\u4e00\u5929\u5de6\u53f3\u7684\u65f6\u95f4\uff1b\u800c\u5510\u50e7\u6700\u6162\u9700\u898114\u5e74\u5de6\u53f3\u3002\u5f92\u5f1f\u5230\u8fbe\u540e\u662f\u8981\u7b49\u7740\u5e08\u5085\u7684\u3002\u90a3\u4e48\u7528\u65f6\u6700\u957f\u7684\u5510\u50e7\u6240\u8d70\u7684\u8def\uff0c\u5c31\u662f\u53d6\u7ecf\u4efb\u52a1\u4e2d\u7684\u5173\u952e\u8def\u5f84\u3002\u5176\u4ed6\u4eba\u8d70\u7684\u8def\u5f84\u5c5e\u4e8e\u975e\u5173\u952e\u8def\u5f84\u3002"})}),"\n",(0,d.jsx)(e.p,{children:(0,d.jsx)(e.span,{style:{marginLeft:"30px"},children:"\u7531\u4e8eAOE\u7f51\u4e2d\u7684\u6709\u4e9b\u6d3b\u52a8\u662f\u53ef\u4ee5\u5e76\u884c\u8fdb\u884c\u7684\uff08\u5982\u6d3b\u52a8a1\u3001a2\u548ca3\u5c31\u662f\u53ef\u4ee5\u5e76\u884c\u8fdb\u884c\u7684\uff09\uff0c\u6240\u4ee5\u5b8c\u6210\u5de5\u7a0b\u7684\u6700\u77ed\u65f6\u95f4\u662f\u4ece\u6e90\u70b9\u5230\u6c47\u70b9\u7684\u6700\u957f\u8def\u5f84\u7684\u957f\u5ea6\u3002\u8def\u5f84\u957f\u5ea6\u6700\u957f\u7684\u8def\u5f84\u5c31\u53eb\u505a\u5173\u952e\u8def\u5f84\uff08Critical Path\uff09\u3002\u5982\u4e0b\u56fe\u4e2d\u7ea2\u8272\u9876\u70b9\u548c\u6709\u5411\u8fb9\u6784\u6210\u7684\u5c31\u662f\u4e00\u6761\u5173\u952e\u8def\u5f84\uff0c\u5173\u952e\u8def\u5f84\u7684\u957f\u5ea6\u5c31\u662f\u5b8c\u6210\u6d3b\u52a8a1\u3001a4\u548ca9\u3001a10\u6240\u9700\u8981\u7684\u65f6\u95f4\u603b\u548c\uff0c\u5373\u4e3a 6+1+9+2=18\u3002"})}),"\n\n\n\n\n\n\n\n\n\n\n\n",(0,d.jsxs)(e.table,{children:[(0,d.jsx)(e.thead,{children:(0,d.jsx)(e.tr,{children:(0,d.jsx)(e.th,{style:{textAlign:"center"},children:"##container##"})})}),(0,d.jsx)(e.tbody,{children:(0,d.jsx)(e.tr,{children:(0,d.jsx)(e.td,{style:{textAlign:"center"},children:(0,d.jsx)(e.img,{alt:"Clip_2024-02-12_11-23-24.png ##w700##",src:i(75055).A+"",width:"1009",height:"469"})})})})]}),"\n",(0,d.jsx)(e.h3,{id:"4\u4ec0\u4e48\u662fetv",children:"4.\u4ec0\u4e48\u662fETV"}),"\n",(0,d.jsx)(e.p,{children:(0,d.jsxs)(e.span,{style:{marginLeft:"30px"},children:[(0,d.jsx)(e.strong,{children:"ETV(Earliest Time Of Vertex)"}),"\uff1a\u4e8b\u4ef6\u6700\u65e9\u53d1\u751f\u65f6\u95f4\uff0c\u5c31\u662f\u9876\u70b9\u7684\u6700\u65e9\u53d1\u751f\u65f6\u95f4\uff1b"]})}),"\n",(0,d.jsx)(e.p,{children:(0,d.jsx)(e.span,{style:{marginLeft:"30px"},children:"\u4e8b\u4ef6V1\u7684\u6700\u65e9\u53d1\u751f\u65f6\u95f4\u8868\u793a\u4ece\u6e90\u70b9V0\u51fa\u53d1\u5230\u8fbe\u9876\u70b9V1\u7ecf\u8fc7\u7684\u8def\u5f84\u4e0a\u7684\u6743\u503c\u4e4b\u548c\uff0c\u4ece\u6e90\u70b9V0\u51fa\u53d1\u5230\u8fbe\u9876\u70b9V1\u53ea\u7ecf\u8fc7\u4e86\u6743\u503c\u4e3a6\u7684\u8fb9\uff0c\u5219V1\u7684\u6700\u65e9\u53d1\u751f\u65f6\u95f4\u4e3a6\uff0c\u8868\u793a\u5728\u6d3b\u52a8a1\u5b8c\u6210\u4e4b\u540e\uff0c\u4e8b\u4ef6V1\u624d\u53ef\u4ee5\u5f00\u59cb\uff1b"})}),"\n",(0,d.jsx)(e.p,{children:(0,d.jsx)(e.span,{style:{marginLeft:"30px"},children:"\u540c\u7406\uff0c\u4e8b\u4ef6V5\u8981\u53d1\u751f\uff08\u5373\u6700\u65e9\u53d1\u751f\uff09\u9700\u8981\u6d3b\u52a8a3\u548c\u6d3b\u52a8a6\u5b8c\u6210\u4e4b\u540e\u624d\u53ef\u4ee5\uff0c\u6545\u4e8b\u4ef6V5\u7684\u6700\u65e9\u53d1\u751f\u65f6\u95f4\u4e3a5+2=7\u3002\u5176\u4ed6\u9876\u70b9\uff08\u4e8b\u4ef6\uff09\u7684\u6700\u65e9\u53d1\u751f\u65f6\u95f4\u540c\u7406\u53ef\u7684\u3002\u9700\u8981\u8bf4\u660e\uff0c\u4e8b\u4ef6\u7684\u6700\u65e9\u53d1\u751f\u65f6\u95f4\u4e00\u5b9a\u662f\u4ece\u6e90\u70b9\u5230\u8be5\u9876\u70b9\u8fdb\u884c\u8ba1\u7b97\u7684\u3002"})}),"\n",(0,d.jsx)(e.h3,{id:"5\u4ec0\u4e48\u662fltv",children:"5.\u4ec0\u4e48\u662fLTV"}),"\n",(0,d.jsx)(e.p,{children:(0,d.jsxs)(e.span,{style:{marginLeft:"30px"},children:[(0,d.jsx)(e.strong,{children:"LTV(Latest Time OfVertex)"}),"\uff1a\u4e8b\u4ef6\u6700\u665a\u53d1\u751f\u65f6\u95f4\uff0c\u5c31\u662f\u6bcf\u4e2a\u9876\u70b9\u5bf9\u5e94\u7684\u4e8b\u4ef6\u6700\u665a\u9700\u8981\u5f00\u59cb\u7684\u65f6\u95f4\uff0c\u5982\u679c\u8d85\u51fa\u6b64\u65f6\u95f4\u5c06\u4f1a\u5ef6\u8bef\u6574\u4e2a\u5de5\u671f\u3002"]})}),"\n",(0,d.jsx)(e.p,{children:(0,d.jsx)(e.span,{style:{marginLeft:"30px"},children:"\u524d\u9762\u5728\u8c08\u5173\u952e\u8def\u5f84\u7684\u6982\u5ff5\u65f6\u7ed9\u51fa\u4e86\u4e00\u6761\u4e0a\u56fe\u4e2d\u7684\u5173\u952e\u8def\u5f84\uff0c\u8be5\u5173\u952e\u8def\u5f84\uff08V0\uff0cV1\uff0cV4\uff0cV6,V8\uff09\u7684\u957f\u5ea6\u4e3a18\uff0c\u4e3a\u4ec0\u4e48\u8981\u63d0\u8fd9\u4e2a\u957f\u5ea6\u5462\uff0c\u56e0\u4e3a\u8981\u8ba1\u7b97\u67d0\u4e00\u4e2a\u4e8b\u4ef6\u7684\u6700\u665a\u53d1\u751f\u65f6\u95f4\uff0c\u6211\u4eec\u9700\u8981\u4ece\u6c47\u70b9V8\u8fdb\u884c\u5012\u63a8\u3002\u8ba1\u7b97\u9876\u70b9V1\u7684\u6700\u665a\u53d1\u751f\u65f6\u95f4\u4e3a\u4f8b\uff0c\u5df2\u77e5\u5173\u952e\u8def\u5f84\u7684\u957f\u5ea6\u4e3a18\uff0c\u4e8b\u4ef6V1\u5230\u6c47\u70b9V8\u6240\u9700\u8981\u7684\u65f6\u95f4\u4e3a 1+9+2=12\uff0c\u5219\u4e8b\u4ef6V1\u7684\u6700\u665a\u53d1\u751f\u65f6\u95f4\u4e3a18-12=6\uff0c\u8fd9\u65f6\u5019\u6211\u4eec\u53d1\u73b0\uff0c\u8fd9\u548c\u4e8b\u4ef6V2\u7684\u6700\u65e9\u53d1\u751f\u65f6\u95f4\u4e0d\u662f\u4e00\u6837\u5417\uff1f\u7684\u786e\u5982\u6b64\uff0c\u5bf9\u4e8e\u5173\u952e\u8def\u5f84\u4e0a\u7684\u9876\u70b9\u90fd\u6ee1\u8db3\u6700\u65e9\u53d1\u751f\u65f6\u95f4etv \u7b49\u4e8e\u6700\u665a\u53d1\u751f\u65f6\u95f4Itv \u7684\u60c5\u51b5\uff0c\u8fd9\u4e5f\u662f\u6211\u4eec\u8bc6\u522b\u5173\u952e\u6d3b\u52a8\u7684\u5173\u952e\u6240\u5728\u3002"})}),"\n",(0,d.jsx)(e.p,{children:(0,d.jsx)(e.span,{style:{marginLeft:"30px"},children:"\u518d\u6765\u8ba1\u7b97\u4e00\u4e0b\u4e8b\u4ef6V5\u7684\u6700\u665a\u53d1\u751f\u65f6\u95f4\uff0c\u4e8b\u4ef6V5\u5230\u6c47\u70b9V8\u6240\u9700\u8981\u7684\u65f6\u95f4\u4e3a4+4=8\uff0c\u5219\u4e8b\u4ef6V5\u7684\u6700\u665a\u53d1\u751f\u65f6\u95f4\u4e3a 18\uff0d8=10\uff1b\u76f8\u5f53\u4e8e\u8bf4\u6d3b\u52a8a6\u5b8c\u6210\u4e4b\u540e\uff0c\u5927\u53ef\u4ee5\u4f11\u606f3\u5929\uff0c\u518d\u53bb\u5b8c\u6210\u6d3b\u52a8a9\u4e5f\u4e0d\u4f1a\u5f71\u54cd\u6574\u4e2a\u5de5\u671f\u3002"})}),"\n",(0,d.jsx)(e.h3,{id:"6\u4ec0\u4e48\u662fete",children:"6.\u4ec0\u4e48\u662fETE"}),"\n",(0,d.jsx)(e.p,{children:(0,d.jsxs)(e.span,{style:{marginLeft:"30px"},children:[(0,d.jsx)(e.strong,{children:"ETE(Earliest Time Of Edge)"}),"\uff1a\u6d3b\u52a8\u7684\u6700\u65e9\u5f00\u5de5\u65f6\u95f4\uff0c\u5c31\u662f\u5f27\u7684\u6700\u65e9\u53d1\u751f\u65f6\u95f4\uff0c\u5c31\u662f\u4e8b\u4ef6\u7684\u6700\u65e9\u53d1\u751f\u65f6\u95f4\u3002"]})}),"\n",(0,d.jsx)(e.p,{children:(0,d.jsx)(e.span,{style:{marginLeft:"30px"},children:"\u6d3b\u52a8a4\u8981\u6700\u65e9\u5f00\u5de5\u65f6\u95f4\u4e3a\u4e8b\u4ef6V1\u7684\u6700\u65e9\u53d1\u751f\u65f6\u95f46\uff1b\u540c\u7406\uff0c\u6d3b\u52a8a9\u7684\u6700\u65e9\u5f00\u5de5\u65f6\u95f4\u4e3a\u4e8b\u4ef6v5\u7684\u6700\u65e9\u53d1\u751f\u65f6\u95f47\u3002\u663e\u7136\u6d3b\u52a8\u7684\u6700\u65e9\u5f00\u5de5\u65f6\u95f4\u5c31\u662f\u6d3b\u52a8\u53d1\u751f\u524d\u7684\u4e8b\u4ef6\u7684\u6700\u65e9\u5f00\u59cb\u65f6\u95f4\u3002"})}),"\n",(0,d.jsx)(e.h3,{id:"7\u4ec0\u4e48\u662flte",children:"7.\u4ec0\u4e48\u662fLTE"}),"\n",(0,d.jsx)(e.p,{children:(0,d.jsxs)(e.span,{style:{marginLeft:"30px"},children:[(0,d.jsx)(e.strong,{children:"LTE(Lastest Time of Edge)"}),"\uff1a\u6d3b\u52a8\u7684\u6700\u665a\u5f00\u5de5\u65f6\u95f4\uff0c\u5c31\u662f\u4e0d\u63a8\u8fdf\u5de5\u671f\u7684\u6700\u665a\u5f00\u5de5\u65f6\u95f4\u3002"]})}),"\n",(0,d.jsx)(e.p,{children:(0,d.jsx)(e.span,{style:{marginLeft:"30px"},children:"\u6d3b\u52a8\u7684\u6700\u665a\u5f00\u5de5\u65f6\u95f4\u5219\u662f\u57fa\u4e8e\u4e8b\u4ef6\u7684\u6700\u665a\u53d1\u751f\u65f6\u95f4\u3002\u6bd4\u5982\u6d3b\u52a8a4\u7684\u6700\u665a\u5f00\u5de5\u65f6\u95f4\u4e3a\u4e8b\u4ef6V4\u7684\u6700\u665a\u53d1\u751f\u65f6\u95f4\u51cf\u53bb\u5b8c\u6210\u6d3b\u52a8a4\u6240\u9700\u65f6\u95f4\uff0c\u53737\uff0d1=6\uff1b\u6d3b\u52a8a9\u7684\u6700\u665a\u5f00\u5de5\u65f6\u95f4\u4e3a\u4e8b\u4ef6V7\u7684\u6700\u665a\u53d1\u751f\u65f6\u95f4\u51cf\u53bb\u5b8c\u6210\u6d3b\u52a8a9\u6240\u9700\u65f6\u95f4\uff0c\u5373 14\uff0d4=10;"})}),"\n",(0,d.jsx)(e.p,{children:(0,d.jsx)(e.span,{style:{marginLeft:"30px"},children:"\u4ece\u4e0a\u9762\u4e5f\u5c31\u53ef\u4ee5\u770b\u51fa\u53ea\u8981\u77e5\u9053\u4e86\u6bcf\u4e00\u4e2a\u4e8b\u4ef6\uff08\u9876\u70b9\uff09\u7684ETV\u548cLTV\uff0c\u5c31\u53ef\u4ee5\u63a8\u65ad\u51fa\u5bf9\u5e94\u7684ETE\u548cLTE\uff0e\u6b64\u5916\u8fd8\u9700\u8981\u6ce8\u610f\uff0c\u5173\u952e\u8def\u5f84\u662f\u6d3b\u52a8\u7684\u96c6\u5408\uff0c\u800c\u4e0d\u662f\u4e8b\u4ef6\u7684\u96c6\u5408\uff0c\u6240\u4ee5\u5f53\u6211\u4eec\u6c42\u5f97ETV\u548cLTV \u4e4b\u540e\uff0c\u8fd8\u9700\u8981\u8ba1\u7b97 ETE \u548cLTE\u3002"})}),"\n",(0,d.jsx)(e.h2,{id:"\u4e8c\u5173\u952e\u8def\u5f84\u7b97\u6cd5",children:"\u4e8c\u3001\u5173\u952e\u8def\u5f84\u7b97\u6cd5"}),"\n",(0,d.jsx)(e.p,{children:(0,d.jsx)(e.span,{style:{marginLeft:"30px"},children:"\u6c42\u5173\u952e\u8def\u5f84\u7684\u8fc7\u7a0b\u4e8b\u5b9e\u4e0a\u6700\u91cd\u8981\u7684\u5c31\u662f\u4e0a\u9762\u63d0\u5230\u7684\u56db\u4e2a\u6982\u5ff5\uff0cETV\u3001LTV\u3001ETE \u548cLTE\uff0c\u6c42\u5f97\u4e86ETE\u4e0eLTE\u4e4b\u540e\u53ea\u9700\u8981\u5224\u65ad\u4e24\u8005\u662f\u5426\u76f8\u7b49\uff0c\u5982\u679c\u76f8\u7b49\u5219\u4e3a\u5173\u952e\u8def\u5f84\u4e2d\u7684\u4e00\u6761\u8fb9\uff0c\u5219\u8f93\u51fa\u3002"})}),"\n\n\n\n\n\n\n\n\n\n\n\n",(0,d.jsxs)(e.table,{children:[(0,d.jsx)(e.thead,{children:(0,d.jsx)(e.tr,{children:(0,d.jsx)(e.th,{style:{textAlign:"center"},children:"##container##"})})}),(0,d.jsx)(e.tbody,{children:(0,d.jsx)(e.tr,{children:(0,d.jsx)(e.td,{style:{textAlign:"center"},children:(0,d.jsx)(e.img,{alt:"Clip_2024-02-12_11-39-32.png ##w800##",src:i(63417).A+"",width:"2191",height:"991"})})})})]}),"\n",(0,d.jsx)(e.h2,{id:"\u4e09\u4ee3\u7801",children:"\u4e09\u3001\u4ee3\u7801"}),"\n",(0,d.jsx)(e.h3,{id:"\u7ade\u8d5b\u7248",children:"\u7ade\u8d5b\u7248"}),"\n",(0,d.jsx)(e.h3,{id:"\u5b66\u4e60\u7248",children:"\u5b66\u4e60\u7248"}),"\n",(0,d.jsx)(e.pre,{children:(0,d.jsx)(e.code,{className:"language-C",children:'#include <stdio.h>\n#include <stdlib.h>\n\ntypedef struct _AdjacencyListNode\n{\n    int index;\n    int w;\n    struct _AdjacencyListNode *next;    // \u6709\u6743\u4e5f\u53ef\u518d\u52a0\n} AdjacencyListNode;\n\ntypedef struct\n{\n    char **show;                // data \u53ef\u4ee5\u641e\u4e2a\u552f\u4e00\u8bc6\u522b\u7801\n    AdjacencyListNode **list;\n\n    /* \u7528\u4e8e\u5feb\u901f\u63d2\u5165 */\n    int n;\n    int add_index;\n    int e_num;\n\n    /* \u7528\u4e8e\u904d\u5386 */\n    _Bool *tag_arr;\n} AdjacencyList;\n\nAdjacencyList *initAdjacencyList(int n);                    // \u521d\u59cb\u5316\u90bb\u63a5\u8868\nvoid addAdjacencyListNode(AdjacencyList *A, char *show);    // \u6dfb\u52a0\u5143\u7d20\n_Bool connectAdjacencyListNode(AdjacencyList *A, char *show_1, char *show_2, int w);   // \u8fde\u63a5\u7ed3\u70b9\nvoid DFS(AdjacencyList *A, int index);                      // \u6df1\u5ea6\u4f18\u5148\u904d\u5386\nvoid BFS(AdjacencyList *A, int index);                      // \u5e7f\u5ea6\u4f18\u5148\u904d\u5386\nvoid initTagArr(AdjacencyList *A);\nvoid freeAdjacencyList(AdjacencyList *A);\n\nvoid initTagArr(AdjacencyList *A)\n{\n    for (int i = 0; i < A->n; ++i)\n    {\n        A->tag_arr[i] = 0;\n    }\n}\n\nAdjacencyList *initAdjacencyList(int n)\n{\n    AdjacencyList* A = (AdjacencyList *)malloc(sizeof(AdjacencyList));\n    if (!A)\n    {\n        MALLOC_ERROR:\n        printf("MALLOC ERROR!\\n");\n        return NULL;\n    }\n    A->show = (char **)malloc(sizeof(char *) * n);\n    if (!A->show)\n        goto MALLOC_ERROR;\n    \n    A->list = (AdjacencyListNode **)malloc(sizeof(AdjacencyListNode *) * n);\n    if (!A->list)\n        goto MALLOC_ERROR;\n    \n    A->tag_arr = (_Bool *)malloc(sizeof(_Bool) * n);\n    if (!A->tag_arr)\n        goto MALLOC_ERROR;\n    A->n = n;\n    initTagArr(A);\n    for (int i = 0; i < n; ++i)\n    {\n        A->list[i] = NULL;\n    }\n    A->add_index = 0;\n    A->e_num = 0;\n    return A;\n}\n\nvoid addAdjacencyListNode(AdjacencyList *A, char *show)\n{\n    if (A->add_index == A->n)\n        return; // \u6ee1\n    \n    A->show[A->add_index++] = show;\n}\n\n// \u5b9a\u4e49\u4e3a show_1 --\x3e show_2 (\u6709\u5411\u56fe)\n_Bool connectAdjacencyListNode(AdjacencyList *A, char *show_1, char *show_2, int w)\n{\n    int i_1 = -1;\n    for (int i = 0; i < A->add_index; ++i)\n    {\n        if (A->show[i] == show_1)\n        {\n            i_1 = i;\n            break;\n        }\n    }\n\n    if (i_1 == -1)\n        return 0;   // \u6ca1\u627e\u5230\n    \n    int i_2 = -1;\n    for (int i = 0; i < A->add_index; ++i)\n    {\n        if (A->show[i] == show_2)\n        {\n            i_2 = i;\n            break;\n        }\n    }\n\n    if (i_2 == -1)\n        return 0;   // \u6ca1\u627e\u5230\n    \n    AdjacencyListNode *p = (AdjacencyListNode *)malloc(sizeof(AdjacencyListNode));\n    if (!p)\n        return 0; // malloc error!\n    \n    ++A->e_num;\n    p->w = w;\n    p->index = i_2;\n    p->next = A->list[i_1];\n    A->list[i_1] = p;\n    return 1;\n}\n\nvoid DFS(AdjacencyList *A, int index)\n{\n    printf("%s ", A->show[index]);\n    A->tag_arr[index] = 1;\n    AdjacencyListNode *p = A->list[index];\n    while (p)\n    {\n        if (!A->tag_arr[p->index])\n            DFS(A, p->index);\n        p = p->next;\n    }\n}\n\n// \u53ea\u80fd\u904d\u5386\u8fde\u901a\u56fe, \u4e0d\u8fde\u901a\u9700\u8981\u518d\u52a0\u4e2afor!\nvoid BFS(AdjacencyList *A, int index)\n{\n    // \u4e34\u65f6\u961f\u5217\n    int queue[A->add_index + 1];\n    int q_h = 0, q_t = 0;\n    queue[q_t++] = index;\n    A->tag_arr[index] = 1;\n    while (q_t != q_h)\n    {\n        printf("%s ", A->show[queue[q_h]]);\n        AdjacencyListNode *p = A->list[queue[q_h]];\n        while (p)\n        {\n            if (!A->tag_arr[p->index])\n            {\n                queue[q_t] = p->index;\n                A->tag_arr[p->index] = 1;\n                q_t = (q_t + 1) % (A->add_index + 1);\n            }\n            p = p->next;\n        }\n        q_h = (q_h + 1) % (A->add_index + 1);\n    }\n}\n\nvoid freeAdjacencyList(AdjacencyList *A)\n{\n    for (int i = 0; i < A->add_index; ++i)\n    {\n        AdjacencyListNode *p = A->list[i];\n        AdjacencyListNode *tmp = NULL;\n        while (p)\n        {\n            tmp = p;\n            p = p->next;\n            free(tmp);\n        }\n    }\n\n    free(A->tag_arr);\n    free(A->show);\n    free(A->list);\n    free(A);\n}\n\nvoid criticalPath(AdjacencyList *A);    // \u8f93\u51fa\u5173\u952e\u8def\u5f84\n\n// \u4f20\u5165\u90bb\u63a5\u8868\nvoid criticalPath(AdjacencyList *A)\n{\n    // ETV\u3001LTV\u3001ETE \u548c LTE\uff0c\n    // \u6c42\u5f97\u4e86ETE\u4e0eLTE\u4e4b\u540e\u53ea\u9700\u8981\u5224\u65ad\u4e24\u8005\u662f\u5426\u76f8\u7b49\uff0c\u5982\u679c\u76f8\u7b49\u5219\u4e3a\u5173\u952e\u8def\u5f84\u4e2d\u7684\u2f00\u6761\u8fb9\uff0c\u5219\u8f93\u51fa\u3002\n    int *ETV = (int *)malloc(sizeof(int) * A->add_index);\n    if (!ETV)\n    {\n        ERROR:\n        printf("malloc error!\\n");\n        return;\n    }\n    int *LTV = (int *)malloc(sizeof(int) * A->add_index);\n    if (!LTV)\n        goto ERROR;\n\n    int *ETE = (int *)malloc(sizeof(int) * A->e_num);\n    if (!ETE)\n        goto ERROR;\n\n    int *LTE = (int *)malloc(sizeof(int) * A->e_num);\n    if (!LTE)\n        goto ERROR;\n\n    // \u6784\u5efa\u4e00\u4e2a\u6570\u7ec4, \u901a\u8fc7\u4e00\u6b21\u90bb\u63a5\u8868\u7684\u904d\u5386, \u5f97\u5230\u5bf9\u4e8e\u5143\u7d20\u7684\u5165\u5ea6\n    int *penetration = (int *)malloc(sizeof(int) * A->add_index);   // \u5165\u5ea6\u6570\u7ec4\n    if (!penetration)\n        goto ERROR;\n\n    // \u4e34\u65f6\u961f\u5217<\u7ebf\u6027>\n    int *queue = (int *)malloc(sizeof(int) * A->add_index);\n    if (!queue)\n        goto ERROR;\n\n    int queue_head = 0, queue_tail = 0;\n\n    int ETE_index = 0;\n    AdjacencyListNode *tmp = NULL;\n    // \u521d\u59cb\u5316\u5165\u5ea6\u6570\u7ec4\u4ee5\u53caEELLVV\n    for (int i = 0; i < A->add_index; ++i)\n    {\n        penetration[i] = 0;\n        ETV[i] = 0;\n        LTV[i] = 0;\n        ETE[i] = 0;\n        LTE[i] = 0;\n    }\n\n    for (int i = A->add_index; i < A->e_num; ++i)\n    {\n        ETE[i] = 0;\n        LTE[i] = 0;\n    }\n\n    // \u904d\u5386\u90bb\u63a5\u8868\n    for (int i = 0; i < A->add_index; ++i)\n    {\n        tmp = A->list[i];\n        \n        while (tmp)\n        {\n            ++penetration[tmp->index];\n            tmp = tmp->next;\n        }\n    }\n\n    // \u6b63\u5f0f\u5f00\u59cb\n    for (int i = 0; i < A->add_index; ++i)\n    {\n        if (penetration[i] == 0)\n        {\n            // \u5bfb\u627e\u6e90\u70b9\n            // \u53ea\u6709\u4e00\u4e2a\u5165\u5ea6\u4e3a0\u7684\u70b9(\u5355\u6e90\u70b9)\n            penetration[i] = -1;    // \u8bb0\u5f97\u8981\u8fd9\u4e2a!!!\n            queue[queue_tail] = i;\n            queue_tail = (queue_tail + 1) % A->add_index;\n            // ETV[ETV_index++] = 0; // \u56e0\u4e3a\u521d\u59cb\u5316\u4e3a0\u6240\u4ee5\u53ef\u4ee5\u7701\u7565\n            break;\n        }\n    }\n\n    // \u5173\u952e\u8def\u5f84 - \u62d3\u6251\u6392\u5e8f\n    while (queue_head != queue_tail)\n    {\n        // \u51fa\u961f\n        int index = queue[queue_head];\n        \n        // \u5220\u9664\n        tmp = A->list[queue_head];\n        // printf("\u51fa\u961f: %s [H:%d, T:%d]\\n", A->show[queue_head], queue_head, queue_tail);\n        queue_head = (queue_head + 1) % A->add_index;\n        while (tmp)\n        {\n            --penetration[tmp->index];\n            // ETV\n            if (ETV[tmp->index] < ETV[index] + tmp->w) // max\n            {\n                // printf("[--\x3e%s]%d < [%s]%d + [--[w]:%d--\x3e%s]\\n", A->show[tmp->index],ETV[tmp->index], A->show[index],ETV[index], tmp->w, A->show[tmp->index]);\n                ETV[tmp->index] = ETV[index] + tmp->w;\n            }\n\n            // ETE\n            // \u56e0\u4e3a\u8fb9\u53ea\u4f1a\u51fa\u73b0\u4e00\u6b21\u4e8e\u5faa\u73af\u4e2d, \u6240\u4ee5\u91c7\u7528zero\u5f00\u59cb\u8ba1\u6570\n            ETE[ETE_index++] = ETV[index];\n\n            tmp = tmp->next;\n        }\n\n        for (int i = 0; i < A->add_index; ++i)\n        {\n            if (penetration[i] == 0)    // \u5165\u5ea6\u4e3a0\n            {\n                penetration[i] = -1;    // \u6807\u8bb0\u4e3a\u5df2\u5904\u7406\n                // \u5165\u961f\n                queue[queue_tail] = i;\n                // printf("\u5165\u961f: %s [H:%d, T:%d]\\n", A->show[i], queue_head, queue_tail);\n                queue_tail = (queue_tail + 1) % A->add_index;\n            }\n        }\n    }\n\n    // LTV\n    for (int i = A->add_index - 1, j = A->e_num - 1; i >= 0; --i)\n    {\n        int min = INT_MAX;\n        tmp = A->list[i];\n        while(tmp)\n        {\n            if (LTV[tmp->index] - tmp->w < min)\n                min = LTV[tmp->index] - tmp->w;\n            // LTE\n            // \u4eceLTV\u53d6 j \u7684\u8fb9\u6307\u5411\u7684\u5165\u5ea6\u6743 <\u8fd9\u91cc\u5f88\u5de7\u5999, \u9700\u8981\u7ec6\u7ec6\u4f53\u4f1a, \u611f\u89c9\u4e0d\u80fd\u63cf\u8ff0 \u7684\u55b5~>\n            // \u5c31\u662f j \u5fc5\u987b\u4f1a\u5728 LTV\u5904\u7406\u597d\u540e\u4f7f\u7528\n            // LTE\u6570\u7ec4\u7684\u7d22\u5f15\u662f\u88ab\u89c4\u5b9a\u7684, \u5e76\u4e14\u6bcf\u6b21\u4f7f\u7528\u90fd\u662f i \u7ed3\u70b9\u7684\u51fa\u5ea6\u8fb9,\n            // \u5e76\u4e14\u56e0\u4e3a\u8fd9\u4e2a\u8fb9\u53ea\u4f1a\u51fa\u73b0\u4e00\u6b21, \u6240\u4ee5--j\u5207\u6362\u4e0b\u4e00\u4e2a\u4f4d\u7f6e\n            // \u503c\u5f97\u6ce8\u610f\u7684\u662f: \u8fd9\u4e2a j \u4f1a\u8df3\u8fc7LTV\u6700\u540e\u4e00\u4e2a(LTV[i] = ETV[i];)\u56e0\u4e3a\u8fd9\u4e2a\u6761\u4ef6\u4e0btmp==NULL, \u4f46LTE\u7d22\u5f15\u4f4d\u7f6e\u4e0d\u53d8(\u56e0\u4e3a\u662f\u5728tmp!=NULL\u4e0b\u624d\u4f1a\u8ba1\u7b97\u7684)\n            LTE[j] = LTV[tmp->index] - tmp->w;\n            tmp = tmp->next;\n            --j;\n        }\n\n        if (min == INT_MAX)\n            LTV[i] = ETV[i];\n        else\n            LTV[i] = min;\n    }\n\n    // \u6682\u65f6\u8f93\u51fa:\n    printf("ETV: ");\n    for (int i = 0; i < A->add_index; ++i)\n    {\n        printf("%2d ", ETV[i]);\n    }\n    printf("\\n");\n\n    printf("LTV: ");\n    for (int i = 0; i < A->add_index; ++i)\n    {\n        printf("%2d ", LTV[i]);\n    }\n    printf("\\n");\n\n    printf("ETE: ");\n    for (int i = 0; i < A->e_num; ++i)\n    {\n        printf("%2d ", ETE[i]);\n    }\n    printf("\\n");\n\n    printf("LET: ");\n    for (int i = 0; i < A->e_num; ++i)\n    {\n        printf("%2d ", LTE[i]);\n    }\n    printf("\\n");\n\n    // \u5982\u679c\u4e0d\u7528\u8fd9\u4e9b\u6570\u7ec4:\n    free(queue);\n    free(ETV);\n    free(LTV);\n    free(ETE);\n    free(LTE);\n}\n\nint main(void)\n{\n    //  - \u5173\u952e\u8def\u5f84 - \u6709\u5411\u6709\u6743\u56fe\u5e76\u4e14\u53ea\u6709\u4e00\u4e2a\u5165\u5ea6\u4e3a0\u7684\u70b9(\u5355\u6e90\u70b9)\n    // \u90bb\u63a5\u8868\n    AdjacencyList *A = initAdjacencyList(9);\n    addAdjacencyListNode(A, "v0");\n    addAdjacencyListNode(A, "v1");\n    addAdjacencyListNode(A, "v2");\n    addAdjacencyListNode(A, "v3");\n    addAdjacencyListNode(A, "v4");\n    addAdjacencyListNode(A, "v5");\n    addAdjacencyListNode(A, "v6");\n    addAdjacencyListNode(A, "v7");\n    addAdjacencyListNode(A, "v8");\n\n    connectAdjacencyListNode(A, "v0", "v1", 6);\n    connectAdjacencyListNode(A, "v0", "v2", 4);\n    connectAdjacencyListNode(A, "v0", "v3", 5);\n\n    connectAdjacencyListNode(A, "v1", "v4", 1);\n\n    connectAdjacencyListNode(A, "v2", "v4", 1);\n\n    connectAdjacencyListNode(A, "v3", "v5", 2);\n\n    connectAdjacencyListNode(A, "v4", "v6", 9);\n    connectAdjacencyListNode(A, "v4", "v7", 7);\n\n    connectAdjacencyListNode(A, "v5", "v7", 4);\n\n    connectAdjacencyListNode(A, "v6", "v8", 2);\n    \n    connectAdjacencyListNode(A, "v7", "v8", 4);\n\n    criticalPath(A);\n    getchar();\n    return 0;\n}\n'})})]})}function A(n={}){const{wrapper:e}={...(0,a.R)(),...n.components};return e?(0,d.jsx)(e,{...n,children:(0,d.jsx)(o,{...n})}):o(n)}}}]);