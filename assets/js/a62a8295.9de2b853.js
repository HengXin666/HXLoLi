"use strict";(self.webpackChunkhx_loli=self.webpackChunkhx_loli||[]).push([[44729],{28453:(n,t,i)=>{i.d(t,{R:()=>L,x:()=>r});var e=i(96540);const s={},l=e.createContext(s);function L(n){const t=e.useContext(l);return e.useMemo((function(){return"function"==typeof n?n(t):{...t,...n}}),[t,n])}function r(n){let t;return t=n.disableParentContext?"function"==typeof n.components?n.components(s):n.components||s:L(n.components),e.createElement(l.Provider,{value:t},n.children)}},81546:(n,t,i)=>{i.r(t),i.d(t,{assets:()=>d,contentTitle:()=>r,default:()=>c,frontMatter:()=>L,metadata:()=>e,toc:()=>a});const e=JSON.parse('{"id":"\u8ba1\u4f6c\u5e38\u8b58/\u6570\u636e\u7ed3\u6784\u4e0e\u7b97\u6cd5/\u3010\u6570\u636e\u7ed3\u6784\u3011\u7ebf\u6027\u8868/\u987a\u5e8f\u5b58\u50a8\u7ed3\u6784\u4e36\u6570\u7ec4/index","title":"\u7ebf\u6027\u5b58\u50a8\u7ed3\u6784-\u6570\u7ec4","description":"\u4ee3\u7801\u5b9e\u73b0","source":"@site/docs/001-\u8ba1\u4f6c\u5e38\u8b58/001-\u6570\u636e\u7ed3\u6784\u4e0e\u7b97\u6cd5/003-\u3010\u6570\u636e\u7ed3\u6784\u3011\u7ebf\u6027\u8868/002-\u987a\u5e8f\u5b58\u50a8\u7ed3\u6784\u4e36\u6570\u7ec4/index.md","sourceDirName":"001-\u8ba1\u4f6c\u5e38\u8b58/001-\u6570\u636e\u7ed3\u6784\u4e0e\u7b97\u6cd5/003-\u3010\u6570\u636e\u7ed3\u6784\u3011\u7ebf\u6027\u8868/002-\u987a\u5e8f\u5b58\u50a8\u7ed3\u6784\u4e36\u6570\u7ec4","slug":"/\u8ba1\u4f6c\u5e38\u8b58/\u6570\u636e\u7ed3\u6784\u4e0e\u7b97\u6cd5/\u3010\u6570\u636e\u7ed3\u6784\u3011\u7ebf\u6027\u8868/\u987a\u5e8f\u5b58\u50a8\u7ed3\u6784\u4e36\u6570\u7ec4/","permalink":"/HXLoLi/docs/\u8ba1\u4f6c\u5e38\u8b58/\u6570\u636e\u7ed3\u6784\u4e0e\u7b97\u6cd5/\u3010\u6570\u636e\u7ed3\u6784\u3011\u7ebf\u6027\u8868/\u987a\u5e8f\u5b58\u50a8\u7ed3\u6784\u4e36\u6570\u7ec4/","draft":false,"unlisted":false,"editUrl":"https://github.com/HengXin666/HXLoLi/edit/main/docs/001-\u8ba1\u4f6c\u5e38\u8b58/001-\u6570\u636e\u7ed3\u6784\u4e0e\u7b97\u6cd5/003-\u3010\u6570\u636e\u7ed3\u6784\u3011\u7ebf\u6027\u8868/002-\u987a\u5e8f\u5b58\u50a8\u7ed3\u6784\u4e36\u6570\u7ec4/index.md","tags":[],"version":"current","lastUpdatedBy":"Heng_Xin_666","lastUpdatedAt":1745851959000,"frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"\u7ebf\u6027\u8868","permalink":"/HXLoLi/docs/\u8ba1\u4f6c\u5e38\u8b58/\u6570\u636e\u7ed3\u6784\u4e0e\u7b97\u6cd5/\u3010\u6570\u636e\u7ed3\u6784\u3011\u7ebf\u6027\u8868/\u7ebf\u6027\u8868/"},"next":{"title":"\u987a\u5e8f\u5b58\u50a8\u7ed3\u6784\u4e36\u9759\u6001\u94fe\u8868","permalink":"/HXLoLi/docs/\u8ba1\u4f6c\u5e38\u8b58/\u6570\u636e\u7ed3\u6784\u4e0e\u7b97\u6cd5/\u3010\u6570\u636e\u7ed3\u6784\u3011\u7ebf\u6027\u8868/\u987a\u5e8f\u5b58\u50a8\u7ed3\u6784\u4e36\u9759\u6001\u94fe\u8868/"}}');var s=i(74848),l=i(28453);const L={},r="\u7ebf\u6027\u5b58\u50a8\u7ed3\u6784-\u6570\u7ec4",d={},a=[{value:"\u4ee3\u7801\u5b9e\u73b0",id:"\u4ee3\u7801\u5b9e\u73b0",level:2}];function o(n){const t={code:"code",h1:"h1",h2:"h2",header:"header",pre:"pre",...(0,l.R)(),...n.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(t.header,{children:(0,s.jsx)(t.h1,{id:"\u7ebf\u6027\u5b58\u50a8\u7ed3\u6784-\u6570\u7ec4",children:"\u7ebf\u6027\u5b58\u50a8\u7ed3\u6784-\u6570\u7ec4"})}),"\n",(0,s.jsx)(t.h2,{id:"\u4ee3\u7801\u5b9e\u73b0",children:"\u4ee3\u7801\u5b9e\u73b0"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-C",children:'#include <stdio.h>\n\n#define MAXSIZE 20\n#define OK 1    // \u7a0b\u5e8f\u6b63\u5e38\u8fd0\u884c\n#define ERROR 0 // \u7a0b\u5e8f\u8fd0\u884c\u62a5\u9519\n#define TRUE 1  //\n#define FALSE 0 //\n\n// --- \u7ebf\u6027\u8868 \u5c01\u88c5 --- (\u5b9e\u9645\u4e0a\u662f\u5bf9\u6570\u7ec4\u8fdb\u884c\u5c01\u88c5)\ntypedef int ElemType;\ntypedef struct{\n    ElemType data[MAXSIZE];\n    int length;\n} SqList;\n\nvoid initList(SqList *L);                  // \u521d\u59cb\u5316\u64cd\u4f5c, \u5efa\u7acb\u4e00\u4e2a\u7a7a\u7684\u7ebf\u6027\u8868\nint listEmpty(SqList L);                   // \u5224\u65ad\u662f\u5426\u4e3a\u7a7a\u8868 1\u662f0\u5426\nvoid clearList(SqList *L);                 // \u5c06\u7ebf\u6027\u8868\u6e05\u7a7a\nvoid getElem(SqList L, int i, int *e);     // \u5c06\u7ebf\u6027\u8868L\u7b2ci\u4e2a\u5143\u7d20\u8fd4\u56de\u7ed9e\nint locateElem(SqList L, int e);           // \u67e5\u627e\u7ebf\u6027\u8868L\u4e2d\u662f\u5426\u6709\u503c\u4e3ae\u7684\u5143\u7d20, \u6709\u5219\u8fd4\u56de\u5176\u5728\u8868\u4e2d\u7684\u5e8f\u53f7, \u54260\nint listInsert(SqList *L, int i, int e);   // \u5728\u7ebf\u6027\u8868L\u4e2d\u7b2ci\u4e2a\u4f4d\u7f6e\u63d2\u5165\u65b0\u5143\u7d20e\nint listDelete(SqList *L, int i, int *e);  // \u5220\u9664\u7ebf\u6027\u8868L\u4e2d\u7b2ci\u4e2a\u4f4d\u7f6e\u7684\u5143\u7d20, \u5e76\u8fd4\u56de\u5176\u503c\u7ed9e\nint listAdd(SqList *L, int e);             // \u5728\u7ebf\u6027\u8868\u5c3e\u90e8\u6dfb\u52a0\u5143\u7d20\nint listLength(SqList L);                  // \u8fd4\u56de\u7ebf\u6027\u8868\u7684\u957f\u5ea6\n\nint printSqList(SqList L);                 // \u6253\u5370\u7ebf\u6027\u8868\u7684\u5185\u5bb9\n\nvoid initList(SqList *L)\n{\n    // \u521d\u59cb\u5316\u64cd\u4f5c, \u5efa\u7acb\u4e00\u4e2a\u7a7a\u7684\u7ebf\u6027\u8868\n    L->length = 0;\n}\n\nint listEmpty(SqList L)\n{\n    // \u5224\u65ad\u662f\u5426\u4e3a\u7a7a\u8868 1\u662f0\u5426\n    if (L.length == 0)\n    {\n        return TRUE;\n    }\n    else\n    {\n        return FALSE;\n    }\n}\n\nvoid clearList(SqList *L)\n{\n    // \u5c06\u7ebf\u6027\u8868\u6e05\u7a7a\n    L->length = 0;\n}\n\nvoid getElem(SqList L, int i, int *e)\n{\n    // \u5c06\u7ebf\u6027\u8868L\u7b2ci\u4e2a\u5143\u7d20\u8fd4\u56de\u7ed9e\n    if (i <= L.length && i > 0)\n    {\n        *e = L.data[i - 1];\n    }\n}\n\nint locateElem(SqList L, int e)\n{\n    // \u67e5\u627e\u7ebf\u6027\u8868L\u4e2d\u662f\u5426\u6709\u503c\u4e3ae\u7684\u5143\u7d20, \u6709\u5219\u8fd4\u56de\u5176\u5728\u8868\u4e2d\u7684\u5e8f\u53f7, \u54260\n    for (int i = 0; i < L.length; i++)\n    {\n        if (e == L.data[i])\n        {\n            return i + 1;\n        }\n    }\n\n    return FALSE;\n}\n\nint listInsert(SqList *L, int i, int e)\n{\n    // \u5728\u7ebf\u6027\u8868L\u4e2d\u7b2ci\u4e2a\u4f4d\u7f6e\u63d2\u5165\u65b0\u5143\u7d20e\n    if (i > 0 && i <= L->length + 1 && L->length < MAXSIZE)\n    {\n        int cache;// \u53ef\u8bfb\u6027\u51e0\u4e4e\u4e3a O\n        while (1)\n        {\n            cache = L->data[i - 1];\n            L->data[i - 1] = e;\n\n            if (++i <= L->length + 1)\n            {\n                e = L->data[i - 1];\n                L->data[i++ - 1] = cache; \n            }\n            else\n            {\n                L->length++;\n                return OK;\n            }\n        }\n    }\n    else\n    {\n        return ERROR;\n    }\n}\n\nint listDelete(SqList *L, int i, int *e)\n{\n    // \u5220\u9664\u7ebf\u6027\u8868L\u4e2d\u7b2ci\u4e2a\u4f4d\u7f6e\u7684\u5143\u7d20, \u5e76\u8fd4\u56de\u5176\u503c\u7ed9e\n    if (i > 0 && i <= L->length + 1 && L->length < MAXSIZE && L->length != 0)\n    {\n        *e = L->data[i - 1];\n        while (1)\n        {\n            L->data[i - 1] = L->data[i];\n            i++;\n            if (i == L->length)\n            {\n                L->length--;\n                return OK;\n            }\n        }\n    }\n    else\n    {\n        return ERROR;\n    }\n}\n\nint listLength(SqList L)\n{\n    // \u8fd4\u56de\u7ebf\u6027\u8868\u7684\u957f\u5ea6\n    return L.length;\n}\n\nint printSqList(SqList L)\n{\n    // \u6253\u5370\u7ebf\u6027\u8868\u7684\u5185\u5bb9\n    for (int i = 0; i < L.length; i++)\n    {\n        printf("[%d]: %d\\n", i + 1, L.data[i]);\n    }\n}\n\nint listAdd(SqList *L, int e)\n{\n    if (L->length < MAXSIZE)\n    {\n        L->data[L->length++] = e;\n        return OK;\n    }\n    return ERROR;\n}\n\nint main(void)\n{\n    // \u7ebf\u6027\u8868\u7684\u6570\u7ec4\u7248\u672c --- \u4e0b\u9762\u662f\u6d4b\u8bd5\u4ee3\u7801 ---\n    SqList list;\n    int e;\n    initList(&list);\n    printSqList(list);\n    listInsert(&list, 1, 233);\n    listAdd(&list, 2);\n    listAdd(&list, 4);\n    listAdd(&list, 6);\n    listAdd(&list, 8);\n    listInsert(&list, 2, 666);\n    listDelete(&list, 3, &e);\n    printf("\u5220\u9664\u4e86%d\\n", e);\n    printSqList(list);\n    printf("\u7ebf\u6027\u8868\u7684\u957f\u5ea6\u662f: %d\\n", listLength(list));\n\n    return 0;\n}\n'})})]})}function c(n={}){const{wrapper:t}={...(0,l.R)(),...n.components};return t?(0,s.jsx)(t,{...n,children:(0,s.jsx)(o,{...n})}):o(n)}}}]);