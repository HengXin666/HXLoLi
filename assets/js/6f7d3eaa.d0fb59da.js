"use strict";(self.webpackChunkhx_loli=self.webpackChunkhx_loli||[]).push([[44308],{26265:(n,e,t)=>{t.r(e),t.d(e,{assets:()=>c,contentTitle:()=>o,default:()=>m,frontMatter:()=>i,metadata:()=>r,toc:()=>p});var r=t(57633),a=t(74848),s=t(28453);const i={authors:"Heng_Xin",title:"MSVC\u9519\u8bef \u7f16\u8bd1\u671f\u7f13\u5b58\u9519\u8bef\u548cICE",date:new Date("2025-07-30T13:47:35.000Z"),tags:["C++"]},o=void 0,c={authorsImageUrls:[void 0]},p=[{value:"\u63cf\u8ff0",id:"\u63cf\u8ff0",level:2},{value:"\u8fd8\u6709\u9ad8\u624b",id:"\u8fd8\u6709\u9ad8\u624b",level:2}];function l(n){const e={a:"a",code:"code",h2:"h2",p:"p",pre:"pre",...(0,s.R)(),...n.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(e.p,{children:"\u4e4b\u524d\u5728\u5199\u53cd\u5c04\u7684\u65f6\u5019, \u9047\u5230\u7684\u8fd9\u4e2a\u95ee\u9898; \u4e00\u5f00\u59cb\u4ee5\u4e3a\u662f\u6211\u81ea\u5df1\u5199\u9519\u4e86, \u6392\u67e5\u4e86\u534a\u5929, \u4ece VsCode \u6362\u5230 MSVC..."}),"\n",(0,a.jsx)(e.p,{children:"\u6700\u540e\u5199\u4e86\u6700\u5c0f\u590d\u73b0\u6848\u4f8b, \u7136\u540e\u624d\u53d1\u73b0\u5c31\u662f MSVC sabi!"}),"\n",(0,a.jsx)(e.h2,{id:"\u63cf\u8ff0",children:"\u63cf\u8ff0"}),"\n",(0,a.jsxs)(e.p,{children:["\u8bf7\u89c1 ",(0,a.jsx)(e.a,{href:"https://github.com/HengXin666/HXLibs/issues/7",children:"https://github.com/HengXin666/HXLibs/issues/7"})]}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-cpp",children:'#define DOCTEST_CONFIG_IMPLEMENT_WITH_MAIN\n#include <doctest.h>\n\n#include <HXLibs/reflection/MemberName.hpp>\n#include <HXLibs/reflection/ReflectionMacro.hpp>\n#include <HXLibs/log/Log.hpp>\n\nusing namespace HX;\n\nTEST_CASE("\u5bf9\u7167\u7ec4: \u65e0\u5b8f\u53cd\u5c04") {\n    struct Case01 {\n        int a;\n        std::string b;\n        std::vector<Case01> c;\n    };\n\n    struct Case02 {\n        int num;\n        std::string str;\n        std::vector<Case02> arr;\n    };\n\n    constexpr auto N = reflection::membersCountVal<Case01>;\n    constexpr auto name = reflection::getMembersNames<Case01>();\n\n    CHECK(N == 3);\n    CHECK(name[0] == "a");\n    CHECK(name[1] == "b");\n    CHECK(name[2] == "c");\n\n    constexpr auto N2 = reflection::membersCountVal<Case02>;\n    constexpr auto name2 = reflection::getMembersNames<Case02>();\n\n    CHECK(N2 == 3);\n    CHECK(name2[0] == "num");\n    CHECK(name2[1] == "str");\n    CHECK(name2[2] == "arr");\n}\n'})}),"\n",(0,a.jsxs)(e.p,{children:["\u5728\u7ebf\u5b9e\u9a8c: ",(0,a.jsx)(e.a,{href:"https://godbolt.org/z/zzaWsP5j7",children:"https://godbolt.org/z/zzaWsP5j7"})]}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-cpp",children:"#include <variant>\n#include <optional>\n#include <memory>\n#include <type_traits>\n\nnamespace HX::meta {\n\n/**\n * @brief \u5220\u9664 T \u7c7b\u578b\u7684 const\u3001\u5f15\u7528\u3001v \u4fee\u9970\n * @tparam T \n */\ntemplate <typename T>\nusing remove_cvref_t = std::remove_cv_t<std::remove_reference_t<T>>;\n\n} // !namespace\n\nusing namespace HX;\n\n/**\n * @brief \u5bf9\u4e8e\u7c7b\u578b T, \u63d0\u4f9b\u7c7b\u9759\u6001\u6210\u5458\n * @tparam T \n */\ntemplate <typename T>\nstruct StaticObj {\n    inline static meta::remove_cvref_t<T> obj;\n};\n\n/**\n * @brief \u83b7\u53d6\u7c7b\u9759\u6001\u6210\u5458T\n * @tparam T \n * @return constexpr utils::remove_cvref_t<T>& \n */\ntemplate <typename T>\ninline constexpr meta::remove_cvref_t<T>& getStaticObj() {\n    return StaticObj<T>::obj;\n}\n\n/**\n * @brief \u8bbf\u95ee\u8005\u7c7b \u4e3b\u6a21\u7248 (\u4e0d\u53ef\u4f7f\u7528)\n * @tparam T `\u805a\u5408\u7c7b`\u7c7b\u578b\n * @tparam N \u6210\u5458\u4e2a\u6570\n * @warning \u5982\u679c\u5339\u914d\u5230\u6b64\u6a21\u7248, \u90a3\u4e48\u6709\u4e24\u79cd\u53ef\u80fd:\n * @warning 1) \u4f60\u7684\u7c7b\u6709255+\u4e2a\u6210\u5458\n * @warning 2) \u4f60\u7684\u7c7b\u4e0d\u662f\u805a\u5408\u7c7b\n */\ntemplate <typename T, std::size_t N>\nstruct ReflectionVisitor {\n    static constexpr auto visit() {\n        static_assert(!sizeof(T), \"\");\n    }\n};\n\n/**\n * @brief \u504f\u7279\u5316\u6a21\u7248\u751f\u6210 \u5de5\u5177\u5b8f\n */\n#define _HX_GENERATE_TEMPLATES_WITH_SPECIALIZATION_(N, ...) \\\ntemplate <typename T>                                       \\\nstruct ReflectionVisitor<T, N> {                            \\\n    static constexpr auto visit() {                         \\\n        auto& [__VA_ARGS__] = getStaticObj<T>();            \\\n        auto t = std::tie(__VA_ARGS__);                     \\\n        constexpr auto f = [](auto&... fs) {                \\\n            return std::make_tuple((&fs)...);               \\\n        };                                                  \\\n        return std::apply(f, t);                            \\\n    }                                                       \\\n};\n\n_HX_GENERATE_TEMPLATES_WITH_SPECIALIZATION_(1, f0);\n_HX_GENERATE_TEMPLATES_WITH_SPECIALIZATION_(2, f0, f1);\n_HX_GENERATE_TEMPLATES_WITH_SPECIALIZATION_(3, f0, f1, f2);\n_HX_GENERATE_TEMPLATES_WITH_SPECIALIZATION_(4, f0, f1, f2, f3);\n\ntemplate <std::size_t N, typename T>\ninline constexpr auto getStaticObjPtrTuple() {\n return ReflectionVisitor<meta::remove_cvref_t<T>, N>::visit();\n}\n\n#include <string>\n#include <vector>\n#include <iostream>\n\ntemplate <auto ptr>\ninline constexpr std::string_view getMemberName() {\n#if defined(_MSC_VER)\n    constexpr std::string_view funcName = __FUNCSIG__;\n#else\n    constexpr std::string_view funcName = __PRETTY_FUNCTION__;\n#endif\n    return funcName;\n}\n\ntemplate <class T>\nstruct Wrapper {\n  using Type = T;\n  T v;\n};\n\ntemplate <class T>\nWrapper(T) -> Wrapper<T>;\n\n// This workaround is necessary for clang. or msvc\ntemplate <class T>\ninline constexpr auto wrap(const T& arg) noexcept {\n  return Wrapper{arg};\n}\n\nint main() {\n    struct Case01 {\n        int a;\n        std::string b;\n        std::vector<Case01> c;\n    };\n\n    struct Case02 {\n        int num;\n        std::string str;\n        std::vector<Case02> arr;\n    };\n\n    constexpr auto tp1 = getStaticObjPtrTuple<3, Case01>();\n    constexpr auto tp2 = getStaticObjPtrTuple<3, Case02>();\n    // clang 17 <=, \u5c31\u4f1a\u62a5\u9519\n    // msvc \u5f97\u5230\u7684\u662f a \u548c a, \u800c\u4e0d\u662f a \u548c num\n    std::cout << getMemberName<get<0>(tp1)>() << '\\n';\n    std::cout << getMemberName<get<0>(tp2)>() << '\\n';\n\n    // \u9700\u8981\u5957\u4e00\u5c42\n    std::cout << getMemberName<wrap(get<0>(tp1))>() << '\\n';\n    std::cout << getMemberName<wrap(get<0>(tp2))>() << '\\n';\n    return 0;\n}\n"})}),"\n",(0,a.jsx)(e.p,{children:"\u53d1\u73b0\u5957\u4e00\u5c42\u5c31\u597d\u4e86~"}),"\n",(0,a.jsx)(e.h2,{id:"\u8fd8\u6709\u9ad8\u624b",children:"\u8fd8\u6709\u9ad8\u624b"}),"\n",(0,a.jsx)(e.p,{children:"\u5f53\u6211\u51c6\u5907\u6574\u4e2a\u6700\u5c0f\u53ef\u590d\u73b0\u6848\u4f8b\u7684\u65f6\u5019:"}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-cpp",metastring:"[c1-\u6848\u4f8b]",children:"#include <string>\n#include <iostream>\n\ntemplate <auto ptr>\ninline constexpr std::string_view getMemberName() {\n#if defined(_MSC_VER)\n    constexpr std::string_view funcName = __FUNCSIG__;\n#else\n    constexpr std::string_view funcName = __PRETTY_FUNCTION__;\n#endif\n    return funcName;\n}\n\ntemplate <class T>\nstruct Wrapper {\n  using Type = T;\n  T v;\n};\n\ntemplate <class T>\nWrapper(T) -> Wrapper<T>;\n\ntemplate <class T>\ninline constexpr auto wrap(const T& arg) noexcept {\n  return Wrapper{arg};\n}\n\nint main() {\n    struct Case01 {\n        int a;\n    };\n\n    struct Case02 {\n        int num;\n    };\n\n    static Case01 c01;\n    static Case02 c02;\n\n    constexpr auto ptr1 = &c01.a;\n    constexpr auto ptr2 = &c02.num;\n\n    // MSVC obtains a and a, not a and num\n    // std::cout << getMemberName<ptr1>() << '\\n';\n    // std::cout << getMemberName<ptr2>() << '\\n';\n\n    // (50): fatal error C1001: Internal compiler error.\n    std::cout << getMemberName<wrap(ptr1)>() << '\\n';\n    std::cout << getMemberName<wrap(ptr2)>() << '\\n';\n    return 0;\n}\n"})}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-cpp",metastring:"[c1-MSVC\u7f16\u8bd1\u8f93\u51fa]",children:"example.cpp\n<source>(50): fatal error C1001: Internal compiler error.\n(compiler file 'msc1.cpp', line 1533)\n To work around this problem, try simplifying or changing the program near the locations listed above.\nIf possible please provide a repro here: https://developercommunity.visualstudio.com \nPlease choose the Technical Support command on the Visual C++ \n Help menu, or open the Technical Support help file for more information\n<source>(50): note: the template instantiation context (the oldest one first) is\n<source>(50): note: see reference to function template instantiation 'std::string_view getMemberName(void)' being compiled\nINTERNAL COMPILER ERROR in 'Z:\\compilers\\msvc\\14.43.34808-14.43.34810.0\\bin\\Hostx64\\x64\\cl.exe'\n    Please choose the Technical Support command on the Visual C++\n    Help menu, or open the Technical Support help file for more information\n"})}),"\n",(0,a.jsxs)(e.p,{children:["\u6211\u9760, \u76f4\u63a5 ",(0,a.jsx)(e.code,{children:"Internal compiler error (ICE)"})," \u4e86..."]}),"\n",(0,a.jsxs)(e.p,{children:["\u7136\u540e\u6211\u53ea\u597d\u53cd\u9988\u7ed9 MSVC \u4e86: ",(0,a.jsx)(e.a,{href:"https://developercommunity.visualstudio.com/t/MSVC-ICE-when-using-templated-auto-param/10944095",children:"https://developercommunity.visualstudio.com/t/MSVC-ICE-when-using-templated-auto-param/10944095"})]})]})}function m(n={}){const{wrapper:e}={...(0,s.R)(),...n.components};return e?(0,a.jsx)(e,{...n,children:(0,a.jsx)(l,{...n})}):l(n)}},28453:(n,e,t)=>{t.d(e,{R:()=>i,x:()=>o});var r=t(96540);const a={},s=r.createContext(a);function i(n){const e=r.useContext(s);return r.useMemo((function(){return"function"==typeof n?n(e):{...e,...n}}),[e,n])}function o(n){let e;return e=n.disableParentContext?"function"==typeof n.components?n.components(a):n.components||a:i(n.components),r.createElement(s.Provider,{value:e},n.children)}},57633:n=>{n.exports=JSON.parse('{"permalink":"/HXLoLi/blog/2025/07/30/01-MSVC\u9519\u8bef","editUrl":"https://github.com/HengXin666/HXLoLi/edit/main/blog/2025/07/30/01-MSVC\u9519\u8bef.md","source":"@site/blog/2025/07/30/01-MSVC\u9519\u8bef.md","title":"MSVC\u9519\u8bef \u7f16\u8bd1\u671f\u7f13\u5b58\u9519\u8bef\u548cICE","description":"\u4e4b\u524d\u5728\u5199\u53cd\u5c04\u7684\u65f6\u5019, \u9047\u5230\u7684\u8fd9\u4e2a\u95ee\u9898; \u4e00\u5f00\u59cb\u4ee5\u4e3a\u662f\u6211\u81ea\u5df1\u5199\u9519\u4e86, \u6392\u67e5\u4e86\u534a\u5929, \u4ece VsCode \u6362\u5230 MSVC...","date":"2025-07-30T13:47:35.000Z","tags":[{"inline":false,"label":"C++","permalink":"/HXLoLi/blog/tags/C++","description":"C++\u5c0f\u77e5\u8bc6"}],"readingTime":4.485,"hasTruncateMarker":true,"authors":[{"name":"Heng_Xin","title":"\u3053\u3053\u304b\u3089\u5148\u306f\u4e00\u65b9\u901a\u884c\u3060!","url":"https://github.com/HengXin666","email":"282000500@qq.com","socials":{"github":"https://github.com/HengXin666","bilibili":"https://space.bilibili.com/478917126"},"imageURL":"https://avatars.githubusercontent.com/u/103022267","key":"Heng_Xin","page":null}],"frontMatter":{"authors":"Heng_Xin","title":"MSVC\u9519\u8bef \u7f16\u8bd1\u671f\u7f13\u5b58\u9519\u8bef\u548cICE","date":"2025-07-30T13:47:35.000Z","tags":["C++"]},"unlisted":false,"lastUpdatedAt":1753857188000,"lastUpdatedBy":"Heng_Xin_666","prevItem":{"title":"QML \u652f\u6301 Wayland \u6bd4 QWidget \u597d!","permalink":"/HXLoLi/blog/2025/08/13/01-QML\u4e07\u5c81"},"nextItem":{"title":"gcc \u5185\u90e8\u7f16\u8bd1\u5668 \u6bb5\u9519\u8bef","permalink":"/HXLoLi/blog/2025/07/28/01_gcc\u7f16\u8bd1\u5668bug"}}')}}]);