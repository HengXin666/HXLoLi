"use strict";(self.webpackChunkhx_loli=self.webpackChunkhx_loli||[]).push([[62544],{16606:(n,e,t)=>{t.r(e),t.d(e,{assets:()=>c,contentTitle:()=>a,default:()=>d,frontMatter:()=>i,metadata:()=>s,toc:()=>u});const s=JSON.parse('{"id":"\u7a0b\u5e8f\u8bed\u8a00/C++/\u73b0\u4ee3C++/\u73b0\u4ee3C++\u9879\u76ee\u5b9e\u6218/\u5b9e\u73b0\u4e00\u4e2aJSON\u89e3\u6790\u5668/index","title":"\u5b9e\u73b0\u4e00\u4e2aJSON\u89e3\u6790\u5668","description":"","source":"@site/docs/002-\u7a0b\u5e8f\u8bed\u8a00/001-C++/003-\u73b0\u4ee3C++/003-\u73b0\u4ee3C++\u9879\u76ee\u5b9e\u6218/002-\u5b9e\u73b0\u4e00\u4e2aJSON\u89e3\u6790\u5668/index.md","sourceDirName":"002-\u7a0b\u5e8f\u8bed\u8a00/001-C++/003-\u73b0\u4ee3C++/003-\u73b0\u4ee3C++\u9879\u76ee\u5b9e\u6218/002-\u5b9e\u73b0\u4e00\u4e2aJSON\u89e3\u6790\u5668","slug":"/\u7a0b\u5e8f\u8bed\u8a00/C++/\u73b0\u4ee3C++/\u73b0\u4ee3C++\u9879\u76ee\u5b9e\u6218/\u5b9e\u73b0\u4e00\u4e2aJSON\u89e3\u6790\u5668/","permalink":"/HXLoLi/docs/\u7a0b\u5e8f\u8bed\u8a00/C++/\u73b0\u4ee3C++/\u73b0\u4ee3C++\u9879\u76ee\u5b9e\u6218/\u5b9e\u73b0\u4e00\u4e2aJSON\u89e3\u6790\u5668/","draft":false,"unlisted":false,"editUrl":"https://github.com/HengXin666/HXLoLi/edit/main/docs/002-\u7a0b\u5e8f\u8bed\u8a00/001-C++/003-\u73b0\u4ee3C++/003-\u73b0\u4ee3C++\u9879\u76ee\u5b9e\u6218/002-\u5b9e\u73b0\u4e00\u4e2aJSON\u89e3\u6790\u5668/index.md","tags":[],"version":"current","lastUpdatedBy":"Heng_Xin_666","lastUpdatedAt":1745851959000,"frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"\u4ec0\u4e48\u60c5\u51b5\u4e0b\u9700\u8981\u5c01\u88c5get\u548cset","permalink":"/HXLoLi/docs/\u7a0b\u5e8f\u8bed\u8a00/C++/\u73b0\u4ee3C++/\u73b0\u4ee3C++\u9879\u76ee\u5b9e\u6218/\u4ec0\u4e48\u60c5\u51b5\u4e0b\u9700\u8981\u5c01\u88c5get\u548cset/"},"next":{"title":"\u73b0\u4ee3CMake\u6a21\u5757\u5316\u9879\u76ee\u7ba1\u7406\u6307\u5357","permalink":"/HXLoLi/docs/\u7a0b\u5e8f\u8bed\u8a00/C++/\u73b0\u4ee3C++/\u73b0\u4ee3C++\u9879\u76ee\u5b9e\u6218/\u73b0\u4ee3CMake\u6a21\u5757\u5316\u9879\u76ee\u7ba1\u7406\u6307\u5357/"}}');var r=t(74848),o=t(28453);const i={},a="\u5b9e\u73b0\u4e00\u4e2aJSON\u89e3\u6790\u5668",c={},u=[];function l(n){const e={code:"code",h1:"h1",header:"header",pre:"pre",...(0,o.R)(),...n.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(e.header,{children:(0,r.jsx)(e.h1,{id:"\u5b9e\u73b0\u4e00\u4e2ajson\u89e3\u6790\u5668",children:"\u5b9e\u73b0\u4e00\u4e2aJSON\u89e3\u6790\u5668"})}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-C++",children:"#include <variant>\n#include <vector>\n#include <unordered_map>\n#include <string>\n#include <string_view>\n#include <optional>\n#include <regex>\n#include <charconv>\n#include \"print.h\"\n\nstruct JsonObject;\n\nusing JsonList = std::vector<JsonObject>;\nusing JsonDict = std::unordered_map<std::string, JsonObject>;\n\nstruct JsonObject {\n    using JsonData = std::variant\n    < std::nullptr_t  // null\n    , bool            // true\n    , int             // 42\n    , long long       // 12321312321312312LL\n    , double          // 3.14\n    , std::string     // \"hello\"\n    , JsonList        // [42, \"hello\"]\n    , JsonDict        // {\"hello\": 985, \"world\": 211}\n    >;\n\n    JsonData inner;\n\n    explicit JsonObject() : inner(std::nullptr_t{})\n    {}\n\n    explicit JsonObject(JsonData&& data) : inner(data) \n    {}\n\n    void do_print() const {\n        printnl(inner);\n    }\n\n    template<class T>\n    const T& get() const {\n        return std::get<T>(inner);\n    }\n\n    template <class T>\n    T &get() {\n        return std::get<T>(inner);\n    }\n};\n\ntemplate <class T>\nstd::optional<T> try_parse_num(std::string_view str) {\n    T value;\n    // std::from_chars \u5c1d\u8bd5\u5c06 str \u8f6c\u4e3a T(\u6570\u5b57)\u7c7b\u578b\u7684\u503c, \u8fd4\u56de\u503c\u662f\u4e00\u4e2a tuple<\u6307\u9488 , T>\n    // \u503c\u5f97\u6ce8\u610f\u7684\u662f from_chars \u4e0d\u8bc6\u522b\u6307\u6570\u5916\u7684\u6b63\u53f7(\u5728\u8d77\u59cb\u4f4d\u7f6e\u53ea\u5141\u8bb8\u51fa\u73b0\u8d1f\u53f7)\n    // \u5177\u4f53\u8bf7\u89c1: https://zh.cppreference.com/w/cpp/utility/from_chars\n    auto res = std::from_chars(str.data(), str.data() + str.size(), value);\n    if (res.ec == std::errc() && \n        res.ptr == str.data() + str.size()) { // \u5fc5\u9700\u4fdd\u8bc1\u6574\u4e2astr\u90fd\u662f\u6570\u5b57\n        return value;\n    }\n    return std::nullopt;\n}\n\nchar unescaped_char(char c) {\n    switch (c) {\n    case 'n': return '\\n';\n    case 'r': return '\\r';\n    case '0': return '\\0';\n    case 't': return '\\t';\n    case 'v': return '\\v';\n    case 'f': return '\\f';\n    case 'b': return '\\b';\n    case 'a': return '\\a';\n    default: return c;\n    }\n}\n\n// std::regex num_re{\"[+-]?[0-9]+(\\\\.[0-9]*)?([eE][+-]?[0-9]+)?\"};\n\n// \u8df3\u8fc7\u672b\u5c3e\u7684\u7a7a\u767d\u5b57\u7b26 \u5982: [1      , 2]\nstd::size_t skipTail(std::string_view json, std::size_t i, char ch) {\n    if (json[i] == ch)\n        return 1;\n    // \u6b63\u5411\u67e5\u627e\u5728\u539f\u5b57\u7b26\u4e32\u4e2d\u7b2c\u4e00\u4e2a\u4e0e\u6307\u5b9a\u5b57\u7b26\u4e32(\u6216\u5b57\u7b26)\u4e2d\u7684\u4efb\u4e00\u5b57\u7b26\u90fd\u4e0d\u5339\u914d\u7684\u5b57\u7b26, \u8fd4\u56de\u5b83\u7684\u4f4d\u7f6e. \u82e5\u67e5\u627e\u5931\u8d25, \u5219\u8fd4\u56denpos.\n    if (std::size_t off = json.find_first_not_of(\" \\n\\r\\t\\v\\f\\0\", i); off != i && off != json.npos) {\n        return off - i + (json[off] == ch);\n    }\n    return 0;\n}\n\n// \u66f4\u4f18\u6027\u80fd\u5e94\u8be5\u4f7f\u7528\u6808\u5b9e\u73b0\u7684\u975e\u9012\u5f52\n\ntemplate<bool analysisKey = false>\nstd::pair<JsonObject, std::size_t> parse(std::string_view json) {\n    if (json.empty()) { // \u5982\u679c\u6ca1\u6709\u5185\u5bb9\u5219\u8fd4\u56de\u7a7a\n        return {JsonObject{std::nullptr_t{}}, 0};\n    } else if (std::size_t off = json.find_first_not_of(\" \\n\\r\\t\\v\\f\\0\"); off != 0 && off != json.npos) { // \u53bb\u9664\u7a7a\u884c\n        auto [obj, eaten] = parse<analysisKey>(json.substr(off));\n        return {std::move(obj), eaten + off};\n    } else if (json[0] >= '0' && json[0] <= '9' || json[0] == '+' || json[0] == '-') { // \u5982\u679c\u4e3a\u6570\u5b57\n        std::regex num_re{\"[-]?[0-9]+(\\\\.[0-9]*)?([eE][+-]?[0-9]+)?\"}; // \u4e00\u4e2a\u652f\u6301\u8bc6\u522b\u5185\u5bb9\u662f\u5426\u4e3a\u6570\u5b57\u7684: 1e-12, 114.514, -666\n        std::cmatch match; // \u5339\u914d\u7ed3\u679c\n        if (std::regex_search(json.data(), json.data() + json.size(), match, num_re)) { // re\u89e3\u6790\u6210\u529f\n            std::string str = match.str();\n            // \u652f\u6301\u8bc6\u522b\u4e3a int \u6216\u8005 double\n            if (auto num = try_parse_num<int>(str)) {\n                return {JsonObject{*num}, str.size()};\n            } else if (auto num = try_parse_num<long long>(str)) {\n                return {JsonObject{*num}, str.size()};\n            } else if (auto num = try_parse_num<double>(str)) {\n                return {JsonObject{*num}, str.size()};\n            }\n        }\n    } else if (json[0] == '\"') { // \u8bc6\u522b\u5b57\u7b26\u4e32, \u6ce8\u610f, \u5982\u679c\u6709 \\\", \u90a3\u4e48 \u8fd9\u4e2a\"\u662f\u4e0d\u8bc6\u522b\u7684\n        std::string str;\n        enum {\n            Raw,     // \u524d\u9762\u4e0d\u662f'\\'\n            Escaped, // \u524d\u9762\u662f\u4e2a'\\'\n        } phase = Raw;\n        std::size_t i = 1;\n        for (; i < json.size(); ++i) {\n            char ch = json[i];\n            if (phase == Raw) {\n                if (ch == '\\\\') {\n                    phase = Escaped;\n                } else if (ch == '\"') {\n                    i += 1;\n                    break;\n                } else {\n                    str += ch;\n                }\n            } else if (phase == Escaped) {\n                str += unescaped_char(ch); // \u5904\u7406\u8f6c\u4e49\u5b57\u7b26\n                phase = Raw;\n            }\n        }\n        return {JsonObject{std::move(str)}, i};\n    } else if (json[0] == '[') { // \u89e3\u6790\u5217\u8868\n        JsonList res;\n        std::size_t i = 1;\n        for (; i < json.size(); ) {\n            if (json[i] == ']') {\n                i += 1;\n                break;\n            }\n            auto [obj, eaten] = parse(json.substr(i)); // \u9012\u5f52\u8c03\u7528\n            if (eaten == 0) {\n                i = 0;\n                break;\n            }\n            i += eaten;\n            res.push_back(std::move(obj));\n\n            i += skipTail(json, i, ',');\n        }\n        return {JsonObject{std::move(res)}, i};\n    } else if (json[0] == '{') { // \u89e3\u6790\u5b57\u5178, \u5982\u679cKey\u91cd\u590d, \u5219\u4f7f\u7528\u6700\u65b0\u7684Key\u7684Val\n        JsonDict res;\n        std::size_t i = 1;\n        for (; i < json.size(); ) {\n            if (json[i] == '}') {\n                i += 1;\n                break;\n            }\n\n            // \u9700\u8981\u652f\u6301\u89e3\u6790 \u4e0d\u5e26\u53cc\u5f15\u53f7\u7684 Key\n            auto [key, keyEaten] = parse<true>(json.substr(i));\n            \n            if (keyEaten == 0) {\n                i = 0;\n                break;\n            }\n            i += keyEaten;\n            if (!std::holds_alternative<std::string>(key.inner)) {\n                i = 0;\n                break;\n            }\n\n            i += skipTail(json, i, ':');\n\n            auto [val, valEaten] = parse(json.substr(i));\n            if (valEaten == 0) {\n                i = 0;\n                break;\n            }\n            i += valEaten;\n\n            res.insert({std::move(key.get<std::string>()), std::move(val)});\n\n            i += skipTail(json, i, ',');\n        }\n        return {JsonObject{std::move(res)}, i};\n    } else if constexpr (analysisKey) { // \u89e3\u6790Key\u4e0d\u5e26 \"\"\n        if (std::size_t off = json.find_first_of(\": \\n\\r\\t\\v\\f\\0\"); off != json.npos)\n            return {JsonObject{std::string{json.substr(0, off)}}, off};\n    } else if (json.size() > 3) { // \u89e3\u6790 null, false, true\n        switch (json[0]) {\n        case 'n':\n            if (json[1] == 'u' && json[2] == 'l' && json[3] == 'l')\n                return {JsonObject{std::nullptr_t{}}, 4};\n        case 't':\n            if (json[1] == 'r' && json[2] == 'u' && json[3] == 'e')\n                return {JsonObject{true}, 4};\n        case 'f':\n            if (json.size() > 4 && json[1] == 'a' && json[2] == 'l' && json[3] == 's' && json[4] == 'e')\n                return {JsonObject{false}, 5};\n        default:\n            break;\n        }\n    }\n    \n    return {JsonObject{std::nullptr_t{}}, 0};\n}\n\nint main() {\n    std::string_view str = R\"Json({\n    \"name\": \"Json.CN\",\n    url: \"http://www.json.cn\",\n    \"page\": 88,\n    \"isNonProfit\": true,\n    \"address\": {\n        \"street\": \"\u79d1\u6280\u56ed\u8def.\",\n        \"city\": \"\u6c5f\u82cf\u82cf\u5dde\",\n        \"country\": \"\u4e2d\u56fd\"\n    },\n    \"links\": [\n        {\n            \"name\": \"Google\",\n            \"url\": \"http://www.google.com\"\n        },\n        {\n            \"name\": \"Baidu\",\n            \"url\": \"http://www.baidu.com\"\n        },\n        {\n            \"name\": \"SoSo\",\n            \"url\": \"http://www.SoSo.com\"\n        }\n    ]\n})Json\";\n    auto [obj, eaten] = parse(str);\n    print(obj);\n    return 0;\n}\n"})})]})}function d(n={}){const{wrapper:e}={...(0,o.R)(),...n.components};return e?(0,r.jsx)(e,{...n,children:(0,r.jsx)(l,{...n})}):l(n)}},28453:(n,e,t)=>{t.d(e,{R:()=>i,x:()=>a});var s=t(96540);const r={},o=s.createContext(r);function i(n){const e=s.useContext(o);return s.useMemo((function(){return"function"==typeof n?n(e):{...e,...n}}),[e,n])}function a(n){let e;return e=n.disableParentContext?"function"==typeof n.components?n.components(r):n.components||r:i(n.components),s.createElement(o.Provider,{value:e},n.children)}}}]);